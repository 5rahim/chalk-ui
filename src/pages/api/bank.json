[
  {
    "component": "accordion",
    "name": "Accordion",
    "dependencies": [
      [
        "@radix-ui/react-accordion",
        "^1.2.1",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "accordion.tsx",
        "dir": "accordion",
        "content": "\"use client\"\n\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AccordionAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Accordion__root\",\n    ]),\n    header: cva([\n        \"UI-Accordion__header\",\n        \"flex text-lg\",\n    ]),\n    trigger: cva([\n        \"UI-Accordion__trigger\",\n        \"flex flex-1 items-center justify-between px-4 py-2 font-medium transition-all hover:bg-[--subtle] [&[data-state=open]>svg]:rotate-180\",\n    ]),\n    triggerIcon: cva([\n        \"UI-Accordion__triggerIcon\",\n        \"h-4 w-4 shrink-0 transition-transform duration-200\",\n    ]),\n    item: cva([\n        \"UI-Accordion__item\",\n        \"border-b\",\n    ]),\n    contentContainer: cva([\n        \"UI-Accordion__contentContainer\",\n        \"overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n    ]),\n    content: cva([\n        \"UI-Accordion__content\",\n        \"p-4\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst __AccordionAnatomyContext = React.createContext<ComponentAnatomy<typeof AccordionAnatomy>>({})\n\nexport type AccordionProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & ComponentAnatomy<typeof AccordionAnatomy>\n\nexport const Accordion = React.forwardRef<HTMLDivElement, AccordionProps>((props, ref) => {\n\n    const {\n        className,\n        headerClass,\n        triggerClass,\n        triggerIconClass,\n        contentContainerClass,\n        contentClass,\n        itemClass,\n        ...rest\n    } = props\n\n    return (\n        <__AccordionAnatomyContext.Provider\n            value={{\n                itemClass,\n                headerClass,\n                triggerClass,\n                triggerIconClass,\n                contentContainerClass,\n                contentClass,\n            }}\n        >\n            <AccordionPrimitive.Root\n                ref={ref}\n                className={cn(AccordionAnatomy.root(), className)}\n                {...rest}\n            />\n        </__AccordionAnatomyContext.Provider>\n    )\n\n})\n\nAccordion.displayName = \"Accordion\"\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AccordionItemProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n\nexport const AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>((props, ref) => {\n\n    const { className, ...rest } = props\n\n    const { itemClass } = React.useContext(__AccordionAnatomyContext)\n\n    return (\n        <AccordionPrimitive.Item\n            ref={ref}\n            className={cn(AccordionAnatomy.item(), itemClass, className)}\n            {...rest}\n        />\n    )\n\n})\n\nAccordionItem.displayName = \"AccordionItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AccordionTriggerProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> &\n    Pick<ComponentAnatomy<typeof AccordionAnatomy>, \"headerClass\" | \"triggerIconClass\">\n\nexport const AccordionTrigger = React.forwardRef<HTMLButtonElement, AccordionTriggerProps>((props, ref) => {\n\n    const {\n        className,\n        headerClass,\n        triggerIconClass,\n        children,\n        ...rest\n    } = props\n\n    const {\n        headerClass: _headerClass,\n        triggerClass: _triggerClass,\n        triggerIconClass: _triggerIconClass,\n    } = React.useContext(__AccordionAnatomyContext)\n\n    return (\n        <AccordionPrimitive.Header className={cn(AccordionAnatomy.header(), _headerClass, headerClass)}>\n            <AccordionPrimitive.Trigger\n                ref={ref}\n                className={cn(\n                    AccordionAnatomy.trigger(),\n                    _triggerClass,\n                    className,\n                )}\n                {...rest}\n            >\n                {children}\n                <svg\n                    className={cn(AccordionAnatomy.triggerIcon(), _triggerIconClass, triggerIconClass)}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                >\n                    <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M19 9l-7 7-7-7\"\n                    />\n                </svg>\n            </AccordionPrimitive.Trigger>\n        </AccordionPrimitive.Header>\n    )\n\n})\n\nAccordionTrigger.displayName = \"AccordionTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AccordionContentProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> &\n    Pick<ComponentAnatomy<typeof AccordionAnatomy>, \"contentContainerClass\">\n\nexport const AccordionContent = React.forwardRef<HTMLDivElement, AccordionContentProps>((props, ref) => {\n\n    const {\n        className,\n        contentContainerClass,\n        children,\n        ...rest\n    } = props\n\n    const {\n        contentContainerClass: _contentContainerClass,\n        contentClass: _contentClass,\n    } = React.useContext(__AccordionAnatomyContext)\n\n    return (\n        <AccordionPrimitive.Content\n            ref={ref}\n            className={cn(AccordionAnatomy.contentContainer(), _contentContainerClass, contentContainerClass)}\n            {...rest}\n        >\n            <div className={cn(AccordionAnatomy.content(), _contentClass, className)}>\n                {children}\n            </div>\n        </AccordionPrimitive.Content>\n    )\n})\n\nAccordionContent.displayName = \"AccordionContent\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "accordion",
        "content": "export * from \"./accordion\"\n"
      }
    ]
  },
  {
    "component": "address-input",
    "name": "AddressInput",
    "dependencies": [
      [
        "@types/google.maps",
        "^3.58.1",
        "-D"
      ],
      [
        "@googlemaps/js-api-loader",
        "^1.16.8",
        ""
      ],
      [
        "use-debounce",
        "^10.0.4",
        ""
      ]
    ],
    "family": [
      "autocomplete"
    ],
    "files": [
      {
        "name": "address-input.tsx",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { Autocomplete, AutocompleteOption, AutocompleteProps } from \"../autocomplete\"\nimport { LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport * as React from \"react\"\nimport { GoogleMapsAutocompletionRequest, useGoogleMapsAutocomplete } from \"./use-address-autocomplete\"\n\n/* -------------------------------------------------------------------------------------------------\n * AddressInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AddressInputProps = Omit<AutocompleteProps, \"options\" | \"onInputChange\" | \"onChange\" | \"defaultValue\"> & {\n    /**\n     * Custom autocompletion request\n     */\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    /**\n     * Additional options to pass to the Google Maps API Loader\n     */\n    loaderOptions?: Partial<LoaderOptions>\n    /**\n     * List of allowed countries\n     *\n     * e.g. `[\"us\", \"ci\"]`\n     */\n    allowedCountries?: string | string[]\n    /**\n     * Callback triggered when the value changes\n     */\n    onValueChange?: (value: AutocompleteOption | undefined) => void\n    /**\n     * Message to display when there are no results\n     */\n    emptyMessage?: string\n    /**\n     * Field placeholder\n     */\n    placeholder?: string\n    /**\n     * Google Maps API key\n     *\n     * Optionally, you could remove this parameter and get the key from an environment variable\n     * @see https://developers.google.com/maps/documentation/javascript/get-api-key\n     */\n    apiKey: string\n    /**\n     * Default value when uncontrolled\n     *\n     * e.g: `{ value: null, label: \"Abidjan, CÃ´te d'Ivoire\" }`\n     */\n    defaultValue?: AutocompleteOption\n}\n\nexport const AddressInput = React.forwardRef<HTMLInputElement, AddressInputProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        autocompletionRequest,\n        loaderOptions,\n        defaultValue,\n        allowedCountries = [],\n        onValueChange,\n        apiKey,\n        placeholder = \"Enter an address\",\n        emptyMessage = \"No results\",\n        onTextChange,\n        type = \"options\",\n        ...rest\n    } = props\n\n    const { suggestions, fetchSuggestions, isFetching } = useGoogleMapsAutocomplete({\n        apiKey: apiKey,\n        minLengthAutocomplete: 0,\n        withSessionToken: false,\n        debounce: 300,\n        autocompletionRequest: autocompletionRequest || {\n            componentRestrictions: { country: allowedCountries },\n        },\n        loaderApiOptions: loaderOptions,\n    })\n\n    return (\n        <Autocomplete\n            ref={ref}\n            options={suggestions}\n            defaultValue={defaultValue}\n            onTextChange={v => {\n                onTextChange?.(v)\n                fetchSuggestions(v)\n            }}\n            onValueChange={onValueChange}\n            placeholder={placeholder}\n            emptyMessage={emptyMessage}\n            autoFilter={false}\n            isFetching={isFetching}\n            type={type}\n            {...rest}\n        />\n    )\n\n})\n\nAddressInput.displayName = \"AddressInput\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "address-input",
        "content": "export * from \"./address-input\"\n"
      },
      {
        "name": "use-address-autocomplete.ts",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { Loader, LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport * as React from \"react\"\nimport { useDebouncedCallback } from \"use-debounce\"\n\nexport type GoogleMapsAutocompletionRequest = Omit<google.maps.places.AutocompletionRequest, \"input\">\n\nexport type GoogleMapsAutocompleteProps = {\n    /**\n     * Google Maps API key\n     * @see https://developers.google.com/maps/documentation/javascript/get-api-key\n     */\n    apiKey: string,\n    /**\n     * Minimum length of the input before triggering the autocompletion\n     */\n    minLengthAutocomplete?: number,\n    /**\n     * Whether to use a session token for the autocompletion\n     * @see https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.sessionToken\n     */\n    withSessionToken?: boolean\n    /**\n     * Debounce time in ms\n     */\n    debounce?: number\n    /**\n     * Autocompletion request\n     */\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    /**\n     * Loader options\n     */\n    loaderApiOptions?: Partial<LoaderOptions>\n}\n\nexport const useGoogleMapsAutocomplete = ({\n    apiKey,\n    minLengthAutocomplete = 0,\n    withSessionToken = false,\n    debounce = 300,\n    autocompletionRequest,\n    loaderApiOptions = {},\n}: GoogleMapsAutocompleteProps) => {\n\n    const [autocompleteService, setAutocompleteService] = React.useState<google.maps.places.AutocompleteService | undefined>(undefined)\n    const [sessionToken, setSessionToken] = React.useState<google.maps.places.AutocompleteSessionToken | undefined>(undefined)\n\n    const initializeService = React.useCallback(() => {\n        if (!window.google) throw new Error(\"[AddressInput]: Google script not loaded\")\n        if (!window.google.maps) throw new Error(\"[AddressInput]: Google maps script not loaded\")\n        if (!window.google.maps.places) throw new Error(\"[AddressInput]: Google maps places script not loaded\")\n\n        setAutocompleteService(new window.google.maps.places.AutocompleteService())\n        setSessionToken(new google.maps.places.AutocompleteSessionToken())\n    }, [])\n\n    // Initialize service\n    React.useEffect(() => {\n        if (!apiKey) {\n            console.warn(\"[AddressInput]: No API key provided\")\n            return\n        }\n        (async () => {\n            try {\n                if (!window.google || !window.google.maps || !window.google.maps.places) {\n                    await new Loader({ apiKey: apiKey, ...{ libraries: [\"places\"], ...loaderApiOptions } }).load()\n                }\n                initializeService()\n            }\n            catch (error) {\n                console.error(error)\n            }\n        })()\n    }, [])\n\n\n    // Fetch suggestions\n    const [suggestions, setSuggestions] = React.useState<{ label: string, value: string }[]>([])\n    const [isFetching, setIsFetching] = React.useState<boolean>(false)\n\n    const fetchSuggestions = useDebouncedCallback((value: string): void => {\n        if (!autocompleteService) return setSuggestions([])\n        if (value.length < minLengthAutocomplete) return setSuggestions([])\n\n        const autocompletionReq: GoogleMapsAutocompletionRequest = { ...autocompletionRequest }\n\n        setIsFetching(true)\n        autocompleteService.getPlacePredictions(\n            requestBuilder(\n                autocompletionReq,\n                value,\n                withSessionToken && sessionToken,\n            ), (suggestions) => {\n                setIsFetching(false)\n                setSuggestions((suggestions || []).map(suggestion => ({\n                    label: suggestion.description,\n                    value: suggestion.place_id,\n                })))\n            },\n        )\n    }, debounce)\n\n    return {\n        suggestions,\n        fetchSuggestions,\n        isFetching,\n    }\n\n}\n\nconst requestBuilder = (\n    autocompletionRequest: GoogleMapsAutocompletionRequest,\n    input: string,\n    sessionToken?: google.maps.places.AutocompleteSessionToken,\n): google.maps.places.AutocompletionRequest => {\n    const { location, ...rest } = autocompletionRequest\n\n    const res: google.maps.places.AutocompletionRequest = {\n        input,\n        ...rest,\n    }\n\n    if (sessionToken) {\n        res.sessionToken = sessionToken\n    }\n\n    if (location) {\n        res.location = new google.maps.LatLng(location.toJSON())\n    }\n\n    return res\n}\n"
      }
    ]
  },
  {
    "component": "alert",
    "name": "Alert",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "alert.tsx",
        "dir": "alert",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AlertAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Alert__root\",\n        \"py-3 px-4 flex justify-between rounded-[--radius]\",\n    ], {\n        variants: {\n            intent: {\n                \"info\": \"bg-blue-50 text-blue-500 dark:bg-opacity-10 dark:text-blue-200\",\n                \"success\": \"bg-green-50 text-green-500 dark:bg-opacity-10 dark:text-green-200\",\n                \"warning\": \"bg-orange-50 text-orange-500 dark:bg-opacity-10 dark:text-orange-200\",\n                \"alert\": \"bg-red-50 text-red-500 dark:bg-opacity-10 dark:text-red-200\",\n                \"info-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"success-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"warning-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"alert-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info\",\n        },\n    }),\n    detailsContainer: cva([\n        \"UI-Alert__detailsContainer\",\n        \"flex\",\n    ]),\n    textContainer: cva([\n        \"UI-Alert__textContainer\",\n        \"flex flex-col self-center ml-3 gap-.5\",\n    ]),\n    title: cva([\n        \"UI-Alert__title\",\n        \"font-bold\",\n    ]),\n    description: cva([\n        \"UI-Alert__description\",\n    ]),\n    icon: cva([\n        \"UI-Alert__icon\",\n        \"text-2xl mt-1\",\n    ], {\n        variants: {\n            intent: {\n                \"info-basic\": \"text-blue-500\",\n                \"success-basic\": \"text-green-500\",\n                \"warning-basic\": \"text-orange-500\",\n                \"alert-basic\": \"text-red-500\",\n                \"info\": \"text-blue-500\",\n                \"success\": \"text-green-500\",\n                \"warning\": \"text-orange-500\",\n                \"alert\": \"text-red-500\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info-basic\",\n        },\n    }),\n    closeButton: cva([\n        \"UI-Alert__closeButton\",\n        \"flex-none self-start text-2xl hover:opacity-50 transition ease-in cursor-pointer h-5 w-5\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Alert\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AlertProps = React.ComponentPropsWithRef<\"div\"> &\n    VariantProps<typeof AlertAnatomy.root> &\n    ComponentAnatomy<typeof AlertAnatomy> & {\n    /**\n     * The title of the alert\n     */\n    title?: string,\n    /**\n     * The description text or content of the alert\n     */\n    description?: React.ReactNode\n    /**\n     * Replace the default icon with a custom icon\n     *\n     * - `iconClass` does not apply to custom icons\n     */\n    icon?: React.ReactNode\n    /**\n     * If true, a close button will be rendered\n     */\n    isClosable?: boolean\n    /**\n     * Callback invoked when the close button is clicked\n     */\n    onClose?: () => void\n}\n\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        title,\n        description,\n        isClosable,\n        onClose,\n        intent = \"info-basic\",\n        iconClass,\n        detailsContainerClass,\n        textContainerClass,\n        titleClass,\n        descriptionClass,\n        closeButtonClass,\n        icon,\n        ...rest\n    } = props\n\n    let Icon: any = null\n\n    if (intent === \"info-basic\" || intent === \"info\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <path d=\"M12 16v-4\"></path>\n            <path d=\"M12 8h.01\"></path>\n        </svg>\n    } else if (intent === \"alert-basic\" || intent === \"alert\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\"></line>\n        </svg>\n    } else if (intent === \"warning-basic\" || intent === \"warning\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path>\n            <line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"13\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\"></line>\n        </svg>\n    } else if (intent === \"success-basic\" || intent === \"success\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path>\n            <path d=\"m9 12 2 2 4-4\"></path>\n        </svg>\n    }\n\n    return (\n        <div\n            className={cn(\n                AlertAnatomy.root({ intent }),\n                className,\n            )}\n            {...rest}\n            ref={ref}\n        >\n            <div className={cn(AlertAnatomy.detailsContainer(), detailsContainerClass)}>\n                {icon ? icon : <div className={cn(AlertAnatomy.icon({ intent: intent }), iconClass)}>\n                    {Icon && Icon}\n                </div>}\n                <div className={cn(AlertAnatomy.textContainer(), textContainerClass)}>\n                    <span className={cn(AlertAnatomy.title(), titleClass)}>\n                        {title}\n                    </span>\n                    {!!description && <div className={cn(AlertAnatomy.description(), descriptionClass)}>\n                        {description}\n                    </div>}\n                </div>\n            </div>\n            {onClose && <button className={cn(AlertAnatomy.closeButton(), closeButtonClass)} onClick={onClose}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                >\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                </svg>\n            </button>}\n        </div>\n    )\n\n})\n\nAlert.displayName = \"Alert\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "alert",
        "content": "export * from \"./alert\"\n"
      }
    ]
  },
  {
    "component": "app-layout",
    "name": "AppLayout",
    "dependencies": [],
    "family": [
      "drawer"
    ],
    "files": [
      {
        "name": "app-layout.tsx",
        "dir": "app-layout",
        "content": "\"use client\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { __AppSidebarContext } from \".\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AppLayoutAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayout__root appLayout\",\n        \"flex w-full group/appLayout\",\n    ], {\n        variants: {\n            withSidebar: {\n                true: \"flex-row with-sidebar\",\n                false: \"flex-col\",\n            },\n            sidebarSize: {\n                slim: \"sidebar-slim\",\n                sm: \"sidebar-sm\",\n                md: \"sidebar-md\",\n                lg: \"sidebar-lg\",\n                xl: \"sidebar-xl\",\n            },\n        },\n        defaultVariants: {\n            withSidebar: false,\n            sidebarSize: \"md\",\n        },\n        compoundVariants: [\n            { withSidebar: true, sidebarSize: \"slim\", className: \"lg:[&>.appLayout]:pl-20\" },\n            { withSidebar: true, sidebarSize: \"sm\", className: \"lg:[&>.appLayout]:pl-48\" },\n            { withSidebar: true, sidebarSize: \"md\", className: \"lg:[&>.appLayout]:pl-64\" },\n            { withSidebar: true, sidebarSize: \"lg\", className: \"lg:[&>.appLayout]:pl-[20rem]\" },\n            { withSidebar: true, sidebarSize: \"xl\", className: \"lg:[&>.appLayout]:pl-[25rem]\" },\n        ],\n    }),\n})\n\nexport const AppLayoutHeaderAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutHeader__root\",\n        \"relative w-full\",\n    ]),\n})\n\nexport const AppLayoutSidebarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutSidebar__root\",\n        \"hidden lg:fixed lg:inset-y-0 lg:flex lg:flex-col grow-0 shrink-0 basis-0\",\n        \"group-[.sidebar-slim]/appLayout:w-20\",\n        \"group-[.sidebar-sm]/appLayout:w-48\",\n        \"group-[.sidebar-md]/appLayout:w-64\",\n        \"group-[.sidebar-lg]/appLayout:w-[20rem]\",\n        \"group-[.sidebar-xl]/appLayout:w-[25rem]\",\n    ]),\n})\n\nexport const AppLayoutContentAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutContent__root\",\n        \"relative\",\n    ]),\n})\n\nexport const AppLayoutFooterAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutFooter__root\",\n        \"relative\",\n    ]),\n})\n\nexport const AppLayoutStackAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutStack__root\",\n        \"relative\",\n    ], {\n        variants: {\n            spacing: {\n                sm: \"space-y-2\",\n                md: \"space-y-4\",\n                lg: \"space-y-8\",\n                xl: \"space-y-10\",\n            },\n        },\n        defaultVariants: {\n            spacing: \"md\",\n        },\n    }),\n})\n\nexport const AppLayoutGridAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutGrid__root\",\n        \"relative flex flex-col\",\n    ], {\n        variants: {\n            breakBelow: {\n                sm: \"sm:grid sm:space-y-0\",\n                md: \"md:grid md:space-y-0\",\n                lg: \"lg:grid lg:space-y-0\",\n                xl: \"xl:grid xl:space-y-0\",\n            },\n            spacing: {\n                sm: \"gap-2\",\n                md: \"gap-4\",\n                lg: \"gap-8\",\n                xl: \"gap-10\",\n            },\n            cols: { 1: null, 2: null, 3: null, 4: null, 5: null, 6: null },\n        },\n        defaultVariants: {\n            breakBelow: \"xl\",\n            spacing: \"md\",\n            cols: 3,\n        },\n        compoundVariants: [\n            { breakBelow: \"sm\", cols: 1, className: \"sm:grid-cols-1\" },\n            { breakBelow: \"sm\", cols: 2, className: \"sm:grid-cols-2\" },\n            { breakBelow: \"sm\", cols: 3, className: \"sm:grid-cols-3\" },\n            { breakBelow: \"sm\", cols: 4, className: \"sm:grid-cols-4\" },\n            { breakBelow: \"sm\", cols: 5, className: \"sm:grid-cols-5\" },\n            { breakBelow: \"sm\", cols: 6, className: \"sm:grid-cols-6\" },\n            { breakBelow: \"md\", cols: 1, className: \"md:grid-cols-1\" },\n            { breakBelow: \"md\", cols: 2, className: \"md:grid-cols-2\" },\n            { breakBelow: \"md\", cols: 3, className: \"md:grid-cols-3\" },\n            { breakBelow: \"md\", cols: 4, className: \"md:grid-cols-4\" },\n            { breakBelow: \"md\", cols: 5, className: \"md:grid-cols-5\" },\n            { breakBelow: \"md\", cols: 6, className: \"md:grid-cols-6\" },\n            { breakBelow: \"lg\", cols: 1, className: \"lg:grid-cols-1\" },\n            { breakBelow: \"lg\", cols: 2, className: \"lg:grid-cols-2\" },\n            { breakBelow: \"lg\", cols: 3, className: \"lg:grid-cols-3\" },\n            { breakBelow: \"lg\", cols: 4, className: \"lg:grid-cols-4\" },\n            { breakBelow: \"lg\", cols: 5, className: \"lg:grid-cols-5\" },\n            { breakBelow: \"lg\", cols: 6, className: \"lg:grid-cols-6\" },\n            { breakBelow: \"xl\", cols: 1, className: \"xl:grid-cols-1\" },\n            { breakBelow: \"xl\", cols: 2, className: \"xl:grid-cols-2\" },\n            { breakBelow: \"xl\", cols: 3, className: \"xl:grid-cols-3\" },\n            { breakBelow: \"xl\", cols: 4, className: \"xl:grid-cols-4\" },\n            { breakBelow: \"xl\", cols: 5, className: \"xl:grid-cols-5\" },\n            { breakBelow: \"xl\", cols: 6, className: \"xl:grid-cols-6\" },\n        ],\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayout\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutProps = React.ComponentPropsWithRef<\"div\"> &\n    ComponentAnatomy<typeof AppLayoutAnatomy> &\n    VariantProps<typeof AppLayoutAnatomy.root>\n\nexport const AppLayout = React.forwardRef<HTMLDivElement, AppLayoutProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        withSidebar = false,\n        sidebarSize,\n        ...rest\n    } = props\n\n    const ctx = React.useContext(__AppSidebarContext)\n\n    return (\n        <div\n            ref={ref}\n            className={cn(AppLayoutAnatomy.root({ withSidebar, sidebarSize: ctx.size || sidebarSize }), className)}\n            {...rest}\n        >\n            {children}\n        </div>\n    )\n\n})\n\nAppLayout.displayName = \"AppLayout\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutHeaderProps = React.ComponentPropsWithRef<\"header\">\n\nexport const AppLayoutHeader = React.forwardRef<HTMLElement, AppLayoutHeaderProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <header\n            ref={ref}\n            className={cn(AppLayoutHeaderAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </header>\n    )\n\n})\n\nAppLayoutHeader.displayName = \"AppLayoutHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutSidebar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutSidebarProps = React.ComponentPropsWithRef<\"aside\">\n\nexport const AppLayoutSidebar = React.forwardRef<HTMLElement, AppLayoutSidebarProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <aside\n            ref={ref}\n            className={cn(AppLayoutSidebarAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </aside>\n    )\n\n})\n\nAppLayoutSidebar.displayName = \"AppLayoutSidebar\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutContentProps = React.ComponentPropsWithRef<\"main\">\n\nexport const AppLayoutContent = React.forwardRef<HTMLElement, AppLayoutContentProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <main\n            ref={ref}\n            className={cn(AppLayoutContentAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </main>\n    )\n\n})\n\nAppLayoutContent.displayName = \"AppLayoutContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutGrid\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutGridProps = React.ComponentPropsWithRef<\"section\"> &\n    VariantProps<typeof AppLayoutGridAnatomy.root>\n\nexport const AppLayoutGrid = React.forwardRef<HTMLElement, AppLayoutGridProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        breakBelow,\n        cols,\n        spacing,\n        ...rest\n    } = props\n\n    return (\n        <section\n            ref={ref}\n            className={cn(AppLayoutGridAnatomy.root({ breakBelow, cols, spacing }), className)}\n            {...rest}\n        >\n            {children}\n        </section>\n    )\n\n})\n\nAppLayoutGrid.displayName = \"AppLayoutGrid\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutFooter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutFooterProps = React.ComponentPropsWithRef<\"footer\">\n\nexport const AppLayoutFooter = React.forwardRef<HTMLElement, AppLayoutFooterProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <footer\n            ref={ref}\n            className={cn(AppLayoutFooterAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </footer>\n    )\n\n})\n\nAppLayoutFooter.displayName = \"AppLayoutFooter\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutStack\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutStackProps = React.ComponentPropsWithRef<\"div\"> &\n    VariantProps<typeof AppLayoutStackAnatomy.root>\n\nexport const AppLayoutStack = React.forwardRef<HTMLDivElement, AppLayoutStackProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        spacing,\n        ...rest\n    } = props\n\n    return (\n        <div\n            ref={ref}\n            className={cn(AppLayoutStackAnatomy.root({ spacing }), className)}\n            {...rest}\n        >\n            {children}\n        </div>\n    )\n\n})\n\nAppLayoutStack.displayName = \"AppLayoutStack\"\n\n"
      },
      {
        "name": "app-sidebar.tsx",
        "dir": "app-layout",
        "content": "\"use client\"\n\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { AppLayoutAnatomy } from \".\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { Drawer, DrawerProps } from \"../drawer\"\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\nexport const __AppSidebarContext = React.createContext<{\n    open: boolean,\n    setOpen: (open: boolean) => void,\n    size: VariantProps<typeof AppLayoutAnatomy.root>[\"sidebarSize\"]\n    setSize: (size: VariantProps<typeof AppLayoutAnatomy.root>[\"sidebarSize\"]) => void,\n    isBelowBreakpoint: boolean,\n}>({\n    open: false,\n    setOpen: () => {},\n    setSize: () => {},\n    size: \"md\",\n    isBelowBreakpoint: false,\n})\n\nexport function useAppSidebarContext() {\n    const ctx = React.useContext(__AppSidebarContext)\n    if (!ctx) throw new Error(\"useAppSidebarContext must be used within a AppSidebarProvider\")\n    return ctx\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AppSidebarAnatomy = defineStyleAnatomy({\n    sidebar: cva([\n        \"UI-AppSidebar__sidebar\",\n        \"flex flex-grow flex-col overflow-y-auto border-r bg-[--background]\",\n    ]),\n})\n\nexport const AppSidebarTriggerAnatomy = defineStyleAnatomy({\n    trigger: cva([\n        \"UI-AppSidebarTrigger__trigger\",\n        \"block lg:hidden\",\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--subtle] hover:text-[--foreground] transition-colors\",\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarProps = React.ComponentPropsWithoutRef<\"div\"> & ComponentAnatomy<typeof AppSidebarAnatomy> & {\n    mobileDrawerProps?: Partial<DrawerProps>\n}\n\nexport const AppSidebar = React.forwardRef<HTMLDivElement, AppSidebarProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    const ctx = React.useContext(__AppSidebarContext)\n\n    return (\n        <>\n            <div\n                ref={ref}\n                className={cn(AppSidebarAnatomy.sidebar(), className)}\n                {...rest}\n            >\n                {children}\n            </div>\n            <Drawer\n                open={ctx.open}\n                onOpenChange={v => ctx.setOpen(v)}\n                side=\"left\"\n            >\n                {children}\n            </Drawer>\n        </>\n    )\n\n})\n\nAppSidebar.displayName = \"AppSidebar\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarTriggerProps = React.ComponentPropsWithoutRef<\"button\"> & ComponentAnatomy<typeof AppSidebarTriggerAnatomy>\n\nexport const AppSidebarTrigger = React.forwardRef<HTMLButtonElement, AppSidebarTriggerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    const ctx = React.useContext(__AppSidebarContext)\n\n    return (\n        <button\n            ref={ref}\n            className={cn(AppSidebarTriggerAnatomy.trigger(), className)}\n            onClick={() => ctx.setOpen(!ctx.open)}\n            {...rest}\n        >\n            <span className=\"sr-only\">Open main menu</span>\n            {ctx.open ? (\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                >\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                </svg>\n            ) : (\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                >\n                    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\n                    <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\n                    <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\n                </svg>\n            )}\n        </button>\n    )\n\n})\n\nAppSidebarTrigger.displayName = \"AppSidebarTrigger\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebarProvider\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarProviderProps = {\n    children?: React.ReactNode,\n    open?: boolean,\n    onOpenChange?: (open: boolean) => void,\n    onSizeChange?: (size: VariantProps<typeof AppLayoutAnatomy.root>[\"sidebarSize\"]) => void,\n}\n\nexport const AppSidebarProvider: React.FC<AppSidebarProviderProps> = ({\n    children,\n    onOpenChange,\n    onSizeChange,\n}) => {\n\n    const [open, setOpen] = React.useState(false)\n    const [size, setSize] = React.useState<VariantProps<typeof AppLayoutAnatomy.root>[\"sidebarSize\"]>(undefined)\n\n    const [isBelowBreakpoint, setIsBelowBreakpoint] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        const handleResize = () => setIsBelowBreakpoint(window.innerWidth <= 1024) // lg breakpoint\n        handleResize()\n        window.addEventListener(\"resize\", handleResize)\n        return () => window.removeEventListener(\"resize\", handleResize)\n    }, [isBelowBreakpoint])\n\n    return (\n        <__AppSidebarContext.Provider\n            value={{\n                open,\n                setOpen: (open: boolean) => {\n                    onOpenChange?.(open)\n                    setOpen(open)\n                },\n                setSize: (size: VariantProps<typeof AppLayoutAnatomy.root>[\"sidebarSize\"]) => {\n                    onSizeChange?.(size)\n                    setSize(size)\n                },\n                size: size,\n                isBelowBreakpoint,\n            }}\n        >\n            {children}\n        </__AppSidebarContext.Provider>\n    )\n}\n\nAppSidebarProvider.displayName = \"AppSidebarProvider\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "app-layout",
        "content": "export * from \"./app-layout\"\nexport * from \"./app-sidebar\"\n"
      }
    ]
  },
  {
    "component": "autocomplete",
    "name": "Autocomplete",
    "dependencies": [],
    "family": [
      "basic-field",
      "command",
      "input",
      "popover"
    ],
    "files": [
      {
        "name": "autocomplete.tsx",
        "dir": "autocomplete",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandProps } from \"../command\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Popover } from \"../popover\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AutocompleteAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Autocomplete__root\",\n    ]),\n    popover: cva([\n        \"UI-Autocomplete__popover\",\n        \"w-[--radix-popover-trigger-width] p-0\",\n    ]),\n    checkIcon: cva([\n        \"UI-Autocomplete__checkIcon\",\n        \"h-4 w-4\",\n        \"data-[selected=true]:opacity-100 data-[selected=false]:opacity-0\",\n    ]),\n    container: cva([\n        \"UI-Autocomplete__container\",\n        \"relative w-full\",\n    ]),\n    command: cva([\n        \"UI-Autocomplete__command\",\n        \"focus-within:ring-2 ring-[--ring] transition\",\n    ]),\n})\n\n\n/* -------------------------------------------------------------------------------------------------\n * Autocomplete\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AutocompleteOption = { value: string | null, label: string }\n\nexport type AutocompleteProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\" | \"value\" | \"defaultValue\"> &\n    BasicFieldOptions &\n    InputStyling &\n    ComponentAnatomy<typeof AutocompleteAnatomy> & {\n    /**\n     * The selected option\n     */\n    value?: AutocompleteOption | undefined\n    /**\n     * Callback invoked when the value changes.\n     */\n    onValueChange?: (value: { value: string | null, label: string } | undefined) => void\n    /**\n     * Callback invoked when the input text changes.\n     */\n    onTextChange?: (value: string) => void\n    /**\n     * The autocompletion options.\n     */\n    options: AutocompleteOption[]\n    /**\n     * The message to display when there are no options.\n     *\n     * If not provided, the options list will be hidden when there are no options.\n     */\n    emptyMessage?: React.ReactNode\n    /**\n     * The placeholder of the input.\n     */\n    placeholder?: string\n    /**\n     * Additional props to pass to the command component.\n     */\n    commandProps?: CommandProps\n    /**\n     * Default value of the input when uncontrolled.\n     */\n    defaultValue?: AutocompleteOption\n    /**\n     * If true, the options list will be filtered based on the input value.\n     * Set this to false if you want to filter the options yourself by listening to the `onTextChange` event.\n     *\n     * @default true\n     */\n    autoFilter?: boolean\n    /**\n     * If true, a loading indicator will be displayed.\n     */\n    isFetching?: boolean\n    /**\n     * The type of the autocomplete.\n     *\n     * - `custom`: Arbitrary values are allowed\n     * - `options`: Only values from the options list are allowed. Falls back to last valid option if the input value is not in the options list.\n     *\n     * @default \"custom\"\n     */\n    type?: \"custom\" | \"options\"\n}\n\nexport const Autocomplete = React.forwardRef<HTMLInputElement, AutocompleteProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<AutocompleteProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        popoverClass,\n        checkIconClass,\n        containerClass,\n        commandClass,\n        /**/\n        commandProps,\n        options,\n        emptyMessage,\n        placeholder,\n        value: controlledValue,\n        onValueChange,\n        onTextChange,\n        onChange,\n        defaultValue,\n        autoFilter = true,\n        isFetching,\n        type,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<AutocompleteProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const isFirst = React.useRef(true)\n    const isUpdating = React.useRef(false)\n\n    const inputValueRef = React.useRef<string>(controlledValue?.label || defaultValue?.label || \"\")\n    const [inputValue, setInputValue] = React.useState<string>(controlledValue?.label || defaultValue?.label || \"\")\n    const deferredInputValue = React.useDeferredValue(inputValue)\n    inputValueRef.current = inputValue\n\n    const optionsTypeValueRef = React.useRef<AutocompleteOption | undefined>(controlledValue || defaultValue || undefined)\n    const [value, setValue] = React.useState<AutocompleteOption | undefined>(controlledValue || defaultValue || undefined)\n\n    const [open, setOpen] = React.useState(false)\n\n    const filteredOptions = React.useMemo(() => {\n        if (autoFilter) {\n            return options.filter(option => option.label.toLowerCase().includes(deferredInputValue.toLowerCase()))\n        }\n        return options\n    }, [autoFilter, options, deferredInputValue])\n\n    // The options list should open when there are options or when there is an empty message\n    const _optionListShouldOpen = !!emptyMessage || (options.length > 0 && filteredOptions.length > 0)\n\n    // Function used to compare two labels\n    const by = React.useCallback((a: string, b: string) => a.toLowerCase() === b.toLowerCase(), [])\n\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const commandInputRef = React.useRef<HTMLInputElement>(null)\n\n    // Update the input value when the controlled value changes\n    // Only when the default value is empty or when it is an updated value\n    React.useEffect(() => {\n        if (isUpdating.current) return\n        if (!defaultValue || !isFirst.current) {\n            setInputValue(controlledValue?.label ?? \"\")\n            setValue(controlledValue)\n            _updateOptionsTypeValueRef(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const handleOnOpenChange = React.useCallback((opening: boolean) => {\n        // If the input is disabled or readonly, do not open the popover\n        if (basicFieldProps.disabled || basicFieldProps.readonly) return\n        // If there are no options and the popover is opening, do not open it\n        if (options.length === 0 && opening) return\n        // If the input value has not and there are no filtered options, do not open the popover\n        // This is to avoid a visual glitch when the popover opens but is empty\n        if (inputValueRef.current === inputValue && opening && filteredOptions.length === 0) return\n\n        setOpen(opening)\n        if (!opening) {\n            React.startTransition(() => {\n                inputRef.current?.focus()\n            })\n        }\n    }, [options, inputValue, basicFieldProps.disabled, basicFieldProps.readonly])\n\n    const handleOnTextInputChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        isUpdating.current = true\n        onChange?.(e) // Emit the change event\n        setInputValue(e.target.value) // Update the input value\n\n        // Open the popover if there are filtered options\n        if (autoFilter && filteredOptions.length > 0) {\n            setOpen(true)\n        }\n    }, [filteredOptions])\n\n    React.useEffect(() => {\n        const v = deferredInputValue\n\n        const _option = options.find(n => by(n.label, v))\n        if (_option) {\n            handleUpdateValue(_option)\n        } else if (v.length > 0) {\n            handleUpdateValue({ value: null, label: v })\n        } else if (v.length === 0) {\n            handleUpdateValue(undefined)\n        }\n\n        isUpdating.current = false\n    }, [deferredInputValue, autoFilter])\n\n    // Called when an option is selected either by clicking on it or entering a valid value\n    const handleUpdateValue = React.useCallback((value: AutocompleteOption | undefined) => {\n        setValue(value)\n        onValueChange?.(value)\n        onTextChange?.(value?.label ?? \"\")\n        _updateOptionsTypeValueRef(value)\n    }, [])\n\n    // Focus the command input when arrow down is pressed\n    const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (!open) {\n            setOpen(true)\n        }\n        if (e.key === \"ArrowDown\") {\n            e.preventDefault()\n            commandInputRef.current?.focus()\n        }\n    }, [open])\n\n    // Conditionally update the options type value ref when it is valid\n    const _updateOptionsTypeValueRef = React.useCallback((value: AutocompleteOption | undefined) => {\n        if (!!value?.value || value === undefined) {\n            optionsTypeValueRef.current = value\n        }\n    }, [])\n\n    // If the type is `options`, make sure the value is always a valid option\n    // If the value entered doesn't match any option, fallback to the last valid option\n    const handleOptionsTypeOnBlur = React.useCallback(() => {\n        if (type === \"options\") {\n            React.startTransition(() => {\n                if (optionsTypeValueRef.current) {\n                    setInputValue(optionsTypeValueRef.current.label)\n                } else {\n                    setInputValue(\"\")\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <Popover\n                    open={open && _optionListShouldOpen}\n                    onOpenChange={handleOnOpenChange}\n                    className={cn(\n                        AutocompleteAnatomy.popover(),\n                        popoverClass,\n                    )}\n                    onOpenAutoFocus={e => e.preventDefault()}\n                    trigger={\n                        <div className={cn(AutocompleteAnatomy.container(), containerClass)}>\n                            <input\n                                ref={mergeRefs([inputRef, ref])}\n                                id={basicFieldProps.id}\n                                name={basicFieldProps.name}\n                                value={inputValue}\n                                onChange={handleOnTextInputChange}\n                                onBlur={handleOptionsTypeOnBlur}\n                                placeholder={placeholder}\n                                className={cn(\n                                    InputAnatomy.root({\n                                        size,\n                                        intent,\n                                        hasError: !!basicFieldProps.error,\n                                        isDisabled: !!basicFieldProps.disabled,\n                                        isReadonly: !!basicFieldProps.readonly,\n                                        hasRightAddon: !!rightAddon,\n                                        hasRightIcon: !!rightIcon,\n                                        hasLeftAddon: !!leftAddon,\n                                        hasLeftIcon: !!leftIcon,\n                                    }),\n                                    AutocompleteAnatomy.root(),\n                                )}\n                                disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                                data-disabled={basicFieldProps.disabled}\n                                data-error={!!basicFieldProps.error}\n                                aria-readonly={basicFieldProps.readonly}\n                                data-readonly={basicFieldProps.readonly}\n                                onKeyDown={handleKeyDown}\n                                required={basicFieldProps.required}\n                                {...rest}\n                            />\n                        </div>\n                    }\n                >\n                    <Command\n                        className={cn(AutocompleteAnatomy.command(), commandClass)}\n                        inputContainerClass=\"py-1\"\n                        shouldFilter={autoFilter}\n                        {...commandProps}\n                    >\n                        {isFetching && inputValue.length > 0 && <div className=\"w-full absolute top-0 left-0 px-1\">\n                            <div className=\"h-1 w-full bg-[--subtle] overflow-hidden relative rounded-full\">\n                                <div className=\"animate-indeterminate-progress absolute left-0 w-full h-full bg-brand origin-left-right\"></div>\n                            </div>\n                        </div>}\n                        <CommandInput\n                            value={inputValue}\n                            onValueChange={setInputValue}\n                            inputContainerClass={hiddenInputStyles}\n                            aria-hidden=\"true\"\n                            ref={commandInputRef}\n                        />\n                        <CommandList>\n                            {!!emptyMessage && (\n                                <CommandEmpty>{emptyMessage}</CommandEmpty>\n                            )}\n                            <CommandGroup>\n                                {options.map(option => (\n                                    <CommandItem\n                                        key={option.value}\n                                        value={option.label}\n                                        onSelect={(currentValue) => {\n                                            const _option = options.find(n => by(n.label, currentValue))\n                                            if (_option) {\n                                                if (value?.value === _option.value) {\n                                                    handleUpdateValue(undefined)\n                                                    setInputValue(\"\")\n                                                } else {\n                                                    handleUpdateValue(_option)\n                                                    setInputValue(_option.label)\n                                                }\n                                            }\n                                            React.startTransition(() => {\n                                                inputRef.current?.focus()\n                                            })\n                                        }}\n                                        leftIcon={\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                viewBox=\"0 0 24 24\"\n                                                fill=\"none\"\n                                                stroke=\"currentColor\"\n                                                strokeWidth=\"2\"\n                                                strokeLinecap=\"round\"\n                                                strokeLinejoin=\"round\"\n                                                className={cn(\n                                                    AutocompleteAnatomy.checkIcon(),\n                                                    checkIconClass,\n                                                )}\n                                                data-selected={by(option.label, inputValue)}\n                                            >\n                                                <path d=\"M20 6 9 17l-5-5\" />\n                                            </svg>\n                                        }\n                                    >\n                                        {option.label}\n                                    </CommandItem>\n                                ))}\n                            </CommandGroup>\n                        </CommandList>\n                    </Command>\n                </Popover>\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n})\n\nAutocomplete.displayName = \"Autocomplete\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "autocomplete",
        "content": "export * from \"./autocomplete\"\n"
      }
    ]
  },
  {
    "component": "avatar",
    "name": "Avatar",
    "dependencies": [
      [
        "@radix-ui/react-avatar",
        "^1.1.1",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "avatar.tsx",
        "dir": "avatar",
        "content": "\"use client\"\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AvatarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Avatar__root\",\n        \"relative flex shrink-0 overflow-hidden rounded-full\",\n    ], {\n        variants: {\n            size: {\n                xs: \"h-6 w-6\",\n                sm: \"h-8 w-8\",\n                md: \"h-10 w-10\",\n                lg: \"h-14 w-14\",\n                xl: \"h-20 w-20\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    image: cva([\n        \"UI-Avatar__image\",\n        \"aspect-square h-full w-full\",\n    ]),\n    fallback: cva([\n        \"UI-Avatar__fallback\",\n        \"flex h-full w-full items-center justify-center rounded-full bg-[--muted] text-white dark:text-gray-800 font-semibold\",\n    ]),\n    fallbackIcon: cva([\n        \"UI-Avatar__fallback-icon\",\n        \"fill-transparent\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AvatarProps =\n    React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> &\n    React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> &\n    ComponentAnatomy<typeof AvatarAnatomy> &\n    VariantProps<typeof AvatarAnatomy.root> & {\n    fallback?: React.ReactNode\n    imageRef?: React.Ref<HTMLImageElement>\n    fallbackRef?: React.Ref<HTMLSpanElement>\n}\n\nexport const Avatar = React.forwardRef<HTMLImageElement, AvatarProps>((props, ref) => {\n    const {\n        className,\n        children,\n        imageRef,\n        fallbackRef,\n        asChild,\n        imageClass,\n        fallbackClass,\n        fallback,\n        fallbackIconClass,\n        size,\n        ...rest\n    } = props\n    return (\n        <AvatarPrimitive.Root\n            ref={ref}\n            className={cn(AvatarAnatomy.root({ size }), className)}\n        >\n            <AvatarPrimitive.Image\n                ref={imageRef}\n                className={cn(AvatarAnatomy.image(), imageClass)}\n                {...rest}\n            />\n            <AvatarPrimitive.Fallback\n                ref={fallbackRef}\n                className={cn(AvatarAnatomy.fallback(), fallbackClass)}\n            >\n                {(!fallback) &&\n                    <svg\n                        viewBox=\"0 0 128 128\" className={cn(AvatarAnatomy.fallbackIcon(), fallbackIconClass)}\n                        role=\"img\" aria-label=\"avatar\"\n                    >\n                        <path\n                            fill=\"currentColor\"\n                            d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n                        ></path>\n                        <path\n                            fill=\"currentColor\"\n                            d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n                        ></path>\n                    </svg>}\n                {fallback}\n            </AvatarPrimitive.Fallback>\n        </AvatarPrimitive.Root>\n    )\n})\nAvatar.displayName = \"Avatar\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "avatar",
        "content": "export * from \"./avatar\"\n"
      }
    ]
  },
  {
    "component": "badge",
    "name": "Badge",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "badge.tsx",
        "dir": "badge",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BadgeAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Badge__root\",\n        \"inline-flex flex-none text-base w-fit overflow-hidden justify-center items-center gap-2\",\n    ], {\n        variants: {\n            intent: {\n                \"gray\": \"text-gray-800 bg-gray-100 border border-gray-500 border-opacity-40 dark:text-gray-300 dark:bg-opacity-10\",\n                \"primary\": \"text-brand-500 bg-brand-50 border border-brand-500 border-opacity-40 dark:text-brand-300 dark:bg-opacity-10\",\n                \"success\": \"text-green-500 bg-green-50 border border-green-500 border-opacity-40 dark:text-green-300 dark:bg-opacity-10\",\n                \"warning\": \"text-orange-500 bg-orange-50 border border-orange-500 border-opacity-40 dark:text-orange-300 dark:bg-opacity-10\",\n                \"alert\": \"text-red-500 bg-red-50 border border-red-500 border-opacity-40 dark:text-red-300 dark:bg-opacity-10\",\n                \"blue\": \"text-blue-500 bg-blue-50 border border-blue-500 border-opacity-40 dark:text-blue-300 dark:bg-opacity-10\",\n                \"white\": \"text-white bg-gray-800 border border-gray-500 border-opacity-40 dark:text-white dark:bg-opacity-10\",\n                \"basic\": \"text-gray-900 bg-transparent\",\n                \"primary-solid\": \"text-white bg-brand-500\",\n                \"success-solid\": \"text-white bg-green-500\",\n                \"warning-solid\": \"text-white bg-orange-500\",\n                \"alert-solid\": \"text-white bg-red-500\",\n                \"blue-solid\": \"text-white bg-blue-500\",\n                \"gray-solid\": \"text-white bg-gray-500\",\n                \"white-solid\": \"text-gray-900 bg-white\",\n            },\n            size: {\n                sm: \"h-[1.2rem] px-1.5 text-xs\",\n                md: \"h-6 px-2 text-xs\",\n                lg: \"h-7 px-3 text-md\",\n                xl: \"h-8 px-4 text-lg\",\n            },\n            tag: {\n                false: \"font-semibold tracking-wide rounded-full\",\n                true: \"font-semibold border-none rounded-[--radius]\",\n            },\n        },\n        defaultVariants: {\n            intent: \"gray\",\n            size: \"md\",\n            tag: false,\n        },\n    }),\n    closeButton: cva([\n        \"UI-Badge__close-button\",\n        \"appearance-none outline-none text-lg -mr-1 cursor-pointer transition ease-in hover:opacity-60\",\n        \"focus-visible:ring-2 focus-visible:ring-[--ring]\",\n    ]),\n    icon: cva([\n        \"UI-Badge__icon\",\n        \"inline-flex self-center flex-shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Badge\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BadgeProps = React.ComponentPropsWithRef<\"span\"> &\n    VariantProps<typeof BadgeAnatomy.root> &\n    ComponentAnatomy<typeof BadgeAnatomy> & {\n    /**\n     * If true, a close button will be rendered.\n     */\n    isClosable?: boolean,\n    /**\n     * Callback invoked when the close button is clicked.\n     */\n    onClose?: () => void,\n    /**\n     * The left icon element.\n     */\n    leftIcon?: React.ReactElement\n    /**\n     * The right icon element.\n     */\n    rightIcon?: React.ReactElement\n    /**\n     * The spacing between the icon and the badge content.\n     */\n    iconSpacing?: React.CSSProperties[\"marginRight\"]\n}\n\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size,\n        intent,\n        tag = false,\n        isClosable,\n        onClose,\n        leftIcon,\n        rightIcon,\n        iconSpacing = \"0\",\n        closeButtonClass,\n        iconClass,\n        ...rest\n    } = props\n\n    return (\n        <span\n            ref={ref}\n            className={cn(BadgeAnatomy.root({ size, intent, tag }), className)}\n            {...rest}\n        >\n            {leftIcon && <span className={cn(BadgeAnatomy.icon(), iconClass)} style={{ marginRight: iconSpacing }}>{leftIcon}</span>}\n\n            {children}\n\n            {rightIcon && <span className={cn(BadgeAnatomy.icon(), iconClass)} style={{ marginLeft: iconSpacing }}>{rightIcon}</span>}\n\n            {isClosable && <button className={cn(BadgeAnatomy.closeButton(), closeButtonClass)} onClick={onClose}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\n                    fill=\"currentColor\"\n                >\n                    <path\n                        d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n                    ></path>\n                </svg>\n            </button>}\n        </span>\n    )\n\n})\n\nBadge.displayName = \"Badge\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "badge",
        "content": "export * from \"./badge\"\n"
      }
    ]
  },
  {
    "component": "basic-field",
    "name": "BasicField",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "basic-field.tsx",
        "dir": "basic-field",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BasicFieldAnatomy = defineStyleAnatomy({\n    fieldLabel: cva([\n        \"UI-BasicField__fieldLabel\",\n        \"text-base w-fit font-semibold self-start\",\n        \"data-[error=true]:text-red-500\",\n    ]),\n    fieldAsterisk: cva(\"UI-BasicField__fieldAsterisk ml-1 text-red-500 text-sm\"),\n    fieldDetails: cva(\"UI-BasicField__fieldDetails\"),\n    field: cva(\"UI-BasicField__field relative w-full space-y-1\"),\n    fieldHelpText: cva(\"UI-BasicField__fieldHelpText text-sm text-[--muted]\"),\n    fieldErrorText: cva(\"UI-BasicField__fieldErrorText text-sm text-red-500\"),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * BasicFieldOptions\n * - Field components inherit these props\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BasicFieldOptions = ComponentAnatomy<typeof BasicFieldAnatomy> & {\n    /**\n     * The id of the field. If not provided, a unique id will be generated.\n     */\n    id?: string | undefined\n    /**\n     * The form field name.\n     */\n    name?: string\n    /**\n     * The label of the field.\n     */\n    label?: React.ReactNode\n    /**\n     * Additional props to pass to the label element.\n     */\n    labelProps?: React.LabelHTMLAttributes<HTMLLabelElement>\n    /**\n     * Help or description text to display below the field.\n     */\n    help?: React.ReactNode\n    /**\n     * Error text to display below the field.\n     */\n    error?: string\n    /**\n     * If `true`, the field will be required.\n     */\n    required?: boolean\n    /**\n     * If `true`, the field will be disabled.\n     */\n    disabled?: boolean\n    /**\n     * If `true`, the field will be readonly.\n     */\n    readonly?: boolean\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Extract BasicFieldProps\n * -----------------------------------------------------------------------------------------------*/\n\nexport function extractBasicFieldProps<Props extends BasicFieldOptions>(props: Props, id: string) {\n    const {\n        name,\n        label,\n        labelProps,\n        help,\n        error,\n        required,\n        disabled = false,\n        readonly = false,\n        fieldDetailsClass,\n        fieldLabelClass,\n        fieldAsteriskClass,\n        fieldClass,\n        fieldErrorTextClass,\n        fieldHelpTextClass,\n        id: _id,\n        ...rest\n    } = props\n    return [\n        rest,\n        {\n            id: _id || id,\n            name,\n            label,\n            help,\n            error,\n            disabled,\n            required,\n            readonly,\n            fieldAsteriskClass,\n            fieldErrorTextClass,\n            fieldHelpTextClass,\n            fieldDetailsClass,\n            fieldLabelClass,\n            fieldClass,\n            labelProps,\n        },\n    ] as [\n        Omit<Props,\n            \"label\" | \"name\" | \"help\" | \"error\" |\n            \"disabled\" | \"required\" | \"readonly\" |\n            \"fieldDetailsClass\" | \"fieldLabelClass\" | \"fieldClass\" | \"fieldHelpTextClass\" |\n            \"fieldErrorTextClass\" | \"id\" | \"labelProps\" | \"fieldAsteriskClass\"\n        >,\n            Omit<BasicFieldOptions, \"id\"> & {\n            id: string\n        }\n    ]\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BasicField\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BasicFieldProps = React.ComponentPropsWithoutRef<\"div\"> & BasicFieldOptions\n\nexport const BasicField = React.memo(React.forwardRef<HTMLDivElement, BasicFieldProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        labelProps,\n        id,\n        label,\n        error,\n        help,\n        disabled,\n        readonly,\n        required,\n        fieldClass,\n        fieldDetailsClass,\n        fieldLabelClass,\n        fieldAsteriskClass,\n        fieldErrorTextClass,\n        fieldHelpTextClass,\n        ...rest\n    } = props\n\n    return (\n        <div\n            className={cn(\n                BasicFieldAnatomy.field(),\n                className,\n                fieldClass,\n            )}\n            {...rest}\n            ref={ref}\n        >\n            {!!label &&\n                <label\n                    htmlFor={disabled ? undefined : id}\n                    className={cn(BasicFieldAnatomy.fieldLabel(), fieldLabelClass)}\n                    data-error={!!error}\n                    {...labelProps}\n                >\n                    {label}\n                    {required &&\n                        <span className={cn(BasicFieldAnatomy.fieldAsterisk(), fieldAsteriskClass)}>*</span>\n                    }\n                </label>\n            }\n\n            {children}\n\n            {(!!help || !!error) &&\n                <div className={cn(BasicFieldAnatomy.fieldDetails(), fieldDetailsClass)}>\n                    {!!help &&\n                        <p className={cn(BasicFieldAnatomy.fieldHelpText(), fieldHelpTextClass)}>{help}</p>}\n                    {!!error &&\n                        <p className={cn(BasicFieldAnatomy.fieldErrorText(), fieldErrorTextClass)}>{error}</p>}\n                </div>\n            }\n        </div>\n    )\n\n}))\n\nBasicField.displayName = \"BasicField\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "basic-field",
        "content": "export * from \"./basic-field\"\n"
      }
    ]
  },
  {
    "component": "breadcrumbs",
    "name": "Breadcrumbs",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "breadcrumbs.tsx",
        "dir": "breadcrumbs",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BreadcrumbsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Breadcrumbs__root\",\n        \"flex\",\n    ]),\n    list: cva([\n        \"UI-Breadcrumbs__list\",\n        \"flex items-center space-x-2\",\n    ]),\n    chevronIcon: cva([\n        \"UI-Breadcrumbs__chevronIcon\",\n        \"h-5 w-5 flex-shrink-0 text-gray-400 mr-4\",\n    ]),\n    item: cva([\n        \"UI-Breadcrumbs__item\",\n        \"flex items-center\",\n    ]),\n    itemLink: cva([\n        \"UI-Breadcrumbs__itemLink\",\n        \"text-sm font-medium text-[--muted] hover:text-[--text-color]\",\n        \"data-[selected=true]:pointer-events-none data-[selected=true]:font-semibold data-[selected=true]:text-[--text-color]\", // Selected\n    ]),\n    homeItem: cva([\n        \"UI-Breadcrumbs__homeItem\",\n        \"text-[--muted] hover:text-[--text-color]\",\n    ]),\n    homeIcon: cva([\n        \"UI-Breadcrumbs__homeIcon\",\n        \"h-5 w-5 flex-shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Breadcrumbs\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BreadcrumbsOption = { name: string, href: string | null | undefined, isCurrent: boolean }\n\nexport type BreadcrumbsProps = React.ComponentPropsWithRef<\"nav\"> &\n    ComponentAnatomy<typeof BreadcrumbsAnatomy> & {\n    rootHref?: string\n    items: BreadcrumbsOption[]\n    showHomeButton?: boolean\n    homeIcon?: React.ReactElement\n}\n\nexport const Breadcrumbs: React.FC<BreadcrumbsProps> = React.forwardRef<HTMLElement, BreadcrumbsProps>((props, ref) => {\n\n    const {\n        children,\n        listClass,\n        itemClass,\n        itemLinkClass,\n        chevronIconClass,\n        homeIconClass,\n        homeItemClass,\n        className,\n        items,\n        rootHref = \"/\",\n        showHomeButton = true,\n        homeIcon,\n        ...rest\n    } = props\n\n    return (\n        <nav\n            className={cn(BreadcrumbsAnatomy.root(), className)}\n            {...rest}\n            ref={ref}\n        >\n            <ol role=\"list\" className={cn(BreadcrumbsAnatomy.list(), listClass)}>\n                {showHomeButton &&\n                    <li>\n                        <div>\n                            <Link\n                                href={rootHref}\n                                className={cn(BreadcrumbsAnatomy.homeItem(), homeItemClass)}\n                            >\n                                {homeIcon ? homeIcon :\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                                        strokeWidth=\"2\" stroke=\"currentColor\"\n                                        className={cn(BreadcrumbsAnatomy.homeIcon(), homeIconClass)}\n                                    >\n                                        <path\n                                            strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                            d=\"M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\"\n                                        />\n                                    </svg>}\n                            </Link>\n                        </div>\n                    </li>\n                }\n                {items.map((page, idx) => (\n                    <li key={page.name}>\n                        <div className={cn(BreadcrumbsAnatomy.item(), itemClass)}>\n                            {(!showHomeButton && idx > 0 || showHomeButton) &&\n                                <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                                    fill=\"none\"\n                                    stroke=\"currentColor\"\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                    className={cn(BreadcrumbsAnatomy.chevronIcon(), chevronIconClass)}\n                                >\n                                    <polyline points=\"9 18 15 12 9 6\"></polyline>\n                                </svg>\n                            }\n                            <Link\n                                href={page.href ?? \"#\"}\n                                className={cn(BreadcrumbsAnatomy.itemLink(), itemLinkClass)}\n                                data-selected={page.isCurrent}\n                                aria-current={page.isCurrent ? \"page\" : undefined}\n                            >\n                                {page.name}\n                            </Link>\n                        </div>\n                    </li>\n                ))}\n            </ol>\n        </nav>\n    )\n\n})\n\nBreadcrumbs.displayName = \"Breadcrumbs\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "breadcrumbs",
        "content": "export * from \"./breadcrumbs\"\n"
      }
    ]
  },
  {
    "component": "button",
    "name": "Button",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "button.tsx",
        "dir": "button",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ButtonAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Button_root\",\n        \"shadow-sm whitespace-nowrap font-semibold rounded-[--radius]\",\n        \"inline-flex items-center text-white transition ease-in duration-100 text-center text-base justify-center\",\n        \"focus-visible:outline-none focus-visible:ring-2 ring-offset-1 ring-offset-[--background] focus-visible:ring-[--ring]\",\n        \"disabled:opacity-50 disabled:pointer-events-none\",\n    ], {\n        variants: {\n            intent: {\n                \"primary\": \"bg-brand-500 hover:bg-brand-600 active:bg-brand-700 border border-transparent\",\n                \"primary-outline\": \"text-[--brand] border border-[--brand] bg-transparent hover:bg-brand-500 active:bg-brand-600 active:border-transparent hover:text-white dark:hover:border-brand-500 dark:active:bg-brand-600 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\n                \"primary-subtle\": \"shadow-none text-[--brand] border bg-brand-50 border-transparent hover:bg-brand-100 active:bg-brand-200 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\n                \"primary-link\": \"shadow-none text-[--brand] border border-transparent bg-transparent hover:underline active:text-brand-700 dark:active:text-brand-300\",\n                \"primary-basic\": \"shadow-none text-[--brand] border border-transparent bg-transparent hover:bg-brand-100 active:bg-brand-200 dark:hover:bg-opacity-10 dark:active:text-brand-300\",\n\n                \"warning\": \"bg-orange-500 hover:bg-orange-600 active:bg-orange-700 border border-transparent\",\n                \"warning-outline\": \"text-[--orange] border border-[--orange] bg-transparent hover:bg-orange-500 active:bg-orange-600 active:border-transparent hover:text-white dark:hover:border-orange-500 dark:active:bg-orange-600 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\n                \"warning-subtle\": \"shadow-none text-[--orange] border bg-orange-50 border-transparent hover:bg-orange-100 active:bg-orange-200 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\n                \"warning-link\": \"shadow-none text-[--orange] border border-transparent bg-transparent hover:underline active:text-orange-700 dark:active:text-orange-300\",\n                \"warning-basic\": \"shadow-none text-[--orange] border border-transparent bg-transparent hover:bg-orange-100 active:bg-orange-200 dark:hover:bg-opacity-10 dark:active:text-orange-300\",\n\n                \"success\": \"bg-green-500 hover:bg-green-600 active:bg-green-700 border border-transparent\",\n                \"success-outline\": \"text-[--green] border border-[--green] bg-transparent hover:bg-green-500 active:bg-green-600 active:border-transparent hover:text-white dark:hover:border-green-500 dark:active:bg-green-600 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\n                \"success-subtle\": \"shadow-none text-[--green] border bg-green-50 border-transparent hover:bg-green-100 active:bg-green-200 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\n                \"success-link\": \"shadow-none text-[--green] border border-transparent bg-transparent hover:underline active:text-green-700 dark:active:text-green-300\",\n                \"success-basic\": \"shadow-none text-[--green] border border-transparent bg-transparent hover:bg-green-100 active:bg-green-200 dark:hover:bg-opacity-10 dark:active:text-green-300\",\n\n                \"alert\": \"bg-red-500 hover:bg-red-600 active:bg-red-700 border border-transparent\",\n                \"alert-outline\": \"text-[--red] border border-[--red] bg-transparent hover:bg-red-500 active:bg-red-600 active:border-transparent hover:text-white dark:hover:border-red-500 dark:active:bg-red-600 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\n                \"alert-subtle\": \"shadow-none text-[--red] border bg-red-50 border-transparent hover:bg-red-100 active:bg-red-200 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\n                \"alert-link\": \"shadow-none text-[--red] border border-transparent bg-transparent hover:underline active:text-red-700 dark:active:text-red-300\",\n                \"alert-basic\": \"shadow-none text-[--red] border border-transparent bg-transparent hover:bg-red-100 active:bg-red-200 dark:hover:bg-opacity-10 dark:active:text-red-300\",\n\n                \"gray\": \"bg-gray-500 hover:bg-gray-600 active:bg-gray-700 border border-transparent\",\n                \"gray-outline\": \"text-gray-600 border border-[--border] bg-transparent hover:bg-gray-100 active:border-transparent active:bg-gray-200 dark:text-gray-300 dark:border-[--border] dark:hover:bg-gray-800 dark:active:bg-gray-700 dark:active:border-transparent dark:hover:text-gray-100\",\n                \"gray-subtle\": \"shadow-none text-[--gray] border bg-gray-100 border-transparent hover:bg-gray-200 active:bg-gray-300 dark:text-gray-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\n                \"gray-link\": \"shadow-none text-[--gray] border border-transparent bg-transparent hover:underline active:text-gray-700 dark:text-gray-300 dark:active:text-gray-200\",\n                \"gray-basic\": \"shadow-none text-[--gray] border border-transparent bg-transparent hover:bg-gray-100 active:bg-gray-200 dark:active:bg-opacity-20 dark:text-gray-200 dark:hover:bg-opacity-10 dark:active:text-gray-200\",\n\n                \"white\": \"text-black bg-white hover:bg-gray-200 active:bg-gray-300 border border-transparent\",\n                \"white-outline\": \"text-white border border-gray-200 bg-transparent hover:bg-white hover:text-black active:bg-gray-100 active:text-black\",\n                \"white-subtle\": \"shadow-none text-white bg-white bg-opacity-15 hover:bg-opacity-20 border border-transparent active:bg-opacity-25\",\n                \"white-link\": \"shadow-none text-white border border-transparent bg-transparent hover:underline active:text-gray-200\",\n                \"white-basic\": \"shadow-none text-white border border-transparent bg-transparent hover:bg-white hover:bg-opacity-15 active:bg-opacity-20 active:text-white-300\",\n            },\n            rounded: {\n                true: \"rounded-full\",\n                false: null,\n            },\n            contentWidth: {\n                true: \"w-fit\",\n                false: null,\n            },\n            size: {\n                xs: \"text-sm h-6 px-2\",\n                sm: \"text-sm h-8 px-3\",\n                md: \"text-sm h-10 px-4\",\n                lg: \"h-12 px-6 text-lg\",\n                xl: \"text-2xl h-14 px-8\",\n            },\n        },\n        defaultVariants: {\n            intent: \"primary\",\n            size: \"md\",\n        },\n    }),\n    icon: cva([\n        \"UI-Button__icon\",\n        \"inline-flex self-center flex-shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Button\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport type ButtonProps = React.ComponentPropsWithoutRef<\"button\"> &\n    VariantProps<typeof ButtonAnatomy.root> &\n    ComponentAnatomy<typeof ButtonAnatomy> & {\n    loading?: boolean,\n    leftIcon?: React.ReactNode\n    rightIcon?: React.ReactNode\n    iconSpacing?: React.CSSProperties[\"marginInline\"],\n}\n\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n\n    const {\n        children,\n        size,\n        className,\n        rounded = false,\n        contentWidth = false,\n        intent,\n        leftIcon,\n        rightIcon,\n        iconSpacing = \"0.5rem\",\n        loading,\n        iconClass,\n        disabled,\n        ...rest\n    } = props\n\n    return (\n        <button\n            type=\"button\"\n            className={cn(\n                ButtonAnatomy.root({\n                    size,\n                    intent,\n                    rounded,\n                    contentWidth,\n                }),\n                className,\n            )}\n            disabled={disabled || loading}\n            aria-disabled={disabled}\n            {...rest}\n            ref={ref}\n        >\n            {loading ? (\n                <>\n                    <svg\n                        width=\"15\"\n                        height=\"15\"\n                        fill=\"currentColor\"\n                        className=\"animate-spin\"\n                        viewBox=\"0 0 1792 1792\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        style={{ marginInlineEnd: iconSpacing }}\n                    >\n                        <path\n                            d=\"M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z\"\n                        >\n                        </path>\n                    </svg>\n                    {children}\n                </>\n            ) : <>\n                {leftIcon &&\n                    <span\n                        className={cn(ButtonAnatomy.icon(), iconClass)}\n                        style={{ marginInlineEnd: iconSpacing }}\n                    >\n                        {leftIcon}\n                    </span>}\n                {children}\n                {rightIcon &&\n                    <span\n                        className={cn(ButtonAnatomy.icon(), iconClass)}\n                        style={{ marginInlineStart: iconSpacing }}\n                    >\n                        {rightIcon}\n                    </span>}\n            </>}\n        </button>\n    )\n\n})\n\nButton.displayName = \"Button\"\n"
      },
      {
        "name": "close-button.tsx",
        "dir": "button",
        "content": "import { cn } from \"../core/styling\"\nimport * as React from \"react\"\nimport { IconButton, IconButtonProps } from \".\"\n\n/* -------------------------------------------------------------------------------------------------\n * CloseButton\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CloseButtonProps = Omit<IconButtonProps, \"icon\"> & {\n    icon?: React.ReactNode\n}\n\nexport const CloseButton = React.forwardRef<HTMLButtonElement, CloseButtonProps>((props, ref) => {\n\n    const {\n        className,\n        icon,\n        ...rest\n    } = props\n\n    return (\n        <IconButton\n            type=\"button\"\n            intent=\"gray-basic\"\n            size=\"sm\"\n            className={cn(\n                \"rounded-full text-2xl flex-none\",\n                className,\n            )}\n            icon={!icon ? <span>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\n                    fill=\"currentColor\"\n                >\n                    <path\n                        d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n                    ></path>\n                </svg>\n            </span> : icon}\n            {...rest}\n            ref={ref}\n        />\n    )\n\n})\n\nCloseButton.displayName = \"CloseButton\"\n"
      },
      {
        "name": "icon-button.tsx",
        "dir": "button",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Button, ButtonProps } from \".\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const IconButtonAnatomy = defineStyleAnatomy({\n    root: cva(\"UI-IconButton_root p-0 flex-none\", {\n        variants: {\n            size: {\n                xs: \"text-xl h-6 w-6\",\n                sm: \"text-xl h-8 w-8\",\n                md: \"text-2xl h-10 w-10\",\n                lg: \"text-3xl h-12 w-12\",\n                xl: \"text-4xl h-14 w-14\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * IconButton\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport type IconButtonProps = Omit<ButtonProps, \"leftIcon\" | \"rightIcon\" | \"iconSpacing\" | \"iconClass\" | \"children\"> &\n    VariantProps<typeof IconButtonAnatomy.root> & {\n    icon?: React.ReactNode\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {\n\n    const {\n        className,\n        icon,\n        size,\n        loading,\n        ...rest\n    } = props\n\n    return (\n        <Button\n            className={cn(\n                IconButtonAnatomy.root({ size }),\n                className,\n            )}\n            loading={loading}\n            iconSpacing=\"0\"\n            {...rest}\n            ref={ref}\n        >\n            {!loading && icon}\n        </Button>\n    )\n\n})\n\nIconButton.displayName = \"IconButton\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "button",
        "content": "export * from \"./button\"\nexport * from \"./close-button\"\nexport * from \"./icon-button\"\n"
      }
    ]
  },
  {
    "component": "calendar",
    "name": "Calendar",
    "dependencies": [
      [
        "react-day-picker",
        "^9.2.1",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "calendar.tsx",
        "dir": "calendar",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { DayPicker } from \"react-day-picker\"\nimport { ButtonAnatomy } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CalendarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Calendar__root\",\n        \"p-3\",\n    ]),\n    months: cva([\n        \"UI-Calendar__months\",\n        \"relative w-fit max-w-fit flex flex-col sm:flex-row\",\n    ]),\n    month: cva([\n        \"UI-Calendar__month\",\n        \"\",\n    ]),\n    monthCaption: cva([\n        \"UI-Calendar__caption\",\n        \"w-fit h-8 flex items-center\",\n    ]),\n    captionLabel: cva([\n        \"UI-Calendar__captionLabel\",\n        \"text-base font-medium px-2.5\",\n    ]),\n    nav: cva([\n        \"UI-Calendar__nav\",\n        \"absolute right-0 z-1\",\n    ]),\n    navButton: cva([\n        \"UI-Calendar__navButton\",\n    ]),\n    navButtonPrevious: cva([\n        \"UI-Calendar__navButtonPrevious\",\n        \"left-1\",\n    ]),\n    navButtonNext: cva([\n        \"UI-Calendar__navButtonNext\",\n        \"right-1\",\n    ]),\n    monthGrid: cva([\n        \"UI-Calendar__table\",\n        \"w-full border-collapse\",\n    ]),\n    weekDays: cva([\n        \"UI-Calendar__weekDays\",\n        \"flex\",\n    ]),\n    weekDay: cva([\n        \"UI-Calendar__weekDay\",\n        \"text-[--muted] rounded-[--radius] w-9 font-normal text-[0.8rem]\",\n    ]),\n    week: cva([\n        \"UI-Calendar__week\",\n        \"flex w-full mt-2\",\n    ]),\n    day: cva([\n        \"UI-Calendar__day\",\n        \"h-9 w-9 text-center text-sm p-0 relative\",\n        \"[&:has([aria-selected].day-range-end)]:rounded-r-[--radius]\",\n        \"[&:has([aria-selected].day-outside)]:bg-[--subtle]/50\",\n        \"[&:has([aria-selected])]:bg-[--subtle]\",\n        \"first:[&:has([aria-selected])]:rounded-l-[--radius]\",\n        \"last:[&:has([aria-selected])]:rounded-r-[--radius]\",\n        \"focus-within:relative focus-within:z-20\",\n    ]),\n    dayButton: cva([\n        \"UI-Calendar__dayButton\",\n        \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\",\n    ]),\n    rangeEnd: cva([\n        \"UI-Calendar__rangeEnd\",\n        \"day-range-end\",\n    ]),\n    selected: cva([\n        \"UI-Calendar__selected\",\n        \"bg-brand text-white hover:bg-brand hover:text-white\",\n        \"focus:bg-brand focus:text-white rounded-[--radius] font-semibold\",\n    ]),\n    today: cva([\n        \"UI-Calendar__today\",\n        \"bg-[--subtle] text-[--foreground] rounded-[--radius]\",\n    ]),\n    outside: cva([\n        \"UI-Calendar__outside\",\n        \"day-outside !text-[--muted] opacity-20\",\n        \"aria-selected:bg-transparent\",\n        \"aria-selected:opacity-30\",\n    ]),\n    disabled: cva([\n        \"UI-Calendar__disabled\",\n        \"text-[--muted] opacity-30\",\n    ]),\n    rangeMiddle: cva([\n        \"UI-Calendar__rangeMiddle\",\n        \"aria-selected:bg-[--subtle]\",\n        \"aria-selected:text-[--foreground]\",\n    ]),\n    dayHidden: cva([\n        \"UI-Calendar__dayHidden\",\n        \"invisible\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Calendar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CalendarProps =\n    React.ComponentProps<typeof DayPicker> &\n    ComponentAnatomy<typeof CalendarAnatomy>\n\nexport function Calendar(props: CalendarProps) {\n\n    const {\n        className,\n        classNames,\n        monthsClass,\n        monthClass,\n        monthCaptionClass,\n        captionLabelClass,\n        navClass,\n        navButtonClass,\n        navButtonPreviousClass,\n        navButtonNextClass,\n        monthGridClass,\n        weekDaysClass,\n        weekDayClass,\n        weekClass,\n        dayClass,\n        dayButtonClass,\n        rangeEndClass,\n        selectedClass,\n        todayClass,\n        outsideClass,\n        disabledClass,\n        rangeMiddleClass,\n        dayHiddenClass,\n        ...rest\n    } = props\n\n    return (\n        <DayPicker\n            fixedWeeks\n            className={cn(CalendarAnatomy.root(), className)}\n            classNames={{\n                months: cn(CalendarAnatomy.months(), monthsClass),\n                month: cn(CalendarAnatomy.month(), monthClass),\n                month_caption: cn(CalendarAnatomy.monthCaption(), monthCaptionClass),\n                caption_label: cn(CalendarAnatomy.captionLabel(), captionLabelClass),\n                nav: cn(CalendarAnatomy.nav(), navClass),\n                button_previous: cn(CalendarAnatomy.navButton(),\n                    ButtonAnatomy.root({ size: \"sm\", intent: \"gray-basic\" }),\n                    navButtonClass,\n                    CalendarAnatomy.navButtonPrevious(),\n                    navButtonPreviousClass),\n                button_next: cn(CalendarAnatomy.navButton(),\n                    ButtonAnatomy.root({ size: \"sm\", intent: \"gray-basic\" }),\n                    navButtonClass,\n                    CalendarAnatomy.navButtonNext(),\n                    navButtonNextClass),\n                month_grid: cn(CalendarAnatomy.monthGrid(), monthGridClass),\n                weekdays: cn(CalendarAnatomy.weekDays(), weekDaysClass),\n                weekday: cn(CalendarAnatomy.weekDay(), weekDayClass),\n                week: cn(CalendarAnatomy.week(), weekClass),\n                day: cn(CalendarAnatomy.day(), dayClass),\n                day_button: cn(CalendarAnatomy.dayButton(), dayButtonClass),\n                range_end: cn(CalendarAnatomy.rangeEnd(), rangeEndClass),\n                selected: cn(CalendarAnatomy.selected(), selectedClass),\n                today: cn(CalendarAnatomy.today(), todayClass),\n                outside: cn(CalendarAnatomy.outside(), outsideClass),\n                disabled: cn(CalendarAnatomy.disabled(), disabledClass),\n                range_middle: cn(CalendarAnatomy.rangeMiddle(), rangeMiddleClass),\n                hidden: cn(CalendarAnatomy.dayHidden(), dayHiddenClass),\n                ...classNames,\n            }}\n            components={{\n                Chevron: ({ ...props }) => props.orientation === \"left\" ? <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"size-4\"\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg> : <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"rotate-180 size-4\"\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg>,\n            }}\n            {...rest}\n        />\n    )\n}\n\nCalendar.displayName = \"Calendar\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "calendar",
        "content": "export * from \"./calendar\"\n"
      }
    ]
  },
  {
    "component": "card",
    "name": "Card",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "card.tsx",
        "dir": "card",
        "content": "\"use client\"\n\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CardAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Card__root\",\n        \"rounded-lg border bg-[--paper] shadow-sm\",\n    ]),\n    header: cva([\n        \"UI-Card__header\",\n        \"flex flex-col space-y-1.5 p-4\",\n    ]),\n    title: cva([\n        \"UI-Card__title\",\n        \"text-2xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Card__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n    content: cva([\n        \"UI-Card__content\",\n        \"p-4 pt-0\",\n    ]),\n    footer: cva([\n        \"UI-Card__footer\",\n        \"flex items-center p-4 pt-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Card\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.root(), className)}\n            {...rest}\n        />\n    )\n})\nCard.displayName = \"Card\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardHeaderProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.header(), className)}\n            {...rest}\n        />\n    )\n})\nCardHeader.displayName = \"CardHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardTitle\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardTitleProps = React.ComponentPropsWithoutRef<\"h3\">\n\nexport const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <h3\n            ref={ref}\n            className={cn(CardAnatomy.title(), className)}\n            {...rest}\n        />\n    )\n})\nCardTitle.displayName = \"CardTitle\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardDescription\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardDescriptionProps = React.ComponentPropsWithoutRef<\"p\">\n\nexport const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <p\n            ref={ref}\n            className={cn(CardAnatomy.description(), className)}\n            {...rest}\n        />\n    )\n})\nCardDescription.displayName = \"CardDescription\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardContentProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.content(), className)}\n            {...rest}\n        />\n    )\n})\nCardContent.displayName = \"CardContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardFooter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardFooterProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.footer(), className)}\n            {...rest}\n        />\n    )\n})\nCardFooter.displayName = \"CardFooter\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "card",
        "content": "export * from \"./card\"\n"
      }
    ]
  },
  {
    "component": "carousel",
    "name": "Carousel",
    "dependencies": [
      [
        "embla-carousel-react",
        "8.3.1",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "carousel.tsx",
        "dir": "carousel",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { EmblaCarouselType, EmblaOptionsType, EmblaPluginType } from \"embla-carousel\"\nimport useEmblaCarousel from \"embla-carousel-react\"\nimport * as React from \"react\"\nimport { IconButton } from \"../button\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CarouselAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Carousel__root\",\n        \"relative\",\n    ]),\n    content: cva([\n        \"UI-Carousel__content\",\n        \"overflow-hidden\",\n    ]),\n    innerContent: cva([\n        \"UI-Carousel__innerContent\",\n        \"flex\",\n    ], {\n        variants: {\n            gap: { none: null, sm: null, md: null, lg: null, xl: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { gap: \"none\", orientation: \"horizontal\", className: \"ml-0\" },\n            { gap: \"sm\", orientation: \"horizontal\", className: \"-ml-2\" },\n            { gap: \"md\", orientation: \"horizontal\", className: \"-ml-4\" },\n            { gap: \"lg\", orientation: \"horizontal\", className: \"-ml-6\" },\n            { gap: \"xl\", orientation: \"horizontal\", className: \"-ml-8\" },\n            /**/\n            { gap: \"none\", orientation: \"vertical\", className: \"-mt-0 flex-col\" },\n            { gap: \"sm\", orientation: \"vertical\", className: \"-mt-2 flex-col\" },\n            { gap: \"md\", orientation: \"vertical\", className: \"-mt-4 flex-col\" },\n            { gap: \"lg\", orientation: \"vertical\", className: \"-mt-6 flex-col\" },\n            { gap: \"xl\", orientation: \"vertical\", className: \"-mt-8 flex-col\" },\n        ],\n    }),\n    item: cva([\n        \"UI-Carousel__item\",\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n    ], {\n        variants: {\n            gap: { none: null, sm: null, md: null, lg: null, xl: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { gap: \"none\", orientation: \"horizontal\", className: \"pl-0\" },\n            { gap: \"sm\", orientation: \"horizontal\", className: \"pl-2\" },\n            { gap: \"md\", orientation: \"horizontal\", className: \"pl-4\" },\n            { gap: \"lg\", orientation: \"horizontal\", className: \"pl-6\" },\n            { gap: \"xl\", orientation: \"horizontal\", className: \"pl-8\" },\n            /**/\n            { gap: \"none\", orientation: \"vertical\", className: \"pt-0\" },\n            { gap: \"sm\", orientation: \"vertical\", className: \"pt-2\" },\n            { gap: \"md\", orientation: \"vertical\", className: \"pt-4\" },\n            { gap: \"lg\", orientation: \"vertical\", className: \"pt-6\" },\n            { gap: \"xl\", orientation: \"vertical\", className: \"pt-8\" },\n        ],\n    }),\n    button: cva([\n        \"UI-Carousel__button\",\n        \"absolute rounded-full\",\n    ], {\n        variants: {\n            placement: { previous: null, next: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { placement: \"previous\", orientation: \"horizontal\", className: \"-left-12 top-1/2 -translate-y-1/2\" },\n            { placement: \"previous\", orientation: \"vertical\", className: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\" },\n            { placement: \"next\", orientation: \"horizontal\", className: \"-right-12 top-1/2 -translate-y-1/2\" },\n            { placement: \"next\", orientation: \"vertical\", className: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\" },\n        ],\n    }),\n    chevronIcon: cva([\n        \"UI-Carousel__chevronIcon\",\n        \"size-6\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Carousel\n * -----------------------------------------------------------------------------------------------*/\n\nexport const __CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n    const context = React.useContext(__CarouselContext)\n\n    if (!context) {\n        throw new Error(\"useCarousel must be used within a <Carousel />\")\n    }\n\n    return context\n}\n\nexport type CarouselProps = {\n    opts?: EmblaOptionsType\n    plugins?: EmblaPluginType[]\n    orientation?: \"horizontal\" | \"vertical\"\n    gap?: \"none\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n    setApi?: (api: EmblaCarouselType) => void\n}\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nexport const Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>((props, ref) => {\n\n    const {\n        orientation = \"horizontal\",\n        opts,\n        gap = \"md\",\n        setApi,\n        plugins,\n        className,\n        children,\n        ...rest\n    } = props\n\n    const [carouselRef, api] = useEmblaCarousel({ ...opts, axis: orientation === \"horizontal\" ? \"x\" : \"y\" }, plugins)\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: EmblaCarouselType) => {\n        if (!api) return\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === \"ArrowLeft\") {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === \"ArrowRight\") {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext],\n    )\n\n    React.useEffect(() => {\n        if (!api || !setApi) return\n\n        setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n        if (!api) return\n\n        onSelect(api)\n        api.on(\"reInit\", onSelect)\n        api.on(\"select\", onSelect)\n\n        return () => {\n            api?.off(\"select\", onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <__CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                gap,\n                orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext,\n            }}\n        >\n            <div\n                ref={ref}\n                onKeyDownCapture={handleKeyDown}\n                className={cn(CarouselAnatomy.root(), className)}\n                role=\"region\"\n                aria-roledescription=\"carousel\"\n                {...rest}\n            >\n                {children}\n            </div>\n        </__CarouselContext.Provider>\n    )\n})\nCarousel.displayName = \"Carousel\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselContentProps = React.ComponentPropsWithoutRef<\"div\"> & {\n    contentClass?: string\n}\n\nexport const CarouselContent = React.forwardRef<HTMLDivElement, CarouselContentProps>((props, ref) => {\n    const { className, contentClass, ...rest } = props\n    const { carouselRef, orientation, gap } = useCarousel()\n\n    return (\n        <div ref={carouselRef} className={cn(CarouselAnatomy.content(), contentClass)}>\n            <div\n                ref={ref}\n                className={cn(CarouselAnatomy.innerContent({ orientation, gap }), className)}\n                {...rest}\n            />\n        </div>\n    )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselItemProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CarouselItem = React.forwardRef<HTMLDivElement, CarouselItemProps>((props, ref) => {\n    const { className, ...rest } = props\n    const { orientation, gap } = useCarousel()\n\n    return (\n        <div\n            ref={ref}\n            role=\"group\"\n            aria-roledescription=\"slide\"\n            className={cn(CarouselAnatomy.item({ orientation, gap }), className)}\n            {...rest}\n        />\n    )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselPrevious\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselButtonProps = React.ComponentProps<typeof IconButton> & { chevronIconClass?: string }\n\nexport const CarouselPrevious = React.forwardRef<HTMLButtonElement, CarouselButtonProps>((props, ref) => {\n    const { className, chevronIconClass, intent = \"gray-outline\", ...rest } = props\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n    return (\n        <IconButton\n            ref={ref}\n            intent={intent}\n            className={CarouselAnatomy.button({ orientation, placement: \"previous\" })}\n            disabled={!canScrollPrev}\n            onClick={scrollPrev}\n            icon={<svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={cn(CarouselAnatomy.chevronIcon(), chevronIconClass)}\n            >\n                <path d=\"m15 18-6-6 6-6\" />\n            </svg>}\n            {...rest}\n        />\n    )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselNext\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CarouselNext = React.forwardRef<HTMLButtonElement, CarouselButtonProps>((props, ref) => {\n    const { className, chevronIconClass, intent = \"gray-outline\", ...rest } = props\n    const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n    return (\n        <IconButton\n            ref={ref}\n            intent={intent}\n            className={CarouselAnatomy.button({ orientation, placement: \"next\" })}\n            disabled={!canScrollNext}\n            onClick={scrollNext}\n            icon={<svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={cn(CarouselAnatomy.chevronIcon(), chevronIconClass)}\n            >\n                <path d=\"m9 18 6-6-6-6\" />\n            </svg>}\n            {...rest}\n        />\n    )\n})\nCarouselNext.displayName = \"CarouselNext\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "carousel",
        "content": "export * from \"./carousel\"\n"
      }
    ]
  },
  {
    "component": "charts",
    "name": "Charts",
    "dependencies": [
      [
        "recharts",
        "^2.13.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "area-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Area, AreaChart as ReChartsAreaChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\nimport type { AxisDomain } from \"recharts/types/util/types\"\nimport { cn } from \"../core/styling\"\nimport { ChartLegend } from \"./chart-legend\"\nimport { ChartTooltip } from \"./chart-tooltip\"\nimport { ColorPalette } from \"./color-theme\"\nimport { BaseChartProps, ChartCurveType } from \"./types\"\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n * AreaChart\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AreaChartProps = React.ComponentPropsWithoutRef<\"div\"> &\n    BaseChartProps & {\n    /**\n     * Controls the visibility of the gradient.\n     * @default true\n     */\n    showGradient?: boolean\n    /**\n     * If true, the areas will be stacked\n     * @default false\n     */\n    stack?: boolean\n    /**\n     * The type of curve to use for the line\n     * @default \"linear\"\n     */\n    curveType?: ChartCurveType\n    /**\n     * Connect null data points\n     * @default false\n     */\n    connectNulls?: boolean\n    /**\n     * Display dots for each data point\n     * @default true\n     */\n    showDots?: boolean\n    /**\n     * Angle the x-axis labels\n     * @default false\n     */\n    angledLabels?: boolean\n    /**\n     * Interval type for x-axis labels\n     * @default \"preserveStartEnd\"\n     */\n    intervalType?: \"preserveStart\" | \"preserveEnd\" | \"preserveStartEnd\" | \"equidistantPreserveStart\"\n}\n\nexport const AreaChart = React.forwardRef<HTMLDivElement, AreaChartProps>((props, ref) => {\n\n    const {\n        className,\n        stack = false,\n        curveType = \"linear\",\n        connectNulls = false,\n        angledLabels = false,\n        /**/\n        data = [],\n        categories = [],\n        index,\n        colors = ColorPalette,\n        valueFormatter = defaultValueFormatter,\n        startEndOnly = false,\n        showXAxis = true,\n        showYAxis = true,\n        yAxisWidth = 56,\n        showAnimation = true,\n        showTooltip = true,\n        showLegend = true,\n        showGridLines = true,\n        showGradient = true,\n        autoMinValue = false,\n        minValue,\n        maxValue,\n        allowDecimals = true,\n        showDots = true,\n        emptyDisplay = <></>,\n        intervalType = \"preserveStartEnd\",\n        ...rest\n    } = props\n\n    const [legendHeight, setLegendHeight] = React.useState(60)\n\n    const categoryColors = constructCategoryColors(categories, colors)\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\"w-full h-80\", className)}\n            {...rest}\n        >\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {data?.length ? (\n                    <ReChartsAreaChart data={data}>\n                        {showGridLines ? (\n                            <CartesianGrid\n                                strokeDasharray=\"3 3\"\n                                horizontal={true}\n                                vertical={false}\n                                className=\"stroke-gray-300 dark:stroke-gray-600\"\n                            />\n                        ) : null}\n                        <XAxis\n                            hide={!showXAxis}\n                            dataKey={index}\n                            tick={{ transform: \"translate(0, 8)\" }}\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\n                            className=\"font-medium text-[--muted] text-xs\"\n                            interval={intervalType}\n                            axisLine={false}\n                            tickLine={false}\n                            padding={{ left: 10, right: 10 }}\n                            minTickGap={5}\n                            spacing={120}\n                            textAnchor={angledLabels ? \"end\" : \"middle\"}\n                            angle={angledLabels ? -40 : undefined}\n                        />\n                        <YAxis\n                            width={yAxisWidth}\n                            hide={!showYAxis}\n                            axisLine={false}\n                            tickLine={false}\n                            type=\"number\"\n                            domain={yAxisDomain as AxisDomain}\n                            tick={{ transform: \"translate(-3, 0)\" }}\n                            className=\"font-medium text-[--muted] text-xs\"\n                            tickFormatter={valueFormatter}\n                            allowDecimals={allowDecimals}\n                        />\n                        <Tooltip\n                            wrapperStyle={{ outline: \"none\" }}\n                            isAnimationActive={false}\n                            cursor={{ stroke: \"var(--gray)\", strokeWidth: 1 }}\n                            position={{ y: 0 }}\n                            content={showTooltip ? ({ active, payload, label }) => (\n                                <ChartTooltip\n                                    active={active}\n                                    payload={payload}\n                                    label={label}\n                                    valueFormatter={valueFormatter}\n                                    categoryColors={categoryColors}\n                                />\n                            ) : <></>}\n                        />\n\n                        {categories.map((category) => {\n                            const hexColor = `var(--${categoryColors.get(category)})`\n                            return (\n                                <defs key={category}>\n                                    {showGradient ? (\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                            <stop offset=\"5%\" stopColor={hexColor} stopOpacity={0.2} />\n                                            <stop offset=\"95%\" stopColor={hexColor} stopOpacity={0} />\n                                        </linearGradient>\n                                    ) : (\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                            <stop stopColor={hexColor} stopOpacity={0.3} />\n                                        </linearGradient>\n                                    )}\n                                </defs>\n                            )\n                        })}\n\n                        {categories.map((category) => (\n                            <Area\n                                key={category}\n                                name={category}\n                                type={curveType}\n                                dataKey={category}\n                                stroke={`var(--${categoryColors.get(category)})`}\n                                fill={`url(#${categoryColors.get(category)})`}\n                                strokeWidth={2}\n                                dot={showDots}\n                                isAnimationActive={showAnimation}\n                                stackId={stack ? \"a\" : undefined}\n                                connectNulls={connectNulls}\n                            />\n                        ))}\n\n                        {showLegend ? (\n                            <Legend\n                                verticalAlign=\"bottom\"\n                                height={legendHeight}\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\n                            />\n                        ) : null}\n\n                    </ReChartsAreaChart>\n                ) : emptyDisplay}\n            </ResponsiveContainer>\n        </div>\n    )\n\n})\n\nAreaChart.displayName = \"AreaChart\"\n"
      },
      {
        "name": "bar-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Bar, BarChart as ReChartsBarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\nimport type { AxisDomain } from \"recharts/types/util/types\"\nimport { cn } from \"../core/styling\"\nimport { ChartLegend } from \"./chart-legend\"\nimport { ChartTooltip } from \"./chart-tooltip\"\nimport { ColorPalette } from \"./color-theme\"\nimport { BaseChartProps } from \"./types\"\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * BarChart\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BarChartProps = React.ComponentPropsWithRef<\"div\"> & BaseChartProps & {\n    /**\n     * Display bars vertically or horizontally\n     */\n    layout?: \"vertical\" | \"horizontal\"\n    /**\n     * If true, the bars will be stacked\n     */\n    stack?: boolean\n    /**\n     * Display bars as a percentage of the total\n     */\n    relative?: boolean\n    /**\n     * Interval type for x-axis labels\n     * @default \"equidistantPreserveStart\"\n     */\n    intervalType?: \"preserveStart\" | \"preserveEnd\" | \"preserveStartEnd\" | \"equidistantPreserveStart\"\n}\n\nexport const BarChart: React.FC<BarChartProps> = React.forwardRef<HTMLDivElement, BarChartProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        layout = \"horizontal\",\n        stack = false,\n        relative = false,\n        /**/\n        data = [],\n        categories = [],\n        index,\n        colors = ColorPalette,\n        valueFormatter = defaultValueFormatter,\n        startEndOnly = false,\n        showXAxis = true,\n        showYAxis = true,\n        yAxisWidth = 56,\n        showAnimation = true,\n        showTooltip = true,\n        showLegend = true,\n        showGridLines = true,\n        autoMinValue = false,\n        minValue,\n        maxValue,\n        allowDecimals = true,\n        intervalType = \"equidistantPreserveStart\",\n        emptyDisplay = <></>,\n        ...rest\n    } = props\n\n    const [legendHeight, setLegendHeight] = React.useState(60)\n\n    const categoryColors = constructCategoryColors(categories, colors)\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n\n    return (\n        <div\n            className={cn(\"w-full h-80\", className)}\n            {...rest}\n            ref={ref}\n        >\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {data?.length ? (\n                    <ReChartsBarChart\n                        data={data}\n                        stackOffset={relative ? \"expand\" : \"none\"}\n                        layout={layout === \"vertical\" ? \"vertical\" : \"horizontal\"}\n                    >\n                        {showGridLines ? (\n                            <CartesianGrid\n                                strokeDasharray=\"3 3\"\n                                horizontal={layout !== \"vertical\"}\n                                vertical={layout === \"vertical\"}\n                                className=\"stroke-gray-300 dark:stroke-gray-600\"\n                            />\n                        ) : null}\n\n                        {layout !== \"vertical\" ? (\n                            <XAxis\n                                hide={!showXAxis}\n                                dataKey={index}\n                                interval=\"preserveStartEnd\"\n                                tick={{ transform: \"translate(0, 6)\" }} // Padding between labels and axis\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\n                                className=\"font-medium text-[--muted] text-xs mt-4\"\n                                tickLine={false}\n                                axisLine={false}\n                            />\n                        ) : (\n                            <XAxis\n                                hide={!showXAxis}\n                                type=\"number\"\n                                tick={{ transform: \"translate(-3, 0)\" }}\n                                domain={yAxisDomain as AxisDomain}\n                                className=\"font-medium text-[--muted] text-xs\"\n                                tickLine={false}\n                                axisLine={false}\n                                tickFormatter={valueFormatter}\n                                padding={{ left: 10, right: 10 }}\n                                minTickGap={5}\n                                allowDecimals={allowDecimals}\n                            />\n                        )}\n                        {layout !== \"vertical\" ? (\n                            <YAxis\n                                width={yAxisWidth}\n                                hide={!showYAxis}\n                                axisLine={false}\n                                tickLine={false}\n                                type=\"number\"\n                                domain={yAxisDomain as AxisDomain}\n                                tick={{ transform: \"translate(-3, 0)\" }}\n                                className=\"font-medium text-[--muted] text-xs\"\n                                tickFormatter={\n                                    relative ? (value: number) => `${(value * 100).toString()} %` : valueFormatter\n                                }\n                                allowDecimals={allowDecimals}\n                            />\n                        ) : (\n                            <YAxis\n                                width={yAxisWidth}\n                                hide={!showYAxis}\n                                dataKey={index}\n                                axisLine={false}\n                                tickLine={false}\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\n                                type=\"category\"\n                                interval=\"preserveStartEnd\"\n                                tick={{ transform: \"translate(0, 6)\" }}\n                                className=\"font-medium text-[--muted] text-xs\"\n                            />\n                        )}\n                        <Tooltip\n                            wrapperStyle={{\n                                outline: \"none\",\n                            }}\n                            cursor={{\n                                fill: \"var(--gray)\",\n                                opacity: 0.05,\n                            }}\n                            isAnimationActive={false}\n                            content={showTooltip ? ({ active, payload, label }) => (\n                                <ChartTooltip\n                                    active={active}\n                                    payload={payload}\n                                    label={label}\n                                    valueFormatter={valueFormatter}\n                                    categoryColors={categoryColors}\n                                />\n                            ) : <></>}\n                            position={{ y: 0 }}\n                        />\n\n                        {categories.map((category) => (\n                            <Bar\n                                key={category}\n                                name={category}\n                                type=\"linear\"\n                                stackId={stack || relative ? \"a\" : undefined}\n                                dataKey={category}\n                                fill={`var(--${categoryColors.get(category)})`}\n                                isAnimationActive={showAnimation}\n                            />\n                        ))}\n\n                        {showLegend ? (\n                            <Legend\n                                verticalAlign=\"bottom\"\n                                height={legendHeight}\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\n                            />\n                        ) : null}\n                    </ReChartsBarChart>\n                ) : emptyDisplay}\n            </ResponsiveContainer>\n        </div>\n    )\n\n})\n\nBarChart.displayName = \"BarChart\"\n"
      },
      {
        "name": "chart-legend.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport { ChartColor } from \"./color-theme\"\nimport * as React from \"react\"\nimport { Legend } from \"./legend\"\n\n/* -------------------------------------------------------------------------------------------------\n * ChartLegend\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ChartLegend = (\n    { payload }: any,\n    categoryColors: Map<string, ChartColor>,\n    setLegendHeight: React.Dispatch<React.SetStateAction<number>>,\n) => {\n    const legendRef = React.useRef<HTMLDivElement>(null)\n\n    const [windowSize, setWindowSize] = React.useState<undefined | number>(undefined)\n    const deferredWindowSize = React.useDeferredValue(windowSize)\n\n    React.useEffect(() => {\n        const handleResize = () => {\n            setWindowSize(window.innerWidth)\n            const calculateHeight = (height: number | undefined) =>\n                height ?\n                    Number(height) + 20 // 20px extra padding\n                    : 60 // default height\n            setLegendHeight(calculateHeight(legendRef.current?.clientHeight))\n        }\n        handleResize()\n        window.addEventListener(\"resize\", handleResize)\n\n        return () => window.removeEventListener(\"resize\", handleResize)\n    }, [deferredWindowSize])\n\n    return (\n        <div ref={legendRef} className=\"flex w-full items-center justify-center mt-4\">\n            <Legend\n                categories={payload.map((entry: any) => entry.value)}\n                colors={payload.map((entry: any) => categoryColors.get(entry.value))}\n            />\n        </div>\n    )\n}\n\nChartLegend.displayName = \"ChartLegend\"\n"
      },
      {
        "name": "chart-tooltip.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { ChartValueFormatter } from \"../charts/types\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { ChartColor } from \"./color-theme\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ChartTooltipAnatomy = defineStyleAnatomy({\n    frame: cva([\n        \"UI-ChartTooltip__frame\",\n        \"border bg-[--paper] p-2 rounded-[--radius]\",\n    ]),\n    header: cva([\n        \"UI-ChartTooltip__header\",\n        \"mb-2 font-semibold\",\n    ]),\n    label: cva([\n        \"UI-ChartTooltip__label\",\n    ]),\n    content: cva([\n        \"UI-ChartTooltip__content\",\n        \"space-y-1\",\n    ]),\n})\n\nexport const ChartTooltipRowAnatomy = defineStyleAnatomy({\n    row: cva([\n        \"UI-ChartTooltip__row\",\n        \"flex items-center justify-between space-x-8\",\n    ]),\n    labelContainer: cva([\n        \"UI-ChartTooltip__labelContainer\",\n        \"flex items-center space-x-2\",\n    ]),\n    dot: cva([\n        \"UI-ChartTooltip__dot\",\n        \"shrink-0\",\n        \"h-3 w-3 bg-[--gray] rounded-full shadow-sm\",\n    ]),\n    value: cva([\n        \"UI-ChartTooltip__value\",\n        \"font-semibold tabular-nums text-right whitespace-nowrap\",\n    ]),\n    label: cva([\n        \"UI-ChartTooltip__label\",\n        \"text-sm text-right whitespace-nowrap font-medium text-[--foreground]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * ChartTooltipFrame\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ChartTooltipFrameProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const ChartTooltipFrame = ({ children, className }: ChartTooltipFrameProps) => (\n    <div className={cn(ChartTooltipAnatomy.frame(), className)}>\n        {children}\n    </div>\n)\n\n/* -------------------------------------------------------------------------------------------------\n * ChartTooltipRow\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ChartTooltipRowProps = ComponentAnatomy<typeof ChartTooltipRowAnatomy> & {\n    value: string\n    name: string\n    color: ChartColor\n}\n\nexport const ChartTooltipRow = (\n    {\n        value,\n        name,\n        color,\n        dotClass,\n        rowClass,\n        valueClass,\n        labelClass,\n        labelContainerClass,\n    }: ChartTooltipRowProps) => (\n    <div className={cn(ChartTooltipRowAnatomy.row(), rowClass)}>\n        <div className={cn(ChartTooltipRowAnatomy.labelContainer(), labelContainerClass)}>\n            <span\n                className={cn(ChartTooltipRowAnatomy.dot(), dotClass)}\n                style={{ backgroundColor: `var(--${color})` }}\n            />\n            <p className={cn(ChartTooltipRowAnatomy.label(), labelClass)}>\n                {name}\n            </p>\n        </div>\n        <p className={cn(ChartTooltipRowAnatomy.value(), valueClass)}>\n            {value}\n        </p>\n    </div>\n)\n\n/* -------------------------------------------------------------------------------------------------\n * ChartTooltip\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ChartTooltipProps = ComponentAnatomy<typeof ChartTooltipAnatomy> & {\n    active: boolean | undefined\n    payload: any\n    label: string\n    categoryColors: Map<string, ChartColor>\n    valueFormatter: ChartValueFormatter\n}\n\nexport const ChartTooltip = (props: ChartTooltipProps) => {\n\n    const {\n        active,\n        payload,\n        label,\n        categoryColors,\n        valueFormatter,\n        headerClass,\n        contentClass,\n        frameClass,\n        labelClass,\n    } = props\n    if (active && payload) {\n        return (\n            <ChartTooltipFrame className={frameClass}>\n                <div className={cn(ChartTooltipAnatomy.header(), headerClass)}>\n                    <p className={cn(ChartTooltipAnatomy.label(), labelClass)}>\n                        {label}\n                    </p>\n                </div>\n\n                <div className={cn(ChartTooltipAnatomy.content(), contentClass)}>\n                    {payload.map(({ value, name }: { value: number; name: string }, idx: number) => (\n                        <ChartTooltipRow\n                            key={`id-${idx}`}\n                            value={valueFormatter(value)}\n                            name={name}\n                            color={categoryColors.get(name) ?? \"brand\"}\n                        />\n                    ))}\n                </div>\n            </ChartTooltipFrame>\n        )\n    }\n    return null\n}\n"
      },
      {
        "name": "color-theme.ts",
        "dir": "charts",
        "content": "/* -------------------------------------------------------------------------------------------------\n * Colors\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ColorPalette = [\n    \"brand\",\n    \"purple\",\n    \"blue\",\n    \"amber\",\n    \"green\",\n    \"yellow\",\n    \"cyan\",\n    \"lime\",\n    \"sky\",\n    \"red\",\n    \"pink\",\n    \"orange\",\n    \"stone\",\n    \"teal\",\n    \"neutral\",\n    \"fuchsia\",\n    \"violet\",\n    \"slate\",\n    \"zinc\",\n    \"emerald\",\n    \"indigo\",\n    \"gray\",\n    \"rose\",\n]\nexport type ChartColor = (typeof ColorPalette)[number]\n"
      },
      {
        "name": "donut-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Pie, PieChart as ReChartsDonutChart, ResponsiveContainer, Sector, Tooltip } from \"recharts\"\nimport { cn } from \"../core/styling\"\nimport { ChartTooltipFrame, ChartTooltipRow } from \"./chart-tooltip\"\nimport { ChartColor, ColorPalette } from \"./color-theme\"\nimport { ChartValueFormatter } from \"./types\"\nimport { defaultValueFormatter, parseChartData, parseChartLabelInput } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n * DonutChart\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DonutChartProps = React.HTMLAttributes<HTMLDivElement> & {\n    /**\n     * The data to be displayed in the chart.\n     * An array of objects. Each object represents a data point.\n     */\n    data: any[]\n    /**\n     * The key containing the quantitative chart values.\n     */\n    category: string\n    /**\n     * The key to map the data to the axis.\n     * e.g. \"value\"\n     */\n    index: string\n    /**\n     * Color palette to be used in the chart.\n     */\n    colors?: ChartColor[]\n    /**\n     * The type of chart to display\n     * @default \"donut\"\n     */\n    variant?: \"donut\" | \"pie\"\n    /**\n     * Changes the text formatting of the label.\n     * This only works when the variant is \"donut\".\n     */\n    valueFormatter?: ChartValueFormatter\n    /**\n     * The text to be placed the center of the donut chart.\n     * Only available when variant \"donut\".\n     */\n    label?: string\n    /**\n     * If true, the label will be displayed in the center of the chart\n     * @default true\n     */\n    showLabel?: boolean\n    /**\n     * If true, the chart will animate when rendered\n     */\n    showAnimation?: boolean\n    /**\n     * If true, a tooltip will be displayed when hovering over a data point\n     * @default true\n     */\n    showTooltip?: boolean\n    /**\n     * The element to be displayed when there is no data\n     * @default <></>\n     */\n    emptyDisplay?: React.ReactElement\n}\n\nexport const DonutChart = React.forwardRef<HTMLDivElement, DonutChartProps>((props, ref) => {\n    const {\n        data = [],\n        category,\n        index,\n        colors = ColorPalette,\n        variant = \"donut\",\n        valueFormatter = defaultValueFormatter,\n        label,\n        showLabel = true,\n        showAnimation = true,\n        showTooltip = true,\n        className,\n        emptyDisplay = <></>,\n        ...other\n    } = props\n    const isDonut = variant == \"donut\"\n\n    const parsedLabelInput = parseChartLabelInput(label, valueFormatter, data, category)\n\n    return (\n        <div ref={ref} className={cn(\"w-full h-44\", className)} {...other}>\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {data?.length ? (\n                    <ReChartsDonutChart>\n                        {showLabel && isDonut ? (\n                            <text\n                                x=\"50%\"\n                                y=\"50%\"\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                                className=\"fill-[--foreground] dark:fill-[--foreground] font-semibold\"\n                            >\n                                {parsedLabelInput}\n                            </text>\n                        ) : null}\n                        <Pie\n                            data={parseChartData(data, colors)}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            startAngle={90}\n                            endAngle={-270}\n                            innerRadius={isDonut ? \"75%\" : \"0%\"}\n                            outerRadius=\"100%\"\n                            paddingAngle={0}\n                            stroke=\"\"\n                            strokeLinejoin=\"round\"\n                            dataKey={category}\n                            nameKey={index}\n                            isAnimationActive={showAnimation}\n                            inactiveShape={renderInactiveShape}\n                            style={{ outline: \"none\" }}\n                            className=\"stroke-[--background] dark:stroke-[--background]\"\n                        />\n                        <Tooltip\n                            cursorStyle={{ outline: \"none\" }}\n                            wrapperStyle={{ outline: \"none\" }}\n                            isAnimationActive={false}\n                            content={showTooltip ? ({ active, payload }) => (\n                                <DonutChartTooltip\n                                    active={active}\n                                    payload={payload}\n                                    valueFormatter={valueFormatter}\n                                />\n                            ) : <></>}\n                        />\n                    </ReChartsDonutChart>\n                ) : emptyDisplay}\n            </ResponsiveContainer>\n        </div>\n    )\n})\n\nDonutChart.displayName = \"DonutChart\"\n\nconst renderInactiveShape = (props: any) => {\n    const {\n        cx,\n        cy,\n        // midAngle,\n        innerRadius,\n        outerRadius,\n        startAngle,\n        endAngle,\n        // fill,\n        // payload,\n        // percent,\n        // value,\n        // activeIndex,\n        className,\n    } = props;\n\n    return (\n        <g>\n            <Sector\n                cx={cx}\n                cy={cy}\n                innerRadius={innerRadius}\n                outerRadius={outerRadius}\n                startAngle={startAngle}\n                endAngle={endAngle}\n                className={className}\n                fill=\"\"\n                opacity={0.3}\n                style={{ outline: \"none\" }}\n            />\n        </g>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DonutChartTooltip\n * -----------------------------------------------------------------------------------------------*/\n\ntype DonutChartTooltipProps = {\n    active?: boolean\n    payload: any\n    valueFormatter: ChartValueFormatter\n}\n\nconst DonutChartTooltip = ({ active, payload, valueFormatter }: DonutChartTooltipProps) => {\n    if (active && payload[0]) {\n        const payloadRow = payload[0]\n        return (\n            <ChartTooltipFrame>\n                <div className={cn(\"py-2 px-2\")}>\n                    <ChartTooltipRow\n                        value={valueFormatter(payloadRow.value)}\n                        name={payloadRow.name}\n                        color={payloadRow.payload.color}\n                    />\n                </div>\n            </ChartTooltipFrame>\n        )\n    }\n    return null\n}\n\nDonutChartTooltip.displayName = \"DonutChartTooltip\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "charts",
        "content": "export * from \"./area-chart\"\nexport * from \"./bar-chart\"\nexport * from \"./line-chart\"\nexport * from \"./donut-chart\"\nexport * from \"./legend\"\nexport * from \"./types\"\n"
      },
      {
        "name": "legend.tsx",
        "dir": "charts",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { ColorPalette, ChartColor } from \"./color-theme\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LegendAnatomy = defineStyleAnatomy({\n    legend: cva([\n        \"UI-Legend__legend\",\n        \"flex flex-wrap overflow-hidden truncate\",\n    ]),\n    legendItem: cva([\n        \"UI-Legend__legendItem\",\n        \"inline-flex items-center truncate mr-4\",\n    ]),\n    dot: cva([\n        \"UI-Legend__dot\",\n        \"shrink-0\",\n        \"flex-none h-3 w-3 bg-gray rounded-full shadow-sm mr-2\",\n    ]),\n    label: cva([\n        \"UI-Legend__label\",\n        \"whitespace-nowrap truncate text-sm font-medium text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LegendItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LegendItemProps = {\n    name: string\n    color: ChartColor\n    dotClass?: string\n    labelClass?: string\n    legendItemClass?: string\n}\n\nconst LegendItem = ({ name, color, dotClass, legendItemClass, labelClass }: LegendItemProps) => (\n    <li className={cn(LegendAnatomy.legendItem(), legendItemClass)}>\n        <svg\n            className={cn(LegendAnatomy.dot(), dotClass)}\n            style={{ color: `var(--${color})` }}\n            fill=\"currentColor\"\n            viewBox=\"0 0 8 8\"\n        >\n            <circle cx={4} cy={4} r={4} />\n        </svg>\n        <p className={cn(LegendAnatomy.label(), labelClass)}>\n            {name}\n        </p>\n    </li>\n)\n\n/* -------------------------------------------------------------------------------------------------\n * Legend\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LegendProps = React.ComponentPropsWithRef<\"ol\"> & ComponentAnatomy<typeof LegendAnatomy> & {\n    categories: string[]\n    colors?: ChartColor[]\n}\n\nexport const Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {\n    const {\n        categories,\n        colors = ColorPalette,\n        className,\n        legendClass,\n        legendItemClass,\n        labelClass,\n        dotClass,\n        ...rest\n    } = props\n    return (\n        <ol\n            ref={ref}\n            className={cn(\n                LegendAnatomy.legend(),\n                legendClass,\n                className,\n            )}\n            {...rest}\n        >\n            {categories.map((category, idx) => (\n                <LegendItem\n                    key={`item-${idx}`}\n                    name={category}\n                    color={colors[idx] ?? \"brand\"}\n                    dotClass={dotClass}\n                    legendItemClass={legendItemClass}\n                    labelClass={labelClass}\n                />\n            ))}\n        </ol>\n    )\n})\n\nLegend.displayName = \"Legend\"\n"
      },
      {
        "name": "line-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CartesianGrid, Legend, Line, LineChart as ReChartsLineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\nimport type { AxisDomain } from \"recharts/types/util/types\"\nimport { cn } from \"../core/styling\"\nimport { ChartLegend } from \"./chart-legend\"\nimport { ChartTooltip } from \"./chart-tooltip\"\nimport { ColorPalette } from \"./color-theme\"\nimport { BaseChartProps, ChartCurveType } from \"./types\"\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\n\n/* -------------------------------------------------------------------------------------------------\n * LineChart\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LineChartProps = React.ComponentPropsWithRef<\"div\"> & BaseChartProps & {\n    /**\n     * The type of curve to use for the line\n     * @default \"linear\"\n     */\n    curveType?: ChartCurveType\n    /**\n     * Connect null data points\n     * @default false\n     */\n    connectNulls?: boolean\n    /**\n     * Angle the x-axis labels\n     * @default false\n     */\n    angledLabels?: boolean\n    /**\n     * Interval type for x-axis labels\n     * @default \"preserveStartEnd\"\n     */\n    intervalType?: \"preserveStart\" | \"preserveEnd\" | \"preserveStartEnd\" | \"equidistantPreserveStart\"\n}\n\n\nexport const LineChart: React.FC<LineChartProps> = React.forwardRef<HTMLDivElement, LineChartProps>((props, ref) => {\n\n    const {\n        className,\n        curveType = \"linear\",\n        connectNulls = false,\n        angledLabels,\n        /**/\n        data = [],\n        categories = [],\n        index,\n        colors = ColorPalette,\n        valueFormatter = defaultValueFormatter,\n        startEndOnly = false,\n        showXAxis = true,\n        showYAxis = true,\n        yAxisWidth = 56,\n        showAnimation = true,\n        showTooltip = true,\n        showLegend = true,\n        showGridLines = true,\n        autoMinValue = false,\n        minValue,\n        maxValue,\n        allowDecimals = true,\n        intervalType = \"preserveStartEnd\",\n        emptyDisplay = <></>,\n        ...rest\n    } = props\n\n    const [legendHeight, setLegendHeight] = React.useState(60)\n\n    const categoryColors = constructCategoryColors(categories, colors)\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\"w-full h-80\", className)}\n            {...rest}\n        >\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {data?.length ? (\n                    <ReChartsLineChart data={data}>\n                        {showGridLines ? (\n                            <CartesianGrid\n                                strokeDasharray=\"3 3\"\n                                horizontal={true}\n                                vertical={false}\n                                className=\"stroke-gray-300 dark:stroke-gray-600\"\n                            />\n                        ) : null}\n                        <XAxis\n                            hide={!showXAxis}\n                            dataKey={index}\n                            tick={{ transform: \"translate(0, 8)\" }}\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\n                            className=\"font-medium text-[--muted] text-xs\"\n                            interval={intervalType}\n                            axisLine={false}\n                            tickLine={false}\n                            padding={{ left: 10, right: 10 }}\n                            minTickGap={5}\n                            textAnchor={angledLabels ? \"end\" : \"middle\"}\n                            angle={angledLabels ? -40 : undefined}\n                        />\n                        <YAxis\n                            width={yAxisWidth}\n                            hide={!showYAxis}\n                            axisLine={false}\n                            tickLine={false}\n                            type=\"number\"\n                            textAnchor=\"end\"\n                            domain={yAxisDomain as AxisDomain}\n                            tick={{ transform: \"translate(-3, 0)\" }}\n                            className=\"font-medium text-[--muted] text-xs\"\n                            tickFormatter={valueFormatter}\n                            allowDecimals={allowDecimals}\n                        />\n                        <Tooltip\n                            wrapperStyle={{ outline: \"none\" }}\n                            isAnimationActive={false}\n                            cursor={{ stroke: \"var(--gray)\", strokeWidth: 1 }}\n                            position={{ y: 0 }}\n                            content={showTooltip ? ({ active, payload, label }) => (\n                                <ChartTooltip\n                                    active={active}\n                                    payload={payload}\n                                    label={label}\n                                    valueFormatter={valueFormatter}\n                                    categoryColors={categoryColors}\n                                />\n                            ) : <></>}\n                        />\n\n                        {categories.map((category) => (\n                            <Line\n                                key={category}\n                                name={category}\n                                type={curveType}\n                                dataKey={category}\n                                stroke={`var(--${categoryColors.get(category)})`}\n                                strokeWidth={2}\n                                dot={false}\n                                isAnimationActive={showAnimation}\n                                connectNulls={connectNulls}\n                            />\n                        ))}\n\n                        {showLegend ? (\n                            <Legend\n                                verticalAlign=\"bottom\"\n                                height={legendHeight}\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\n                            />\n                        ) : null}\n\n                    </ReChartsLineChart>\n                ) : emptyDisplay}\n            </ResponsiveContainer>\n        </div>\n    )\n\n})\n\nLineChart.displayName = \"LineChart\"\n"
      },
      {
        "name": "types.ts",
        "dir": "charts",
        "content": "import * as React from \"react\"\nimport { ChartColor } from \"./color-theme\"\n\nexport type ChartValueFormatter = {\n    (value: number): string\n}\n\nexport type ChartCurveType = \"linear\" | \"natural\" | \"step\"\n\nexport type BaseChartProps = {\n    /**\n     * The data to be displayed in the chart.\n     * An array of objects. Each object represents a data point.\n     */\n    data: any[] | null | undefined\n    /**\n     *  Data categories. Each string represents a key in a data object.\n     *  e.g. [\"Jan\", \"Feb\", \"Mar\"]\n     */\n    categories: string[]\n    /**\n     * The key to map the data to the axis. It should match the key in the data object.\n     * e.g. \"value\"\n     */\n    index: string\n    /**\n     * Color palette to be used in the chart.\n     */\n    colors?: ChartColor[]\n    /**\n     * Changes the text formatting for the y-axis values.\n     */\n    valueFormatter?: ChartValueFormatter\n    /**\n     * Show only the first and last elements in the x-axis. Great for smaller charts or sparklines.\n     * @default false\n     */\n    startEndOnly?: boolean\n    /**\n     * Controls the visibility of the X axis.\n     * @default true\n     */\n    showXAxis?: boolean\n    /**\n     * Controls the visibility of the Y axis.\n     * @default true\n     */\n    showYAxis?: boolean\n    /**\n     * Controls width of the vertical axis.\n     * @default 56\n     */\n    yAxisWidth?: number\n    /**\n     * Sets an animation to the chart when it is loaded.\n     * @default true\n     */\n    showAnimation?: boolean\n    /**\n     * Controls the visibility of the tooltip.\n     * @default true\n     */\n    showTooltip?: boolean\n    /**\n     * Controls the visibility of the legend.\n     * @default true\n     */\n    showLegend?: boolean\n    /**\n     * Controls the visibility of the grid lines.\n     * @default true\n     */\n    showGridLines?: boolean\n    /**\n     * Adjusts the minimum value in relation to the magnitude of the data.\n     * @default false\n     */\n    autoMinValue?: boolean\n    /**\n     * Sets the minimum value of the shown chart data.\n     */\n    minValue?: number\n    /**\n     * Sets the maximum value of the shown chart data.\n     */\n    maxValue?: number\n    /**\n     * Controls if the ticks of a numeric axis are displayed as decimals or not.\n     * @default true\n     */\n    allowDecimals?: boolean\n    /**\n     * Element to be displayed when there is no data.\n     * @default `<></>`\n     */\n    emptyDisplay?: React.ReactElement\n}\n"
      },
      {
        "name": "utils.ts",
        "dir": "charts",
        "content": "import { ChartValueFormatter } from \"../charts\"\nimport { ChartColor } from \"./color-theme\"\n\n/* -------------------------------------------------------------------------------------------------\n * Chart Utils\n * -----------------------------------------------------------------------------------------------*/\n\nexport const constructCategoryColors = (\n    categories: string[],\n    colors: ChartColor[],\n): Map<string, ChartColor> => {\n    const categoryColors = new Map<string, ChartColor>()\n    categories.forEach((category, idx) => {\n        categoryColors.set(category, colors[idx] ?? \"gray\")\n    })\n    return categoryColors\n}\n\n/**\n * @internal\n */\nexport const getYAxisDomain = (\n    autoMinValue: boolean,\n    minValue: number | undefined,\n    maxValue: number | undefined,\n) => {\n    const minDomain = autoMinValue ? \"auto\" : minValue ?? 0\n    const maxDomain = maxValue ?? \"auto\"\n    return [minDomain, maxDomain]\n}\n\nexport const defaultValueFormatter: ChartValueFormatter = (value: number) => value.toString()\n\n/* -------------------------------------------------------------------------------------------------\n * DonutChart Utils\n * -----------------------------------------------------------------------------------------------*/\n\nexport const parseChartData = (data: any[], colors: ChartColor[]) =>\n    data.map((dataPoint: any, idx: number) => {\n        const baseColor = idx < colors.length ? colors[idx] : \"brand\"\n        return {\n            ...dataPoint,\n            // explicitly adding color key if not present for tooltip coloring\n            color: baseColor,\n            fill: `var(--${baseColor})`, // Color\n        }\n    })\n\nconst sumNumericArray = (arr: number[]) =>\n    arr.reduce((prefixSum, num) => prefixSum + num, 0)\n\nconst calculateDefaultLabel = (data: any[], category: string) =>\n    sumNumericArray(data.map((dataPoint) => dataPoint[category]))\n\nexport const parseChartLabelInput = (\n    labelInput: string | undefined,\n    valueFormatter: ChartValueFormatter,\n    data: any[],\n    category: string,\n) => (labelInput ? labelInput : valueFormatter(calculateDefaultLabel(data, category)))\n"
      }
    ]
  },
  {
    "component": "checkbox",
    "name": "Checkbox",
    "dependencies": [
      [
        "@radix-ui/react-checkbox",
        "^1.1.2",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "checkbox-group.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\n\nimport { cn } from \"../core/styling\"\nimport * as React from \"react\"\nimport { Checkbox, CheckboxProps } from \".\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { hiddenInputStyles } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroup\n * -----------------------------------------------------------------------------------------------*/\n\ntype CheckboxGroupContextValue = {\n    group_size: CheckboxProps[\"size\"]\n}\n\nexport const __CheckboxGroupContext = React.createContext<CheckboxGroupContextValue | null>(null)\n\nexport type CheckboxGroupOption = { value: string, label?: React.ReactNode, disabled?: boolean, readonly?: boolean }\n\nexport type CheckboxGroupProps = BasicFieldOptions & {\n    /**\n     * The value of the checkbox group.\n     */\n    value?: string[]\n    /**\n     * The default value of the checkbox group when uncontrolled.\n     */\n    defaultValue?: string[]\n    /**\n     * Callback invoked when the value of the checkbox group changes.\n     */\n    onValueChange?: (value: string[]) => void\n    /**\n     * The size of the checkboxes.\n     */\n    size?: CheckboxProps[\"size\"]\n    /**\n     * The options of the checkbox group.\n     */\n    options: CheckboxGroupOption[]\n    /**\n     * Class names applied to the container.\n     */\n    stackClass?: string\n    /**\n     * Class names applied to each checkbox container.\n     */\n    itemContainerClass?: string\n    /**\n     * Class names applied to each checkbox label.\n     */\n    itemLabelClass?: string\n    /**\n     * Class names applied to each checkbox button.\n     */\n    itemClass?: string\n    /**\n     * Class names applied to each checkbox check icon.\n     */\n    itemCheckIconClass?: string\n}\n\nexport const CheckboxGroup = React.forwardRef<HTMLInputElement, CheckboxGroupProps>((props, ref) => {\n\n    const [{\n        value: controlledValue,\n        defaultValue = [],\n        onValueChange,\n        stackClass,\n        itemLabelClass,\n        itemClass,\n        itemContainerClass,\n        itemCheckIconClass,\n        options,\n        size = undefined,\n    }, basicFieldProps] = extractBasicFieldProps<CheckboxGroupProps>(props, React.useId())\n\n    const [value, setValue] = React.useState<string[]>(controlledValue ?? defaultValue)\n\n    const handleUpdateValue = React.useCallback((v: string) => {\n        return (checked: boolean | \"indeterminate\") => {\n            setValue(p => {\n                const newArr = checked === true\n                    ? [...p, ...(p.includes(v) ? [] : [v])]\n                    : checked === false\n                        ? p.filter(v1 => v1 !== v)\n                        : [...p]\n                onValueChange?.(newArr)\n                return newArr\n            })\n        }\n    }, [])\n\n    React.useEffect(() => {\n        if (controlledValue !== undefined) {\n            setValue(controlledValue)\n        }\n    }, [controlledValue])\n\n\n    return (\n        <__CheckboxGroupContext.Provider\n            value={{\n                group_size: size,\n            }}\n        >\n            <BasicField {...basicFieldProps}>\n                <div className={cn(\"UI-CheckboxGroup__stack space-y-1\", stackClass)}>\n                    {options.map((opt) => (\n                        <Checkbox\n                            key={opt.value}\n                            label={opt.label}\n                            value={value.includes(opt.value)}\n                            onValueChange={handleUpdateValue(opt.value)}\n                            hideError\n                            error={basicFieldProps.error}\n                            className={itemClass}\n                            labelClass={itemLabelClass}\n                            containerClass={itemContainerClass}\n                            checkIconClass={itemCheckIconClass}\n                            disabled={basicFieldProps.disabled || opt.disabled}\n                            readonly={basicFieldProps.readonly || opt.readonly}\n                            tabIndex={0}\n                        />\n                    ))}\n                </div>\n\n                <input\n                    ref={ref}\n                    type=\"text\"\n                    id={basicFieldProps.name}\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={basicFieldProps.required\n                        ? (!!value.length ? JSON.stringify(value) : \"\")\n                        : JSON.stringify(value)}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                />\n\n            </BasicField>\n        </__CheckboxGroupContext.Provider>\n    )\n\n})\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"
      },
      {
        "name": "checkbox.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\n\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { __CheckboxGroupContext } from \"../checkbox\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { hiddenInputStyles } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CheckboxAnatomy = defineStyleAnatomy({\n    container: cva(\"UI-Checkbox__container inline-flex gap-2 items-center\"),\n    root: cva([\n        \"UI-Checkbox__root\",\n        \"appearance-none peer block relative overflow-hidden transition h-5 w-5 shrink-0 text-white rounded-md ring-offset-1 border ring-offset-[--background]\",\n        \"border-gray-300 dark:border-gray-700\",\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] disabled:cursor-not-allowed data-[disabled=true]:opacity-50\",\n        \"data-[state=unchecked]:bg-white dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\n        \"data-[state=unchecked]:hover:bg-gray-100 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\n        \"data-[state=checked]:bg-brand dark:data-[state=checked]:bg-brand data-[state=checked]:border-brand\", // Checked\n        \"data-[state=indeterminate]:bg-[--muted] dark:data-[state=indeterminate]:bg-gray-700 data-[state=indeterminate]:text-white data-[state=indeterminate]:border-transparent\", // Checked\n        \"data-[error=true]:border-red-500 data-[error=true]:dark:border-red-500 data-[error=true]:data-[state=checked]:border-red-500 data-[error=true]:dark:data-[state=checked]:border-red-500\", // Error\n    ], {\n        variants: {\n            size: {\n                md: \"h-5 w-5\",\n                lg: \"h-6 w-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    label: cva([\n        \"UI-Checkbox_label\",\n        \"font-normal\",\n        \"data-[disabled=true]:opacity-50\",\n    ], {\n        variants: {\n            size: {\n                md: \"text-md\",\n                lg: \"text-lg\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    indicator: cva([\n        \"UI-Checkbox__indicator\",\n        \"flex h-full w-full items-center justify-center relative\",\n    ]),\n    checkIcon: cva(\"UI-Checkbox__checkIcon absolute\", {\n        variants: {\n            size: {\n                md: \"h-4 w-4\",\n                lg: \"h-5 w-5\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CheckboxProps =\n    BasicFieldOptions &\n    VariantProps<typeof CheckboxAnatomy.label> &\n    ComponentAnatomy<typeof CheckboxAnatomy> &\n    Omit<React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>,\n        \"value\" | \"checked\" | \"disabled\" | \"required\" | \"onCheckedChange\" | \"defaultValue\"> & {\n    /**\n     * If true, no error message will be shown when the field is invalid.\n     */\n    hideError?: boolean\n    /**\n     * The size of the checkbox.\n     */\n    value?: boolean | \"indeterminate\"\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: boolean | \"indeterminate\"\n    /**\n     * Callback fired when the value changes\n     */\n    onValueChange?: (value: boolean | \"indeterminate\") => void\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>,\n}\n\nexport const Checkbox = React.forwardRef<HTMLButtonElement, CheckboxProps>((props, ref) => {\n\n    const [{\n        className,\n        hideError,\n        containerClass,\n        checkIconClass,\n        labelClass,\n        indicatorClass,\n        onValueChange,\n        defaultValue,\n        value: controlledValue,\n        size,\n        inputRef,\n        ...rest\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps<CheckboxProps>(props, React.useId())\n\n    const groupContext = React.useContext(__CheckboxGroupContext)\n\n    const _size = groupContext?.group_size ?? size\n\n    const isFirst = React.useRef(true)\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [_value, _setValue] = React.useState<boolean | \"indeterminate\">(controlledValue ?? defaultValue ?? false)\n\n    const handleOnValueChange = React.useCallback((value: boolean) => {\n        _setValue(value)\n        onValueChange?.(value)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            _setValue(controlledValue ?? false)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    return (\n        <BasicField\n            fieldClass=\"flex gap-2\"\n            {...basicFieldProps}\n            error={hideError ? undefined : basicFieldProps.error} // The error message hidden when `hideError` is true\n        >\n            <label\n                className={cn(\n                    CheckboxAnatomy.container(),\n                    containerClass,\n                )}\n                htmlFor={basicFieldProps.id}\n            >\n                <CheckboxPrimitive.Root\n                    ref={mergeRefs([buttonRef, ref])}\n                    id={basicFieldProps.id}\n                    className={cn(CheckboxAnatomy.root({ size: _size }), className)}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-error={!!basicFieldProps.error}\n                    data-disabled={basicFieldProps.disabled}\n                    aria-readonly={basicFieldProps.readonly}\n                    data-readonly={basicFieldProps.readonly}\n                    checked={_value}\n                    onCheckedChange={handleOnValueChange}\n                    {...rest}\n                >\n                    <CheckboxPrimitive.CheckboxIndicator className={cn(CheckboxAnatomy.indicator(), indicatorClass)}>\n                        {(_value !== \"indeterminate\") && <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 16 16\"\n                            stroke=\"currentColor\"\n                            fill=\"currentColor\"\n                            className={cn(CheckboxAnatomy.checkIcon({ size: _size }), checkIconClass)}\n                        >\n                            <path\n                                d=\"M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z\"\n                            />\n                        </svg>}\n\n                        {_value === \"indeterminate\" && <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            className={cn(CheckboxAnatomy.checkIcon({ size: _size }), checkIconClass)}\n                        >\n                            <line x1=\"5\" x2=\"19\" y1=\"12\" y2=\"12\" />\n                        </svg>}\n                    </CheckboxPrimitive.CheckboxIndicator>\n                </CheckboxPrimitive.Root>\n                {!!label &&\n                    <label\n                        className={cn(CheckboxAnatomy.label({ size: _size }), labelClass)}\n                        htmlFor={basicFieldProps.id}\n                        data-disabled={basicFieldProps.disabled}\n                        data-checked={_value === true}\n                    >\n                        {label}\n                    </label>\n                }\n\n                <input\n                    ref={inputRef}\n                    type=\"checkbox\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={_value === \"indeterminate\" ? \"indeterminate\" : _value ? \"on\" : \"off\"}\n                    checked={basicFieldProps.required ? _value === true : true}\n                    aria-hidden=\"true\"\n                    required={controlledValue === undefined && basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n            </label>\n        </BasicField>\n    )\n\n})\n\nCheckbox.displayName = \"Checkbox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "checkbox",
        "content": "export * from \"./checkbox\"\nexport * from \"./checkbox-group\"\n"
      }
    ]
  },
  {
    "component": "collapsible",
    "name": "Collapsible",
    "dependencies": [
      [
        "@radix-ui/react-collapsible",
        "^1.1.1",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "collapsible.tsx",
        "dir": "collapsible",
        "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nexport const Collapsible = CollapsiblePrimitive.Root\n\nCollapsible.displayName = \"Collapsible\"\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>\n\nexport const CollapsibleTrigger = React.forwardRef<HTMLButtonElement, CollapsibleTriggerProps>((props, ref) => {\n    const { children, ...rest } = props\n\n    return (\n        <CollapsiblePrimitive.Trigger\n            ref={ref}\n            asChild\n            {...rest}\n        >\n            {children}\n        </CollapsiblePrimitive.Trigger>\n    )\n})\n\nCollapsibleTrigger.displayName = \"CollapsibleTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>\n\nexport const CollapsibleContent = React.forwardRef<HTMLDivElement, CollapsibleContentProps>((props, ref) => {\n\n    return (\n        <CollapsiblePrimitive.Content\n            ref={ref}\n            {...props}\n        />\n    )\n})\n\nCollapsibleContent.displayName = \"CollapsibleContent\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "collapsible",
        "content": "export * from \"./collapsible\"\n"
      }
    ]
  },
  {
    "component": "combobox",
    "name": "Combobox",
    "dependencies": [
      [
        "fast-deep-equal",
        "^3.1.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "command",
      "input",
      "popover"
    ],
    "files": [
      {
        "name": "combobox.tsx",
        "dir": "combobox",
        "content": "\"use client\"\n\nimport { mergeRefs } from \"../core/utils\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandProps } from \"../command\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Popover } from \"../popover\"\nimport equal from \"fast-deep-equal\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ComboboxAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Combobox__root\",\n        \"justify-between h-auto\",\n    ], {\n        variants: {\n            size: {\n                sm: \"min-h-8 px-2 py-1 text-sm\",\n                md: \"min-h-10 px-3 py-2 \",\n                lg: \"min-h-12 px-4 py-3 text-md\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        }\n    }),\n    popover: cva([\n        \"UI-Combobox__popover\",\n        \"w-[--radix-popover-trigger-width] p-0\",\n    ]),\n    checkIcon: cva([\n        \"UI-Combobox__checkIcon\",\n        \"h-4 w-4\",\n        \"data-[selected=true]:opacity-100 data-[selected=false]:opacity-0\",\n    ]),\n    item: cva([\n        \"UI-Combobox__item\",\n        \"flex gap-1 items-center bg-gray-100 dark:bg-gray-800 px-2 pr-1 rounded-[--radius] max-w-96\",\n    ]),\n    placeholder: cva([\n        \"UI-Combobox__placeholder\",\n        \"text-[--muted] truncate\",\n    ]),\n    inputValuesContainer: cva([\n        \"UI-Combobox__inputValuesContainer\",\n        \"grow flex overflow-hidden gap-2\",\n    ]),\n    chevronIcon: cva([\n        \"UI-Combobox__chevronIcon\",\n        \"ml-2 h-4 w-4 shrink-0 opacity-50\",\n    ]),\n    removeItemButton: cva([\n        \"UI-Badge__removeItemButton\",\n        \"text-lg cursor-pointer transition ease-in hover:opacity-60\",\n    ]),\n})\n\n\n/* -------------------------------------------------------------------------------------------------\n * Combobox\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ComboboxOption = { value: string, textValue?: string, label: React.ReactNode }\n\nexport type ComboboxProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\"> &\n    BasicFieldOptions &\n    InputStyling &\n    ComponentAnatomy<typeof ComboboxAnatomy> & {\n    /**\n     * The selected values\n     */\n    value?: string[]\n    /**\n     * Callback fired when the selected values change\n     */\n    onValueChange?: (value: string[]) => void\n    /**\n     * Callback fired when the search input changes\n     */\n    onTextChange?: (value: string) => void\n    /**\n     * Additional props for the command component\n     */\n    commandProps?: CommandProps\n    /**\n     * The options to display in the dropdown\n     */\n    options: ComboboxOption[]\n    /**\n     * The message to display when there are no options\n     */\n    emptyMessage: React.ReactNode\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * Allow multiple values to be selected\n     */\n    multiple?: boolean\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: string[]\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n}\n\nexport const Combobox = React.forwardRef<HTMLButtonElement, ComboboxProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<ComboboxProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        popoverClass,\n        checkIconClass,\n        itemClass,\n        placeholderClass,\n        inputValuesContainerClass,\n        chevronIconClass,\n        removeItemButtonClass,\n        /**/\n        commandProps,\n        options,\n        emptyMessage,\n        placeholder,\n        value: controlledValue,\n        onValueChange,\n        onTextChange,\n        multiple = false,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<ComboboxProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const valueRef = React.useRef<string[]>(controlledValue || defaultValue || [])\n    const [value, setValue] = React.useState<string[]>(controlledValue || defaultValue || [])\n\n    const [open, setOpen] = React.useState(false)\n\n    const handleUpdateValue = React.useCallback((value: string[]) => {\n        setValue(value)\n        valueRef.current = value\n    }, [])\n\n    React.useEffect(() => {\n        if (controlledValue !== undefined && !equal(controlledValue, valueRef.current)) {\n            handleUpdateValue(controlledValue)\n        }\n    }, [controlledValue])\n\n    React.useEffect(() => {\n        onValueChange?.(value)\n    }, [value])\n\n    const selectedOptions = options.filter((option) => value.includes(option.value))\n\n    const selectedValues = (\n        (!!value.length && !!selectedOptions.length) ?\n            multiple ? selectedOptions.map((option) => <div key={option.value} className={cn(ComboboxAnatomy.item(), itemClass)}>\n                <span className=\"truncate\">{option.textValue || option.value}</span>\n                <span\n                    className={cn(ComboboxAnatomy.removeItemButton(), \"rounded-full\", removeItemButtonClass)} onClick={(e) => {\n                    e.preventDefault()\n                    handleUpdateValue(value.filter((v) => v !== option.value))\n                    setOpen(false)\n                }}\n                >\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\n                        fill=\"currentColor\"\n                    >\n                        <path\n                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n                        ></path>\n                    </svg>\n                </span>\n            </div>) : <span className=\"truncate\">{selectedOptions[0].label}</span>\n            : <span className={cn(ComboboxAnatomy.placeholder(), placeholderClass)}>{placeholder}</span>\n    )\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <Popover\n                    open={open}\n                    onOpenChange={setOpen}\n                    className={cn(\n                        ComboboxAnatomy.popover(),\n                        popoverClass,\n                    )}\n                    trigger={<button\n                        ref={mergeRefs([buttonRef, ref])}\n                        id={basicFieldProps.id}\n                        role=\"combobox\"\n                        aria-expanded={open}\n                        className={cn(\n                            InputAnatomy.root({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                isDisabled: !!basicFieldProps.disabled,\n                                isReadonly: !!basicFieldProps.readonly,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            ComboboxAnatomy.root({\n                                size,\n                            }),\n                        )}\n                        {...rest}\n                    >\n                        <div className={cn(ComboboxAnatomy.inputValuesContainer())}>\n                            {selectedValues}\n                        </div>\n                        <div className=\"flex items-center\">\n                            {(!!value.length && !!selectedOptions.length && !multiple) && (\n                                <span\n                                    className={cn(ComboboxAnatomy.removeItemButton(), removeItemButtonClass)} onClick={(e) => {\n                                    e.preventDefault()\n                                    handleUpdateValue([])\n                                    setOpen(false)\n                                }}\n                                >\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\n                                        fill=\"currentColor\"\n                                    >\n                                        <path\n                                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n                                        ></path>\n                                    </svg>\n                                </span>\n                            )}\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                viewBox=\"0 0 24 24\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                className={cn(\n                                    ComboboxAnatomy.chevronIcon(),\n                                    chevronIconClass,\n                                )}\n                            >\n                                <path d=\"m7 15 5 5 5-5\" />\n                                <path d=\"m7 9 5-5 5 5\" />\n                            </svg>\n                        </div>\n                    </button>}\n                >\n                    <Command\n                        inputContainerClass=\"py-1\"\n                        {...commandProps}\n                    >\n                        <CommandInput\n                            placeholder={placeholder}\n                            onValueChange={onTextChange}\n                        />\n                        <CommandList>\n                            <CommandEmpty>{emptyMessage}</CommandEmpty>\n                            <CommandGroup>\n                                {options.map((option) => (\n                                    <CommandItem\n                                        key={option.value}\n                                        value={option.textValue || option.value}\n                                        onSelect={(currentValue) => {\n                                            const _option = options.find(n => (n.textValue || n.value).toLowerCase() === currentValue.toLowerCase())\n                                            if (_option) {\n                                                if (!multiple) {\n                                                    handleUpdateValue(value.includes(_option.value) ? [] : [_option.value])\n                                                } else {\n                                                    handleUpdateValue(\n                                                        !value.includes(_option.value)\n                                                            ? [...value, _option.value]\n                                                            : value.filter((v) => v !== _option.value),\n                                                    )\n                                                }\n                                            }\n                                            setOpen(false)\n                                        }}\n                                        leftIcon={\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                viewBox=\"0 0 24 24\"\n                                                fill=\"none\"\n                                                stroke=\"currentColor\"\n                                                strokeWidth=\"2\"\n                                                strokeLinecap=\"round\"\n                                                strokeLinejoin=\"round\"\n                                                className={cn(\n                                                    ComboboxAnatomy.checkIcon(),\n                                                    checkIconClass,\n                                                )}\n                                                data-selected={value.includes(option.value)}\n                                            >\n                                                <path d=\"M20 6 9 17l-5-5\" />\n                                            </svg>\n                                        }\n                                    >\n                                        {option.label}\n                                    </CommandItem>\n                                ))}\n                            </CommandGroup>\n                        </CommandList>\n                    </Command>\n                </Popover>\n\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={basicFieldProps.required ? (!!value.length ? JSON.stringify(value) : \"\") : JSON.stringify(value)}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n})\n\nCombobox.displayName = \"Combobox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "combobox",
        "content": "export * from \"./combobox\"\n"
      }
    ]
  },
  {
    "component": "command",
    "name": "Command",
    "dependencies": [
      [
        "cmdk",
        "^1.0.1",
        ""
      ]
    ],
    "family": [
      "modal",
      "input"
    ],
    "files": [
      {
        "name": "command.tsx",
        "dir": "command",
        "content": "\"use client\"\n\nimport { Modal, ModalProps } from \"../modal\"\nimport { cva } from \"class-variance-authority\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { InputAnatomy } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CommandAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Command__root\",\n        \"flex h-full w-full flex-col overflow-hidden rounded-md bg-[--paper] text-[--foreground]\",\n    ]),\n    inputContainer: cva([\n        \"UI-Command__input\",\n        \"flex items-center px-3 py-2\",\n        \"cmdk-input-wrapper\",\n    ]),\n    inputIcon: cva([\n        \"UI-Command__inputIcon\",\n        \"mr-2 h-5 w-5 shrink-0 opacity-50\",\n    ]),\n    list: cva([\n        \"UI-Command__list\",\n        \"max-h-64 overflow-y-auto overflow-x-hidden\",\n    ]),\n    empty: cva([\n        \"UI-Command__empty\",\n        \"py-6 text-center text-base text-[--muted]\",\n    ]),\n    group: cva([\n        \"UI-Command__group\",\n        \"overflow-hidden p-1 text-[--foreground]\",\n        \"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-sm [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-[--muted]\",\n    ]),\n    separator: cva([\n        \"UI-Command__separator\",\n        \"-mx-1 h-px bg-[--border]\",\n    ]),\n    item: cva([\n        \"UI-Command__item\",\n        \"relative flex cursor-default select-none items-center rounded-[--radius] px-2 py-1.5 text-base outline-none\",\n        \"aria-selected:bg-[--subtle] data-[disable=true]:pointer-events-none data-[disable=true]:opacity-50\",\n    ]),\n    itemIconContainer: cva([\n        \"UI-Command__itemIconContainer\",\n        \"mr-2 text-base shrink-0 w-4\",\n    ]),\n    shortcut: cva([\n        \"UI-Command__shortcut\",\n        \"ml-auto text-xs tracking-widest text-[--muted]\",\n    ]),\n})\n\nexport const CommandDialogAnatomy = defineStyleAnatomy({\n    content: cva([\n        \"UI-CommandDialog__content\",\n        \"overflow-hidden p-0\",\n    ]),\n    command: cva([\n        \"UI-CommandDialog__command\",\n        \"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-[--muted]\",\n        \"[&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pb-2 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5\",\n        \"[&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-2 [&_[cmdk-item]_svg]:h-4 [&_[cmdk-item]_svg]:w-5\",\n    ]),\n})\n\n\n/* -------------------------------------------------------------------------------------------------\n * Command\n * -----------------------------------------------------------------------------------------------*/\n\nconst __CommandAnatomyContext = React.createContext<ComponentAnatomy<typeof CommandAnatomy>>({})\n\nexport type CommandProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive> & ComponentAnatomy<typeof CommandAnatomy>\n\nexport const Command = React.forwardRef<HTMLDivElement, CommandProps>((props, ref) => {\n    const {\n        className,\n        inputContainerClass,\n        inputIconClass,\n        listClass,\n        emptyClass,\n        groupClass,\n        separatorClass,\n        itemClass,\n        itemIconContainerClass,\n        shortcutClass,\n        loop = true,\n        ...rest\n    } = props\n\n    return (\n        <__CommandAnatomyContext.Provider\n            value={{\n                inputContainerClass,\n                inputIconClass,\n                listClass,\n                emptyClass,\n                groupClass,\n                separatorClass,\n                itemClass,\n                itemIconContainerClass,\n                shortcutClass,\n            }}\n        >\n            <CommandPrimitive\n                ref={ref}\n                className={cn(CommandAnatomy.root(), className)}\n                loop={loop}\n                {...rest}\n            />\n        </__CommandAnatomyContext.Provider>\n    )\n})\nCommand.displayName = CommandPrimitive.displayName\n\n/* -------------------------------------------------------------------------------------------------\n * CommandInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandInputProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n    & Pick<ComponentAnatomy<typeof CommandAnatomy>, \"inputContainerClass\" | \"inputIconClass\">\n\nexport const CommandInput = React.forwardRef<HTMLInputElement, CommandInputProps>((props, ref) => {\n    const {\n        className,\n        inputContainerClass,\n        inputIconClass,\n        ...rest\n    } = props\n\n    const {\n        inputContainerClass: _inputContainerClass,\n        inputIconClass: _inputIconClass,\n    } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <div className={cn(CommandAnatomy.inputContainer(), _inputContainerClass, inputContainerClass)} cmdk-input-wrapper=\"\">\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={cn(CommandAnatomy.inputIcon(), _inputIconClass, inputIconClass)}\n            >\n                <circle cx=\"11\" cy=\"11\" r=\"8\" />\n                <path d=\"m21 21-4.3-4.3\" />\n            </svg>\n            <CommandPrimitive.Input\n                ref={ref}\n                className={cn(InputAnatomy.root({\n                    intent: \"unstyled\",\n                    size: \"sm\",\n                    isDisabled: rest.disabled,\n                }), className)}\n                {...rest}\n            />\n        </div>\n    )\n})\nCommandInput.displayName = \"CommandInput\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandList\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandListProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n\nexport const CommandList = React.forwardRef<HTMLDivElement, CommandListProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { listClass } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <CommandPrimitive.List\n            ref={ref}\n            className={cn(CommandAnatomy.list(), listClass, className)}\n            {...rest}\n        />\n    )\n})\nCommandList.displayName = \"CommandList\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandEmpty\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandEmptyProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n\nexport const CommandEmpty = React.forwardRef<HTMLDivElement, CommandEmptyProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { emptyClass } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <CommandPrimitive.Empty\n            ref={ref}\n            className={cn(CommandAnatomy.empty(), emptyClass, className)}\n            {...rest}\n        />\n    )\n})\nCommandEmpty.displayName = \"CommandEmpty\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandGroupProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n\nexport const CommandGroup = React.forwardRef<HTMLDivElement, CommandGroupProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { groupClass } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <CommandPrimitive.Group\n            ref={ref}\n            className={cn(CommandAnatomy.group(), groupClass, className)}\n            {...rest}\n        />\n    )\n})\nCommandGroup.displayName = \"CommandGroup\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandSeparatorProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n\nexport const CommandSeparator = React.forwardRef<HTMLDivElement, CommandSeparatorProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { separatorClass } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <CommandPrimitive.Separator\n            ref={ref}\n            className={cn(CommandAnatomy.separator(), separatorClass, className)}\n            {...rest}\n        />\n    )\n})\nCommandSeparator.displayName = \"CommandSeparator\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandItemProps =\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n    & Pick<ComponentAnatomy<typeof CommandAnatomy>, \"itemIconContainerClass\">\n    & { leftIcon?: React.ReactNode }\n\nexport const CommandItem = React.forwardRef<HTMLDivElement, CommandItemProps>((props, ref) => {\n    const { className, itemIconContainerClass, leftIcon, children, ...rest } = props\n\n    const {\n        itemClass,\n        itemIconContainerClass: _itemIconContainerClass,\n    } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <CommandPrimitive.Item\n            ref={ref}\n            className={cn(CommandAnatomy.item(), itemClass, className)}\n            {...rest}\n        >\n            {leftIcon && (\n                <span className={cn(CommandAnatomy.itemIconContainer(), _itemIconContainerClass, itemIconContainerClass)}>\n                    {leftIcon}\n                </span>\n            )}\n            {children}\n        </CommandPrimitive.Item>\n    )\n})\nCommandItem.displayName = \"CommandItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandShortcut\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandShortcutProps = React.ComponentPropsWithoutRef<\"span\">\n\nexport const CommandShortcut = React.forwardRef<HTMLSpanElement, CommandShortcutProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { shortcutClass } = React.useContext(__CommandAnatomyContext)\n\n    return (\n        <span\n            ref={ref}\n            className={cn(CommandAnatomy.shortcut(), shortcutClass, className)}\n            {...rest}\n        />\n    )\n})\nCommandShortcut.displayName = \"CommandShortcut\"\n\n/* -------------------------------------------------------------------------------------------------\n * CommandDialog\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CommandDialogProps = ModalProps & ComponentAnatomy<typeof CommandDialogAnatomy>\n\nexport const CommandDialog = (props: CommandDialogProps) => {\n    const { children, commandClass, contentClass, ...rest } = props\n    return (\n        <Modal\n            {...rest}\n            contentClass={cn(CommandDialogAnatomy.content(), contentClass)}\n        >\n            <Command className={cn(CommandDialogAnatomy.command(), commandClass)}>\n                {children}\n            </Command>\n        </Modal>\n    )\n}\n"
      },
      {
        "name": "index.tsx",
        "dir": "command",
        "content": "export * from \"./command\"\n"
      }
    ]
  },
  {
    "component": "core",
    "name": "Core",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "hooks.ts",
        "dir": "core",
        "content": "import * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * useEventListener\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useEventListener<\n    KW extends keyof WindowEventMap,\n    KH extends keyof HTMLElementEventMap,\n    KM extends keyof MediaQueryListEventMap,\n    T extends HTMLElement | MediaQueryList | void = void,\n>(\n    eventName: KW | KH | KM,\n    handler: (\n        event:\n            | WindowEventMap[KW]\n            | HTMLElementEventMap[KH]\n            | MediaQueryListEventMap[KM]\n            | Event,\n    ) => void,\n    element?: React.RefObject<T>,\n    options?: boolean | AddEventListenerOptions,\n) {\n    // Create a ref that stores handler\n    const savedHandler = React.useRef(handler)\n\n    useIsomorphicLayoutEffect(() => {\n        savedHandler.current = handler\n    }, [handler])\n\n    React.useEffect(() => {\n        // Define the listening target\n        const targetElement: T | Window = element?.current ?? window\n\n        if (!(targetElement && targetElement.addEventListener)) return\n\n        // Create event listener that calls handler function stored in ref\n        const listener: typeof handler = event => savedHandler.current(event)\n\n        targetElement.addEventListener(eventName, listener, options)\n\n        // Remove event listener on cleanup\n        return () => {\n            targetElement.removeEventListener(eventName, listener, options)\n        }\n    }, [eventName, element, options])\n}\n\n\n/* -------------------------------------------------------------------------------------------------\n * useIsomorphicLayoutEffect\n * -----------------------------------------------------------------------------------------------*/\n\nexport const useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? React.useLayoutEffect : React.useEffect\n\n/* -------------------------------------------------------------------------------------------------\n * useUpdateEffect\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useUpdateEffect(effect: React.EffectCallback, deps?: React.DependencyList) {\n    const isInitialMount = React.useRef(true)\n\n    React.useEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false\n        } else {\n            return effect()\n        }\n    }, deps)\n}\n"
      },
      {
        "name": "styling.ts",
        "dir": "core",
        "content": "import { cva } from \"class-variance-authority\"\nimport { ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport type Anatomy = { [key: string]: ReturnType<typeof cva> }\n\n// export type ComponentAnatomy<T extends Anatomy> = {\n//     [K in keyof T as `${string & K}Class`]?: string\n// }\n\nexport type ComponentAnatomy<T extends Anatomy> = {\n    [K in keyof T as K extends \"root\" ? never : `${string & K}Class`]?: string;\n}\n\n/**\n * @example\n * const ComponentAnatomy = defineStyleAnatomy({\n *    label: cva(null, {\n *       variants: {\n *          intent: {\n *             \"success\": \"\",\n *             \"alert\": \"\",\n *          },\n *       },\n *    }),\n *    ...\n * })\n *\n * type ComponentProps = ComponentWithAnatomy<typeof ComponentAnatomy>\n *\n * const MyComponent = React.forwardRef((props, forwardedRef) => {\n *   const { controlClass, ...rest }: ComponentProps = props\n *\n *   return (\n *      <div\n *          className={cn(ComponentAnatomy.control({ intent: \"success\" }, controlClass))}\n *          ref={forwardedRef}\n *      />\n *   )\n * })\n */\nexport function defineStyleAnatomy<A extends Anatomy = Anatomy>(config: A) {\n    return config\n}\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n"
      },
      {
        "name": "utils.ts",
        "dir": "core",
        "content": "import type * as React from \"react\"\n\nexport function mergeRefs<T = any>(\n    refs: Array<React.MutableRefObject<T> | React.LegacyRef<T> | undefined | null>,\n): React.RefCallback<T> {\n    return (value) => {\n        refs.forEach((ref) => {\n            if (typeof ref === \"function\") {\n                ref(value)\n            } else if (ref != null) {\n                (ref as React.MutableRefObject<T | null>).current = value\n            }\n        })\n    }\n}\n\nexport const isEmpty = (obj: any) => [Object, Array].includes((obj || {}).constructor) && !Object.entries((obj || {})).length\n\n"
      }
    ]
  },
  {
    "component": "currency-input",
    "name": "CurrencyInput",
    "dependencies": [
      [
        "react-currency-input-field",
        "^3.8.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "currency-input.tsx",
        "dir": "currency-input",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport CurrencyInputPrimitive from \"react-currency-input-field\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * CurrencyInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CurrencyInputIntlConfig = {\n    /**\n     * e.g. en-US\n     */\n    locale: string\n    /**\n     * e.g. USD\n     */\n    currency?: string\n}\n\nexport type CurrentInputValues = {\n    /**\n     * Value as float or null if empty\n     * e.g. \"1.99\" -> 1.99 | \"\" -> null\n     */\n    float: number | null\n    /**\n     * Value after applying formatting\n     * e.g. \"1000000\" -> \"1,000,0000\"\n     */\n    formatted: string\n    /**\n     * Non formatted value as string\n     */\n    value: string\n}\n\nexport type CurrencyInputProps =\n    Omit<React.ComponentPropsWithoutRef<\"input\">, \"size\" | \"disabled\" | \"defaultValue\"> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * Allow decimals\n     * @default true\n     */\n    allowDecimals?: boolean\n    /**\n     * Allow user to enter negative value\n     * @default true\n     */\n    allowNegativeValue?: boolean\n    /**\n     * Maximum characters the user can enter\n     */\n    maxLength?: number\n    /**\n     * Limit length of decimals allowed\n     * @default 2\n     */\n    decimalsLimit?: number\n    /**\n     * Specify decimal scale for padding/trimming\n     * e.g. 1.5 -> 1.50 | 1.234 -> 1.23\n     */\n    decimalScale?: number\n    /**\n     * Default value if uncontrolled\n     */\n    defaultValue?: number | string\n    /**\n     * Value will always have the specified length of decimals\n     * e.g. 123 -> 1.23\n     * Note: This formatting only happens onBlur\n     */\n    fixedDecimalLength?: number\n    /**\n     * Placeholder if there is no value\n     */\n    placeholder?: string\n    /**\n     * Include a prefix\n     * e.g. Â£\n     */\n    prefix?: string\n    /**\n     * Include a suffix\n     * e.g. â¬\n     */\n    suffix?: string\n    /**\n     * Incremental value change on arrow down and arrow up key press\n     */\n    step?: number\n    /**\n     * Separator between integer part and fractional part of value.\n     */\n    decimalSeparator?: string\n    /**\n     * Separator between thousand, million and billion.\n     */\n    groupSeparator?: string\n    /**\n     * Disable auto adding separator between values\n     * e.g. 1000 -> 1,000\n     * @default false\n     */\n    disableGroupSeparators?: boolean\n    /**\n     * Disable abbreviations (m, k, b)\n     * @default false\n     */\n    disableAbbreviations?: boolean\n    /**\n     * International locale config\n     * e.g. { locale: 'ja-JP', currency: 'JPY' }\n     * Any prefix, groupSeparator or decimalSeparator options passed in will override Intl Locale config\n     */\n    intlConfig?: CurrencyInputIntlConfig\n    /**\n     * Transform the raw value form the input before parsing\n     */\n    transformRawValue?: (rawValue: string) => string\n    /**\n     * Callback invoked when value changes\n     */\n    onValueChange?: (value: (string | undefined), values?: CurrentInputValues) => void\n}\n\nexport const CurrencyInput = React.forwardRef<HTMLInputElement, CurrencyInputProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<CurrencyInputProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        /**/\n        value,\n        onValueChange,\n        transformRawValue,\n        intlConfig,\n        allowDecimals,\n        allowNegativeValue,\n        decimalsLimit,\n        decimalScale,\n        disabled,\n        fixedDecimalLength,\n        placeholder,\n        prefix,\n        suffix,\n        step,\n        decimalSeparator,\n        groupSeparator,\n        disableGroupSeparators,\n        disableAbbreviations,\n        defaultValue,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<CurrencyInputProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <CurrencyInputPrimitive\n                    ref={ref}\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name}\n                    defaultValue={defaultValue}\n                    className={cn(\n                        \"form-input\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            isReadonly: !!basicFieldProps.readonly,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    required={basicFieldProps.required}\n                    value={value}\n                    onValueChange={(value, _, values) => onValueChange?.(value, values)}\n                    transformRawValue={transformRawValue}\n                    intlConfig={intlConfig}\n                    allowDecimals={allowDecimals}\n                    allowNegativeValue={allowNegativeValue}\n                    decimalsLimit={decimalsLimit}\n                    decimalScale={decimalScale}\n                    fixedDecimalLength={fixedDecimalLength}\n                    placeholder={placeholder}\n                    prefix={prefix}\n                    suffix={suffix}\n                    step={step}\n                    decimalSeparator={decimalSeparator}\n                    groupSeparator={groupSeparator}\n                    disableGroupSeparators={disableGroupSeparators}\n                    disableAbbreviations={disableAbbreviations}\n                    {...rest}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nCurrencyInput.displayName = \"CurrencyInput\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "currency-input",
        "content": "export * from \"./currency-input\"\n"
      }
    ]
  },
  {
    "component": "datagrid",
    "name": "Datagrid",
    "dependencies": [
      [
        "@tanstack/react-table",
        "^8.20.5",
        ""
      ],
      [
        "zod",
        "^3.23.8",
        ""
      ],
      [
        "date-fns",
        "^4.1.0",
        ""
      ],
      [
        "fast-deep-equal",
        "^3.1.3",
        ""
      ]
    ],
    "family": [
      "button",
      "checkbox",
      "date-picker",
      "dropdown-menu",
      "radio-group",
      "select",
      "card",
      "loading-spinner",
      "number-input",
      "pagination",
      "skeleton",
      "text-input",
      "tooltip"
    ],
    "files": [
      {
        "name": "datagrid-cell-input-field.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\n\nimport { Cell, Row, Table } from \"@tanstack/react-table\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { z, ZodTypeAny } from \"zod\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { DataGridEditingHelper } from \"./helpers\"\nimport { DataGridValidationRowErrors } from \"./use-datagrid-editing\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DataGridCellInputFieldAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DataGridCellInputField__root\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DataGridCellInputField\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Context passed to a field in order to render a cell input\n * @example\n * withEditing({ field: (ctx: DataGridCellInputFieldContext) => <></> })\n */\nexport type DataGridEditingFieldContext<T> = {\n    value: T,\n    onChange: (value: T) => void\n    ref: React.MutableRefObject<any>\n}\n\n/**\n * @internal\n */\nexport type DataGridEditingValueUpdater<T extends Record<string, any>> = (\n    value: unknown,\n    row: Row<T>,\n    cell: Cell<T, unknown>,\n    zodType: ZodTypeAny | undefined,\n) => void\n\n/**\n * @internal\n */\nexport type DataGridCellInputFieldProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridCellInputFieldAnatomy> & {\n    /**\n     * Meta information about the field from the column definition\n     * - This is defined by the `withEditing` helper\n     */\n    meta: DataGridEditingHelper\n    /** Cell being edited */\n    cell: Cell<T, unknown>\n    /** Table instance */\n    table: Table<T>\n    /** Row being edited */\n    row: Row<T>\n    /** Errors coming from the built-in row validation (useDataGridEditing) */\n    rowErrors: DataGridValidationRowErrors\n    /** Emits updates to the hook (useDataGridEditing) */\n    onValueUpdated: DataGridEditingValueUpdater<T>\n    /** Field container class name */\n    className?: string\n}\n\nexport function DataGridCellInputField<Schema extends z.ZodObject<z.ZodRawShape>, T extends Record<string, any>, Key extends keyof z.infer<Schema>>\n(props: DataGridCellInputFieldProps<T>) {\n\n    const {\n        className,\n        cell,\n        table,\n        row,\n        rowErrors,\n        onValueUpdated,\n        meta: {\n            field,\n            zodType,\n            valueFormatter: _valueFormatter,\n        },\n    } = props\n    const defaultValueFormatter = (value: any) => value\n    const valueFormatter = (_valueFormatter ?? defaultValueFormatter) as (value: any) => any\n\n    const cellValue = valueFormatter(cell.getContext().getValue())\n    const inputRef = React.useRef<any>(null)\n\n    const [value, setValue] = React.useState<unknown>(cellValue)\n\n    React.useLayoutEffect(() => {\n        onValueUpdated(cellValue, row, cell, zodType)\n        inputRef.current?.focus()\n    }, [])\n\n    return (\n        <div className={cn(DataGridCellInputFieldAnatomy.root(), className)}>\n            {field({\n                value: value,\n                onChange: (value => {\n                    setValue(value)\n                    onValueUpdated(valueFormatter(value), row, cell, zodType)\n                }),\n                ref: inputRef,\n            }, {\n                rowErrors: rowErrors,\n                table: table,\n                row: row,\n                cell: cell,\n            })}\n        </div>\n    )\n\n}\n\nDataGridCellInputField.displayName = \"DataGridCellInputField\"\n"
      },
      {
        "name": "datagrid-filter.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\n\nimport { NumberInput } from \"@/workshop/number-input\"\nimport { Column } from \"@tanstack/react-table\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { DataGridAnatomy, DataGridFilteringHelper, getColumnHelperMeta, getValueFormatter } from \".\"\nimport { CloseButton } from \"../button\"\nimport { CheckboxGroup } from \"../checkbox\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { DateRangePicker } from \"../date-picker\"\nimport { DropdownMenu, DropdownMenuGroup, DropdownMenuItem } from \"../dropdown-menu\"\nimport { RadioGroup } from \"../radio-group\"\nimport { Select } from \"../select\"\nimport translations, { dateFnsLocales } from \"./locales\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DataGridFilterAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DataGridFilter__root\",\n        \"flex items-center max-w-full gap-2\",\n    ]),\n})\n\nexport const DataGridActiveFilterAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DataGridActiveFilter__root\",\n        \"py-1 px-2 rounded-[--radius] border flex gap-2 items-center\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DataGridFilter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridFilterProps<T extends Record<string, any>> = React.ComponentPropsWithoutRef<\"div\"> &\n    ComponentAnatomy<typeof DataGridFilterAnatomy> & {\n    column: Column<T>\n    onRemove: () => void\n    lng?: string\n}\n\nexport function DataGridFilter<T extends Record<string, any>>(props: DataGridFilterProps<T>) {\n\n    const {\n        children,\n        className,\n        column,\n        onRemove,\n        lng = \"en\",\n        ...rest\n    } = props\n\n    const filterParams = getColumnHelperMeta(column, \"filteringMeta\")!\n    const filterValue = React.useMemo(() => column.getFilterValue(), [column.getFilterValue()]) as any\n    const setFilterValue = React.useMemo(() => column.setFilterValue, [column.setFilterValue])\n    const icon = filterParams.icon\n\n    // Value formatter - if undefined, use the default behavior\n    const valueFormatter = filterParams.valueFormatter || getValueFormatter(column)\n\n    // Get the options\n    const options = filterParams.options ?? []\n\n    // Update handler\n    const handleUpdate = React.useCallback((value: any) => {\n        setFilterValue(value)\n    }, [])\n\n    return (\n        <div\n            className={cn(DataGridFilterAnatomy.root(), className)}\n            {...rest}\n        >\n            {(filterParams.type === \"select\" && (!options || options.length === 0)) && (\n                <div className=\"text-red-500\">/!\\ \"Select\" filtering option passed without options</div>\n            )}\n            {/*Select*/}\n            {(filterParams.type === \"select\" && !!options && options.length > 0) && (\n                <Select\n                    leftIcon={icon ? icon :\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\"\n                        >\n                            <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\" />\n                        </svg>}\n                    leftAddon={filterParams.name}\n                    options={[...options.map(n => ({ value: n.value, label: valueFormatter(n.value) }))]}\n                    onValueChange={v => handleUpdate(v.trim().toLowerCase())}\n                    size=\"sm\"\n                    fieldClass=\"w-fit\"\n                    className=\"sm:w-auto pr-8 md:max-w-sm\"\n                />\n            )}\n            {/*Boolean*/}\n            {(filterParams.type === \"boolean\") && (\n                <DropdownMenu\n                    className=\"right-[inherit] left\"\n                    trigger={\n                        <DataGridActiveFilter\n                            options={filterParams}\n                            value={valueFormatter(filterValue)}\n                        />\n                    }\n                >\n                    <DropdownMenuGroup>\n                        <DropdownMenuItem onClick={() => handleUpdate(true)}>\n                            {typeof valueFormatter(true) === \"boolean\" ? translations[\"true\"][lng] : valueFormatter(true)}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleUpdate(false)}>\n                            {typeof valueFormatter(false) === \"boolean\" ? translations[\"false\"][lng] : valueFormatter(false)}\n                        </DropdownMenuItem>\n                    </DropdownMenuGroup>\n                </DropdownMenu>\n            )}\n            {/*Checkbox*/}\n            {(filterParams.type === \"checkbox\" && !!options.length) && (\n                <DropdownMenu\n                    className=\"right-[inherit] left\"\n                    trigger={\n                        <DataGridActiveFilter\n                            options={filterParams}\n                            value={Array.isArray(filterValue) ?\n                                (filterValue as any).map((n: string) => valueFormatter(n)) :\n                                valueFormatter(filterValue)\n                            }\n                        />}\n                >\n                    <DropdownMenuGroup className=\"p-1\">\n                        {filterParams.options?.length && (\n                            <CheckboxGroup\n                                options={filterParams.options}\n                                value={filterValue}\n                                onValueChange={handleUpdate}\n                                itemContainerClass=\"flex flex-row-reverse w-full justify-between\"\n                                itemLabelClass=\"cursor-pointer\"\n                            />\n                        )}\n                    </DropdownMenuGroup>\n                </DropdownMenu>\n            )}\n            {/*Radio*/}\n            {(filterParams.type === \"radio\" && !!options.length) && (\n                <DropdownMenu\n                    className=\"right-[inherit] left\"\n                    trigger={\n                        <DataGridActiveFilter\n                            options={filterParams}\n                            value={Array.isArray(filterValue) ?\n                                (filterValue as any).map((n: string) => valueFormatter(n)) :\n                                valueFormatter(filterValue)\n                            }\n                        />}\n                >\n                    <DropdownMenuGroup className=\"p-1\">\n                        {filterParams.options?.length && (\n                            <RadioGroup\n                                options={filterParams.options}\n                                value={filterValue}\n                                onValueChange={handleUpdate}\n                                itemContainerClass=\"flex flex-row-reverse w-full justify-between\"\n                                itemLabelClass=\"cursor-pointer\"\n                            />\n                        )}\n                    </DropdownMenuGroup>\n                </DropdownMenu>\n            )}\n            {/*Date*/}\n            {filterParams.type === \"date-range\" && (\n                <div className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")}>\n                    {filterParams.icon && <span>{filterParams.icon}</span>}\n                    <span>{filterParams.name}:</span>\n                    <DateRangePicker\n                        value={filterValue ? {\n                            from: filterValue.start,\n                            to: filterValue.end,\n                        } : undefined}\n                        onValueChange={value => handleUpdate({\n                            from: value?.from,\n                            to: value?.to,\n                        })}\n                        placeholder={translations[\"date-range-placeholder\"][lng]}\n                        intent=\"unstyled\"\n                        locale={dateFnsLocales[lng]}\n                    />\n                </div>\n            )}\n            {/*Number Range*/}\n            {filterParams.type === \"number-range\" && (\n                <div className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")}>\n                    {filterParams.icon && <span>{filterParams.icon}</span>}\n                    <span>{filterParams.name}:</span>\n                    <NumberInput\n                        value={filterValue.min}\n                        onValueChange={value => handleUpdate({\n                            min: value,\n                            max: filterValue?.max,\n                        })}\n                        intent=\"unstyled\"\n                    />\n                    <NumberInput\n                        value={filterValue.max}\n                        onValueChange={value => handleUpdate({\n                            min: filterValue?.min,\n                            max: value,\n                        })}\n                        intent=\"unstyled\"\n                    />\n                </div>\n            )}\n\n            <CloseButton\n                intent=\"gray-outline\"\n                onClick={onRemove}\n                size=\"md\"\n            />\n        </div>\n    )\n\n}\n\nDataGridFilter.displayName = \"DataGridFilter\"\n\n\ntype DataGridActiveFilterProps = Omit<React.ComponentPropsWithRef<\"button\">, \"value\"> &\n    ComponentAnatomy<typeof DataGridActiveFilterAnatomy> & {\n    children?: React.ReactNode\n    options: DataGridFilteringHelper<any>\n    value: unknown\n}\n\nexport const DataGridActiveFilter = React.forwardRef<HTMLButtonElement, DataGridActiveFilterProps>((props, ref) => {\n\n    const { children, options, value, ...rest } = props\n\n    // Truncate and join the value to be displayed if it is an array\n    const displayedValue = Array.isArray(value) ? (value.length > 2 ? [...value.slice(0, 2), \"...\"].join(\", \") : value.join(\", \")) : String(value)\n\n    return (\n        <button\n            ref={ref}\n            className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")}\n            {...rest}\n        >\n            {options.icon && <span>{options.icon}</span>}\n            <span>{options.name}:</span>\n            <span className=\"font-semibold flex flex-none overflow-hidden whitespace-normal\">{displayedValue}</span>\n        </button>\n    )\n\n})\n\nDataGridActiveFilter.displayName = \"DataGridActiveFilter\"\n"
      },
      {
        "name": "datagrid-instance.tsx",
        "dir": "datagrid",
        "content": "import {\n    ColumnDef,\n    ColumnFiltersState,\n    ColumnOrderState,\n    FilterFn,\n    getCoreRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    OnChangeFn,\n    PaginationState,\n    Row,\n    RowSelectionState,\n    SortingState,\n    useReactTable,\n    VisibilityState,\n} from \"@tanstack/react-table\"\nimport * as React from \"react\"\nimport { AnyZodObject } from \"zod\"\nimport { Checkbox } from \"../checkbox\"\nimport { DataGridOnRowEdit, DataGridOnRowValidationError } from \"./use-datagrid-editing\"\nimport { dateRangeFilter } from \"./use-datagrid-filtering\"\nimport { DataGridOnRowSelect } from \"./use-datagrid-row-selection\"\n\nexport type DataGridInstanceProps<T extends Record<string, any>> = {\n    data: T[] | null | undefined\n    rowCount: number\n    columns: ColumnDef<T>[]\n    isLoading?: boolean\n\n    /**\n     * Hide columns below a certain breakpoint.\n     */\n    hideColumns?: { below: number, hide: string[] }[]\n    columnOrder?: ColumnOrderState | undefined\n\n    /* -------------------------------------------------------------------------------------------------\n     * Row selection\n     * -----------------------------------------------------------------------------------------------*/\n\n    /**\n     * If true, rows will be selectable.\n     * A checkbox will be shown in the first column of each row.\n     * - Requires `rowSelectionPrimaryKey` for more accurate selection (default is row index)\n     */\n    enableRowSelection?: boolean | ((row: Row<T>) => boolean) | undefined\n    /**\n     * Callback invoked when a row is selected.\n     */\n    onRowSelect?: DataGridOnRowSelect<T>\n    /**\n     * The column used to uniquely identify the row.\n     */\n    rowSelectionPrimaryKey?: string\n    /**\n     * Requires `rowSelectionPrimaryKey`\n     */\n    enablePersistentRowSelection?: boolean\n\n    /* -------------------------------------------------------------------------------------------------\n     * Sorting\n     * -----------------------------------------------------------------------------------------------*/\n\n    enableSorting?: boolean\n    enableManualSorting?: boolean\n\n    /* -------------------------------------------------------------------------------------------------\n     * Filters\n     * -----------------------------------------------------------------------------------------------*/\n\n    enableColumnFilters?: boolean\n    enableFilters?: boolean\n    enableManualFiltering?: boolean\n    enableGlobalFilter?: boolean\n\n    /* -------------------------------------------------------------------------------------------------\n     * Pagination\n     * -----------------------------------------------------------------------------------------------*/\n\n    enableManualPagination?: boolean\n\n    /* -------------------------------------------------------------------------------------------------\n     * Editing\n     * -----------------------------------------------------------------------------------------------*/\n\n    /**\n     * Requires `enableOptimisticUpdates`\n     * NOTE: This will not work if your `validationSchema` contains server-side validation.\n     */\n    enableOptimisticUpdates?: boolean\n    /**\n     * The column used to uniquely identify the row.\n     */\n    optimisticUpdatePrimaryKey?: string\n    /**\n     * If true, a loading indicator will be shown while the row is being updated.\n     */\n    isDataMutating?: boolean\n    /**\n     * Zod validation schema for the columns.\n     */\n    validationSchema?: AnyZodObject\n    /**\n     * Callback invoked when a cell is successfully edited.\n     */\n    onRowEdit?: DataGridOnRowEdit<T>\n    /**\n     * Callback invoked when a cell fails validation.\n     */\n    onRowValidationError?: DataGridOnRowValidationError<T>\n\n    initialState?: {\n        sorting?: SortingState\n        pagination?: PaginationState\n        rowSelection?: RowSelectionState\n        globalFilter?: string\n        columnFilters?: ColumnFiltersState\n        columnVisibility?: VisibilityState\n    }\n\n    state?: {\n        sorting?: SortingState\n        pagination?: PaginationState\n        rowSelection?: RowSelectionState\n        globalFilter?: string\n        columnFilters?: ColumnFiltersState\n        columnVisibility?: VisibilityState\n    },\n\n    onSortingChange?: OnChangeFn<SortingState>\n    onPaginationChange?: OnChangeFn<PaginationState>\n    onRowSelectionChange?: OnChangeFn<RowSelectionState>\n    onGlobalFilterChange?: OnChangeFn<string>\n    onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n    onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n\n    filterFns?: Record<string, FilterFn<T>>\n}\n\nexport function useDataGrid<T extends Record<string, any>>(props: DataGridInstanceProps<T>) {\n\n    const defaultValues: Required<DataGridInstanceProps<T>[\"state\"]> = {\n        globalFilter: \"\",\n        sorting: [],\n        pagination: { pageIndex: 0, pageSize: 5 },\n        rowSelection: {},\n        columnFilters: [],\n        columnVisibility: {},\n    }\n\n    const {\n        data: _actualData,\n        rowCount: _initialRowCount,\n        columns,\n        initialState,\n        state,\n\n        onRowValidationError,\n        validationSchema,\n\n        columnOrder,\n\n        onSortingChange,\n        onPaginationChange,\n        onRowSelectionChange,\n        onGlobalFilterChange,\n        onColumnFiltersChange,\n        onColumnVisibilityChange,\n\n        enableManualSorting = false,\n        enableManualFiltering = false,\n        enableManualPagination = false,\n        enableRowSelection = false,\n        enablePersistentRowSelection = false,\n        enableOptimisticUpdates = false,\n\n        enableColumnFilters = true,\n        enableSorting = true,\n        enableFilters = true,\n        enableGlobalFilter = true,\n\n        filterFns,\n\n        ...rest\n    } = props\n\n    const [data, setData] = React.useState<T[]>(_actualData ?? [])\n\n    const [rowCount, setRowCount] = React.useState(_initialRowCount)\n\n    React.useEffect(() => {\n        if (_actualData) setData(_actualData)\n    }, [_actualData])\n\n    React.useEffect(() => {\n        if (_initialRowCount) setRowCount(_initialRowCount)\n    }, [_initialRowCount])\n\n    const [globalFilter, setGlobalFilter] = React.useState<string>(initialState?.globalFilter ?? defaultValues.globalFilter)\n    const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(initialState?.rowSelection ?? defaultValues.rowSelection)\n    const [sorting, setSorting] = React.useState<SortingState>(initialState?.sorting ?? defaultValues.sorting)\n    const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(initialState?.columnFilters ?? defaultValues.columnFilters)\n    const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(initialState?.columnVisibility ?? defaultValues.columnVisibility)\n    const [pagination, setPagination] = React.useState<PaginationState>(initialState?.pagination ?? defaultValues.pagination)\n\n    const pageCount = React.useMemo(() => Math.ceil(rowCount / pagination.pageSize) ?? -1, [rowCount, pagination.pageSize])\n\n    const columnsWithSelection = React.useMemo<ColumnDef<T>[]>(() => [{\n        id: \"_select\",\n        size: 6,\n        maxSize: 6,\n        enableSorting: false,\n        disableSortBy: true,\n        disableGlobalFilter: true,\n        header: ({ table }) => {\n            return (\n                <div className=\"px-1\">\n                    <Checkbox\n                        value={table.getIsSomeRowsSelected() ? \"indeterminate\" : table.getIsAllRowsSelected()}\n                        onValueChange={() => table.toggleAllRowsSelected()}\n                        fieldClass=\"w-fit\"\n                    />\n                </div>\n            )\n        },\n        cell: ({ row }) => {\n            return (\n                <div className=\"\">\n                    <Checkbox\n                        key={row.id}\n                        value={row.getIsSomeSelected() ? \"indeterminate\" : row.getIsSelected()}\n                        disabled={!row.getCanSelect()}\n                        onValueChange={row.getToggleSelectedHandler()}\n                        fieldClass=\"w-fit\"\n                    />\n                </div>\n            )\n        },\n    }, ...columns], [columns])\n\n    const sortingState = React.useMemo(() => state?.sorting ?? sorting, [state?.sorting, sorting])\n    const paginationState = React.useMemo(() => state?.pagination ?? pagination, [state?.pagination, pagination])\n    const rowSelectionState = React.useMemo(() => state?.rowSelection ?? rowSelection, [state?.rowSelection, rowSelection])\n    const globalFilterState = React.useMemo(() => state?.globalFilter ?? globalFilter, [state?.globalFilter, globalFilter])\n    const columnFiltersState = React.useMemo(() => state?.columnFilters ?? columnFilters, [state?.columnFilters, columnFilters])\n    const columnVisibilityState = React.useMemo(() => state?.columnVisibility ?? columnVisibility, [state?.columnVisibility, columnVisibility])\n\n    const changeHandler = React.useCallback((func: any, func2: any) => {\n        return ((updaterOrValue) => {\n            if (func) func(updaterOrValue)\n            if (func2) func2(updaterOrValue)\n        }) as OnChangeFn<any>\n    }, [])\n\n    const table = useReactTable<T>({\n        data: data,\n        columns: enableRowSelection ? columnsWithSelection : columns,\n        pageCount: pageCount,\n        globalFilterFn: (row, columnId, filterValue) => {\n            const safeValue: string = ((): string => {\n                const value: any = row.getValue(columnId)\n                return typeof value === \"number\" ? String(value) : value\n            })()\n            return safeValue?.trim().toLowerCase().includes(filterValue.trim().toLowerCase())\n        },\n        state: {\n            sorting: sortingState,\n            pagination: paginationState,\n            rowSelection: rowSelectionState,\n            globalFilter: globalFilterState,\n            columnFilters: columnFiltersState,\n            columnVisibility: columnVisibilityState,\n            columnOrder: columnOrder,\n        },\n        onSortingChange: changeHandler(onSortingChange, setSorting),\n        onPaginationChange: changeHandler(onPaginationChange, setPagination),\n        onRowSelectionChange: changeHandler(onRowSelectionChange, setRowSelection),\n        onGlobalFilterChange: changeHandler(onGlobalFilterChange, setGlobalFilter),\n        onColumnFiltersChange: changeHandler(onColumnFiltersChange, setColumnFilters),\n        onColumnVisibilityChange: changeHandler(onColumnVisibilityChange, setColumnVisibility),\n        getCoreRowModel: getCoreRowModel(),\n        getSortedRowModel: enableManualSorting ? undefined : getSortedRowModel(),\n        getFilteredRowModel: enableManualFiltering ? undefined : getFilteredRowModel(),\n        filterFns: {\n            dateRangeFilter: dateRangeFilter,\n            ...filterFns,\n        },\n        manualPagination: enableManualPagination,\n        manualSorting: enableManualSorting,\n        manualFiltering: enableManualFiltering,\n        enableRowSelection: enableRowSelection,\n        enableSorting: enableSorting,\n        enableColumnFilters: enableColumnFilters,\n        enableFilters: enableFilters,\n        enableGlobalFilter: enableGlobalFilter,\n        getRowId: !!props.rowSelectionPrimaryKey ? (row) => row[props.rowSelectionPrimaryKey!] : undefined,\n    })\n\n    const displayedRows = React.useMemo(() => {\n        const pn = table.getState().pagination\n        if (enableManualPagination) {\n            return table.getRowModel().rows\n        }\n        return table.getRowModel().rows.slice(pn.pageIndex * pn.pageSize, (pn.pageIndex + 1) * pn.pageSize)\n    }, [table.getRowModel().rows, table.getState().pagination])\n\n    React.useEffect(() => {\n        table.setPageIndex(0)\n    }, [table.getState().globalFilter, table.getState().columnFilters])\n\n    React.useEffect(() => {\n        if (!enableManualPagination) {\n            setRowCount(table.getRowModel().rows.length)\n        }\n    }, [table.getRowModel().rows.length])\n\n    return {\n        ...rest,\n\n        table,\n        displayedRows,\n        setData,\n        data,\n        pageCount,\n        rowCount,\n        columns,\n\n        sorting: sortingState,\n        pagination: paginationState,\n        rowSelection: rowSelectionState,\n        globalFilter: globalFilterState,\n        columnFilters: columnFiltersState,\n        columnVisibility: columnVisibilityState,\n\n        enableManualSorting,\n        enableManualFiltering,\n        enableManualPagination,\n        enableRowSelection,\n        enablePersistentRowSelection,\n        enableOptimisticUpdates,\n        enableGlobalFilter,\n\n        validationSchema,\n        onRowValidationError,\n\n        handleGlobalFilterChange: onGlobalFilterChange ?? setGlobalFilter,\n        handleColumnFiltersChange: onColumnFiltersChange ?? setColumnFilters,\n\n    }\n\n}\n\nexport type DataGridApi<T extends Record<string, any>> = ReturnType<typeof useDataGrid<T>>\n"
      },
      {
        "name": "datagrid.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\n\nimport { flexRender } from \"@tanstack/react-table\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Button, IconButton } from \"../button\"\nimport { Card } from \"../card\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { DropdownMenu, DropdownMenuItem } from \"../dropdown-menu\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport { NumberInput } from \"../number-input\"\nimport { Pagination, PaginationTrigger } from \"../pagination\"\nimport { Select } from \"../select\"\nimport { Skeleton } from \"../skeleton\"\nimport { TextInput, TextInputProps } from \"../text-input\"\nimport { Tooltip } from \"../tooltip\"\nimport { DataGridCellInputField } from \"./datagrid-cell-input-field\"\nimport { DataGridFilter } from \"./datagrid-filter\"\nimport { DataGridApi, DataGridInstanceProps, useDataGrid } from \"./datagrid-instance\"\nimport { getColumnHelperMeta, getValueFormatter } from \"./helpers\"\nimport translations from \"./locales\"\nimport { useDataGridEditing } from \"./use-datagrid-editing\"\nimport { useDataGridFiltering } from \"./use-datagrid-filtering\"\nimport { useDataGridResponsiveness } from \"./use-datagrid-responsiveness\"\nimport { useDataGridRowSelection } from \"./use-datagrid-row-selection\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DataGridAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DataGrid__root\",\n    ]),\n    header: cva([\n        \"UI-DataGrid__header\",\n        \"block space-y-4 w-full mb-4\",\n    ]),\n    toolbar: cva([\n        \"UI-DataGrid__toolbar\",\n        \"flex w-full items-center gap-4 flex-wrap\",\n    ]),\n    tableContainer: cva([\n        \"UI-DataGrid__tableContainer\",\n        \"align-middle inline-block min-w-full max-w-full overflow-x-auto relative\",\n    ]),\n    table: cva([\n        \"UI-DataGrid__table\",\n        \"w-full relative table-fixed\",\n    ]),\n    tableHead: cva([\n        \"UI-DataGrid__tableHead\",\n        \"border-b\",\n    ]),\n    th: cva([\n        \"UI-DataGrid__th group/th\",\n        \"px-3 h-12 text-left text-sm font-bold\",\n        \"data-[is-selection-col=true]:px-3 data-[is-selection-col=true]:sm:px-1 data-[is-selection-col=true]:text-center\",\n    ]),\n    titleChevronContainer: cva([\n        \"UI-DataGrid__titleChevronContainer\",\n        \"absolute flex items-center inset-y-0 top-1 -right-9 group\",\n    ]),\n    titleChevron: cva([\n        \"UI-DataGrid__titleChevron\",\n        \"mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500 relative bottom-0.5\",\n    ]),\n    tableBody: cva([\n        \"UI-DataGrid__tableBody\",\n        \"divide-y divide-[--border] w-full relative\",\n    ]),\n    td: cva([\n        \"UI-DataGrid__td\",\n        \"px-2 py-2 w-full whitespace-nowrap text-base font-normal text-[--foreground]\",\n        \"data-[is-selection-col=true]:px-2 data-[is-selection-col=true]:sm:px-0 data-[is-selection-col=true]:text-center\",\n        \"data-[action-col=false]:truncate data-[action-col=false]:overflow-ellipsis\",\n        \"data-[row-selected=true]:bg-brand-50 dark:data-[row-selected=true]:bg-gray-800\",\n        \"data-[editing=true]:ring-1 data-[editing=true]:ring-[--ring] ring-inset\",\n        \"data-[editable=true]:hover:bg-[--subtle] md:data-[editable=true]:focus:ring-2 md:data-[editable=true]:focus:ring-[--slate]\",\n        \"focus:outline-none\",\n    ]),\n    tr: cva([\n        \"UI-DataGrid__tr\",\n        \"hover:bg-[--subtle] truncate\",\n    ]),\n    footer: cva([\n        \"UI-DataGrid__footer\",\n        \"flex flex-col sm:flex-row w-full items-center gap-2 justify-between p-2 mt-2 overflow-x-auto max-w-full\",\n    ]),\n    footerPageDisplayContainer: cva([\n        \"UI-DataGrid__footerPageDisplayContainer\",\n        \"flex flex-none items-center gap-1 ml-2 text-sm\",\n    ]),\n    footerPaginationInputContainer: cva([\n        \"UI-DataGrid__footerPaginationInputContainer\",\n        \"flex flex-none items-center gap-2\",\n    ]),\n    filterDropdownButton: cva([\n        \"UI-DataGrid__filterDropdownButton\",\n        \"flex gap-2 items-center bg-[--paper] border rounded-[--radius] h-10 py-1 px-3 cursor-pointer hover:bg-[--subtle]\",\n        \"select-none focus-visible:ring-2 outline-none ring-[--ring]\",\n    ]),\n    editingCard: cva([\n        \"UI-DataGrid__editingCard\",\n        \"flex items-center gap-2 rounded-md px-3 py-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DataGrid\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridAnatomy> & DataGridInstanceProps<T> & {\n    tableApi?: DataGridApi<T>,\n    globalSearchInputProps?: Partial<DataGridSearchInputProps>\n    hideGlobalSearchInput?: boolean\n    className?: string\n    lng?: string\n}\n\nexport function DataGrid<T extends Record<string, any>>(props: DataGridProps<T>) {\n\n    const {\n        lng = \"en\",\n        className,\n        headerClass,\n        toolbarClass,\n        tableContainerClass,\n        tableHeadClass,\n        tableClass,\n        thClass,\n        titleChevronClass,\n        titleChevronContainerClass,\n        tableBodyClass,\n        trClass,\n        tdClass,\n        footerClass,\n        footerPageDisplayContainerClass,\n        footerPaginationInputContainerClass,\n        filterDropdownButtonClass,\n        editingCardClass,\n        tableApi,\n        globalSearchInputProps,\n        hideGlobalSearchInput,\n        ...rest\n    } = props\n\n    const {\n        table,\n        data,\n        setData,\n        displayedRows,\n        globalFilter,\n        columnFilters,\n        handleGlobalFilterChange,\n        handleColumnFiltersChange,\n        isLoading,\n        isDataMutating,\n        hideColumns,\n        enablePersistentRowSelection,\n        onRowEdit,\n        onRowSelect,\n        rowSelectionPrimaryKey,\n        enableRowSelection,\n        enableOptimisticUpdates,\n        optimisticUpdatePrimaryKey,\n        enableManualPagination,\n        enableGlobalFilter,\n        validationSchema,\n        onRowValidationError,\n    } = (tableApi ?? useDataGrid<T>({ ...rest })) as DataGridApi<T>\n\n    const isInLoadingState = isLoading || (!enableOptimisticUpdates && isDataMutating)\n    const { tableRef } = useDataGridResponsiveness({ table, hideColumns })\n\n    const {\n        selectedRowCount,\n    } = useDataGridRowSelection({\n        table: table,\n        data: data,\n        displayedRows: displayedRows,\n        persistent: enablePersistentRowSelection,\n        onRowSelect: onRowSelect,\n        rowSelectionPrimaryKey: rowSelectionPrimaryKey,\n        enabled: !!enableRowSelection,\n    })\n\n    const {\n        getFilterDefaultValue,\n        unselectedFilterableColumns,\n        filteredColumns,\n        filterableColumns,\n    } = useDataGridFiltering({\n        table: table,\n        columnFilters: columnFilters,\n    })\n\n    const {\n        handleStartEditing,\n        getIsCellActivelyEditing,\n        getIsCellEditable,\n        getIsCurrentlyEditing,\n        getFirstCellBeingEdited,\n        handleStopEditing,\n        handleOnSave,\n        handleUpdateValue,\n        rowErrors,\n    } = useDataGridEditing({\n        table: table,\n        data: data,\n        rows: displayedRows,\n        onRowEdit: onRowEdit,\n        isDataMutating: isDataMutating,\n        enableOptimisticUpdates: enableOptimisticUpdates,\n        optimisticUpdatePrimaryKey: optimisticUpdatePrimaryKey,\n        manualPagination: enableManualPagination,\n        onDataChange: setData,\n        schema: validationSchema,\n        onRowValidationError: onRowValidationError,\n    })\n\n\n    return (\n        <div className={cn(DataGridAnatomy.root(), className)}>\n            <div className={cn(DataGridAnatomy.header(), headerClass)}>\n\n                <div className={cn(DataGridAnatomy.toolbar(), toolbarClass)}>\n                    {/* Search Box */}\n                    {(enableGlobalFilter && !hideGlobalSearchInput) && (\n                        <DataGridSearchInput\n                            value={globalFilter ?? \"\"}\n                            onChange={value => handleGlobalFilterChange(String(value))}\n                            {...globalSearchInputProps}\n                        />\n                    )}\n                    {/* Filter dropdown */}\n                    {(unselectedFilterableColumns.length > 0) && (\n                        <DropdownMenu\n                            trigger={\n                                <button\n                                    className={cn(DataGridAnatomy.filterDropdownButton(), filterDropdownButtonClass)}\n                                >\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\"\n                                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                        className=\"w-4 h-4\"\n                                    >\n                                        <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\" />\n                                    </svg>\n                                    <span>{translations[\"filters\"][lng]} ({unselectedFilterableColumns.length})</span>\n                                </button>\n                            }\n                        >\n                            {/*Filter list*/}\n                            {unselectedFilterableColumns.map(col => {\n                                const defaultValue = getFilterDefaultValue(col)\n                                const icon = getColumnHelperMeta(col, \"filteringMeta\")?.icon\n                                const name = getColumnHelperMeta(col, \"filteringMeta\")?.name\n                                return (\n                                    <DropdownMenuItem\n                                        key={col.id}\n                                        onClick={() => handleColumnFiltersChange(p => [...p, {\n                                            id: col.id,\n                                            value: defaultValue,\n                                        }])}\n                                    >\n                                        {icon && <span className=\"text-md mr-2\">{icon}</span>}\n                                        <span>{name}</span>\n                                    </DropdownMenuItem>\n                                )\n                            })}\n                        </DropdownMenu>\n                    )}\n                    {/*Remove filters button*/}\n                    {unselectedFilterableColumns.length !== filterableColumns.length && (\n                        <Tooltip\n                            trigger={<IconButton\n                                icon={\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\n                                        stroke=\"currentColor\" strokeWidth=\"2\"\n                                        strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\"\n                                    >\n                                        <path d=\"M9 14 4 9l5-5\" />\n                                        <path d=\"M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11\" />\n                                    </svg>\n                                }\n                                intent=\"gray-outline\"\n                                size=\"md\"\n                                onClick={() => handleColumnFiltersChange([])}\n                            />}\n                        >\n                            {translations[\"remove-filters\"][lng]}\n                        </Tooltip>\n                    )}\n                    {/*Selected row count*/}\n                    {(selectedRowCount > 0) && <div className=\"text-sm\">\n                        {selectedRowCount} {translations[`row${selectedRowCount > 1 ? \"s\" : \"\"}-selected`][lng]}\n                    </div>}\n                </div>\n\n                {/*Display filters*/}\n                {(filteredColumns.length > 0) && <div className={cn(DataGridAnatomy.toolbar(), toolbarClass)}>\n                    {/*Display selected filters*/}\n                    {filteredColumns.map(col => {\n                        return (\n                            <DataGridFilter\n                                key={col.id}\n                                column={col}\n                                onRemove={() => handleColumnFiltersChange(filters => [...filters.filter(filter => filter.id !== col.id)])}\n                                lng={lng}\n                            />\n                        )\n                    })}\n                </div>}\n\n                {/*Manage editing*/}\n                {getIsCurrentlyEditing() &&\n                    <Card className={cn(DataGridAnatomy.editingCard(), editingCardClass)}>\n                        <Button size=\"sm\" onClick={handleOnSave} loading={isDataMutating}>\n                            {translations[\"save\"][lng]}\n                        </Button>\n                        <Button\n                            size=\"sm\"\n                            onClick={handleStopEditing}\n                            intent=\"gray-outline\"\n                            disabled={isDataMutating}\n                        >\n                            {translations[\"cancel\"][lng]}\n                        </Button>\n                    </Card>}\n\n            </div>\n\n            {/* Table */}\n            <div ref={tableRef} className={cn(DataGridAnatomy.tableContainer(), tableContainerClass)}>\n\n                <table className={cn(DataGridAnatomy.table(), tableClass)}>\n\n                    {/*Head*/}\n\n                    <thead className={cn(DataGridAnatomy.tableHead(), tableHeadClass)}>\n                    {table.getHeaderGroups().map((headerGroup) => (\n                        <tr key={headerGroup.id}>\n                            {headerGroup.headers.map((header, index) => (\n                                <th\n                                    key={header.id}\n                                    colSpan={header.colSpan}\n                                    scope=\"col\"\n                                    className={cn(DataGridAnatomy.th(), thClass)}\n                                    data-is-selection-col={`${index === 0 && !!enableRowSelection}`}\n                                    style={{ width: header.getSize() }}\n                                >\n                                    {((index !== 0 && !!enableRowSelection) || !enableRowSelection) ? <div\n                                        className={cn(\n                                            \"flex items-center justify-between\",\n                                            {\n                                                \"cursor-pointer\": header.column.getCanSort(),\n                                            },\n                                        )}\n                                    >\n                                        {header.isPlaceholder ? null : (\n                                            <div\n                                                className=\"flex relative items-center\"\n                                                {...{\n                                                    onClick: header.column.getToggleSortingHandler(),\n                                                }}\n                                            >\n                                                {flexRender(\n                                                    header.column.columnDef.header,\n                                                    header.getContext(),\n                                                )}\n                                                <span\n                                                    className={cn(DataGridAnatomy.titleChevronContainer(), titleChevronContainerClass)}\n                                                >\n                                                    {header.column.getIsSorted() === \"asc\" &&\n                                                        <svg\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\n                                                            strokeLinecap=\"round\"\n                                                            strokeLinejoin=\"round\"\n                                                            className={cn(DataGridAnatomy.titleChevron(), titleChevronClass)}\n                                                        >\n                                                            <polyline points=\"18 15 12 9 6 15\" />\n                                                        </svg>\n                                                    }\n                                                    {header.column.getIsSorted() === \"desc\" &&\n                                                        <svg\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\n                                                            strokeLinecap=\"round\"\n                                                            strokeLinejoin=\"round\"\n                                                            className={cn(DataGridAnatomy.titleChevron(), titleChevronClass)}\n                                                        >\n                                                            <polyline points=\"6 9 12 15 18 9\" />\n                                                        </svg>\n                                                    }\n                                                    {(header.column.getIsSorted() === false && header.column.getCanSort()) &&\n                                                        <svg\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\n                                                            strokeLinecap=\"round\"\n                                                            strokeLinejoin=\"round\"\n                                                            className={cn(\n                                                                DataGridAnatomy.titleChevron(),\n                                                                \"w-4 h-4 opacity-0 transition-opacity group-hover/th:opacity-100\",\n                                                                titleChevronClass,\n                                                            )}\n                                                        >\n                                                            <path d=\"m7 15 5 5 5-5\" />\n                                                            <path d=\"m7 9 5-5 5 5\" />\n                                                        </svg>\n                                                    }\n                                                </span>\n                                            </div>\n                                        )}\n                                    </div> : flexRender(\n                                        header.column.columnDef.header,\n                                        header.getContext(),\n                                    )}\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                    </thead>\n\n                    {/*Body*/}\n\n                    <tbody className={cn(DataGridAnatomy.tableBody(), tableBodyClass)}>\n\n                    {displayedRows.map((row) => {\n                        return (\n                            <tr key={row.id} className={cn(DataGridAnatomy.tr(), trClass)}>\n                                {row.getVisibleCells().map((cell, index) => {\n\n                                    // If cell is editable and cell's row is being edited\n                                    const isCurrentlyEditable = getIsCellEditable(cell.id) && !getIsCellActivelyEditing(cell.id)\n                                        && (!getIsCurrentlyEditing() || getFirstCellBeingEdited()?.rowId === cell.row.id)\n\n                                    return (\n                                        <td\n                                            key={cell.id}\n                                            className={cn(DataGridAnatomy.td(), tdClass)}\n                                            data-is-selection-col={`${index === 0 && enableRowSelection}`} // If cell is in the selection\n                                            // column\n                                            data-action-col={`${cell.column.id === \"_actions\"}`} // If cell is in the action column\n                                            data-row-selected={cell.getContext().row.getIsSelected()} // If cell's row is currently selected\n                                            data-editing={getIsCellActivelyEditing(cell.id)} // If cell is being edited\n                                            data-editable={isCurrentlyEditable} // If cell is editable\n                                            data-row-editing={getFirstCellBeingEdited()?.rowId === cell.row.id} // If cell's row is being edited\n                                            style={{\n                                                width: cell.column.getSize(),\n                                                maxWidth: cell.column.columnDef.maxSize,\n                                            }}\n                                            onDoubleClick={() => React.startTransition(() => {\n                                                handleStartEditing(cell.id)\n                                            })}\n                                            onKeyUp={event => {\n                                                if (event.key === \"Enter\") React.startTransition(() => handleStartEditing(cell.id))\n                                            }}\n                                            tabIndex={isCurrentlyEditable ? 0 : undefined} // Is focusable if it can be edited\n                                        >\n                                            {((!getIsCellEditable(cell.id) || !getIsCellActivelyEditing(cell.id))) && flexRender(\n                                                cell.column.columnDef.cell,\n                                                {\n                                                    ...cell.getContext(),\n                                                    renderValue: () => getValueFormatter(cell.column)(cell.getContext().getValue()),\n                                                },\n                                            )}\n                                            {getIsCellActivelyEditing(cell.id) && (\n                                                <DataGridCellInputField\n                                                    cell={cell}\n                                                    row={cell.row}\n                                                    table={table}\n                                                    rowErrors={rowErrors}\n                                                    meta={getColumnHelperMeta(cell.column, \"editingMeta\")!}\n                                                    onValueUpdated={handleUpdateValue}\n                                                />\n                                            )}\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n\n                {(isInLoadingState && displayedRows.length > 0) && (\n                    <LoadingOverlay className=\"backdrop-blur-[1px] bg-opacity-40 pt-0\" />\n                )}\n\n                {/*Skeleton*/}\n                {(isInLoadingState && displayedRows.length === 0) && [...Array(5).keys()].map((i, idx) => (\n                    <Skeleton key={idx} className=\"rounded-none h-12\" />\n                ))}\n\n                {/*No rows*/}\n                {(displayedRows.length === 0 && !isInLoadingState && filteredColumns.length === 0) && (\n                    <p className=\"flex w-full justify-center py-4\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\n                            <path\n                                fill=\"#D1C4E9\"\n                                d=\"M38 7H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2z\"\n                            />\n                            <circle cx=\"38\" cy=\"38\" r=\"10\" fill=\"#F44336\" />\n                            <g fill=\"#fff\">\n                                <path d=\"m43.31 41.181l-2.12 2.122l-8.485-8.484l2.121-2.122z\" />\n                                <path d=\"m34.819 43.31l-2.122-2.12l8.484-8.485l2.122 2.121z\" />\n                            </g>\n                        </svg>\n                    </p>\n                )}\n\n                {/*No results with filters*/}\n                {(displayedRows.length === 0 && !isInLoadingState && filteredColumns.length > 0) && (\n                    <div className=\"w-full text-center py-4\">\n                        <p className=\"flex w-full justify-center mb-4\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\n                                <path\n                                    fill=\"#D1C4E9\"\n                                    d=\"M38 7H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2z\"\n                                />\n                                <circle cx=\"38\" cy=\"38\" r=\"10\" fill=\"#F44336\" />\n                                <g fill=\"#fff\">\n                                    <path d=\"m43.31 41.181l-2.12 2.122l-8.485-8.484l2.121-2.122z\" />\n                                    <path d=\"m34.819 43.31l-2.122-2.12l8.484-8.485l2.122 2.121z\" />\n                                </g>\n                            </svg>\n                        </p>\n                        <p>{translations[\"no-matching-result\"][lng]}</p>\n                    </div>\n                )}\n            </div>\n\n            <div className={cn(DataGridAnatomy.footer(), footerClass)}>\n\n                <Pagination>\n                    <PaginationTrigger\n                        direction=\"previous\"\n                        isChevrons\n                        onClick={() => table.setPageIndex(0)}\n                        disabled={!table.getCanPreviousPage() || isInLoadingState}\n                    />\n                    <PaginationTrigger\n                        direction=\"previous\"\n                        onClick={() => table.previousPage()}\n                        disabled={!table.getCanPreviousPage() || isInLoadingState}\n                    />\n                    <PaginationTrigger\n                        direction=\"next\"\n                        onClick={() => table.nextPage()}\n                        disabled={!table.getCanNextPage() || isInLoadingState}\n                    />\n                    <PaginationTrigger\n                        direction=\"next\"\n                        isChevrons\n                        onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n                        disabled={!table.getCanNextPage() || isInLoadingState}\n                    />\n                </Pagination>\n\n                <div className={cn(DataGridAnatomy.footerPageDisplayContainer(), footerPageDisplayContainerClass)}>\n                    {table.getPageCount() > 0 && (\n                        <>\n                            <div>{translations[\"page\"][lng]}</div>\n                            <strong>\n                                {table.getState().pagination.pageIndex + 1} / {table.getPageCount()}\n                            </strong>\n                        </>\n                    )}\n                </div>\n\n                <div className={cn(DataGridAnatomy.footerPaginationInputContainer(), footerPaginationInputContainerClass)}>\n                    {(data.length > 0) && <NumberInput\n                        hideControls\n                        value={table.getState().pagination.pageIndex + 1}\n                        min={1}\n                        onValueChange={v => {\n                            const page = v ? v - 1 : 0\n                            React.startTransition(() => {\n                                if (v <= table.getPageCount()) {\n                                    table.setPageIndex(page)\n                                }\n                            })\n                        }}\n                        className=\"inline-flex flex-none items-center w-[3rem]\"\n                        size=\"sm\"\n                    />}\n                    <Select\n                        value={String(table.getState().pagination.pageSize)}\n                        onValueChange={v => {\n                            table.setPageSize(Number(v))\n                        }}\n                        options={[Number(table.getState().pagination.pageSize),\n                            ...[5, 10, 20, 30, 40, 50].filter(n => n !== Number(table.getState().pagination.pageSize))].map(pageSize => ({\n                            value: String(pageSize),\n                            label: String(pageSize),\n                        }))}\n                        fieldClass=\"w-auto\"\n                        className=\"w-auto\"\n                        disabled={isInLoadingState}\n                        size=\"sm\"\n                    />\n                </div>\n\n            </div>\n\n        </div>\n    )\n\n}\n\nDataGrid.displayName = \"DataGrid\"\n\n/* -------------------------------------------------------------------------------------------------\n * DataGridSearchInput\n * -----------------------------------------------------------------------------------------------*/\n\ntype DataGridSearchInputProps = Omit<TextInputProps, \"onChange\"> & {\n    value: string,\n    onChange: (value: string) => void\n    debounce?: number\n}\n\nexport function DataGridSearchInput(props: DataGridSearchInputProps) {\n\n    const { value: initialValue, onChange, debounce = 500, ...rest } = props\n\n    const [value, setValue] = React.useState(initialValue)\n\n    React.useEffect(() => {\n        setValue(initialValue)\n    }, [initialValue])\n\n    React.useEffect(() => {\n        const timeout = setTimeout(() => {\n            onChange(value)\n        }, debounce)\n\n        return () => clearTimeout(timeout)\n    }, [value])\n\n    return (\n        <TextInput\n            size=\"md\"\n            fieldClass=\"md:max-w-[30rem]\"\n            {...rest}\n            value={value}\n            onChange={e => setValue(e.target.value)}\n            leftIcon={<svg\n                xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                className=\"w-5 h-5 text-[--muted]\"\n            >\n                <circle cx=\"11\" cy=\"11\" r=\"8\" />\n                <path d=\"m21 21-4.3-4.3\" />\n            </svg>}\n        />\n    )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * DataGridWithApi\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridWithApiProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridAnatomy> & {\n    api: DataGridApi<T>\n}\n\nexport function DataGridWithApi<T extends Record<string, any>>(props: DataGridWithApiProps<T>) {\n\n    const {\n        api,\n        ...rest\n    } = props\n\n    const {\n        data,\n        rowCount,\n        columns,\n    } = api\n\n    return <DataGrid\n        data={data}\n        rowCount={rowCount}\n        columns={columns}\n        tableApi={api}\n        {...rest}\n    />\n\n}\n"
      },
      {
        "name": "helpers.ts",
        "dir": "datagrid",
        "content": "import { BuiltInFilterFn, Cell, Column, ColumnDef, Row, Table } from \"@tanstack/react-table\"\nimport { AnyZodObject, z, ZodAny, ZodTypeAny } from \"zod\"\nimport { DataGridEditingFieldContext } from \"./datagrid-cell-input-field\"\nimport React from \"react\"\nimport { DataGridValidationRowErrors } from \"./use-datagrid-editing\"\n\n/* -------------------------------------------------------------------------------------------------\n * Editing\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridEditingHelper<T extends any = unknown, ZodType extends ZodTypeAny = ZodAny> = {\n    zodType?: ZodType\n    field: (\n        context: DataGridEditingFieldContext<ZodType extends ZodAny ? T : z.infer<ZodType>>,\n        options: {\n            rowErrors: DataGridValidationRowErrors\n            table: Table<any>\n            row: Row<any>\n            cell: Cell<any, unknown>\n        },\n    ) => React.ReactElement\n    valueFormatter?: <K = z.infer<ZodType>, R = z.infer<ZodType>>(value: K) => R\n}\n\nfunction withEditing<T extends any = unknown, ZodType extends ZodTypeAny = ZodAny>(params: DataGridEditingHelper<T, ZodType>) {\n    return {\n        editingMeta: {\n            ...params,\n        },\n    }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Filtering\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridFilteringType = \"select\" | \"radio\" | \"checkbox\" | \"boolean\" | \"date-range\" | \"number-range\"\n\ntype _DefaultFilteringProps = {\n    type: DataGridFilteringType\n    name: string,\n    icon?: React.ReactElement\n    options?: { value: string, label?: any }[]\n    valueFormatter?: (value: any) => any\n}\n\ntype DefaultFilteringProps<T extends DataGridFilteringType> = {\n    type: T\n    name: string,\n    icon?: React.ReactElement\n    options: { value: string, label?: T extends \"select\" ? string : React.ReactNode }[]\n    valueFormatter?: (value: any) => any\n}\n\n// Improve type safety by removing \"options\" when the type doesn't need it\nexport type DataGridFilteringHelper<T extends DataGridFilteringType = \"select\"> =\n    T extends Extract<DataGridFilteringType, \"select\" | \"radio\" | \"checkbox\">\n        ? DefaultFilteringProps<T>\n        : Omit<DefaultFilteringProps<T>, \"options\">\n\n/**\n * Built-in filter functions supported DataGrid\n */\nexport type DataGridSupportedFilterFn = \"equals\" | \"equalsString\" | \"arrIncludesSome\" | \"inNumberRange\" | \"dateRangeFilter\"\n\nfunction withFiltering<T extends DataGridFilteringType>(params: DataGridFilteringHelper<T>) {\n    return {\n        filteringMeta: {\n            ...params,\n        },\n    }\n}\n\nconst getFilterFn = (type: DataGridFilteringType) => {\n    const fns: { [key: string]: DataGridSupportedFilterFn } = {\n        select: \"equalsString\",\n        boolean: \"equals\",\n        \"number-range\": \"inNumberRange\",\n        checkbox: \"arrIncludesSome\",\n        radio: \"equalsString\",\n        \"date-range\": \"dateRangeFilter\",\n\n    }\n    return fns[type] as any\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Value formatter\n * -----------------------------------------------------------------------------------------------*/\n\nfunction withValueFormatter<T extends any, R extends any = any>(callback: (value: T) => R) {\n    return {\n        valueFormatter: callback,\n    }\n}\n\nexport function getValueFormatter<T>(column: Column<T>): (value: any) => any {\n    return (column.columnDef.meta as any)?.valueFormatter || ((value: any) => value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Column Def Helpers\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DataGridHelpers = \"filteringMeta\" | \"editingMeta\" | \"valueFormatter\"\n\nexport type DataGridColumnDefHelpers<T extends Record<string, any>> = {\n    withFiltering: typeof withFiltering\n    getFilterFn: typeof getFilterFn\n    withEditing: typeof withEditing\n    withValueFormatter: typeof withValueFormatter\n}\n\n/**\n * Return\n * @example\n * const columns = useMemo(() => defineDataGridColumns<T>(() => [\n *  ...\n * ]), [])\n * @param callback\n */\nexport function defineDataGridColumns<T extends Record<string, any>, Schema extends AnyZodObject = any>(\n    callback: (helpers: DataGridColumnDefHelpers<T>, schema?: Schema) => Array<ColumnDef<T>>,\n) {\n    return callback({\n        withFiltering,\n        getFilterFn,\n        withEditing,\n        withValueFormatter,\n    })\n}\n\n\nexport function getColumnHelperMeta<T, K extends DataGridHelpers>(column: Column<T>, helper: K) {\n    return (column.columnDef.meta as any)?.[helper] as (\n        K extends \"filteringMeta\" ? _DefaultFilteringProps :\n            K extends \"editingMeta\" ? DataGridEditingHelper :\n                K extends \"valueFormatter\" ? ReturnType<typeof withValueFormatter> :\n                    never\n        ) | undefined\n}\n"
      },
      {
        "name": "index.tsx",
        "dir": "datagrid",
        "content": "export * from \"./datagrid\"\nexport * from \"./helpers\"\nexport * from \"./datagrid-instance\"\n"
      },
      {
        "name": "locales.ts",
        "dir": "datagrid",
        "content": "import { enUS, fr } from \"date-fns/locale\"\n\nexport const dateFnsLocales = {\n    \"fr\": fr,\n    \"en\": enUS,\n} as {\n    [key: string]: any,\n}\nexport default {\n    \"filters\": {\n        \"fr\": \"Filtres\",\n        \"en\": \"Filters\",\n    },\n    \"no-matching-result\": {\n        \"fr\": \"Aucun rÃ©sultat ne correspond aux filtres\",\n        \"en\": \"No results matching filters\",\n    },\n    \"remove-filters\": {\n        \"fr\": \"Retirer les filtres\",\n        \"en\": \"Remove all filters\",\n    },\n    \"page\": {\n        \"fr\": \"Page\",\n        \"en\": \"Page\",\n    },\n    \"rows-selected\": {\n        \"fr\": \"lignes sÃ©lectionnÃ©es\",\n        \"en\": \"rows selected\",\n    },\n    \"row-selected\": {\n        \"fr\": \"ligne sÃ©lectionnÃ©e\",\n        \"en\": \"row selected\",\n    },\n    \"save\": {\n        \"fr\": \"Enregistrer\",\n        \"en\": \"Save\",\n    },\n    \"cancel\": {\n        \"fr\": \"Annuler\",\n        \"en\": \"Cancel\",\n    },\n    \"updating\": {\n        \"fr\": \"Modification\",\n        \"en\": \"Updating\",\n    },\n    \"true\": {\n        \"fr\": \"Vrai\",\n        \"en\": \"True\",\n    },\n    \"false\": {\n        \"fr\": \"Faux\",\n        \"en\": \"False\",\n    },\n    \"date-range-placeholder\": {\n        \"fr\": \"SÃ©lectionnez une pÃ©riode\",\n        \"en\": \"Select a range\",\n    },\n} as {\n    [key: string]: { [key: string]: string },\n}\n"
      },
      {
        "name": "use-datagrid-editing.ts",
        "dir": "datagrid",
        "content": "import { Row, Table } from \"@tanstack/react-table\"\nimport equal from \"fast-deep-equal\"\nimport * as React from \"react\"\nimport { AnyZodObject, ZodIssue } from \"zod\"\nimport { DataGridEditingValueUpdater } from \"./datagrid-cell-input-field\"\n\n\nexport type DataGridRowEditedEvent<T extends Record<string, any>> = {\n    row: Row<T>\n    originalData: T\n    data: T\n}\n\n/**\n * Type of the `onRowEdit` event\n */\nexport type DataGridOnRowEdit<T extends Record<string, any>> = (event: DataGridRowEditedEvent<T>) => void\n\n//----\n\nexport type DataGridRowValidationError<T extends Record<string, any>> = {\n    row: Row<T>\n    originalData: T\n    data: T\n    errors: ZodIssue[]\n}\n\n/**\n * Type of the `onRowValidationError` event\n */\nexport type DataGridOnRowValidationError<T extends Record<string, any>> = (event: DataGridRowValidationError<T>) => void\n\n//----\n\nexport type DataGridValidationRowErrors = Array<{ rowId: string, key: string, message: string }>\n\n/**\n * Hook props\n */\ntype Props<T extends Record<string, any>> = {\n    data: T[]\n    table: Table<T>\n    rows: Row<T>[]\n    onRowEdit?: DataGridOnRowEdit<T>\n    isDataMutating: boolean | undefined\n    enableOptimisticUpdates: boolean\n    onDataChange: React.Dispatch<React.SetStateAction<T[]>>\n    optimisticUpdatePrimaryKey: string | undefined\n    manualPagination: boolean\n    schema: AnyZodObject | undefined\n    onRowValidationError: DataGridOnRowValidationError<T> | undefined\n}\n\nexport function useDataGridEditing<T extends Record<string, any>>(props: Props<T>) {\n\n    const {\n        data,\n        table,\n        rows,\n        onRowEdit,\n        isDataMutating,\n        onDataChange,\n        enableOptimisticUpdates,\n        optimisticUpdatePrimaryKey,\n        manualPagination,\n        schema,\n        onRowValidationError,\n    } = props\n\n    const leafColumns = table.getAllLeafColumns()\n    // Keep track of the state of each editable cell\n    const [editableCellStates, setEditableCellStates] = React.useState<{\n        id: string,\n        colId: string,\n        rowId: string,\n        isEditing: boolean\n    }[]>([])\n\n    // Track updated value\n    const [activeValue, setActiveValue] = React.useState<unknown>(undefined)\n    // Track current row data being updated\n    const [rowData, setRowData] = React.useState<T | undefined>(undefined)\n    // Track current row being updated\n    const [row, setRow] = React.useState<Row<T> | undefined>(undefined)\n\n    const [rowErrors, setRowErrors] = React.useState<DataGridValidationRowErrors>([])\n\n    // Keep track of editable columns (columns defined with the `withEditing` helper)\n    const editableColumns = React.useMemo(() => {\n        return leafColumns.filter(n => n.getIsVisible() && !!(n.columnDef.meta as any)?.editingMeta)\n    }, [leafColumns])\n\n    React.useEffect(() => {\n        if (manualPagination) {\n            setActiveValue(undefined)\n            setRowData(undefined)\n            setRow(undefined)\n            setEditableCellStates([])\n        }\n    }, [table.getState().pagination.pageIndex, table.getState().pagination.pageSize])\n\n    // Keep track of editable cells (cells whose columns are editable)\n    const editableCells = React.useMemo(() => {\n        if (rows.length > 0) {\n            return rows.flatMap(row => row.getVisibleCells().filter(cell => !!editableColumns.find(col => col.id === cell.column.id)?.id))\n        }\n        return []\n    }, [rows])\n\n    // Set/update editable cells\n    React.useLayoutEffect(() => {\n        // Control the states of individual cells that can be edited\n        if (editableCells.length > 0) {\n            editableCells.map(cell => {\n                setEditableCellStates(prev => [...prev, {\n                    id: cell.id,\n                    colId: cell.column.id,\n                    rowId: cell.row.id,\n                    isEditing: false,\n                }])\n            })\n        }\n    }, [editableCells])\n\n    /**/\n    const handleStartEditing = React.useCallback((cellId: string) => {\n        // Manage editing state of cells\n        setEditableCellStates(prev => {\n            const others = prev.filter(prevCell => prevCell.id !== cellId)\n            const cell = prev.find(prevCell => prevCell.id === cellId)\n\n            if (cell && prev.every(prevCell => !prevCell.isEditing)) { // (Event 1) When we select a cell and nothing else is being edited\n                return [...others, { ...cell, id: cellId, isEditing: true }]\n\n            } else if (cell && prev.some(prevCell => prevCell.isEditing)) { // (Event 2) When another cell is being edited\n                const otherCellBeingEdited = prev.find(prevCell => prevCell.isEditing) // Find the cell being edited\n\n                if (otherCellBeingEdited?.rowId === cell?.rowId) { // Only allow cells on the same row to be edited\n                    return [...others, { ...cell, id: cellId, isEditing: true }]\n                }\n            }\n            return prev\n        })\n    }, [])\n\n    /**/\n    const getIsCellActivelyEditing = React.useCallback((cellId: string) => {\n        return editableCellStates.some(cell => cell.id === cellId && cell.isEditing)\n    }, [editableCellStates])\n    /**/\n    const getIsCellEditable = React.useCallback((cellId: string) => {\n        return !!editableCellStates.find(cell => cell.id === cellId)\n    }, [editableCellStates])\n    /**/\n    const getIsCurrentlyEditing = React.useCallback(() => {\n        return editableCellStates.some(cell => cell.isEditing)\n    }, [editableCellStates])\n    /**/\n    const getFirstCellBeingEdited = React.useCallback(() => {\n        return editableCellStates.find(cell => cell.isEditing)\n    }, [editableCellStates])\n    /**/\n    const handleStopEditing = React.useCallback(() => {\n        setEditableCellStates(prev => {\n            return prev.map(n => ({ ...n, isEditing: false }))\n        })\n    }, [])\n\n    const mutationRef = React.useRef<boolean>(false)\n\n    /**\n     * When `isDataMutating` is provided to watch mutations,\n     * Wait for it to be `false` to cancel editing\n     */\n    React.useEffect(() => {\n        if (isDataMutating !== undefined && !isDataMutating && mutationRef.current) {\n            handleStopEditing()\n            mutationRef.current = false\n        }\n    }, [isDataMutating])\n\n    /**\n     * When `isDataMutating` is not provided, immediately cancel editing\n     */\n    React.useEffect(() => {\n        if (isDataMutating === undefined) {\n            handleStopEditing()\n        }\n    }, [mutationRef.current])\n\n    const saveEdit = React.useCallback((transformedData?: T) => {\n        if (!row || !rowData) return handleStopEditing()\n\n        // Compare data\n        if (!equal(rowData, row.original)) {\n            // Return new data\n            onRowEdit && onRowEdit({\n                originalData: row.original,\n                data: transformedData || rowData,\n                row: row,\n            })\n\n            // Optimistic update\n            if (enableOptimisticUpdates && optimisticUpdatePrimaryKey) {\n                let clone = structuredClone(data)\n                const index = clone.findIndex(p => {\n                    if (!p[optimisticUpdatePrimaryKey] || !rowData[optimisticUpdatePrimaryKey]) return false\n                    return p[optimisticUpdatePrimaryKey] === rowData[optimisticUpdatePrimaryKey]\n                })\n                if (clone[index] && index > -1) {\n                    clone[index] = rowData\n                    onDataChange(clone) // Emit optimistic update\n                } else {\n                    console.error(\"[DataGrid] Could not perform optimistic update. Make sure `optimisticUpdatePrimaryKey` is a valid property.\")\n                }\n\n            } else if (enableOptimisticUpdates) {\n                console.error(\"[DataGrid] Could not perform optimistic update. Make sure `optimisticUpdatePrimaryKey` is defined.\")\n            }\n\n            // Immediately stop edit if optimistic updates are enabled\n            if (enableOptimisticUpdates) {\n                handleStopEditing()\n            } else {\n                // Else, we wait for `isDataMutating` to be false\n                mutationRef.current = true\n            }\n        } else {\n            handleStopEditing()\n        }\n    }, [row, rowData])\n\n    const handleOnSave = React.useCallback(async () => {\n        if (!row || !rowData) return\n        setRowErrors([])\n\n        // Safely parse the schema object when a `validationSchema` is provided\n        if (schema) {\n            try {\n                const parsed = await schema.safeParseAsync(rowData)\n                if (parsed.success) {\n                    let finalData = structuredClone(rowData)\n                    Object.keys(parsed.data).map(key => {\n                        // @ts-expect-error\n                        finalData[key] = parsed.data[key]\n                    })\n                    saveEdit(finalData)\n                } else {\n\n\n                    parsed.error.errors.map(error => {\n                        setRowErrors(prev => [\n                            ...prev,\n                            { rowId: row.id, key: String(error.path[0]), message: error.message },\n                        ])\n                    })\n\n                    if (onRowValidationError) {\n                        onRowValidationError({\n                            data: rowData,\n                            originalData: row.original,\n                            row: row,\n                            errors: parsed.error.errors,\n                        })\n                    }\n                }\n            }\n            catch (e) {\n                console.error(\"[DataGrid] Could not perform validation\")\n            }\n        } else {\n            saveEdit()\n        }\n\n    }, [row, rowData])\n\n    /**\n     * This fires every time the user updates a cell value\n     */\n    const handleUpdateValue = React.useCallback<DataGridEditingValueUpdater<T>>((value, _row, cell, zodType) => {\n        setActiveValue(value) // Set the updated value (could be anything)\n        setRow(_row) // Set the row being updated\n        setRowData(prev => ({\n            // If we are updating a different row, reset the rowData, else keep the past updates\n            ...((row?.id !== _row.id || !rowData) ? _row.original : rowData),\n            [cell.column.id]: value,\n        }))\n    }, [row, rowData])\n\n\n    return {\n        handleStartEditing,\n        getIsCellActivelyEditing,\n        getIsCellEditable,\n        getIsCurrentlyEditing,\n        getFirstCellBeingEdited,\n        handleStopEditing,\n        handleOnSave,\n        handleUpdateValue,\n        rowErrors,\n    }\n\n}\n"
      },
      {
        "name": "use-datagrid-filtering.ts",
        "dir": "datagrid",
        "content": "import { Column, ColumnFiltersState, Table } from \"@tanstack/react-table\"\nimport * as React from \"react\"\nimport { getColumnHelperMeta } from \"./helpers\"\nimport { addDays } from \"date-fns/addDays\"\nimport { isSameDay } from \"date-fns/isSameDay\"\n\ninterface DataGridFilteringHookProps<T> {\n    table: Table<T>,\n    columnFilters: ColumnFiltersState,\n}\n\nexport function useDataGridFiltering<T>(props: DataGridFilteringHookProps<T>) {\n\n    const {\n        table,\n        columnFilters,\n    } = props\n\n    /**\n     * Item filtering\n     */\n    const [filterableColumns, filteredColumns] = React.useMemo(() => {\n        return [\n            table.getAllLeafColumns().filter(col => col.getCanFilter() && !!getColumnHelperMeta(col, \"filteringMeta\")),\n            table.getAllLeafColumns().filter(col => columnFilters.map(filter => filter.id).includes(col.id)),\n        ]\n    }, [table.getAllLeafColumns(), columnFilters])\n    const unselectedFilterableColumns = filterableColumns.filter(n => !columnFilters.map(c => c.id).includes(n.id))\n\n    // Get the default value for a filter when the user selects it\n    const getFilterDefaultValue = React.useCallback((col: Column<any>) => {\n        // Since the column is filterable, get options\n        const options = getColumnHelperMeta(col, \"filteringMeta\")\n        if (options) {\n            if (options.type === \"select\" || options.type === \"radio\") {\n                return options.options?.[0]?.value ?? \"\"\n            } else if (options.type === \"boolean\") {\n                return true\n            } else if (options.type === \"checkbox\") {\n                return options.options?.map(n => n.value) ?? []\n            } else if (options.type === \"date-range\") {\n                return { from: new Date(), to: addDays(new Date(), 7) }\n            } else if (options.type === \"number-range\") {\n                return { min: 0, max: 1 }\n            }\n        }\n        return null\n    }, [])\n\n    return {\n        getFilterDefaultValue,\n        unselectedFilterableColumns,\n        filteredColumns,\n        filterableColumns,\n    }\n\n}\n\nexport const dateRangeFilter = (row: any, columnId: string, filterValue: any) => {\n    if (!filterValue || !filterValue.start || !filterValue.end) return true\n    const value: Date = row.getValue(columnId)\n    return (value >= filterValue.start && value <= filterValue.end) || isSameDay(value, filterValue.start) || isSameDay(value, filterValue.end)\n}\n"
      },
      {
        "name": "use-datagrid-responsiveness.ts",
        "dir": "datagrid",
        "content": "import { useDataGridSize } from \"./use-datagrid-size\"\nimport * as React from \"react\"\nimport { Table } from \"@tanstack/react-table\"\n\ninterface DataGridResponsivenessHookProps<T extends Record<string, any>> {\n    hideColumns: { below: number, hide: string[] }[] | undefined,\n    table: Table<T>\n}\n\nexport function useDataGridResponsiveness<T extends Record<string, any>>(props: DataGridResponsivenessHookProps<T>) {\n\n    const {\n        hideColumns = [],\n        table,\n    } = props\n\n    const [tableRef, { width: tableWidth }] = useDataGridSize<HTMLDivElement>()\n    const deferredTableWidth = React.useDeferredValue(tableWidth)\n\n    React.useLayoutEffect(() => {\n        hideColumns.map(({ below, hide }) => {\n            table.getAllLeafColumns().map(column => {\n                if (hide.includes(column.id)) {\n                    if (tableWidth !== 0 && tableWidth < below) {\n                        if (column.getIsVisible()) column.toggleVisibility(false)\n                    } else {\n                        if (!column.getIsVisible()) column.toggleVisibility(true)\n                    }\n                }\n            })\n        })\n    }, [hideColumns, deferredTableWidth])\n\n    return {\n        tableRef,\n        tableWidth,\n    }\n\n}\n"
      },
      {
        "name": "use-datagrid-row-selection.ts",
        "dir": "datagrid",
        "content": "import { Row, Table } from \"@tanstack/react-table\"\nimport * as React from \"react\"\n\nexport type DataGridOnRowSelect<T> = (event: DataGridRowSelectedEvent<T>) => void\n\ntype DataGridRowSelectionProps<T> = {\n    /**\n     * Whether the row selection is persistent.\n     * If true, the selected rows will be cached and restored when the table is paginated, filtered, sorted or when the data changes.\n     */\n    persistent: boolean\n    /**\n     * Callback fired when a row is selected.\n     */\n    onRowSelect?: DataGridOnRowSelect<T>\n    /**\n     * The table instance.\n     */\n    table: Table<T>,\n    /**\n     * The data passed to the table.\n     */\n    data: T[] | null\n    /**\n     * The rows currently displayed in the table.\n     */\n    displayedRows: Row<T>[]\n    /**\n     * The primary key of the data. This is used to identify the rows.\n     */\n    rowSelectionPrimaryKey: string | undefined\n    /**\n     * Whether row selection is enabled.\n     */\n    enabled: boolean\n}\n\nexport type DataGridRowSelectedEvent<T> = {\n    data: T[]\n}\n\nexport function useDataGridRowSelection<T extends Record<string, any>>(props: DataGridRowSelectionProps<T>) {\n\n    const {\n        table,\n        data,\n        onRowSelect,\n        persistent,\n        rowSelectionPrimaryKey: key,\n        displayedRows,\n        enabled,\n    } = props\n\n\n    const rowSelection = React.useMemo(() => table.getState().rowSelection, [table.getState().rowSelection])\n    const selectedRowsRef = React.useRef<Map<string | number, T>>(new Map())\n\n    //----------------------------------\n\n    const canSelect = React.useRef<boolean>(enabled)\n\n    React.useEffect(() => {\n        selectedRowsRef.current.clear()\n\n        if (enabled && !key) {\n            console.error(\n                \"[DataGrid] You've enable row selection without providing a primary key. Make sure to define the `rowSelectionPrimaryKey` prop.\")\n            canSelect.current = false\n        }\n    }, [])\n\n    const firstCheckRef = React.useRef<boolean>(false)\n\n    React.useEffect(() => {\n        if (enabled && key && !firstCheckRef.current && displayedRows.length > 0 && !displayedRows.some(row => !!row.original[key])) {\n            console.error(\"[DataGrid] The key provided by `rowSelectionPrimaryKey` does not match any property in the data.\")\n            firstCheckRef.current = true\n            canSelect.current = false\n        }\n    }, [displayedRows])\n\n    /** Client-side row selection **/\n    React.useEffect(() => {\n        if (data && data?.length > 0 && canSelect.current && !!key) {\n            const selectedKeys = new Set<string | number>(Object.keys(rowSelection))\n\n            if (persistent) {\n                // Remove the keys that are no longer selected\n                selectedRowsRef.current.forEach((_, k) => {\n                    if (!selectedKeys.has(k.toString())) {\n                        selectedRowsRef.current.delete(k)\n                    }\n                })\n\n                // Add the selected rows to the selectedRowsRef\n                selectedKeys.forEach(n => {\n                    const row = data.find((v: any) => v[key] === n)\n                    if (row) {\n                        selectedRowsRef.current.set(n, row)\n                    }\n                })\n\n                onRowSelect && onRowSelect({\n                    data: Array.from(selectedRowsRef.current.values()).filter((v: any) => selectedKeys.has(v[key])) ?? [],\n                })\n            } else {\n                onRowSelect && onRowSelect({\n                    data: data.filter((v: any) => selectedKeys.has(v[key])) ?? [],\n                })\n            }\n\n        }\n    }, [rowSelection])\n\n\n    return {\n        selectedRowCount: Object.keys(rowSelection).length,\n    }\n\n}\n"
      },
      {
        "name": "use-datagrid-size.ts",
        "dir": "datagrid",
        "content": "import * as React from \"react\"\nimport { useEventListener, useIsomorphicLayoutEffect } from \"../core/hooks\"\n\nexport function useDataGridSize<T extends HTMLElement = HTMLDivElement>(): [\n    (node: T | null) => void,\n    { width: number, height: number },\n] {\n    const [ref, setRef] = React.useState<T | null>(null)\n    const [size, setSize] = React.useState<{ width: number, height: number }>({\n        width: 0,\n        height: 0,\n    })\n\n    const handleSize = React.useCallback(() => {\n        setSize({\n            width: ref?.offsetWidth || 0,\n            height: ref?.offsetHeight || 0,\n        })\n\n    }, [ref?.offsetHeight, ref?.offsetWidth])\n\n    useEventListener(\"resize\", handleSize)\n\n    useIsomorphicLayoutEffect(() => {\n        handleSize()\n    }, [ref?.offsetHeight, ref?.offsetWidth])\n\n    return [setRef, size]\n}\n"
      }
    ]
  },
  {
    "component": "date-picker",
    "name": "DatePicker",
    "dependencies": [
      [
        "date-fns",
        "^4.1.0",
        ""
      ],
      [
        "react-day-picker",
        "^9.2.1",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "calendar",
      "input",
      "modal",
      "popover",
      "select"
    ],
    "files": [
      {
        "name": "date-picker.tsx",
        "dir": "date-picker",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { format, getYear, setYear, Locale } from \"date-fns\"\nimport * as React from \"react\"\nimport { DayPickerProps } from \"react-day-picker\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Calendar } from \"../calendar\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Modal } from \"../modal\"\nimport { Popover } from \"../popover\"\nimport { Select } from \"../select\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DatePickerAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DatePicker__root\",\n        \"line-clamp-1 text-left\"\n    ]),\n    placeholder: cva([\n        \"UI-DatePicker__placeholder\",\n        \"text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DatePicker\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DatePickerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof DatePickerAnatomy> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The selected date\n     */\n    value?: Date\n    /**\n     * Callback fired when the selected date changes\n     */\n    onValueChange?: (value: Date | undefined) => void\n    /**\n     * Default value if uncontrolled\n     */\n    defaultValue?: Date\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * The locale for formatting the date\n     */\n    locale?: Locale\n    /**\n     * Hide the year selector above the calendar\n     */\n    hideYearSelector?: boolean\n    /**\n     * Props to pass to the date picker\n     * @see https://react-day-picker.js.org/api/interfaces/DayPickerProps\n     */\n    pickerOptions?: Omit<DayPickerProps, \"locale\">\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n}\n\nexport const DatePicker = React.forwardRef<HTMLButtonElement, DatePickerProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<DatePickerProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        placeholderClass,\n        /**/\n        value: controlledValue,\n        onValueChange,\n        placeholder,\n        locale,\n        hideYearSelector,\n        pickerOptions,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<DatePickerProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon || <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"size-4\"\n        >\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" ry=\"2\" />\n            <line x1=\"16\" x2=\"16\" y1=\"2\" y2=\"6\" />\n            <line x1=\"8\" x2=\"8\" y1=\"2\" y2=\"6\" />\n            <line x1=\"3\" x2=\"21\" y1=\"10\" y2=\"10\" />\n        </svg>,\n    })\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const isFirst = React.useRef(true)\n\n    const [date, setDate] = React.useState<Date | undefined>(controlledValue || defaultValue)\n\n    const handleOnSelect = React.useCallback((date: Date | undefined) => {\n        setDate(date)\n        onValueChange?.(date)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            setDate(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const Input = (\n        <button\n            ref={mergeRefs([buttonRef, ref])}\n            id={basicFieldProps.id}\n            name={basicFieldProps.name}\n            className={cn(\n                \"form-input\",\n                InputAnatomy.root({\n                    size,\n                    intent,\n                    hasError: !!basicFieldProps.error,\n                    isDisabled: !!basicFieldProps.disabled,\n                    isReadonly: !!basicFieldProps.readonly,\n                    hasRightAddon: !!rightAddon,\n                    hasRightIcon: !!rightIcon,\n                    hasLeftAddon: !!leftAddon,\n                    hasLeftIcon: !!leftIcon,\n                }),\n                DatePickerAnatomy.root(),\n                className,\n            )}\n            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n            data-disabled={basicFieldProps.disabled}\n            data-readonly={basicFieldProps.readonly}\n            aria-readonly={basicFieldProps.readonly}\n            {...rest}\n        >\n            {date ?\n                format(date, \"P\", { locale: locale }) :\n                <span className={cn(DatePickerAnatomy.placeholder(), placeholderClass)}>{placeholder || \"Select a date\"}</span>}\n        </button>\n    )\n\n    const Picker = (\n        <div>\n            {!hideYearSelector && <div className=\"flex items-center justify-between p-1 sm:border-b\">\n                <Select\n                    size=\"sm\"\n                    intent=\"filled\"\n                    options={Array(getYear(new Date()) - 1699).fill(0).map((_, i) => (\n                        { label: String(getYear(new Date()) + 100 - i), value: String(getYear(new Date()) + 100 - i) }\n                    ))}\n                    value={String(getYear(date ?? new Date()))}\n                    onValueChange={value => setDate(setYear(date ?? new Date(), Number(value)))}\n                />\n            </div>}\n            <Calendar\n                {...pickerOptions}\n                mode=\"single\"\n                month={date ?? new Date()}\n                onMonthChange={month => setDate(month)}\n                selected={date}\n                onSelect={handleOnSelect}\n                locale={locale}\n                monthGridClass=\"w-auto mx-auto\"\n            />\n        </div>\n    )\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <div className=\"hidden sm:block w-full\">\n                    <Popover\n                        className=\"w-auto p-0\"\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Popover>\n                </div>\n\n                <div className=\"block sm:hidden w-full\">\n                    <Modal\n                        title={placeholder || \"Select a date\"}\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Modal>\n                </div>\n\n                <input\n                    ref={inputRef}\n                    type=\"date\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={date ? date.toISOString().split(\"T\")[0] : \"\"}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nDatePicker.displayName = \"DatePicker\"\n"
      },
      {
        "name": "date-range-picker.tsx",
        "dir": "date-picker",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { format, Locale } from \"date-fns\"\nimport * as React from \"react\"\nimport { DateRange, DayPickerProps } from \"react-day-picker\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Calendar } from \"../calendar\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Modal } from \"../modal\"\nimport { Popover } from \"../popover\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DateRangePickerAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DateRangePicker__root\",\n        \"line-clamp-1 text-left\",\n    ]),\n    placeholder: cva([\n        \"UI-DateRangePicker__placeholder\",\n        \"text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DateRangePicker\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DateRangePickerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof DateRangePickerAnatomy> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The selected date\n     */\n    value?: DateRange\n    /**\n     * Default value if uncontrolled\n     */\n    defaultValue?: DateRange\n    /**\n     * Callback fired when the selected date changes\n     */\n    onValueChange?: (value: DateRange | undefined) => void\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * The locale for formatting the date\n     */\n    locale?: Locale\n    /**\n     * Props to pass to the date picker\n     * @see https://react-day-picker.js.org/api/interfaces/DayPickerProps\n     */\n    pickerOptions?: Omit<DayPickerProps, \"locale\">\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n}\n\nexport const DateRangePicker = React.forwardRef<HTMLButtonElement, DateRangePickerProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<DateRangePickerProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        placeholderClass,\n        /**/\n        value: controlledValue,\n        onValueChange,\n        placeholder,\n        locale,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<DateRangePickerProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon || <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"size-4\"\n        >\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" ry=\"2\" />\n            <line x1=\"16\" x2=\"16\" y1=\"2\" y2=\"6\" />\n            <line x1=\"8\" x2=\"8\" y1=\"2\" y2=\"6\" />\n            <line x1=\"3\" x2=\"21\" y1=\"10\" y2=\"10\" />\n        </svg>,\n    })\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const isFirst = React.useRef(true)\n\n    const [date, setDate] = React.useState<DateRange | undefined>(controlledValue || defaultValue)\n\n    const handleOnSelect = React.useCallback((date: DateRange | undefined) => {\n        setDate(date)\n        onValueChange?.(date)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            setDate(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const Input = (\n        <button\n            ref={mergeRefs([buttonRef, ref])}\n            id={basicFieldProps.id}\n            name={basicFieldProps.name}\n            className={cn(\n                \"form-input\",\n                InputAnatomy.root({\n                    size,\n                    intent,\n                    hasError: !!basicFieldProps.error,\n                    isDisabled: !!basicFieldProps.disabled,\n                    isReadonly: !!basicFieldProps.readonly,\n                    hasRightAddon: !!rightAddon,\n                    hasRightIcon: !!rightIcon,\n                    hasLeftAddon: !!leftAddon,\n                    hasLeftIcon: !!leftIcon,\n                }),\n                DateRangePickerAnatomy.root(),\n                className,\n            )}\n            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n            data-disabled={basicFieldProps.disabled}\n            data-readonly={basicFieldProps.readonly}\n            aria-readonly={basicFieldProps.readonly}\n            {...rest}\n        >\n            {date?.from ? (\n                date.to ? <span className=\"line-clamp-1\">{`${format(date.from, \"P\")} - ${format(date.to, \"P\")}`}</span> : format(date.from, \"PPP\")\n            ) : <span className={cn(DateRangePickerAnatomy.placeholder(), placeholderClass)}>{placeholder || \"Select a date\"}</span>}\n        </button>\n    )\n\n    const Picker = (\n        <Calendar\n            mode=\"range\"\n            defaultMonth={date?.from ?? new Date()}\n            selected={date}\n            onSelect={handleOnSelect}\n            locale={locale}\n            monthGridClass=\"w-auto mx-auto\"\n            numberOfMonths={2}\n        />\n    )\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <div className=\"hidden sm:block w-full\">\n                    <Popover\n                        className=\"w-auto p-0\"\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Popover>\n                </div>\n\n                <div className=\"block sm:hidden w-full\">\n                    <Modal\n                        title={placeholder || \"Select a date\"}\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Modal>\n                </div>\n\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={date ? `${date.from?.toISOString()?.split(\"T\")?.[0]}${date.to ? \",\" + date.to.toISOString().split(\"T\")[0] : \"\"}` : \"\"}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nDateRangePicker.displayName = \"DateRangePicker\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "date-picker",
        "content": "export * from \"./date-picker\"\nexport * from \"./date-range-picker\"\n"
      }
    ]
  },
  {
    "component": "disclosure",
    "name": "Disclosure",
    "dependencies": [
      [
        "@radix-ui/react-accordion",
        "^1.2.1",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "disclosure.tsx",
        "dir": "disclosure",
        "content": "\"use client\"\n\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DisclosureAnatomy = defineStyleAnatomy({\n    item: cva([\n        \"UI-Disclosure__item\",\n    ]),\n    contentContainer: cva([\n        \"UI-Disclosure__contentContainer\",\n        \"overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n    ]),\n    content: cva([\n        \"UI-Disclosure__content\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Disclosure\n * -----------------------------------------------------------------------------------------------*/\n\nconst __DisclosureAnatomyContext = React.createContext<ComponentAnatomy<typeof DisclosureAnatomy>>({})\n\nexport type DisclosureProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> &\n    ComponentAnatomy<typeof DisclosureAnatomy>\n\nexport const Disclosure = React.forwardRef<HTMLDivElement, DisclosureProps>((props, ref) => {\n\n    const {\n        contentContainerClass,\n        contentClass,\n        itemClass,\n        ...rest\n    } = props\n\n    return (\n        <__DisclosureAnatomyContext.Provider\n            value={{\n                itemClass,\n                contentContainerClass,\n                contentClass,\n            }}\n        >\n            <AccordionPrimitive.Root\n                ref={ref}\n                {...rest}\n            />\n        </__DisclosureAnatomyContext.Provider>\n    )\n\n})\nDisclosure.displayName = \"Disclosure\"\n\n/* -------------------------------------------------------------------------------------------------\n * DisclosureItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DisclosureItemProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> &\n    ComponentAnatomy<typeof DisclosureAnatomy>\n\nexport const DisclosureItem = React.forwardRef<HTMLDivElement, DisclosureItemProps>((props, ref) => {\n\n    const { className, ...rest } = props\n\n    const { itemClass } = React.useContext(__DisclosureAnatomyContext)\n\n    return (\n        <AccordionPrimitive.Item\n            ref={ref}\n            className={cn(DisclosureAnatomy.item(), itemClass, className)}\n            {...rest}\n        />\n    )\n\n})\nDisclosureItem.displayName = \"DisclosureItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * DisclosureTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DisclosureTriggerProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n\nexport const DisclosureTrigger = React.forwardRef<HTMLButtonElement, DisclosureTriggerProps>((props, ref) => {\n    return (\n        <AccordionPrimitive.Header asChild>\n            <AccordionPrimitive.Trigger ref={ref} asChild {...props} />\n        </AccordionPrimitive.Header>\n    )\n})\nDisclosureTrigger.displayName = \"DisclosureTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * DisclosureContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DisclosureContentProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n    & Omit<ComponentAnatomy<typeof DisclosureAnatomy>, \"contentClass\">\n\nexport const DisclosureContent = React.forwardRef<HTMLDivElement, DisclosureContentProps>((props, ref) => {\n\n    const {\n        className,\n        contentContainerClass,\n        children,\n        ...rest\n    } = props\n\n    const {\n        contentContainerClass: _contentContainerClass,\n        contentClass: _contentClass,\n    } = React.useContext(__DisclosureAnatomyContext)\n\n    return (\n        <AccordionPrimitive.Content\n            ref={ref}\n            className={cn(DisclosureAnatomy.contentContainer(), _contentContainerClass, contentContainerClass)}\n            {...rest}\n        >\n            <div className={cn(DisclosureAnatomy.content(), _contentClass, className)}>\n                {children}\n            </div>\n        </AccordionPrimitive.Content>\n    )\n})\nDisclosureContent.displayName = \"DisclosureContent\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "disclosure",
        "content": "export * from \"./disclosure\"\n"
      }
    ]
  },
  {
    "component": "drawer",
    "name": "Drawer",
    "dependencies": [
      [
        "@radix-ui/react-dialog",
        "^1.1.2",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "drawer.tsx",
        "dir": "drawer",
        "content": "\"use client\"\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { CloseButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DrawerAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-Drawer__overlay\",\n        \"fixed inset-0 z-[50] bg-black/80\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n    ]),\n    content: cva([\n        \"UI-Drawer__content\",\n        \"fixed z-50 w-full gap-4 bg-[--background] p-6 shadow-lg overflow-y-auto\",\n        \"transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-500 data-[state=open]:duration-500\",\n    ], {\n        variants: {\n            side: {\n                top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n                bottom: \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n                left: \"inset-y-0 left-0 h-full border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\n                right: \"inset-y-0 right-0 h-full border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\n            },\n            size: { sm: null, md: null, lg: null, xl: null, full: \"w-[90%]\" },\n        },\n        defaultVariants: {\n            side: \"right\",\n            size: \"md\",\n        },\n        compoundVariants: [\n            { size: \"sm\", side: \"left\", className: \"sm:max-w-sm\" },\n            { size: \"sm\", side: \"right\", className: \"sm:max-w-sm\" },\n            { size: \"md\", side: \"left\", className: \"sm:max-w-md\" },\n            { size: \"md\", side: \"right\", className: \"sm:max-w-md\" },\n            { size: \"lg\", side: \"left\", className: \"sm:max-w-2xl\" },\n            { size: \"lg\", side: \"right\", className: \"sm:max-w-2xl\" },\n            { size: \"xl\", side: \"left\", className: \"sm:max-w-5xl\" },\n            { size: \"xl\", side: \"right\", className: \"sm:max-w-5xl\" },\n            /**/\n            { size: \"full\", side: \"top\", className: \"h-dvh\" },\n            { size: \"full\", side: \"bottom\", className: \"h-dvh\" },\n        ],\n    }),\n    close: cva([\n        \"UI-Drawer__close\",\n        \"absolute right-4 top-4\",\n    ]),\n    header: cva([\n        \"UI-Drawer__header\",\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n    ]),\n    footer: cva([\n        \"UI-Drawer__footer\",\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n    ]),\n    title: cva([\n        \"UI-Drawer__title\",\n        \"text-xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Drawer__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Drawer\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DrawerProps = Omit<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>, \"modal\"> &\n    Pick<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>,\n        \"onOpenAutoFocus\" | \"onCloseAutoFocus\" | \"onEscapeKeyDown\" | \"onPointerDownCapture\" | \"onInteractOutside\"> &\n    VariantProps<typeof DrawerAnatomy.content> &\n    ComponentAnatomy<typeof DrawerAnatomy> & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The button that opens the modal\n     */\n    trigger?: React.ReactElement\n    /**\n     * Title of the modal\n     */\n    title?: React.ReactNode\n    /**\n     * An optional accessible description to be announced when the dialog is opened.\n     */\n    description?: React.ReactNode\n    /**\n     * Footer of the modal\n     */\n    footer?: React.ReactNode\n    /**\n     * Optional replacement for the default close button\n     */\n    closeButton?: React.ReactElement\n    /**\n     * Whether to hide the close button\n     */\n    hideCloseButton?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n\n    const {\n        allowOutsideInteraction = false,\n        trigger,\n        title,\n        footer,\n        description,\n        children,\n        closeButton,\n        overlayClass,\n        contentClass,\n        closeClass,\n        headerClass,\n        footerClass,\n        titleClass,\n        descriptionClass,\n        hideCloseButton,\n        side,\n        size,\n        // Content\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onEscapeKeyDown,\n        onPointerDownCapture,\n        onInteractOutside,\n        ...rest\n    } = props\n\n    return (\n        <DialogPrimitive.Root modal={!allowOutsideInteraction} {...rest}>\n\n            {trigger && <DialogPrimitive.Trigger asChild>{trigger}</DialogPrimitive.Trigger>}\n\n            <DialogPrimitive.Portal>\n\n                <DialogPrimitive.Overlay className={cn(DrawerAnatomy.overlay(), overlayClass)} />\n\n                <DialogPrimitive.Content\n                    className={cn(DrawerAnatomy.content({ size, side }), contentClass)}\n                    onOpenAutoFocus={onOpenAutoFocus}\n                    onCloseAutoFocus={onCloseAutoFocus}\n                    onEscapeKeyDown={onEscapeKeyDown}\n                    onPointerDownCapture={onPointerDownCapture}\n                    onInteractOutside={onInteractOutside}\n                >\n\n                    {(title || description) && <div className={cn(DrawerAnatomy.header(), headerClass)}>\n                        {title && <DialogPrimitive.Title className={cn(DrawerAnatomy.title(), titleClass)}>\n                            {title}\n                        </DialogPrimitive.Title>}\n                        {description && <DialogPrimitive.Description className={cn(DrawerAnatomy.description(), descriptionClass)}>\n                            {description}\n                        </DialogPrimitive.Description>}\n                    </div>}\n\n                    {children}\n\n                    {footer && <div className={cn(DrawerAnatomy.footer(), footerClass)}>\n                        {footer}\n                    </div>}\n\n                    {!hideCloseButton && <DialogPrimitive.Close className={cn(DrawerAnatomy.close(), closeClass)} asChild>\n                        {closeButton ? closeButton : <CloseButton />}\n                    </DialogPrimitive.Close>}\n\n                </DialogPrimitive.Content>\n\n            </DialogPrimitive.Portal>\n\n        </DialogPrimitive.Root>\n    )\n}\n\nDrawer.displayName = \"Drawer\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "drawer",
        "content": "export * from \"./drawer\"\n"
      }
    ]
  },
  {
    "component": "dropdown-menu",
    "name": "DropdownMenu",
    "dependencies": [
      [
        "@radix-ui/react-dropdown-menu",
        "^2.1.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "dropdown-menu.tsx",
        "dir": "dropdown-menu",
        "content": "\"use client\"\n\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DropdownMenuAnatomy = defineStyleAnatomy({\n    subTrigger: cva([\n        \"UI-DropdownMenu__subTrigger\",\n        \"focus:bg-[--subtle] data-[state=open]:bg-[--subtle]\",\n    ]),\n    subContent: cva([\n        \"UI-DropdownMenu__subContent\",\n        \"z-50 min-w-[12rem] overflow-hidden rounded-[--radius] border bg-[--paper] p-1 text-[--foreground] shadow-sm\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n    root: cva([\n        \"UI-DropdownMenu__root\",\n        \"z-50 min-w-[12rem] overflow-hidden rounded-[--radius] border bg-[--paper] p-1 text-[--foreground] shadow-sm\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n    item: cva([\n        \"UI-DropdownMenu__item\",\n        \"relative flex cursor-default select-none items-center rounded-[--radius] px-2 py-1 text-sm outline-none transition-colors\",\n        \"focus:bg-[--subtle] data-[disabled]:pointer-events-none\",\n        \"data-[disabled]:opacity-50\",\n    ]),\n    group: cva([\n        \"UI-DropdownMenu__group\",\n    ]),\n    label: cva([\n        \"UI-DropdownMenu__label\",\n        \"px-2 py-1.5 text-sm font-semibold text-[--muted]\",\n    ]),\n    separator: cva([\n        \"UI-DropdownMenu__separator\",\n        \"-mx-1 my-1 h-px bg-[--border]\",\n    ]),\n    shortcut: cva([\n        \"UI-DropdownMenu__shortcut\",\n        \"ml-auto text-xs tracking-widest opacity-60\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst __DropdownMenuAnatomyContext = React.createContext<ComponentAnatomy<typeof DropdownMenuAnatomy>>({})\n\nexport type DropdownMenuProps =\n    ComponentAnatomy<typeof DropdownMenuAnatomy> &\n    Pick<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Root>, \"defaultOpen\" | \"open\" | \"onOpenChange\" | \"dir\"> &\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content> & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The trigger element that is always visible and is used to open the menu.\n     */\n    trigger?: React.ReactNode\n}\n\nexport const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {\n    const {\n        children,\n        trigger,\n        // Root\n        defaultOpen,\n        open,\n        onOpenChange,\n        dir,\n        allowOutsideInteraction,\n        // Content\n        sideOffset = 4,\n        className,\n        subContentClass,\n        subTriggerClass,\n        shortcutClass,\n        itemClass,\n        labelClass,\n        separatorClass,\n        groupClass,\n        ...rest\n    } = props\n\n    return (\n        <__DropdownMenuAnatomyContext.Provider\n            value={{\n                subContentClass,\n                subTriggerClass,\n                shortcutClass,\n                itemClass,\n                labelClass,\n                separatorClass,\n                groupClass,\n            }}\n        >\n            <DropdownMenuPrimitive.Root\n                defaultOpen={defaultOpen}\n                open={open}\n                onOpenChange={onOpenChange}\n                dir={dir}\n                modal={!allowOutsideInteraction}\n                {...rest}\n            >\n                <DropdownMenuPrimitive.Trigger asChild>\n                    {trigger}\n                </DropdownMenuPrimitive.Trigger>\n\n                <DropdownMenuPrimitive.Portal>\n                    <DropdownMenuPrimitive.Content\n                        ref={ref}\n                        sideOffset={sideOffset}\n                        className={cn(DropdownMenuAnatomy.root(), className)}\n                        {...rest}\n                    >\n                        {children}\n                    </DropdownMenuPrimitive.Content>\n                </DropdownMenuPrimitive.Portal>\n            </DropdownMenuPrimitive.Root>\n        </__DropdownMenuAnatomyContext.Provider>\n    )\n})\n\nDropdownMenu.displayName = \"DropdownMenu\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuGroupProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Group>\n\nexport const DropdownMenuGroup = React.forwardRef<HTMLDivElement, DropdownMenuGroupProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { groupClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Group\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.group(), groupClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuSubProps =\n    Pick<ComponentAnatomy<typeof DropdownMenuAnatomy>, \"subTriggerClass\"> &\n    Pick<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Sub>, \"defaultOpen\" | \"open\" | \"onOpenChange\"> &\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent> & {\n    /**\n     * The content of the default trigger element that will open the sub menu.\n     *\n     * By default, the trigger will be an item with a right chevron icon.\n     */\n    triggerContent?: React.ReactNode\n    /**\n     * Props to pass to the default trigger element that will open the sub menu.\n     */\n    triggerProps?: React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger>\n    triggerInset?: boolean\n}\n\nexport const DropdownMenuSub = React.forwardRef<HTMLDivElement, DropdownMenuSubProps>((props, ref) => {\n    const {\n        children,\n        triggerContent,\n        triggerProps,\n        triggerInset,\n        // Sub\n        defaultOpen,\n        open,\n        onOpenChange,\n        // SubContent\n        sideOffset = 8,\n        className,\n        subTriggerClass,\n        ...rest\n    } = props\n\n    const { subTriggerClass: _subTriggerClass, subContentClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Sub\n            {...rest}\n        >\n            <DropdownMenuPrimitive.SubTrigger\n                className={cn(\n                    DropdownMenuAnatomy.item(),\n                    DropdownMenuAnatomy.subTrigger(),\n                    triggerInset && \"pl-8\",\n                    _subTriggerClass,\n                    subTriggerClass,\n                    className,\n                )}\n                {...triggerProps}\n            >\n                {triggerContent}\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(\n                        DropdownMenuAnatomy.shortcut(),\n                        \"w-4 h-4 ml-auto\",\n                    )}\n                >\n                    <path d=\"m9 18 6-6-6-6\" />\n                </svg>\n            </DropdownMenuPrimitive.SubTrigger>\n\n            <DropdownMenuPrimitive.Portal>\n                <DropdownMenuPrimitive.SubContent\n                    ref={ref}\n                    sideOffset={sideOffset}\n                    className={cn(\n                        DropdownMenuAnatomy.subContent(),\n                        subContentClass,\n                        className,\n                    )}\n                    {...rest}\n                >\n                    {children}\n                </DropdownMenuPrimitive.SubContent>\n            </DropdownMenuPrimitive.Portal>\n        </DropdownMenuPrimitive.Sub>\n    )\n})\n\nDropdownMenuSub.displayName = \"DropdownMenuSub\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuItemProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n}\n\nexport const DropdownMenuItem = React.forwardRef<HTMLDivElement, DropdownMenuItemProps>((props, ref) => {\n    const { className, inset, ...rest } = props\n\n    const { itemClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Item\n            ref={ref}\n            className={cn(\n                DropdownMenuAnatomy.item(),\n                inset && \"pl-8\",\n                itemClass,\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuLabelProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}\n\nexport const DropdownMenuLabel = React.forwardRef<HTMLDivElement, DropdownMenuLabelProps>((props, ref) => {\n    const { className, inset, ...rest } = props\n\n    const { labelClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Label\n            ref={ref}\n            className={cn(\n                DropdownMenuAnatomy.label(),\n                inset && \"pl-8\",\n                labelClass,\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuSeparatorProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n\nexport const DropdownMenuSeparator = React.forwardRef<HTMLDivElement, DropdownMenuSeparatorProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { separatorClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Separator\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.separator(), separatorClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuShortcut\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuShortcutProps = React.HTMLAttributes<HTMLSpanElement>\n\nexport const DropdownMenuShortcut = React.forwardRef<HTMLSpanElement, DropdownMenuShortcutProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { shortcutClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <span\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.shortcut(), shortcutClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "dropdown-menu",
        "content": "export * from \"./dropdown-menu\"\n"
      }
    ]
  },
  {
    "component": "form",
    "name": "Form",
    "dependencies": [
      [
        "zod",
        "^3.23.8",
        ""
      ],
      [
        "react-hook-form",
        "^7.53.1",
        ""
      ],
      [
        "@hookform/resolvers",
        "^3.9.1",
        ""
      ]
    ],
    "family": [
      "button",
      "loading-spinner",
      "modal",
      "address-input",
      "autocomplete",
      "basic-field",
      "checkbox",
      "combobox",
      "currency-input",
      "date-picker",
      "simple-dropzone",
      "native-select",
      "number-input",
      "phone-input",
      "radio-group",
      "select",
      "switch",
      "text-input",
      "textarea"
    ],
    "files": [
      {
        "name": "danger-zone.tsx",
        "dir": "form",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Button } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport { Modal } from \"../modal\"\nimport locales from \"./locales.json\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DangerZoneAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DangerZone__root\",\n        \"p-4 flex flex-col sm:flex-row gap-2 text-center sm:text-left rounded-md border border-[--red]\",\n    ]),\n    icon: cva([\n        \"UI-DangerZone__icon\",\n        \"place-self-center sm:place-self-start text-red-500 w-4 mt-2\",\n    ]),\n    title: cva([\n        \"UI-DangerZone__title\",\n        \"text-lg text-[--red] font-semibold\",\n    ]),\n    dialogTitle: cva([\n        \"UI-DangerZone__dialogTitle\",\n        \"text-lg font-medium leading-6\",\n    ]),\n    dialogBody: cva([\n        \"UI-DangerZone__dialogBody\",\n        \"mt-2 text-sm text-[--muted]\",\n    ]),\n    dialogAction: cva([\n        \"UI-DangerZone__dialogAction\",\n        \"mt-4 flex gap-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DangerZone\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DangerZoneProps = React.ComponentPropsWithRef<\"div\"> & ComponentAnatomy<typeof DangerZoneAnatomy> & {\n    /**\n     * Description of the action that will be performed when the delete button is clicked.\n     */\n    actionText: string\n    /**\n     * Callback fired when the delete button is clicked.\n     */\n    onDelete?: () => void\n    /**\n     * If true, a loading overlay will be shown when the delete button is clicked.\n     * @default true\n     **/\n    showLoadingOverlayOnDelete?: boolean\n    locale?: \"fr\" | \"en\"\n}\n\nexport const DangerZone = React.forwardRef<HTMLDivElement, DangerZoneProps>((props, ref) => {\n\n    const {\n        children,\n        actionText,\n        onDelete,\n        className,\n        locale = \"en\",\n        showLoadingOverlayOnDelete = true,\n        titleClass,\n        iconClass,\n        dialogBodyClass,\n        dialogTitleClass,\n        dialogActionClass,\n        ...rest\n    } = props\n\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const [blockScreen, setBlockScreen] = React.useState<boolean>(false)\n\n    return (\n        <>\n            <LoadingOverlay hide={!blockScreen} />\n\n            <div ref={ref} className={cn(DangerZoneAnatomy.root(), className)} {...rest}>\n                <span className={cn(DangerZoneAnatomy.icon(), iconClass)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                        <path\n                            d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"\n                        ></path>\n                    </svg>\n                </span>\n                <div>\n                    <h2 className={cn(DangerZoneAnatomy.title(), titleClass)}>{locales[\"dangerZone\"][\"name\"][locale]}</h2>\n                    <p className=\"\"><span\n                        className=\"font-semibold\"\n                    >{actionText}</span>. {locales[\"dangerZone\"][\"irreversible_action\"][locale]}\n                    </p>\n                    <Button\n                        size=\"sm\"\n                        intent=\"alert-subtle\"\n                        className=\"mt-2\"\n                        leftIcon={<span className=\"w-4\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                <path\n                                    d=\"M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z\"\n                                ></path>\n                            </svg>\n                        </span>}\n                        onClick={() => setIsOpen(true)}\n                    >{locales[\"dangerZone\"][\"delete\"][locale]}</Button>\n                </div>\n            </div>\n\n            <Modal open={isOpen} onOpenChange={open => setIsOpen(open)}>\n                <h3 className={cn(DangerZoneAnatomy.dialogTitle(), dialogTitleClass)}>\n                    {locales[\"dangerZone\"][\"confirm_delete\"][locale]}\n                </h3>\n                <div className={cn(DangerZoneAnatomy.dialogBody(), dialogBodyClass)}>\n                    {locales[\"dangerZone\"][\"irreversible_action\"][locale]}\n                </div>\n\n                <div className={cn(DangerZoneAnatomy.dialogAction(), dialogActionClass)}>\n                    <Button\n                        intent=\"gray-outline\"\n                        size=\"sm\"\n                        onClick={() => setIsOpen(false)}\n                    >{locales[\"dangerZone\"][\"cancel\"][locale]}</Button>\n                    <Button\n                        intent=\"alert\" size=\"sm\" onClick={() => {\n                        setIsOpen(false)\n                        showLoadingOverlayOnDelete && setBlockScreen(true)\n                        onDelete && onDelete()\n                    }}\n                    >{locales[\"dangerZone\"][\"delete\"][locale]}</Button>\n                </div>\n            </Modal>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "define-schema.ts",
        "dir": "form",
        "content": "import { z as zod, ZodType } from \"zod\"\nimport { schemaPresets } from \"./schema-presets\"\n\n/* -------------------------------------------------------------------------------------------------\n * Helper type\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InferType<S extends ZodType<any, any, any>> = zod.infer<S>\n\n/* -------------------------------------------------------------------------------------------------\n * Helper functions\n * -----------------------------------------------------------------------------------------------*/\n\ntype DataSchemaCallback<S extends zod.ZodRawShape> = ({ z, presets }: {\n    z: typeof zod,\n    presets: typeof schemaPresets\n}) => zod.ZodObject<S>\n\nexport const defineSchema = <S extends zod.ZodRawShape>(callback: DataSchemaCallback<S>): zod.ZodObject<S> => {\n    return callback({ z: zod, presets: schemaPresets })\n}\n"
      },
      {
        "name": "fields.tsx",
        "dir": "form",
        "content": "\"use client\"\n\nimport React, { forwardRef, useMemo } from \"react\"\nimport { Controller, FormState, get, useController, useFormContext } from \"react-hook-form\"\nimport { AddressInput, AddressInputProps } from \"../address-input\"\nimport { Autocomplete, AutocompleteProps } from \"../autocomplete\"\nimport { BasicFieldOptions } from \"../basic-field\"\nimport { Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps } from \"../checkbox\"\nimport { Combobox, ComboboxProps } from \"../combobox\"\nimport { CurrencyInput, CurrencyInputProps } from \"../currency-input\"\nimport { DatePicker, DatePickerProps, DateRangePicker, DateRangePickerProps } from \"../date-picker\"\nimport { SimpleDropzone, SimpleDropzoneProps } from \"../simple-dropzone\"\nimport { NativeSelect, NativeSelectProps } from \"../native-select\"\nimport { NumberInput, NumberInputProps } from \"../number-input\"\nimport { PhoneInput, PhoneInputProps } from \"../phone-input\"\nimport { RadioGroup, RadioGroupProps } from \"../radio-group\"\nimport { Select, SelectProps } from \"../select\"\nimport { Switch, SwitchProps } from \"../switch\"\nimport { TextInput, TextInputProps } from \"../text-input\"\nimport { Textarea, TextareaProps } from \"../textarea\"\nimport { useFormSchema } from \"./form\"\nimport { createPolymorphicComponent } from \"./polymorphic-component\"\nimport { SubmitField } from \"./submit-field\"\n\n\n/**\n * Add the BasicField types to any Field\n */\nexport type FieldBaseProps = Omit<BasicFieldOptions, \"name\"> & {\n    name: string\n    onChange?: any\n    onBlur?: any\n    required?: boolean\n}\n\nexport type FieldComponent<T> = T & FieldBaseProps\n\nexport type FieldProps = React.ComponentPropsWithRef<\"div\">\n\n/**\n * @description This wrapper makes it easier to work with custom form components by controlling their state.\n * @example\n * // Props order\n * <Controller>\n *    <InputComponent\n *       defaultValue={}   // Can be overridden\n *       onChange={}       // Can be overridden\n *       onBlur={}         // Can be overridden\n *       {...props}        // <FieldComponent {...} /> -> <Field.Component {...} />\n *       error={}          // Cannot be overridden\n *    />\n * </Controller>\n * @param InputComponent\n */\nexport function withControlledInput<T extends FieldBaseProps>(InputComponent: React.FC<T>) {\n    return forwardRef<FieldProps, T>(\n        (inputProps, ref) => {\n            const { control, formState, ...context } = useFormContext()\n            const { shape } = useFormSchema()\n\n            /* Get the `required` status from the Schema */\n            const required = useMemo(() => {\n                return !!get(shape, inputProps.name) &&\n                    !get(shape, inputProps.name)?.isOptional() &&\n                    !get(shape, inputProps.name)?.isNullable()\n            }, [shape])\n\n            return (\n                <Controller\n                    name={inputProps.name}\n                    control={control}\n                    rules={{ required: inputProps.required }}\n                    render={({ field: { ref: _ref, ...field } }) => (\n                        /**\n                         * We pass \"value, onChange, onBlur, error, required\" to all components that will be defined using the wrapper.\n                         * For other components like \"Switch\" and \"Checkbox\" which do not use the \"value\" prop, you need to deconstruct it to avoid it\n                         * being passed.\n                         */\n                        <InputComponent\n                            value={field.value} // Default prop, can be overridden in Field component definition\n                            onChange={callAllHandlers(inputProps.onChange, field.onChange)} // Default prop, can be overridden in Field component\n                            onBlur={callAllHandlers(inputProps.onBlur, field.onBlur)} // Default prop, can be overridden in Field component\n                            required={required}\n                            {...inputProps} // Props passed in <FieldComponent /> then props passed in <Field.Component />\n                            // The props below will not be overridden.\n                            // e.g: <Field.ComponentField error=\"Error\" /> will not work\n                            error={getFormError(field.name, formState)?.message}\n                            ref={useMergeRefs(ref, _ref)}\n                        />\n                    )}\n                />\n            )\n        },\n    )\n}\n\nconst withUncontrolledInput = <T extends FieldBaseProps>(InputComponent: React.FC<T>) => {\n    return forwardRef<HTMLInputElement, T>(\n        (props, ref) => {\n            const { register, formState } = useFormContext()\n            const { ref: _ref, ...field } = register(props.name)\n\n            return (\n                <InputComponent\n                    {...props}\n                    onChange={callAllHandlers(props.onChange, field.onChange)}\n                    onBlur={callAllHandlers(props.onBlur, field.onBlur)}\n                    error={getFormError(props.name, formState)?.message}\n                    name={field.name}\n                    ref={useMergeRefs(ref, _ref)}\n                />\n            )\n        },\n    )\n}\n\n\nconst TextInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<TextInputProps>>(\n    (props, ref) => {\n        return <TextInput\n            {...props}\n            value={props.value ?? \"\"}\n            ref={ref}\n        />\n    },\n)))\n\nconst TextareaField = React.memo(withControlledInput(forwardRef<HTMLTextAreaElement, FieldComponent<TextareaProps>>(\n    (props, ref) => {\n        return <Textarea\n            {...props}\n            value={props.value ?? \"\"}\n            ref={ref}\n        />\n    },\n)))\n\nconst DatePickerField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<DatePickerProps>>((\n    { onChange, ...props }, ref) => {\n\n    return <DatePicker\n        {...props}\n        onValueChange={onChange}\n        ref={ref}\n    />\n})))\n\nconst DateRangePickerField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<DateRangePickerProps>>((\n    { onChange, ...props }, ref) => {\n\n    return <DateRangePicker\n        {...props}\n        onValueChange={onChange}\n        ref={ref}\n    />\n})))\n\n\nconst NativeSelectField = React.memo(withControlledInput(forwardRef<HTMLSelectElement, FieldComponent<NativeSelectProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        // Set the default value as the first option if no default value is passed and there is no placeholder\n        React.useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value && !props.placeholder) {\n                controller.field.onChange(props.options?.[0]?.value)\n            }\n        }, [])\n\n        return <NativeSelect\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\nconst SelectField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<SelectProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <Select\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst NumberField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<NumberInputProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <NumberInput\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\n\nconst ComboboxField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<ComboboxProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <Combobox\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst SwitchField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<SwitchProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <Switch\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst CheckboxField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<CheckboxProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <Checkbox\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst CheckboxGroupField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<CheckboxGroupProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <CheckboxGroup\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\n\nconst RadioGroupField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<RadioGroupProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <RadioGroup\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\n\nconst CurrencyInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<CurrencyInputProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <CurrencyInput\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst PhoneInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<PhoneInputProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <PhoneInput\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst AutocompleteField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<AutocompleteProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <Autocomplete\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst AddressInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<AddressInputProps>>(\n    ({ onChange, ...props }, ref) => {\n        return <AddressInput\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nconst SimpleDropzoneField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<SimpleDropzoneProps>>(\n    ({ onChange, value, ...props }, ref) => {\n\n        const controller = useController({ name: props.name })\n\n        // Set the default value to an empty array\n        React.useEffect(() => {\n            controller.field.onChange([])\n        }, [])\n\n        return <SimpleDropzone\n            {...props}\n            onValueChange={onChange}\n            ref={ref}\n        />\n    },\n)))\n\nexport const Field = createPolymorphicComponent<\"div\", FieldProps, {\n    Text: typeof TextInputField,\n    Textarea: typeof TextareaField,\n    Select: typeof SelectField,\n    NativeSelect: typeof NativeSelectField,\n    Switch: typeof SwitchField,\n    Checkbox: typeof CheckboxField,\n    CheckboxGroup: typeof CheckboxGroupField,\n    RadioGroup: typeof RadioGroupField,\n    Currency: typeof CurrencyInputField,\n    Number: typeof NumberField,\n    DatePicker: typeof DatePickerField\n    DateRangePicker: typeof DateRangePickerField\n    Combobox: typeof ComboboxField\n    Phone: typeof PhoneInputField\n    Autocomplete: typeof AutocompleteField\n    Address: typeof AddressInputField\n    SimpleDropzone: typeof SimpleDropzoneField\n    Submit: typeof SubmitField\n}>({\n    Text: TextInputField,\n    Textarea: TextareaField,\n    Select: SelectField,\n    NativeSelect: NativeSelectField,\n    Switch: SwitchField,\n    Checkbox: CheckboxField,\n    CheckboxGroup: CheckboxGroupField,\n    RadioGroup: RadioGroupField,\n    Currency: CurrencyInputField,\n    Number: NumberField,\n    DatePicker: DatePickerField,\n    DateRangePicker: DateRangePickerField,\n    Combobox: ComboboxField,\n    Phone: PhoneInputField,\n    Autocomplete: AutocompleteField,\n    Address: AddressInputField,\n    SimpleDropzone: SimpleDropzoneField,\n    Submit: SubmitField,\n})\n\nField.displayName = \"Field\"\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\nexport const getFormError = (name: string, formState: FormState<{ [x: string]: any }>) => {\n    return get(formState.errors, name)\n}\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n    ref: ReactRef<T> | null | undefined,\n    value: T,\n) {\n    if (ref == null) return\n\n    if (typeof ref === \"function\") {\n        ref(value)\n        return\n    }\n\n    try {\n        ref.current = value\n    }\n    catch (error) {\n        throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n    }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n    return (node: T | null) => {\n        refs.forEach((ref) => {\n            assignRef(ref, node)\n        })\n    }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n    return useMemo(() => mergeRefs(...refs), refs)\n}\n\ntype Args<T extends Function> = T extends (...args: infer R) => any ? R : never\n\nfunction callAllHandlers<T extends (event: any) => void>(\n    ...fns: (T | undefined)[]\n) {\n    return function func(event: Args<T>[0]) {\n        fns.some((fn) => {\n            fn?.(event)\n            return event?.defaultPrevented\n        })\n    }\n}\n"
      },
      {
        "name": "form.tsx",
        "dir": "form",
        "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport * as React from \"react\"\nimport { FormProvider, SubmitErrorHandler, SubmitHandler, useForm, UseFormProps, UseFormReturn, WatchObserver } from \"react-hook-form\"\nimport { z, ZodObject } from \"zod\"\nimport { cn } from \"../core/styling\"\nimport { isEmpty } from \"../core/utils\"\nimport { getZodDefaults } from \"./zod-resolver\"\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nconst __FormSchemaContext = React.createContext<{\n    shape: z.ZodRawShape,\n    schema: z.ZodObject<z.ZodRawShape>\n} | undefined>(undefined)\n\nexport const useFormSchema = (): { shape: z.ZodRawShape, schema: z.ZodObject<z.ZodRawShape> } => {\n    return React.useContext(__FormSchemaContext)!\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nexport type FormProps<Schema extends z.ZodObject<z.ZodRawShape> = z.ZodObject<z.ZodRawShape>> =\n    UseFormProps<z.infer<Schema>> &\n    Omit<React.ComponentPropsWithRef<\"form\">, \"children\" | \"onChange\" | \"onSubmit\" | \"onError\" | \"ref\"> & {\n    /**\n     * The schema of the form.\n     */\n    schema: Schema\n    /**\n     * Callback invoked when the form is submitted.\n     */\n    onSubmit: SubmitHandler<z.infer<Schema>>\n    /**\n     * Callback invoked when any of the field change.\n     */\n    onChange?: WatchObserver<z.infer<Schema>>\n    /**\n     * Callback invoked when there are validation errors.\n     */\n    onError?: SubmitErrorHandler<z.infer<Schema>>\n    /**\n     * Ref to the form element.\n     */\n    formRef?: React.RefObject<HTMLFormElement>\n\n    children?: MaybeRenderProp<UseFormReturn<z.infer<Schema>>>\n    /**\n     * @default w-full space-y-3\n     */\n    stackClass?: string\n    /**\n     * Ref to the form methods.\n     */\n    mRef?: React.Ref<UseFormReturn<z.infer<Schema>>>\n}\n\nexport const Form = <Schema extends z.ZodObject<z.ZodRawShape>>(props: FormProps<Schema>) => {\n\n    const {\n        mode = \"onSubmit\",\n        resolver,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n        schema,\n        defaultValues: _defaultValues,\n        onChange,\n        onSubmit,\n        onError,\n        formRef,\n        children,\n        mRef,\n        /**/\n        stackClass,\n        ...rest\n    } = props\n\n    const defaultValues = React.useMemo(() => {\n        if (isEmpty(getZodDefaults(schema)) && isEmpty(_defaultValues)) return undefined\n        return {\n            ...getZodDefaults(schema),\n            ..._defaultValues,\n        } as any\n    }, [])\n\n    const form = {\n        mode,\n        resolver,\n        defaultValues,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n    }\n\n    form.resolver = zodResolver(schema)\n\n    const methods = useForm(form)\n    const { handleSubmit } = methods\n\n    React.useImperativeHandle(mRef, () => methods, [mRef, methods])\n\n    React.useEffect(() => {\n        let subscription: ReturnType<typeof methods.watch> | undefined\n        if (onChange) {\n            subscription = methods.watch(onChange)\n        }\n        return () => subscription?.unsubscribe()\n    }, [methods, onChange])\n\n    return (\n        <FormProvider {...methods}>\n            <__FormSchemaContext.Provider value={{ schema, shape: schema.shape }}>\n                <form\n                    ref={formRef}\n                    onSubmit={handleSubmit(onSubmit, onError)}\n                    {...rest}\n                >\n                    <div className={cn(\"w-full space-y-3\", stackClass)}>\n                        {runIfFn(children, methods)}\n                    </div>\n                </form>\n            </__FormSchemaContext.Provider>\n        </FormProvider>\n    )\n\n}\n\nForm.displayName = \"Form\"\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\ntype MaybeRenderProp<P> =\n    | React.ReactNode\n    | ((props: P) => React.ReactNode)\n\nconst isFunction = <T extends Function = Function>(value: any): value is T => typeof value === \"function\"\n\nfunction runIfFn<T, U>(\n    valueOrFn: T | ((...fnArgs: U[]) => T),\n    ...args: U[]\n): T {\n    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n"
      },
      {
        "name": "index.tsx",
        "dir": "form",
        "content": "export * from \"./form\"\nexport * from \"./fields\"\nexport * from \"./define-schema\"\nexport * from \"./danger-zone\"\n"
      },
      {
        "name": "locales.json",
        "dir": "form",
        "content": "{\n  \"form\": {\n    \"create\": {\n      \"fr\": \"CrÃ©er\",\n      \"en\": \"Create\"\n    },\n    \"add\": {\n      \"fr\": \"Ajouter\",\n      \"en\": \"Add\"\n    },\n    \"update\": {\n      \"fr\": \"Modifier\",\n      \"en\": \"Update\"\n    },\n    \"search\": {\n      \"fr\": \"Chercher\",\n      \"en\": \"Search\"\n    },\n    \"save\": {\n      \"fr\": \"Enregistrer\",\n      \"en\": \"Save\"\n    },\n    \"submit\": {\n      \"fr\": \"Soumettre\",\n      \"en\": \"Submit\"\n    }\n  },\n  \"dangerZone\": {\n    \"delete\": {\n      \"fr\": \"Supprimer\",\n      \"en\": \"Delete\"\n    },\n    \"irreversible_action\": {\n      \"fr\": \"Cette action est irrÃ©versible.\",\n      \"en\": \"This action is irreversible.\"\n    },\n    \"name\": {\n      \"fr\": \"Zone de danger\",\n      \"en\": \"Danger Zone\"\n    },\n    \"confirm_delete\": {\n      \"fr\": \"Ãtes-vous sÃ»r de vouloir effectuer cette action ?\",\n      \"en\": \"Are you sure you want to confirm this action ?\"\n    },\n    \"cancel\": {\n      \"fr\": \"Annuler\",\n      \"en\": \"Cancel\"\n    }\n  }\n}\n"
      },
      {
        "name": "polymorphic-component.ts",
        "dir": "form",
        "content": "import * as React from \"react\"\n\ntype ExtendedProps<Props = {}, OverrideProps = {}> = OverrideProps &\n    Omit<Props, keyof OverrideProps>;\ntype ElementType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\ntype PropsOf<C extends ElementType> = JSX.LibraryManagedAttributes<C,\n    React.ComponentPropsWithoutRef<C>>;\ntype ComponentProp<C> = {\n    component?: C;\n};\ntype InheritedProps<C extends ElementType, Props = {}> = ExtendedProps<PropsOf<C>, Props>;\nexport type PolymorphicRef<C> = C extends React.ElementType\n    ? React.ComponentPropsWithRef<C>[\"ref\"]\n    : never;\nexport type PolymorphicComponentProps<C, Props = {}> = C extends React.ElementType\n    ? InheritedProps<C, Props & ComponentProp<C>> & { ref?: PolymorphicRef<C> }\n    : Props & { component: React.ElementType };\n\nexport function createPolymorphicComponent<ComponentDefaultType,\n    Props,\n    StaticComponents = Record<string, never>>(component: any) {\n    type ComponentProps<C> = PolymorphicComponentProps<C, Props>;\n\n    type _PolymorphicComponent = <C = ComponentDefaultType>(\n        props: ComponentProps<C>,\n    ) => React.ReactElement;\n\n    type ComponentProperties = Omit<React.FunctionComponent<ComponentProps<any>>, never>;\n\n    type PolymorphicComponent = _PolymorphicComponent & ComponentProperties & StaticComponents;\n\n    return component as PolymorphicComponent\n}\n"
      },
      {
        "name": "schema-presets.ts",
        "dir": "form",
        "content": "import { z } from \"zod\"\n\nexport const schemaPresets = {\n    name: z.string().min(2).trim(),\n    select: z.string().min(1),\n    checkboxGroup: z.array(z.string()),\n    multiSelect: z.array(z.string()),\n    autocomplete: z.object({ label: z.string(), value: z.string().nullable() }),\n    validAddress: z.object({\n        label: z.string(), value: z.string({\n            required_error: \"Invalid address\",\n            invalid_type_error: \"Invalid address\",\n        }),\n    }),\n    time: z.object({ hour: z.number().min(0).max(23), minute: z.number().min(0).max(59) }),\n    phone: z.string().min(10, \"Invalid phone number\"),\n    files: z\n        .array(z.custom<File>())\n        .refine((files) => files.every((file) => file instanceof File), { message: \"Expected a file\" }),\n    filesOrEmpty: z\n        .array(z.custom<File>()).min(0)\n        .refine((files) => files.every((file) => file instanceof File), { message: \"Expected a file\" }),\n    dateRangePicker: z.object({ from: z.date(), to: z.date() }),\n    datePicker: z.date(),\n}\n"
      },
      {
        "name": "submit-field.tsx",
        "dir": "form",
        "content": "import React from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { Button, ButtonProps } from \"../button\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport locales from \"./locales.json\"\n\n/* -------------------------------------------------------------------------------------------------\n * SubmitField\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SubmitFieldProps = Omit<ButtonProps, \"type\"> & {\n    /**\n     * Role of the button.\n     * - If \"create\", a loading overlay will be shown when the submission is successful.\n     * @default \"save\"\n     */\n    role?: \"submit\" | \"save\" | \"create\" | \"add\" | \"search\" | \"update\"\n    /**\n     * If true, the button will be disabled when the submission is successful.\n     */\n    disableOnSuccess?: boolean\n    /**\n     * If true, the button will be disabled if the form is invalid.\n     */\n    disableIfInvalid?: boolean\n    /**\n     * If true, a loading overlay will be shown when the submission is successful.\n     */\n    showLoadingOverlayOnSuccess?: boolean\n    /**\n     * If true, a loading overlay will be shown when the form is submitted when the role is \"create\".\n     * @default true\n     */\n    showLoadingOverlayOnCreate?: boolean\n    /**\n     * A loading overlay to show when the form is submitted.\n     */\n    loadingOverlay?: React.ReactNode\n}\n\nexport const SubmitField = React.forwardRef<HTMLButtonElement, SubmitFieldProps>((props, ref) => {\n\n    const {\n        children,\n        loading,\n        disabled,\n        role = \"save\",\n        disableOnSuccess = role === \"create\",\n        disableIfInvalid = false,\n        showLoadingOverlayOnSuccess = false,\n        showLoadingOverlayOnCreate = true,\n        loadingOverlay,\n        ...rest\n    } = props\n\n    const { formState } = useFormContext()\n\n    const disableSuccess = disableOnSuccess ? formState.isSubmitSuccessful : false\n    const disableInvalid = disableIfInvalid ? !formState.isValid : false\n\n    return (\n        <>\n            {(showLoadingOverlayOnSuccess && loadingOverlay) && (\n                <LoadingOverlay hide={!formState.isSubmitSuccessful} />\n            )}\n            {(role === \"create\" && loadingOverlay) && (\n                <LoadingOverlay hide={!formState.isSubmitSuccessful} />\n            )}\n\n            <Button\n                type=\"submit\"\n                loading={formState.isSubmitting || loading}\n                disabled={disableInvalid || disabled || disableSuccess}\n                ref={ref}\n                {...rest}\n            >\n                {children}\n            </Button>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "zod-resolver.ts",
        "dir": "form",
        "content": "import { zodResolver } from \"@hookform/resolvers/zod\"\nimport { FieldValues, get } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nexport { zodResolver }\n\nexport type Options = {\n    min?: number\n    max?: number\n}\n\nconst getType = (field: z.ZodTypeAny) => {\n    switch (field._def.typeName) {\n        case \"ZodArray\":\n            return \"array\"\n        case \"ZodObject\":\n            return \"object\"\n        case \"ZodNumber\":\n            return \"number\"\n        case \"ZodDate\":\n            return \"date\"\n        case \"ZodString\":\n        default:\n            return \"text\"\n    }\n}\n\nconst getArrayOption = (field: any, name: string) => {\n    return field._def[name]?.value\n}\n\n/**\n * A helper function to render forms automatically based on a Zod schema\n *\n * @param schema The Yup schema\n * @returns {FieldProps[]}\n */\nexport const getFieldsFromSchema = (schema: z.ZodTypeAny): FieldValues[] => {\n    const fields: FieldValues[] = []\n\n    let schemaFields: Record<string, any> = {}\n    if (schema._def.typeName === \"ZodArray\") {\n        schemaFields = schema._def.type.shape\n    } else if (schema._def.typeName === \"ZodObject\") {\n        schemaFields = schema._def.shape()\n    } else {\n        return fields\n    }\n\n    for (const name in schemaFields) {\n        const field = schemaFields[name]\n\n        const options: Options = {}\n        if (field._def.typeName === \"ZodArray\") {\n            options.min = getArrayOption(field, \"minLength\")\n            options.max = getArrayOption(field, \"maxLength\")\n        }\n\n        const meta = field.description && zodParseMeta(field.description)\n\n        fields.push({\n            name,\n            label: meta?.label || field.description || name,\n            type: meta?.type || getType(field),\n            ...options,\n        })\n    }\n    return fields\n}\n\n\nexport const getNestedSchema = (schema: z.ZodTypeAny, path: string) => {\n    return get(schema._def.shape(), path)\n}\n\nexport const zodFieldResolver = <T extends z.ZodTypeAny>(schema: T) => {\n    return {\n        getFields() {\n            return getFieldsFromSchema(schema)\n        },\n        getNestedFields(name: string) {\n            return getFieldsFromSchema(getNestedSchema(schema, name))\n        },\n    }\n}\n\nexport interface ZodMeta {\n    label: string\n    type?: string\n}\n\nexport const zodMeta = (meta: ZodMeta) => {\n    return JSON.stringify(meta)\n}\n\nexport const zodParseMeta = (meta: string) => {\n    try {\n        return JSON.parse(meta)\n    }\n    catch (e) {\n        return meta\n    }\n}\n\n/**\n * @link https://github.com/colinhacks/zod/discussions/1953#discussioncomment-4811588\n * @param schema\n */\nexport function getZodDefaults<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            if (value instanceof z.ZodDefault) return [key, value._def.defaultValue()]\n            return [key, undefined]\n        }),\n    )\n}\n\n/**\n * @param schema\n */\nexport function getZodDescriptions<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            return [key, (value as any)._def.description ?? undefined]\n        }),\n    )\n}\n\n/**\n * @example\n * const meta = useMemo(() => getZodParsedDescription<{ minValue: CalendarDate }>(schema, props.name), [])\n * @param schema\n * @param key\n */\nexport function getZodParsedDescription<T extends {\n    [p: string]: any\n}>(schema: z.AnyZodObject, key: string): T | undefined {\n    const obj = getZodDescriptions(schema)\n    const parsedDescription = (typeof obj[key] === \"string\" || obj[key] instanceof String) ? JSON.parse(obj[key]) : undefined\n    if (parsedDescription.constructor == Object) {\n        return parsedDescription as T\n    }\n    return undefined\n\n}\n"
      }
    ]
  },
  {
    "component": "horizontal-draggable-scroll",
    "name": "HorizontalDraggableScroll",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "horizontal-draggable-scroll.tsx",
        "dir": "horizontal-draggable-scroll",
        "content": "\"use client\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { useIsomorphicLayoutEffect, useUpdateEffect } from \"../core/hooks\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { useDraggableScroll } from \"./use-draggable-scroll\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nconst HorizontalDraggableScrollAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-HorizontalDraggableScroll__root\",\n        \"relative flex items-center lg:gap-2\",\n    ]),\n    container: cva([\n        \"UI-HorizontalDraggableScroll__container\",\n        \"flex max-w-full w-full space-x-3 overflow-x-scroll scrollbar-hide scroll select-none\",\n    ]),\n    chevronOverlay: cva([\n        \"flex flex-none items-center justify-center cursor-pointer hover:text-[--foreground] absolute bg-gradient-to-r from-[--background] z-40\",\n        \"h-full w-16 opacity-50 hover:opacity-100 transition-opacity\",\n        \"data-[state=hidden]:opacity-0 data-[state=hidden]:pointer-events-none\",\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out\",\n        \"data-[state=visible]:fade-in-0 data-[state=hidden]:fade-out-0\",\n        \"data-[state=visible]:duration-600 data-[state=hidden]:duration-600\",\n    ], {\n        variants: {\n            side: {\n                left: \"left-0 bg-gradient-to-r\",\n                right: \"right-0 bg-gradient-to-l\",\n            },\n        },\n    }),\n    scrollContainer: cva([\n        \"flex max-w-full w-full space-x-3 overflow-x-scroll scrollbar-hide scroll select-none\",\n    ]),\n    chevronIcon: cva([\n        \"w-7 h-7 stroke-2 mx-auto\",\n    ]),\n\n})\n\n/* -------------------------------------------------------------------------------------------------\n * HorizontalDraggableScroll\n * -----------------------------------------------------------------------------------------------*/\n\nexport type HorizontalDraggableScrollProps = ComponentAnatomy<typeof HorizontalDraggableScrollAnatomy> & {\n    className?: string\n    children?: React.ReactNode\n    /**\n     * Callback fired when the slider has reached the end\n     */\n    onSlideEnd?: () => void\n    /**\n     * The amount of pixels to scroll when the chevron is clicked\n     * @default 500\n     */\n    scrollAmount?: number\n    /**\n     * Decay rate of the inertial effect by using an optional parameter.\n     * A value of 0.95 means that at the speed will decay 5% of its current value at every 1/60 seconds.\n     */\n    decayRate?: number\n    /**\n     * Control drag sensitivity by specifying the minimum distance in order to distinguish an intentional drag movement from an unwanted one.\n     */\n    safeDisplacement?: number\n    /**\n     * Whether to apply a rubber band effect when the slider reaches the end\n     */\n    applyRubberBandEffect?: boolean\n}\n\nexport const HorizontalDraggableScroll = React.forwardRef<HTMLDivElement, HorizontalDraggableScrollProps>((props, forwadedRef) => {\n\n    const {\n        children,\n        onSlideEnd,\n        className,\n        containerClass,\n        scrollContainerClass,\n        chevronIconClass,\n        chevronOverlayClass,\n        decayRate = 0.95,\n        safeDisplacement = 20,\n        applyRubberBandEffect = true,\n        scrollAmount = 500,\n        ...rest\n    } = props\n\n    const ref = React.useRef<HTMLDivElement>(null) as React.MutableRefObject<HTMLDivElement>\n    const { events } = useDraggableScroll(ref, {\n        decayRate,\n        safeDisplacement,\n        applyRubberBandEffect,\n    })\n\n    const [isScrolledToLeft, setIsScrolledToLeft] = React.useState(true)\n    const [isScrolledToRight, setIsScrolledToRight] = React.useState(false)\n    const [showChevronRight, setShowRightChevron] = React.useState(false)\n\n    const handleScroll = React.useCallback(() => {\n        const div = ref.current\n\n        if (div) {\n            const scrolledToLeft = div.scrollLeft === 0\n            const scrolledToRight = div.scrollLeft + div.clientWidth === div.scrollWidth\n\n            setIsScrolledToLeft(scrolledToLeft)\n            setIsScrolledToRight(scrolledToRight)\n        }\n    }, [])\n\n    useUpdateEffect(() => {\n        if (!isScrolledToLeft && isScrolledToRight) {\n            onSlideEnd && onSlideEnd()\n            const t = setTimeout(() => {\n                const div = ref.current\n                if (div) {\n                    div.scrollTo({\n                        left: div.scrollLeft + scrollAmount,\n                        behavior: \"smooth\",\n                    })\n                }\n            }, 1000)\n            return () => clearTimeout(t)\n        }\n    }, [isScrolledToLeft, isScrolledToRight])\n\n    const slideLeft = React.useCallback(() => {\n        const div = ref.current\n        if (div) {\n            div.scrollTo({\n                left: div.scrollLeft - scrollAmount,\n                behavior: \"smooth\",\n            })\n        }\n    }, [scrollAmount])\n\n    const slideRight = React.useCallback(() => {\n        const div = ref.current\n        if (div) {\n            div.scrollTo({\n                left: div.scrollLeft + scrollAmount,\n                behavior: \"smooth\",\n            })\n        }\n    }, [scrollAmount])\n\n    useIsomorphicLayoutEffect(() => {\n        if (ref.current.clientWidth < ref.current.scrollWidth) {\n            setShowRightChevron(true)\n        } else {\n            setShowRightChevron(false)\n        }\n    }, [])\n\n    return (\n        <div ref={forwadedRef} className={cn(HorizontalDraggableScrollAnatomy.root(), className)}>\n            <div\n                onClick={slideLeft}\n                className={cn(HorizontalDraggableScrollAnatomy.chevronOverlay({ side: \"left\" }), chevronOverlayClass)}\n                data-state={isScrolledToLeft ? \"hidden\" : \"visible\"}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(HorizontalDraggableScrollAnatomy.chevronIcon(), chevronIconClass)}\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg>\n            </div>\n            <div\n                onScroll={handleScroll}\n                className={cn(HorizontalDraggableScrollAnatomy.container(), containerClass)}\n                {...events}\n                ref={ref}\n            >\n                {children}\n            </div>\n            <div\n                onClick={slideRight}\n                className={cn(HorizontalDraggableScrollAnatomy.chevronOverlay({ side: \"right\" }), chevronOverlayClass)}\n                data-state={!isScrolledToRight && showChevronRight ? \"visible\" : \"hidden\"}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(HorizontalDraggableScrollAnatomy.chevronIcon(), chevronIconClass)}\n                >\n                    <path d=\"m9 18 6-6-6-6\" />\n                </svg>\n            </div>\n        </div>\n    )\n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "horizontal-draggable-scroll",
        "content": "export * from \"./horizontal-draggable-scroll\"\n"
      },
      {
        "name": "use-draggable-scroll.ts",
        "dir": "horizontal-draggable-scroll",
        "content": "/* -------------------------------------------------------------------------------------------------\n * @author rfmiotto\n * @link https://www.npmjs.com/package/react-use-draggable-scroll/v/0.4.7\n * -----------------------------------------------------------------------------------------------*/\nimport * as React from \"react\"\nimport { useIsomorphicLayoutEffect } from \"../core/hooks\"\n\ntype OptionsType = {\n    decayRate?: number\n    safeDisplacement?: number\n    applyRubberBandEffect?: boolean\n    activeMouseButton?: \"Left\" | \"Middle\" | \"Right\"\n    isMounted?: boolean\n}\n\ntype ReturnType = {\n    events: {\n        onMouseDown: (e: React.MouseEvent<HTMLElement>) => void\n    }\n}\n\nexport function useDraggableScroll(\n    ref: React.MutableRefObject<HTMLElement>,\n    {\n        decayRate = 0.95,\n        safeDisplacement = 10,\n        applyRubberBandEffect = true,\n        activeMouseButton = \"Left\",\n        isMounted = true,\n    }: OptionsType = {},\n): ReturnType {\n    const internalState = React.useRef({\n        isMouseDown: false,\n        isDraggingX: false,\n        isDraggingY: false,\n        initialMouseX: 0,\n        initialMouseY: 0,\n        lastMouseX: 0,\n        lastMouseY: 0,\n        scrollSpeedX: 0,\n        scrollSpeedY: 0,\n        lastScrollX: 0,\n        lastScrollY: 0,\n    })\n\n    let isScrollableAlongX = false\n    let isScrollableAlongY = false\n    let maxHorizontalScroll = 0\n    let maxVerticalScroll = 0\n    let cursorStyleOfWrapperElement: string\n    let cursorStyleOfChildElements: string[]\n    let transformStyleOfChildElements: string[]\n    let transitionStyleOfChildElements: string[]\n\n    const timing = (1 / 60) * 1000 // period of most monitors (60fps)\n\n    useIsomorphicLayoutEffect(() => {\n        if (isMounted) {\n            isScrollableAlongX =\n                window.getComputedStyle(ref.current).overflowX === \"scroll\"\n            isScrollableAlongY =\n                window.getComputedStyle(ref.current).overflowY === \"scroll\"\n\n            maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth\n            maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight\n\n            cursorStyleOfWrapperElement = window.getComputedStyle(ref.current).cursor\n\n            cursorStyleOfChildElements = []\n            transformStyleOfChildElements = []\n            transitionStyleOfChildElements = [];\n\n            (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n                (child: HTMLElement) => {\n                    cursorStyleOfChildElements.push(\n                        window.getComputedStyle(child).cursor,\n                    )\n\n                    transformStyleOfChildElements.push(\n                        window.getComputedStyle(child).transform === \"none\"\n                            ? \"\"\n                            : window.getComputedStyle(child).transform,\n                    )\n\n                    transitionStyleOfChildElements.push(\n                        window.getComputedStyle(child).transition === \"none\"\n                            ? \"\"\n                            : window.getComputedStyle(child).transition,\n                    )\n                },\n            )\n        }\n    }, [isMounted])\n\n    const runScroll = () => {\n        const dx = internalState.current.scrollSpeedX * timing\n        const dy = internalState.current.scrollSpeedY * timing\n        const offsetX = ref.current.scrollLeft + dx\n        const offsetY = ref.current.scrollTop + dy\n\n        ref.current.scrollLeft = offsetX // eslint-disable-line no-param-reassign\n        ref.current.scrollTop = offsetY // eslint-disable-line no-param-reassign\n        internalState.current.lastScrollX = offsetX\n        internalState.current.lastScrollY = offsetY\n    }\n\n    const rubberBandCallback = (e: MouseEvent) => {\n        const dx = e.clientX - internalState.current.initialMouseX\n        const dy = e.clientY - internalState.current.initialMouseY\n\n        const { clientWidth, clientHeight } = ref.current\n\n        let displacementX = 0\n        let displacementY = 0\n\n        if (isScrollableAlongX && isScrollableAlongY) {\n            displacementX =\n                0.3 *\n                clientWidth *\n                Math.sign(dx) *\n                Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth)\n            displacementY =\n                0.3 *\n                clientHeight *\n                Math.sign(dy) *\n                Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight)\n        } else if (isScrollableAlongX) {\n            displacementX =\n                0.3 *\n                clientWidth *\n                Math.sign(dx) *\n                Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth)\n        } else if (isScrollableAlongY) {\n            displacementY =\n                0.3 *\n                clientHeight *\n                Math.sign(dy) *\n                Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight)\n        }\n\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement) => {\n                child.style.transform = `translate3d(${displacementX}px, ${displacementY}px, 0px)` // eslint-disable-line no-param-reassign\n                child.style.transition = \"transform 0ms\" // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    const recoverChildStyle = () => {\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement, i) => {\n                child.style.transform = transformStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n                child.style.transition = transitionStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    let rubberBandAnimationTimer: NodeJS.Timeout\n    let keepMovingX: NodeJS.Timer\n    let keepMovingY: NodeJS.Timer\n\n    const callbackMomentum = () => {\n        const minimumSpeedToTriggerMomentum = 0.05\n\n        keepMovingX = setInterval(() => {\n            const lastScrollSpeedX = internalState.current.scrollSpeedX\n            const newScrollSpeedX = lastScrollSpeedX * decayRate\n            internalState.current.scrollSpeedX = newScrollSpeedX\n\n            const isAtLeft = ref.current.scrollLeft <= 0\n            const isAtRight = ref.current.scrollLeft >= maxHorizontalScroll\n            const hasReachedHorizontalEdges = isAtLeft || isAtRight\n\n            runScroll()\n\n            if (\n                Math.abs(newScrollSpeedX) < minimumSpeedToTriggerMomentum ||\n                internalState.current.isMouseDown ||\n                hasReachedHorizontalEdges\n            ) {\n                internalState.current.scrollSpeedX = 0\n                clearInterval(keepMovingX as any)\n            }\n        }, timing)\n\n        keepMovingY = setInterval(() => {\n            const lastScrollSpeedY = internalState.current.scrollSpeedY\n            const newScrollSpeedY = lastScrollSpeedY * decayRate\n            internalState.current.scrollSpeedY = newScrollSpeedY\n\n            const isAtTop = ref.current.scrollTop <= 0\n            const isAtBottom = ref.current.scrollTop >= maxVerticalScroll\n            const hasReachedVerticalEdges = isAtTop || isAtBottom\n\n            runScroll()\n\n            if (\n                Math.abs(newScrollSpeedY) < minimumSpeedToTriggerMomentum ||\n                internalState.current.isMouseDown ||\n                hasReachedVerticalEdges\n            ) {\n                internalState.current.scrollSpeedY = 0\n                clearInterval(keepMovingY as any)\n            }\n        }, timing)\n\n        internalState.current.isDraggingX = false\n        internalState.current.isDraggingY = false\n\n        if (applyRubberBandEffect) {\n            const transitionDurationInMilliseconds = 250;\n\n            (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n                (child: HTMLElement) => {\n                    child.style.transform = `translate3d(0px, 0px, 0px)` // eslint-disable-line no-param-reassign\n                    child.style.transition = `transform ${transitionDurationInMilliseconds}ms` // eslint-disable-line no-param-reassign\n                },\n            )\n\n            rubberBandAnimationTimer = setTimeout(\n                recoverChildStyle,\n                transitionDurationInMilliseconds,\n            )\n        }\n    }\n\n    const preventClick = (e: Event) => {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n        e.stopPropagation()\n    }\n\n    const getIsMousePressActive = (buttonsCode: number) => {\n        return (\n            (activeMouseButton === \"Left\" && buttonsCode === 1) ||\n            (activeMouseButton === \"Middle\" && buttonsCode === 4) ||\n            (activeMouseButton === \"Right\" && buttonsCode === 2)\n        )\n    }\n\n    const onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n        const isMouseActive = getIsMousePressActive(e.buttons)\n        if (!isMouseActive) {\n            return\n        }\n\n        internalState.current.isMouseDown = true\n        internalState.current.lastMouseX = e.clientX\n        internalState.current.lastMouseY = e.clientY\n        internalState.current.initialMouseX = e.clientX\n        internalState.current.initialMouseY = e.clientY\n    }\n\n    const onMouseUp = (e: MouseEvent) => {\n        const isDragging =\n            internalState.current.isDraggingX || internalState.current.isDraggingY\n\n        const dx = internalState.current.initialMouseX - e.clientX\n        const dy = internalState.current.initialMouseY - e.clientY\n\n        const isMotionIntentional =\n            Math.abs(dx) > safeDisplacement || Math.abs(dy) > safeDisplacement\n\n        const isDraggingConfirmed = isDragging && isMotionIntentional\n\n        if (isDraggingConfirmed) {\n            ref.current.childNodes.forEach((child) => {\n                child.addEventListener(\"click\", preventClick)\n            })\n        } else {\n            ref.current.childNodes.forEach((child) => {\n                child.removeEventListener(\"click\", preventClick)\n            })\n        }\n\n        internalState.current.isMouseDown = false\n        internalState.current.lastMouseX = 0\n        internalState.current.lastMouseY = 0\n\n        ref.current.style.cursor = cursorStyleOfWrapperElement; // eslint-disable-line no-param-reassign\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement, i) => {\n                child.style.cursor = cursorStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n            },\n        )\n\n        if (isDraggingConfirmed) {\n            callbackMomentum()\n        }\n    }\n\n    const onMouseMove = (e: MouseEvent) => {\n        if (!internalState.current.isMouseDown) {\n            return\n        }\n\n        e.preventDefault()\n\n        const dx = internalState.current.lastMouseX - e.clientX\n        internalState.current.lastMouseX = e.clientX\n\n        internalState.current.scrollSpeedX = dx / timing\n        internalState.current.isDraggingX = true\n\n        const dy = internalState.current.lastMouseY - e.clientY\n        internalState.current.lastMouseY = e.clientY\n\n        internalState.current.scrollSpeedY = dy / timing\n        internalState.current.isDraggingY = true\n\n        ref.current.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement) => {\n                child.style.cursor = \"grabbing\" // eslint-disable-line no-param-reassign\n            },\n        )\n\n        const isAtLeft = ref.current.scrollLeft <= 0 && isScrollableAlongX\n        const isAtRight =\n            ref.current.scrollLeft >= maxHorizontalScroll && isScrollableAlongX\n        const isAtTop = ref.current.scrollTop <= 0 && isScrollableAlongY\n        const isAtBottom =\n            ref.current.scrollTop >= maxVerticalScroll && isScrollableAlongY\n        const isAtAnEdge = isAtLeft || isAtRight || isAtTop || isAtBottom\n\n        if (isAtAnEdge && applyRubberBandEffect) {\n            rubberBandCallback(e)\n        }\n\n        runScroll()\n    }\n\n    const handleResize = () => {\n        maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth\n        maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight\n    }\n\n    React.useEffect(() => {\n        if (isMounted) {\n            window.addEventListener(\"mouseup\", onMouseUp)\n            window.addEventListener(\"mousemove\", onMouseMove)\n            window.addEventListener(\"resize\", handleResize)\n        }\n        return () => {\n            window.removeEventListener(\"mouseup\", onMouseUp)\n            window.removeEventListener(\"mousemove\", onMouseMove)\n            window.removeEventListener(\"resize\", handleResize)\n\n            clearInterval(keepMovingX as any)\n            clearInterval(keepMovingY as any)\n            clearTimeout(rubberBandAnimationTimer)\n        }\n    }, [isMounted])\n\n    return {\n        events: {\n            onMouseDown,\n        },\n    }\n}\n"
      }
    ]
  },
  {
    "component": "hover-card",
    "name": "HoverCard",
    "dependencies": [
      [
        "@radix-ui/react-hover-card",
        "^1.1.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "hover-card.tsx",
        "dir": "hover-card",
        "content": "\"use client\"\n\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const HoverCardAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-HoverCard__root\",\n        \"z-50 w-64 rounded-md border bg-[--paper] p-4 shadow-sm outline-none\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0\",\n        \"data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nexport type HoverCardProps = React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content> & {\n    trigger: React.ReactElement\n}\n\nexport const HoverCard = React.forwardRef<HTMLDivElement, HoverCardProps>((props, ref) => {\n    const {\n        className,\n        align = \"center\",\n        sideOffset = 8,\n        ...rest\n    } = props\n\n    return (\n        <HoverCardPrimitive.Root>\n            <HoverCardPrimitive.Trigger asChild>\n                {props.trigger}\n            </HoverCardPrimitive.Trigger>\n\n            <HoverCardPrimitive.Content\n                ref={ref}\n                align={align}\n                sideOffset={sideOffset}\n                className={cn(HoverCardAnatomy.root(), className)}\n                {...rest}\n            />\n        </HoverCardPrimitive.Root>\n    )\n})\n\nHoverCard.displayName = \"HoverCard\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "hover-card",
        "content": "export * from \"./hover-card\"\n"
      }
    ]
  },
  {
    "component": "input",
    "name": "Input",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "input",
        "content": "export * from \"./input-parts\"\n"
      },
      {
        "name": "input-parts.tsx",
        "dir": "input",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Input__root\",\n        \"flex items-center\",\n        \"w-full rounded-[--radius]\",\n        \"bg-[--paper] border border-[--border] placeholder-gray-400 dark:placeholder-gray-500\",\n        \"disabled:cursor-not-allowed\",\n        \"data-[disable=true]:shadow-none data-[disable=true]:opacity-50\",\n        \"focus:border-brand focus:ring-1 focus:ring-[--ring]\",\n        \"outline-0\",\n        \"transition duration-150\",\n        \"shadow-sm\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-8 px-2 py-1 text-sm\",\n                md: \"h-10 px-3\",\n                lg: \"h-12 px-4 py-3 text-md\",\n            },\n            intent: {\n                basic: \"hover:border-gray-300 dark:hover:border-gray-600\",\n                filled: \"bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 border-transparent focus:bg-white dark:focus:bg-gray-900 shadow-none\",\n                unstyled: \"bg-transparent hover:bg-transparent border-0 shadow-none focus:ring-0 rounded-none p-0 text-base\",\n            },\n            hasError: {\n                false: null,\n                true: \"border-red-500 hover:border-red-200 dark:border-red-500\",\n            },\n            isDisabled: {\n                false: null,\n                true: \"shadow-none pointer-events-none opacity-50 cursor-not-allowed bg-gray-50 dark:bg-gray-800\",\n            },\n            isReadonly: {\n                false: null,\n                true: \"pointer-events-none cursor-not-allowed shadow-sm\",\n            },\n            hasLeftAddon: { true: null, false: null },\n            hasRightAddon: { true: null, false: null },\n            hasLeftIcon: { true: null, false: null },\n            hasRightIcon: { true: null, false: null },\n        },\n        compoundVariants: [\n            { hasLeftAddon: true, className: \"border-l-transparent hover:border-l-transparent rounded-l-none\" },\n            /**/\n            { hasRightAddon: true, className: \"border-r-transparent hover:border-r-transparent rounded-r-none\" },\n            /**/\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"sm\", className: \"pl-10\" },\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"md\", className: \"pl-10\" },\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"lg\", className: \"pl-12\" },\n            /**/\n            { hasRightAddon: false, hasRightIcon: true, size: \"sm\", className: \"pr-10\" },\n            { hasRightAddon: false, hasRightIcon: true, size: \"md\", className: \"pr-10\" },\n            { hasRightAddon: false, hasRightIcon: true, size: \"lg\", className: \"pr-12\" },\n        ],\n        defaultVariants: {\n            size: \"md\",\n            intent: \"basic\",\n            hasError: false,\n            isDisabled: false,\n            hasLeftIcon: false,\n            hasRightIcon: false,\n            hasLeftAddon: false,\n            hasRightAddon: false,\n        },\n    }),\n})\n\nexport const hiddenInputStyles = cn(\n    \"appearance-none absolute bottom-0 border-0 w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap [clip:rect(0px,0px,0px,0px)] [overflow-wrap:normal]\")\n\n/* -------------------------------------------------------------------------------------------------\n * InputContainer\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputContainerAnatomy = defineStyleAnatomy({\n    inputContainer: cva([\n        \"UI-Input__inputContainer\",\n        \"flex relative\",\n    ]),\n})\n\nexport type InputContainerProps = {\n    className: React.HTMLAttributes<HTMLDivElement>[\"className\"],\n    children?: React.ReactNode\n}\n\nexport const InputContainer = ({ className, children }: InputContainerProps) => {\n\n    return (\n        <div className={cn(\"UI-Input__inputContainer flex relative\", className)}>\n            {children}\n        </div>\n    )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * InputStyling\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InputStyling = Omit<VariantProps<typeof InputAnatomy.root>,\n    \"isDisabled\" | \"hasError\" | \"hasLeftAddon\" | \"hasRightAddon\" | \"hasLeftIcon\" | \"hasRightIcon\"> &\n    ComponentAnatomy<typeof InputAddonsAnatomy> &\n    ComponentAnatomy<typeof InputContainerAnatomy> & {\n    leftAddon?: React.ReactNode\n    leftIcon?: React.ReactNode\n    rightAddon?: React.ReactNode\n    rightIcon?: React.ReactNode\n}\n\n\n/* -------------------------------------------------------------------------------------------------\n * Addons Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputAddonsAnatomy = defineStyleAnatomy({\n    icon: cva([\n        \"UI-Input__addons--icon\",\n        \"pointer-events-none absolute inset-y-0 grid place-content-center text-gray-500\",\n        \"dark:text-gray-300\",\n    ], {\n        variants: {\n            size: { sm: \"w-10 text-md\", md: \"w-12 text-lg\", lg: \"w-14 text-2xl\" },\n            isLeftIcon: { true: \"left-0\", false: null },\n            isRightIcon: { true: \"right-0\", false: null },\n        },\n        defaultVariants: {\n            size: \"md\",\n            isLeftIcon: false, isRightIcon: false,\n        },\n    }),\n    addon: cva([\n        \"UI-Input__addons--addon\",\n        \"bg-gray-50 inline-flex items-center flex-none px-3 border border-gray-300 text-gray-800 shadow-sm text-sm sm:text-md\",\n        \"dark:bg-gray-700 dark:border-gray-700 dark:text-gray-300\",\n    ], {\n        variants: {\n            size: { sm: \"text-sm\", md: \"text-md\", lg: \"text-lg\" },\n            isLeftAddon: { true: \"rounded-l-md\", false: null },\n            isRightAddon: { true: \"rounded-r-md\", false: null },\n            hasLeftIcon: { true: null, false: null },\n            hasRightIcon: { true: null, false: null },\n        },\n        compoundVariants: [\n            { size: \"sm\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n            { size: \"sm\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n            { size: \"md\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n            { size: \"md\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n            { size: \"lg\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-12\" },\n            { size: \"lg\", hasRightIcon: true, isRightAddon: true, className: \"pr-12\" },\n        ],\n        defaultVariants: {\n            size: \"md\",\n            isLeftAddon: false, isRightAddon: false, hasLeftIcon: false, hasRightIcon: false,\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * InputIcon\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InputIconProps = {\n    icon: InputStyling[\"leftIcon\"] | undefined,\n    size: InputStyling[\"size\"],\n    side: \"right\" | \"left\",\n    props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n    className?: string,\n}\n\nexport const InputIcon = ({ icon, size = \"md\", side, props, className }: InputIconProps) => {\n\n    if (!!icon) return <span\n        className={cn(InputAddonsAnatomy.icon({ isRightIcon: side === \"right\", isLeftIcon: side === \"left\", size }), className)}\n        {...props}\n    >\n        {icon}\n    </span>\n\n    return null\n}\n\n/* -------------------------------------------------------------------------------------------------\n * InputAddon\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InputAddonProps = {\n    addon: InputStyling[\"rightAddon\"] | InputStyling[\"leftAddon\"] | undefined,\n    rightIcon: InputStyling[\"leftIcon\"] | undefined,\n    leftIcon: InputStyling[\"rightIcon\"] | undefined,\n    size: InputStyling[\"size\"],\n    side: \"right\" | \"left\",\n    props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n    className?: string,\n}\n\nexport const InputAddon = ({ addon, leftIcon, rightIcon, size = \"md\", side, props, className }: InputAddonProps) => {\n\n    if (!!addon) return (\n        <span\n            className={cn(InputAddonsAnatomy.addon({\n                isRightAddon: side === \"right\",\n                isLeftAddon: side === \"left\",\n                hasRightIcon: !!rightIcon,\n                hasLeftIcon: !!leftIcon,\n                size,\n            }), className)}\n            {...props}\n        >\n            {addon}\n        </span>\n    )\n\n    return null\n\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\nexport function extractInputPartProps<T extends InputStyling>(props: T) {\n    const {\n        size,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        inputContainerClass, // class\n        iconClass, // class\n        addonClass, // class\n        ...rest\n    } = props\n\n    return [{\n        size,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        ...rest,\n    }, {\n        inputContainerProps: {\n            className: inputContainerClass,\n        },\n        leftAddonProps: {\n            addon: leftAddon,\n            leftIcon,\n            rightIcon,\n            size,\n            side: \"left\",\n            className: addonClass,\n        },\n        rightAddonProps: {\n            addon: rightAddon,\n            leftIcon,\n            rightIcon,\n            size,\n            side: \"right\",\n            className: addonClass,\n        },\n        leftIconProps: {\n            icon: leftIcon,\n            size,\n            side: \"left\",\n            className: iconClass,\n        },\n        rightIconProps: {\n            icon: rightIcon,\n            size,\n            side: \"right\",\n            className: iconClass,\n        },\n    }] as [\n        Omit<T, \"iconClass\" | \"addonClass\" | \"inputContainerClass\">,\n        {\n            inputContainerProps: InputContainerProps,\n            leftAddonProps: InputAddonProps,\n            rightAddonProps: InputAddonProps,\n            leftIconProps: InputIconProps,\n            rightIconProps: InputIconProps\n        }\n    ]\n}\n"
      }
    ]
  },
  {
    "component": "loading-spinner",
    "name": "LoadingSpinner",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "loading-spinner",
        "content": "export * from \"./loading-spinner\"\nexport * from \"./loading-overlay\"\n"
      },
      {
        "name": "loading-overlay.tsx",
        "dir": "loading-spinner",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\nimport { LoadingSpinner } from \"./loading-spinner\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LoadingOverlayAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-LoadingOverlay__overlay\",\n        \"absolute bg-[--background]/50 w-full h-full z-10 inset-0 pt-4 flex flex-col items-center justify-center backdrop-blur-sm\",\n        \"!mt-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LoadingOverlayProps = {\n    children?: React.ReactNode\n    /**\n     * Whether to show the loading spinner\n     */\n    showSpinner?: boolean\n    /**\n     * If true, the loading overlay will be unmounted\n     */\n    hide?: boolean\n    className?: string\n}\n\nexport const LoadingOverlay = React.forwardRef<HTMLDivElement, LoadingOverlayProps>((props, ref) => {\n\n    const {\n        children,\n        hide = false,\n        showSpinner = true,\n        className,\n        ...rest\n    } = props\n\n    if (hide) return null\n\n    return (\n        <div\n            ref={ref}\n            className={cn(LoadingOverlayAnatomy.overlay(), className)}\n            {...rest}\n        >\n            {showSpinner && <LoadingSpinner className=\"justify-auto\" />}\n            {children}\n        </div>\n    )\n\n})\n\nLoadingOverlay.displayName = \"LoadingOverlay\"\n"
      },
      {
        "name": "loading-spinner.tsx",
        "dir": "loading-spinner",
        "content": "import { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LoadingSpinnerAnatomy = defineStyleAnatomy({\n    container: cva([\n        \"UI-LoadingSpinner__container\",\n        \"flex w-full items-center h-24 justify-center\",\n    ]),\n    icon: cva([\n        \"UI-LoadingSpinner__icon\",\n        \"inline w-10 h-10 mr-2 animate-spin\",\n        \"text-gray-200 dark:text-gray-600 fill-brand-500\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingSpinner\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LoadingSpinnerProps = React.ComponentPropsWithRef<\"div\"> & ComponentAnatomy<typeof LoadingSpinnerAnatomy>\n\nexport const LoadingSpinner = React.forwardRef<HTMLDivElement, LoadingSpinnerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        containerClass,\n        iconClass,\n        ...rest\n    } = props\n\n    return (\n        <div\n            className={cn(\n                LoadingSpinnerAnatomy.container(),\n                containerClass,\n            )}\n            {...rest}\n            ref={ref}\n        >\n            <Spinner className={iconClass} />\n        </div>\n    )\n\n})\n\nLoadingSpinner.displayName = \"LoadingSpinner\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Spinner\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SpinnerProps extends React.ComponentPropsWithRef<\"svg\"> {\n    children?: React.ReactNode\n}\n\nexport const Spinner = React.forwardRef<SVGSVGElement, SpinnerProps>((props, ref) => {\n\n    const { children, className, ...rest } = props\n\n    return (\n        <svg\n            aria-hidden=\"true\"\n            className={cn(\n                LoadingSpinnerAnatomy.icon(),\n                className,\n            )}\n            viewBox=\"0 0 100 101\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            ref={ref}\n            {...rest}\n        >\n            <path\n                d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n                fill=\"currentColor\"\n            />\n            <path\n                d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n                fill=\"currentFill\"\n            />\n        </svg>\n    )\n\n})\n"
      }
    ]
  },
  {
    "component": "modal",
    "name": "Modal",
    "dependencies": [
      [
        "@radix-ui/react-dialog",
        "^1.1.2",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "modal",
        "content": "export * from \"./modal\"\n"
      },
      {
        "name": "modal.tsx",
        "dir": "modal",
        "content": "\"use client\"\n\nimport { DrawerAnatomy } from \"@/workshop/drawer\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { CloseButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ModalAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-Modal__overlay\",\n        \"fixed inset-0 z-50 bg-black/80\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"overflow-y-auto p-0 md:p-4 grid place-items-center\",\n    ]),\n    content: cva([\n        \"UI-Modal__content\",\n        \"z-50 grid relative w-full w-full shadow-xl border border-[rgb(255_255_255_/_5%)] max-w-lg gap-4 bg-[--background] p-6 shadow-xl duration-200\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"sm:rounded-lg\",\n    ], {\n        variants: {\n            size: { sm: null, md: null, lg: null, xl: null, full: \"w-[90%]\" },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n        compoundVariants: [\n            { size: \"sm\", className: \"sm:max-w-sm\" },\n            { size: \"md\", className: \"sm:max-w-lg\" },\n            { size: \"lg\", className: \"sm:max-w-2xl\" },\n            { size: \"xl\", className: \"sm:max-w-5xl\" },\n            { size: \"full\", className: \"max-w-full w-full\" },\n            { size: \"full\", className: \"max-w-full w-full\" },\n        ],\n    }),\n    close: cva([\n        \"UI-Modal__close\",\n        \"absolute right-4 top-4 !mt-0\",\n    ]),\n    header: cva([\n        \"UI-Modal__header\",\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n    ]),\n    footer: cva([\n        \"UI-Modal__footer\",\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n    ]),\n    title: cva([\n        \"UI-Modal__title\",\n        \"text-xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Modal__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Modal\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ModalProps =\n    Omit<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>, \"modal\">\n    &\n    Pick<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>, \"onOpenAutoFocus\" | \"onCloseAutoFocus\" | \"onEscapeKeyDown\" | \"onPointerDownCapture\" | \"onInteractOutside\">\n    &\n    ComponentAnatomy<typeof ModalAnatomy>\n    &\n    VariantProps<typeof DrawerAnatomy.content>\n    & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The button that opens the modal\n     */\n    trigger?: React.ReactElement\n    /**\n     * Title of the modal\n     */\n    title?: React.ReactNode\n    /**\n     * An optional accessible description to be announced when the dialog is opened.\n     */\n    description?: React.ReactNode\n    /**\n     * Footer of the modal\n     */\n    footer?: React.ReactNode\n    /**\n     * Optional replacement for the default close button\n     */\n    closeButton?: React.ReactElement\n    /**\n     * Whether to hide the close button\n     */\n    hideCloseButton?: boolean\n}\n\nexport function Modal(props: ModalProps) {\n\n    const {\n        allowOutsideInteraction = false,\n        trigger,\n        title,\n        footer,\n        description,\n        children,\n        closeButton,\n        overlayClass,\n        contentClass,\n        closeClass,\n        headerClass,\n        footerClass,\n        titleClass,\n        descriptionClass,\n        hideCloseButton,\n        size,\n        // Content\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onEscapeKeyDown,\n        onPointerDownCapture,\n        onInteractOutside,\n        ...rest\n    } = props\n\n    return <DialogPrimitive.Root modal={!allowOutsideInteraction} {...rest}>\n\n        {trigger && <DialogPrimitive.Trigger asChild>{trigger}</DialogPrimitive.Trigger>}\n\n        <DialogPrimitive.Portal>\n            <DialogPrimitive.Overlay className={cn(ModalAnatomy.overlay(), overlayClass)}>\n\n\n                {/*<div className=\"flex w-full justify-center h-full items-center\">*/}\n                <DialogPrimitive.Content\n                    className={cn(ModalAnatomy.content({ size }), contentClass)}\n                    onOpenAutoFocus={onOpenAutoFocus}\n                    onCloseAutoFocus={onCloseAutoFocus}\n                    onEscapeKeyDown={onEscapeKeyDown}\n                    onPointerDownCapture={onPointerDownCapture}\n                    onInteractOutside={onInteractOutside}\n                >\n\n                    {(title || description) && <div className={cn(ModalAnatomy.header(), headerClass)}>\n                        {title && <DialogPrimitive.Title className={cn(ModalAnatomy.title(), titleClass)}>\n                            {title}\n                        </DialogPrimitive.Title>}\n                        {description && <DialogPrimitive.Description className={cn(ModalAnatomy.description(), descriptionClass)}>\n                            {description}\n                        </DialogPrimitive.Description>}\n                    </div>}\n\n                    {children}\n\n                    {footer && <div className={cn(ModalAnatomy.footer(), footerClass)}>\n                        {footer}\n                    </div>}\n\n                    {!hideCloseButton && <DialogPrimitive.Close className={cn(ModalAnatomy.close(), closeClass)} asChild>\n                        {closeButton ? closeButton : <CloseButton />}\n                    </DialogPrimitive.Close>}\n\n                </DialogPrimitive.Content>\n                {/*</div>*/}\n\n\n            </DialogPrimitive.Overlay>\n        </DialogPrimitive.Portal>\n\n    </DialogPrimitive.Root>\n}\n\nModal.displayName = \"Modal\"\n"
      }
    ]
  },
  {
    "component": "native-select",
    "name": "NativeSelect",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "native-select",
        "content": "export * from \"./native-select\"\n"
      },
      {
        "name": "native-select.tsx",
        "dir": "native-select",
        "content": "import * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * NativeSelect\n * -----------------------------------------------------------------------------------------------*/\n\nexport type NativeSelectProps = Omit<React.ComponentPropsWithRef<\"select\">, \"size\"> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The options to display\n     */\n    options: { value: string | number, label?: string }[] | undefined\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n}\n\nexport const NativeSelect = React.forwardRef<HTMLSelectElement, NativeSelectProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<NativeSelectProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        placeholder,\n        options,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<NativeSelectProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <select\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name}\n                    className={cn(\n                        \"form-select\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            isReadonly: !!basicFieldProps.readonly,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    data-readonly={basicFieldProps.readonly}\n                    aria-readonly={basicFieldProps.readonly}\n                    required={basicFieldProps.required}\n                    {...rest}\n                    ref={ref}\n                >\n                    {placeholder && <option value=\"\">{placeholder}</option>}\n                    {options?.map(opt => (\n                        <option key={opt.value} value={opt.value}>{opt.label ?? opt.value}</option>\n                    ))}\n                </select>\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon\n                    {...rightIconProps}\n                    className={cn(\n                        rightIconProps.className,\n                        !rightAddon ? \"mr-8\" : null,\n                    )}\n                />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nNativeSelect.displayName = \"NativeSelect\"\n"
      }
    ]
  },
  {
    "component": "navigation-menu",
    "name": "NavigationMenu",
    "dependencies": [
      [
        "@radix-ui/react-navigation-menu",
        "^1.2.1",
        ""
      ]
    ],
    "family": [
      "drawer",
      "vertical-menu"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "navigation-menu",
        "content": "export * from \"./navigation-menu\"\n"
      },
      {
        "name": "navigation-menu.tsx",
        "dir": "navigation-menu",
        "content": "\"use client\"\n\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { Drawer } from \"../drawer\"\nimport { VerticalMenu, VerticalMenuItem } from \"../vertical-menu\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const NavigationMenuAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-NavigationMenu__root\",\n        \"relative inline-block z-10 max-w-full\",\n    ]),\n    item: cva([\n        \"UI-NavigationMenu__item\",\n        \"relative group/navigationMenu_item inline-flex items-center h-full select-none rounded-[--radius] leading-none no-underline outline-none transition-colors\",\n        \"text-[--muted] hover:bg-[--subtle] hover:text-[--text-color] focus:bg-[--subtle]\",\n        \"data-[current=true]:text-[--brand]\", // Selected\n        \"font-[600] leading-none\",\n        \"focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-[--ring]\",\n    ], {\n        variants: {\n            size: {\n                sm: \"px-3 h-8 text-sm\",\n                md: \"px-3 h-10 text-sm\",\n                lg: \"px-3 h-12 text-base\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    icon: cva([\n        \"UI-VerticalNav__icon\",\n        \"flex-shrink-0 mr-3\",\n        \"text-[--muted] group-hover/navigationMenu_item:text-[--text-color] data-[current=true]:text-[--brand] data-[current=true]:group-hover/navigationMenu_item:text-[--brand]\",\n    ], {\n        variants: {\n            size: {\n                sm: \"size-4\",\n                md: \"size-5\",\n                lg: \"size-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    itemChevron: cva([\n        \"UI-VerticalNav__itemChevron\",\n        \"ml-2 w-4 h-4 transition-transform duration-200 group-hover/navigationMenu_item:rotate-180\",\n    ]),\n    desktopList: cva([\n        \"UI-VerticalNav__desktopList\",\n        \"inline-block space-x-1\",\n    ], {\n        variants: {\n            switchToDrawerBelow: {\n                sm: \"hidden sm:flex\",\n                md: \"hidden md:flex\",\n                lg: \"hidden lg:flex\",\n                never: \"flex\",\n            },\n        },\n        defaultVariants: {\n            switchToDrawerBelow: \"md\",\n        },\n    }),\n    mobileTrigger: cva([\n        \"UI-VerticalNav__mobileTrigger\",\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--subtle] hover:text-[--text-color]\",\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\",\n    ], {\n        variants: {\n            switchToDrawerBelow: {\n                sm: \"inline-flex sm:hidden\",\n                md: \"inline-flex md:hidden\",\n                lg: \"inline-flex lg:hidden\",\n                never: \"hidden\",\n            },\n        },\n        defaultVariants: {\n            switchToDrawerBelow: \"md\",\n        },\n    }),\n    menuContainer: cva([\n        \"UI-NavigationMenu__menuContainer\",\n        \"absolute left-0 top-0 overflow-hidden p-1 data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out\",\n        \"data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52\",\n        \"data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52\",\n        \"data-[motion=to-start]:slide-out-to-left-52 w-full sm:min-w-full\",\n    ]),\n    viewport: cva([\n        \"UI-NavigationMenu__viewport\",\n        \"relative mt-1.5 duration-300 h-[var(--radix-navigation-menu-viewport-height)]\",\n        \"w-full min-w-96 overflow-hidden rounded-[--radius] shadow-sm border bg-[--paper] text-[--text-color]\",\n        \"data-[state=open]:animate-in data-[state=open]:zoom-in-90 data-[state=open]:fade-in-25\",\n        \"data-[state=closed]:animate-out data-[state=closed]:zoom-out-100 data-[state=closed]:fade-out-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nexport type NavigationMenuProps = ComponentAnatomy<typeof NavigationMenuAnatomy> &\n    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root> &\n    VariantProps<typeof NavigationMenuAnatomy.desktopList> &\n    VariantProps<typeof NavigationMenuAnatomy.item> & {\n    children?: React.ReactNode\n    items: VerticalMenuItem[],\n    /**\n     * Add content to the mobile drawer. The content is appended above the menu\n     */\n    mobileDrawerHeader?: React.ReactNode\n    /**\n     * Add content to the mobile drawer. The content is appended below the menu\n     */\n    mobileDrawerContent?: React.ReactNode\n    /**\n     * Additional props passed to the mobile drawer\n     */\n    mobileDrawerProps?: Partial<React.ComponentPropsWithoutRef<typeof Drawer>>\n}\n\nexport const NavigationMenu = React.forwardRef<HTMLDivElement, NavigationMenuProps>((props, ref) => {\n\n    const {\n        children,\n        iconClass,\n        itemClass,\n        desktopListClass,\n        itemChevronClass,\n        mobileTriggerClass,\n        menuContainerClass,\n        viewportClass,\n        className,\n        switchToDrawerBelow,\n        mobileDrawerHeader,\n        mobileDrawerContent,\n        mobileDrawerProps,\n        items,\n        size,\n        ...rest\n    } = props\n\n    const [mobileOpen, setMobileOpen] = React.useState(false)\n\n    const Icon = React.useCallback(({ item }: { item: NavigationMenuProps[\"items\"][number] }) => item.iconType ? <item.iconType\n        className={cn(\n            NavigationMenuAnatomy.icon({ size }),\n            iconClass,\n        )}\n        aria-hidden=\"true\"\n        data-current={item.isCurrent}\n    /> : null, [iconClass, size])\n\n    return (\n        <NavigationMenuPrimitive.Root\n            ref={ref}\n            className={cn(\n                NavigationMenuAnatomy.root(),\n                className,\n            )}\n            {...rest}\n        >\n            {/*Mobile*/}\n            <button\n                className={cn(\n                    NavigationMenuAnatomy.mobileTrigger({\n                        switchToDrawerBelow,\n                    }),\n                    mobileTriggerClass,\n                )}\n                onClick={() => setMobileOpen(s => !s)}\n            >\n                <span className=\"sr-only\">Open main menu</span>\n                {mobileOpen ? (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                    >\n                        <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                        <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                    </svg>\n                ) : (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                    >\n                        <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\n                        <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\n                        <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\n                    </svg>\n                )}\n            </button>\n            <Drawer\n                open={mobileOpen}\n                onOpenChange={open => setMobileOpen(open)}\n                side=\"left\"\n                {...mobileDrawerProps}\n            >\n                {mobileDrawerHeader}\n                <VerticalMenu\n                    items={items}\n                    className=\"mt-2\"\n                    onLinkItemClick={() => setMobileOpen(false)} // Close the drawer when a link item is clicked\n                />\n                {mobileDrawerContent}\n            </Drawer>\n\n            {/*Desktop*/}\n            <NavigationMenuPrimitive.List\n                className={cn(\n                    NavigationMenuAnatomy.desktopList({\n                        switchToDrawerBelow,\n                    }),\n                    desktopListClass,\n                )}\n            >\n                {items.map(item => {\n\n                    if (item.subContent) {\n                        return (\n                            <NavigationMenuPrimitive.Item key={item.name}>\n                                <NavigationMenuPrimitive.Trigger\n                                    className={cn(\n                                        NavigationMenuAnatomy.item({ size }),\n                                        itemClass,\n                                    )}\n                                    data-current={item.isCurrent}\n                                >\n                                    <Icon item={item} />\n                                    <span className=\"flex-none\">{item.name}</span>\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\"\n                                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                        className={cn(NavigationMenuAnatomy.itemChevron(), itemChevronClass)}\n                                        data-open={`${mobileOpen}`}\n                                    >\n                                        <polyline points=\"6 9 12 15 18 9\" />\n                                    </svg>\n                                </NavigationMenuPrimitive.Trigger>\n                                <NavigationMenuPrimitive.Content\n                                    ref={ref}\n                                    className={cn(\n                                        NavigationMenuAnatomy.menuContainer(),\n                                        menuContainerClass,\n                                    )}\n                                >\n                                    <div className=\"w-full\">\n                                        {item.subContent && item.subContent}\n                                    </div>\n                                </NavigationMenuPrimitive.Content>\n                            </NavigationMenuPrimitive.Item>\n                        )\n                    } else {\n                        return (\n                            <NavigationMenuPrimitive.Item key={item.name}>\n                                <NavigationMenuPrimitive.NavigationMenuLink asChild>\n                                    {item.href ? (\n                                        <Link\n                                            href={item.href}\n                                            className={cn(\n                                                NavigationMenuAnatomy.item({ size }),\n                                                itemClass,\n                                            )}\n                                            data-current={item.isCurrent}\n                                        >\n                                            <Icon item={item} />\n                                            <span className=\"flex-none\">{item.name}</span>\n                                            {item.addon}\n                                        </Link>\n                                    ) : (\n                                        <button\n                                            className={cn(\n                                                NavigationMenuAnatomy.item({ size }),\n                                                itemClass,\n                                            )}\n                                            data-current={item.isCurrent}\n                                        >\n                                            <Icon item={item} />\n                                            <span className=\"flex-none\">{item.name}</span>\n                                            {item.addon}\n                                        </button>\n                                    )}\n                                </NavigationMenuPrimitive.NavigationMenuLink>\n                            </NavigationMenuPrimitive.Item>\n                        )\n                    }\n\n                })}\n            </NavigationMenuPrimitive.List>\n            <div className={cn(\"perspective-[2000px] absolute left-0 top-full w-full flex justify-center\")}>\n                <NavigationMenuPrimitive.Viewport\n                    className={cn(\n                        NavigationMenuAnatomy.viewport(),\n                        viewportClass,\n                    )}\n                />\n            </div>\n        </NavigationMenuPrimitive.Root>\n    )\n\n})\n\nNavigationMenu.displayName = \"NavigationMenu\"\n"
      }
    ]
  },
  {
    "component": "number-input",
    "name": "NumberInput",
    "dependencies": [
      [
        "@zag-js/number-input",
        "^0.77.0",
        ""
      ],
      [
        "@zag-js/react",
        "^0.77.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "number-input",
        "content": "export * from \"./number-input\"\n"
      },
      {
        "name": "number-input.tsx",
        "dir": "number-input",
        "content": "\"use client\"\n\nimport type { IntlTranslations } from \"@zag-js/number-input\"\nimport * as numberInput from \"@zag-js/number-input\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { IconButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const NumberInputAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-NumberInput__root\",\n        \"z-[2]\",\n    ], {\n        variants: {\n            hideControls: {\n                true: false,\n                false: \"border-r border-r-transparent hover:border-r-[--border]\",\n            },\n            size: {\n                sm: null,\n                md: null,\n                lg: null,\n            },\n            intent: {\n                basic: null,\n                filled: null,\n                unstyled: \"border-r-0 hover:border-r-transparent\",\n            },\n        },\n        defaultVariants: {\n            hideControls: false,\n        },\n    }),\n    control: cva([\n        \"UI-NumberInput__control\",\n        \"rounded-none h-[50%] ring-inset\",\n    ]),\n    controlsContainer: cva([\n        \"UI-NumberInput__controlsContainer\",\n        \"form-input w-auto p-0 flex flex-col items-stretch justify-center overflow-hidden max-h-full\",\n        \"border-l-0 relative z-[1]\",\n        \"shadow-xs\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-8\",\n                md: \"h-10\",\n                lg: \"h-12\",\n            },\n            intent: {\n                basic: null,\n                filled: \"hover:bg-gray-100\",\n                unstyled: null,\n            },\n            hasRightAddon: {\n                true: \"border-r-0\",\n                false: null,\n            },\n        },\n    }),\n    chevronIcon: cva([\n        \"UI-Combobox__chevronIcon\",\n        \"h-4 w-4 shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * NumberInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type NumberInputProps = Omit<React.ComponentPropsWithoutRef<\"input\">, \"value\" | \"size\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof NumberInputAnatomy> &\n    Omit<VariantProps<typeof NumberInputAnatomy.root>, \"size\" | \"intent\"> &\n    BasicFieldOptions &\n    InputStyling & {\n    /**\n     * The value of the input\n     */\n    value?: number | string\n    /**\n     * The callback to handle value changes\n     */\n    onValueChange?: (value: number, valueAsString: string) => void\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: number | string\n    /**\n     * The minimum value of the input\n     */\n    min?: number\n    /**\n     * The maximum value of the input\n     */\n    max?: number\n    /**\n     * The amount to increment or decrement the value by\n     */\n    step?: number\n    /**\n     * Whether to allow mouse wheel to change the value\n     */\n    allowMouseWheel?: boolean\n    /**\n     * Whether to allow the value overflow the min/max range\n     */\n    allowOverflow?: boolean\n    /**\n     * Whether to hide the controls\n     */\n    hideControls?: boolean\n    /**\n     * The format options for the value\n     */\n    formatOptions?: Intl.NumberFormatOptions\n    /**\n     * Whether to clamp the value when the input loses focus (blur)\n     */\n    clampValueOnBlur?: boolean\n    /**\n     * Accessibility\n     *\n     * Specifies the localized strings that identifies the accessibility elements and their states\n     */\n    translations?: IntlTranslations,\n    /**\n     * The current locale. Based on the BCP 47 definition.\n     */\n    locale?: string\n    /**\n     * The document's text/writing direction.\n     */\n    dir?: \"ltr\" | \"rtl\"\n}\n\nexport const NumberInput = React.forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<NumberInputProps>(props, React.useId())\n\n    const [{\n        controlClass,\n        controlsContainerClass,\n        chevronIconClass,\n        className,\n        children,\n        /**/\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        placeholder,\n        onValueChange,\n        hideControls,\n        value: controlledValue,\n        min = 0,\n        max,\n        step,\n        allowMouseWheel = true,\n        formatOptions = { maximumFractionDigits: 2 },\n        clampValueOnBlur = true,\n        translations,\n        locale,\n        dir,\n        defaultValue,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<NumberInputProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const [state, send] = useMachine(numberInput.machine({\n        id: basicFieldProps.id,\n        name: basicFieldProps.name,\n        disabled: basicFieldProps.disabled,\n        readOnly: basicFieldProps.readonly,\n        value: controlledValue ? String(controlledValue) : (defaultValue ? String(defaultValue) : undefined),\n        min,\n        max,\n        step,\n        allowMouseWheel,\n        formatOptions,\n        clampValueOnBlur,\n        translations,\n        locale,\n        dir,\n        onValueChange: (details) => {\n            onValueChange?.(details.valueAsNumber, details.value)\n        },\n    }))\n\n    const isFirst = React.useRef(true)\n\n    React.useEffect(() => {\n        if (!isFirst.current) {\n            if (typeof controlledValue === \"string\" && !isNaN(Number(controlledValue))) {\n                api.setValue(Number(controlledValue))\n            } else if (typeof controlledValue === \"number\") {\n                api.setValue(controlledValue)\n            } else if (controlledValue === undefined) {\n                api.setValue(min)\n            }\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const api = numberInput.connect(state, send, normalizeProps)\n\n    return (\n        <BasicField\n            {...basicFieldProps}\n            id={api.getInputProps().id}\n        >\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <input\n                    ref={ref}\n                    type=\"number\"\n                    name={basicFieldProps.name}\n                    className={cn(\n                        \"form-input\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            hasRightAddon: !!rightAddon || !hideControls,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        NumberInputAnatomy.root({ hideControls, intent, size }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    data-readonly={basicFieldProps.readonly}\n                    aria-readonly={basicFieldProps.readonly}\n                    required={basicFieldProps.required}\n                    {...api.getInputProps()}\n                    {...rest}\n                />\n\n                {!hideControls && (<div\n                    className={cn(\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: true,\n                        }),\n                        NumberInputAnatomy.controlsContainer({\n                            size,\n                            intent,\n                            hasRightAddon: !!rightAddon,\n                        }),\n                        controlsContainerClass,\n                    )}\n                >\n                    <IconButton\n                        intent=\"gray-basic\"\n                        size=\"sm\"\n                        className={cn(\n                            NumberInputAnatomy.control(),\n                            controlClass,\n                        )}\n                        {...api.getIncrementTriggerProps()}\n                        data-readonly={basicFieldProps.readonly}\n                        data-disabled={basicFieldProps.disabled || api.getIncrementTriggerProps().disabled}\n                        disabled={basicFieldProps.disabled || basicFieldProps.readonly || api.getIncrementTriggerProps().disabled}\n                        tabIndex={0}\n                        icon={<svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={cn(NumberInputAnatomy.chevronIcon(), \"rotate-180\", chevronIconClass)}\n                        >\n                            <path d=\"m6 9 6 6 6-6\" />\n                        </svg>}\n                    />\n                    <IconButton\n                        intent=\"gray-basic\"\n                        size=\"sm\"\n                        className={cn(\n                            NumberInputAnatomy.control(),\n                            controlClass,\n                        )}\n                        {...api.getDecrementTriggerProps()}\n                        data-readonly={basicFieldProps.readonly}\n                        data-disabled={basicFieldProps.disabled || api.getDecrementTriggerProps().disabled}\n                        disabled={basicFieldProps.disabled || basicFieldProps.readonly || api.getDecrementTriggerProps().disabled}\n                        tabIndex={0}\n                        icon={<svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={cn(NumberInputAnatomy.chevronIcon(), chevronIconClass)}\n                        >\n                            <path d=\"m6 9 6 6 6-6\" />\n                        </svg>}\n                    />\n                </div>)}\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon\n                    {...rightIconProps}\n                    className={cn(\n                        \"z-[3]\",\n                        rightIconProps.className,\n                        !rightAddon ? \"mr-6\" : null,\n                    )}\n                />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nNumberInput.displayName = \"NumberInput\"\n"
      }
    ]
  },
  {
    "component": "page-header",
    "name": "PageHeader",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "page-header",
        "content": "export * from \"./page-header\"\n"
      },
      {
        "name": "page-header.tsx",
        "dir": "page-header",
        "content": "import { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PageHeaderAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-PageHeader__root\",\n        \"md:flex md:items-center md:justify-between space-y-2 md:space-y-0 md:space-x-5\",\n    ]),\n    title: cva([\n        \"UI-PageHeader__title\",\n        \"font-bold text-gray-900 dark:text-gray-200\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-lg sm:text-xl\",\n                md: \"text-2xl sm:text-3xl\",\n                lg: \"text-3xl sm:text-4xl\",\n                xl: \"text-4xl sm:text-5xl\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    actionContainer: cva([\n        \"UI-PageHeader__actionContainer\",\n        \"justify-stretch flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end\",\n        \"sm:space-y-0 sm:space-x-3 sm:space-x-reverse md:mt-0 md:flex-row md:space-x-3\",\n    ]),\n    textContainer: cva([\n        \"UI-PageHeader__textContainer\",\n        \"space-y-1\"\n    ]),\n    description: cva([\n        \"UI-PageHeader__description\",\n        \"text-sm font-medium text-gray-500 dark:text-gray-400\",\n    ]),\n    detailsContainer: cva([\n        \"UI-PageHeader__detailsContainer\",\n        \"block sm:flex items-start sm:space-x-5\",\n    ], {\n        variants: {\n            _withImage: {\n                true: \"flex-col sm:flex-row\",\n                false: null,\n            },\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * PageHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PageHeaderProps = React.ComponentPropsWithRef<\"header\"> &\n    ComponentAnatomy<typeof PageHeaderAnatomy> &\n    VariantProps<typeof PageHeaderAnatomy.title> & {\n    /**\n     * Page title.\n     */\n    title?: string\n    /**\n     * Page description.\n     */\n    description?: string\n    /**\n     * Elements rendered in the action container.\n     */\n    action?: React.ReactNode\n    /**\n     * Image elements rendered next to the title and description.\n     */\n    image?: React.ReactNode\n}\n\nexport const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size = \"md\",\n        title,\n        description,\n        action,\n        image,\n        titleClass,\n        actionContainerClass,\n        descriptionClass,\n        detailsContainerClass,\n        textContainerClass,\n        ...rest\n    } = props\n\n    return (\n        <header\n            ref={ref}\n            aria-label={title}\n            className={cn(\n                PageHeaderAnatomy.root(),\n                className,\n            )}\n            {...rest}\n        >\n            <div className={cn(PageHeaderAnatomy.detailsContainer({ _withImage: !!image }), detailsContainerClass)}>\n                {image && <div className=\"flex-shrink-0\">\n                    <div className=\"relative\">\n                        {image}\n                    </div>\n                </div>}\n                <div className={cn(PageHeaderAnatomy.textContainer(), textContainerClass)}>\n                    <h1 className={cn(PageHeaderAnatomy.title({ size }), titleClass)}>{title}</h1>\n                    {description && <p className={cn(PageHeaderAnatomy.description(), descriptionClass)}>\n                        {description}\n                    </p>}\n                </div>\n            </div>\n            {!!action && <div className={cn(PageHeaderAnatomy.actionContainer(), actionContainerClass)}>\n                {action}\n            </div>}\n        </header>\n    )\n\n})\n\nPageHeader.displayName = \"PageHeader\"\n"
      }
    ]
  },
  {
    "component": "pagination",
    "name": "Pagination",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "pagination",
        "content": "export * from \"./pagination\"\n"
      },
      {
        "name": "pagination.tsx",
        "dir": "pagination",
        "content": "\"use client\"\n\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PaginationAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Pagination__root\",\n        \"flex gap-1 text-xs font-medium\",\n    ]),\n    item: cva([\n        \"UI-Pagination__item\",\n        \"bg-transparent dark:bg-transparent text-sm text-[--muted] inline-flex h-8 w-8 items-center justify-center rounded border cursor-pointer\",\n        \"hover:bg-[--subtle] dark:hover:bg-[--subtle] hover:border-[--subtle] select-none\",\n        \"data-[selected=true]:bg-brand-500 data-[selected=true]:border-transparent data-[selected=true]:text-white data-[selected=true]:hover:bg-brand data-[selected=true]:pointer-events-none\", // Selected\n        \"data-[disabled=true]:opacity-50 data-[disabled=true]:pointer-events-none data-[disabled=true]:cursor-not-allowed\", // Disabled\n        \"outline-none ring-[--ring] focus-visible:ring-2\",\n    ]),\n    ellipsis: cva([\n        \"UI-Pagination__ellipsis\",\n        \"flex p-2 items-center text-[1.05rem]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Pagination\n * -----------------------------------------------------------------------------------------------*/\n\nconst __PaginationAnatomyContext = React.createContext<ComponentAnatomy<typeof PaginationAnatomy>>({})\n\nexport type PaginationProps = React.ComponentPropsWithRef<\"ul\"> & ComponentAnatomy<typeof PaginationAnatomy>\n\nexport const Pagination = React.forwardRef<HTMLUListElement, PaginationProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        className,\n        ellipsisClass,\n        ...rest\n    } = props\n\n    return (\n        <__PaginationAnatomyContext.Provider\n            value={{\n                itemClass,\n                ellipsisClass,\n            }}\n        >\n            <ul\n                ref={ref}\n                className={cn(PaginationAnatomy.root(), className)}\n                role=\"navigation\"\n                {...rest}\n            >\n                {children}\n            </ul>\n        </__PaginationAnatomyContext.Provider>\n    )\n\n})\n\nPagination.displayName = \"Pagination\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationItemProps = Omit<React.ComponentPropsWithRef<\"button\">, \"children\"> & {\n    value: string | number\n}\n\nexport const PaginationItem = React.forwardRef<HTMLButtonElement, PaginationItemProps>((props, ref) => {\n\n    const {\n        value,\n        className,\n        ...rest\n    } = props\n\n    const { itemClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li>\n            <button\n                className={cn(PaginationAnatomy.item(), itemClass, className)}\n                {...rest}\n                ref={ref}\n            >\n                {value}\n            </button>\n        </li>\n    )\n\n})\n\nPaginationItem.displayName = \"PaginationItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationTriggerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"children\"> & {\n    direction: \"previous\" | \"next\"\n    isChevrons?: boolean\n    isDisabled?: boolean\n}\n\nexport const PaginationTrigger = React.forwardRef<HTMLButtonElement, PaginationTriggerProps>((props, ref) => {\n\n    const {\n        isChevrons = false,\n        isDisabled = false,\n        direction,\n        className,\n        ...rest\n    } = props\n\n    const { itemClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li>\n            <button\n                className={cn(PaginationAnatomy.item(), itemClass, className)}\n                data-disabled={isDisabled}\n                tabIndex={isDisabled ? -1 : undefined}\n                {...rest}\n                ref={ref}\n            >\n                {direction === \"previous\" ? (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                        className=\"h-4 w-4\"\n                    >\n                        {!isChevrons ? <polyline points=\"15 18 9 12 15 6\"></polyline> : <>\n                            <polyline points=\"11 17 6 12 11 7\" />\n                            <polyline points=\"18 17 13 12 18 7\" />\n                        </>}\n                    </svg>\n                ) : (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                        className=\"h-4 w-4\"\n                    >\n                        {!isChevrons ? <polyline points=\"9 18 15 12 9 6\"></polyline> : <>\n                            <polyline points=\"13 17 18 12 13 7\" />\n                            <polyline points=\"6 17 11 12 6 7\" />\n                        </>}\n                    </svg>\n\n                )}\n            </button>\n        </li>\n    )\n\n})\n\nPaginationTrigger.displayName = \"PaginationTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationEllipsis\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationEllipsisProps = Omit<React.ComponentPropsWithRef<\"span\">, \"children\">\n\nexport const PaginationEllipsis = React.forwardRef<HTMLSpanElement, PaginationEllipsisProps>((props, ref) => {\n\n    const {\n        className,\n        ...rest\n    } = props\n\n    const { ellipsisClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li className={cn(PaginationAnatomy.ellipsis(), ellipsisClass, className)}>\n            <span\n                {...rest}\n                ref={ref}\n            >\n                &#8230;\n            </span>\n        </li>\n    )\n\n})\n\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\n"
      }
    ]
  },
  {
    "component": "phone-input",
    "name": "PhoneInput",
    "dependencies": [
      [
        "libphonenumber-js",
        "^1.11.12",
        ""
      ],
      [
        "react-phone-number-input",
        "^3.4.9",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "phone-input",
        "content": "export * from \"./phone-input\"\n"
      },
      {
        "name": "phone-input.tsx",
        "dir": "phone-input",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { CountryCode, E164Number, parsePhoneNumber } from \"libphonenumber-js\"\nimport * as React from \"react\"\nimport PhoneInputPrimitive, { Country } from \"react-phone-number-input\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nconst PhoneInputAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-PhoneInput__root\",\n        \"rounded-l-none z-[2]\",\n    ]),\n    container: cva([\n        \"UI-PhoneInput__container\",\n        \"relative flex items-center w-full\",\n    ]),\n    countrySelect: cva([\n        \"UI-PhoneInput__countrySelect\",\n        \"w-[3rem] z-[3] relative flex-none cursor-pointer truncate rounded-r-none border-r-transparent opacity-0\",\n        \"focus-visible:opacity-100 transition duration-200 ease-in-out\",\n    ], {\n        variants: {\n            hasLeftAddon: {\n                true: \"rounded-l-none\",\n                false: null,\n            },\n        },\n    }),\n    flagSelect: cva([\n        \"UI-PhoneInput__flagSelect\",\n        \"absolute top-0 left-0 w-[3rem] z-[0] flex-none cursor-pointer truncate rounded-r-none border-r-0\",\n    ], {\n        variants: {\n            hasLeftAddon: {\n                true: \"rounded-l-none border-l-0\",\n                false: null,\n            },\n        },\n    }),\n    flagImage: cva([\n        \"UI-PhoneInput__flagImage\",\n        \"w-6 absolute h-full inset-y-0 z-[0]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * PhoneInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PhoneInputProps = Omit<React.ComponentPropsWithoutRef<\"input\">, \"value\" | \"size\"> &\n    ComponentAnatomy<typeof PhoneInputAnatomy> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The phone number value.\n     */\n    value?: string\n    /**\n     * Default phone number when uncontrolled.\n     */\n    defaultValue?: string\n    /**\n     * The default country to select if the value is empty.\n     */\n    defaultCountry?: CountryCode\n    /**\n     * Callback fired when the phone number value changes.\n     */\n    onValueChange?: (value: E164Number | undefined) => void\n    /**\n     * Callback fired when the country changes.\n     */\n    onCountryChange?: (country: Country) => void\n    /**\n     * The countries to display in the dropdown.\n     */\n    countries?: CountryCode[]\n}\n\nexport type { CountryCode, E164Number, Country }\n\nexport const PhoneInput = React.forwardRef<HTMLInputElement, PhoneInputProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<PhoneInputProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        rightAddon,\n        rightIcon,\n        leftAddon,\n        leftIcon,\n        className,\n        value: controlledValue,\n        onValueChange,\n        defaultCountry,\n        onCountryChange,\n        countries,\n        defaultValue,\n        /**/\n        countrySelectClass,\n        flagSelectClass,\n        flagImageClass,\n        containerClass,\n        ...rest\n    }, {\n        inputContainerProps,\n        rightAddonProps,\n        rightIconProps,\n        leftIconProps,\n        leftAddonProps,\n    }] = extractInputPartProps<PhoneInputProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const isFirst = React.useRef(true)\n\n    const _defaults = React.useMemo(() => {\n        try {\n            return {\n                phoneNumber: controlledValue ?? defaultValue,\n                parsedNumber: parsePhoneNumber((controlledValue ?? defaultValue) || \"\", defaultCountry),\n            }\n        }\n        catch (e) {\n            return {\n                phoneNumber: controlledValue ?? defaultValue,\n                parsedNumber: undefined,\n            }\n        }\n    }, [])\n\n    const [_value, _setValue] = React.useState<string | undefined>(_defaults.phoneNumber)\n\n    const handleOnValueChange = React.useCallback((value: E164Number | undefined) => {\n        _setValue(value)\n        onValueChange?.(value)\n    }, [])\n\n    const handleOnCountryChange = React.useCallback((country: Country) => {\n        onCountryChange?.(country)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            _setValue(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                {leftAddon && <InputIcon {...leftIconProps} />}\n\n                <PhoneInputPrimitive\n                    ref={ref as any}\n                    id={basicFieldProps.id}\n                    // name={basicFieldProps.name}\n                    className={cn(\n                        PhoneInputAnatomy.container(),\n                        containerClass,\n                    )}\n                    countries={countries}\n                    defaultCountry={defaultCountry || _defaults.parsedNumber?.country}\n                    onCountryChange={handleOnCountryChange}\n                    addInternationalOption={false}\n                    international={false}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    countrySelectProps={{\n                        name: basicFieldProps.name + \"_country\",\n                        className: cn(\n                            \"form-select\",\n                            InputAnatomy.root({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                isDisabled: !!basicFieldProps.disabled,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            PhoneInputAnatomy.countrySelect({\n                                hasLeftAddon: !!leftAddon,\n                            }),\n                        ),\n                        disabled: basicFieldProps.disabled || basicFieldProps.readonly,\n                        \"data-disabled\": basicFieldProps.disabled,\n                        \"data-readonly\": basicFieldProps.readonly,\n                        \"aria-readonly\": basicFieldProps.readonly,\n                    }}\n                    numberInputProps={{\n                        className: cn(\n                            \"form-input\",\n                            InputAnatomy.root({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                isDisabled: !!basicFieldProps.disabled,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                            }),\n                            PhoneInputAnatomy.root(),\n                            className,\n                        ),\n                        disabled: basicFieldProps.disabled || basicFieldProps.readonly,\n                        required: basicFieldProps.required,\n                        \"data-disabled\": basicFieldProps.disabled,\n                        \"data-readonly\": basicFieldProps.readonly,\n                        \"aria-readonly\": basicFieldProps.readonly,\n                        ...rest,\n                    }}\n                    flagComponent={flag => (\n                        <button\n                            className={cn(\n                                InputAnatomy.root({\n                                    size,\n                                    intent,\n                                    hasError: !!basicFieldProps.error,\n                                    isDisabled: !!basicFieldProps.disabled,\n                                }),\n                                PhoneInputAnatomy.flagSelect({\n                                    hasLeftAddon: !!leftAddon,\n                                }),\n                                flagSelectClass,\n                            )}\n                            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                            data-disabled={basicFieldProps.disabled}\n                            tabIndex={-1}\n                        >\n                            <img\n                                aria-hidden=\"true\"\n                                className={cn(PhoneInputAnatomy.flagImage(), flagImageClass)}\n                                src={flag.flagUrl?.replace(\"{XX}\", flag.country)}\n                                alt={flag.country}\n                            />\n                        </button>\n                    )}\n                    value={_value}\n                    onChange={handleOnValueChange}\n                />\n\n                <input\n                    type=\"text\"\n                    value={_value || \"\"}\n                    name={basicFieldProps.name}\n                    aria-hidden=\"true\"\n                    hidden\n                    tabIndex={-1}\n                    onChange={() => {}}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nPhoneInput.displayName = \"PhoneInput\"\n"
      }
    ]
  },
  {
    "component": "popover",
    "name": "Popover",
    "dependencies": [
      [
        "@radix-ui/react-popover",
        "^1.1.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "popover",
        "content": "export * from \"./popover\"\n"
      },
      {
        "name": "popover.tsx",
        "dir": "popover",
        "content": "\"use client\"\n\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PopoverAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Popover__root\",\n        \"z-50 w-72 rounded-md border bg-[--paper] p-4 text-base shadow-sm outline-none\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0\",\n        \"data-[state=open]:fade-in-50 data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PopoverProps =\n    React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Root> &\n    Omit<React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>, \"asChild\"> &\n    {\n        /**\n         * The trigger element that opens the popover\n         */\n        trigger: React.ReactElement,\n        /**\n         * Additional props for the trigger element\n         */\n        triggerProps?: React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Trigger>\n    }\n\nexport const Popover = React.forwardRef<HTMLDivElement, PopoverProps>((props, ref) => {\n    const {\n        trigger,\n        triggerProps,\n        // Root\n        defaultOpen,\n        open,\n        onOpenChange,\n        modal,\n        // Content\n        className,\n        align = \"center\",\n        sideOffset = 8,\n        ...contentProps\n    } = props\n\n    return (\n        <PopoverPrimitive.Root\n            defaultOpen={defaultOpen}\n            open={open}\n            onOpenChange={onOpenChange}\n            modal={modal}\n        >\n            <PopoverPrimitive.Trigger\n                asChild\n                {...triggerProps}\n            >\n                {trigger}\n            </PopoverPrimitive.Trigger>\n            <PopoverPrimitive.Portal>\n                <PopoverPrimitive.Content\n                    ref={ref}\n                    align={align}\n                    sideOffset={sideOffset}\n                    className={cn(PopoverAnatomy.root(), className)}\n                    {...contentProps}\n                />\n            </PopoverPrimitive.Portal>\n        </PopoverPrimitive.Root>\n    )\n})\n\nPopover.displayName = \"Popover\"\n\n"
      }
    ]
  },
  {
    "component": "progress-bar",
    "name": "ProgressBar",
    "dependencies": [
      [
        "@radix-ui/react-progress",
        "^1.1.0",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "progress-bar",
        "content": "export * from \"./progress-bar\"\n"
      },
      {
        "name": "progress-bar.tsx",
        "dir": "progress-bar",
        "content": "\"use client\"\n\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ProgressBarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-ProgressBar__root\",\n        \"relative w-full overflow-hidden rounded-full bg-[--subtle] translate-z-0\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-2\",\n                md: \"h-3\",\n                lg: \"h-4\",\n                xl: \"h-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    indicator: cva([\n        \"UI-ProgressBar__indicator\",\n        \"h-full w-full flex-1 bg-brand transition-all flex items-center justify-center relative\",\n    ], {\n        variants: {\n            isIndeterminate: {\n                true: \"animate-indeterminate-progress origin-left-right\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            isIndeterminate: false,\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressBar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ProgressBarProps = React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n    & ComponentAnatomy<typeof ProgressBarAnatomy>\n    & VariantProps<typeof ProgressBarAnatomy.root>\n    & VariantProps<typeof ProgressBarAnatomy.indicator>\n\nexport const ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>((props, ref) => {\n    const {\n        className,\n        value,\n        indicatorClass,\n        size,\n        isIndeterminate,\n        ...rest\n    } = props\n\n    return (\n        <ProgressPrimitive.Root\n            ref={ref}\n            className={cn(ProgressBarAnatomy.root({ size }), className)}\n            {...rest}\n        >\n            <ProgressPrimitive.Indicator\n                className={cn(ProgressBarAnatomy.indicator({ isIndeterminate }), indicatorClass)}\n                style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n            />\n        </ProgressPrimitive.Root>\n    )\n})\nProgressBar.displayName = \"ProgressBar\"\n"
      }
    ]
  },
  {
    "component": "radio-group",
    "name": "RadioGroup",
    "dependencies": [
      [
        "@radix-ui/react-radio-group",
        "^1.2.1",
        ""
      ]
    ],
    "family": [
      "input",
      "basic-field"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "radio-group",
        "content": "export * from \"./radio-group\"\n"
      },
      {
        "name": "radio-group.tsx",
        "dir": "radio-group",
        "content": "import { mergeRefs } from \"../core/utils\"\nimport { hiddenInputStyles } from \"../input\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const RadioGroupAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-RadioGroup__root\",\n    ]),\n    item: cva([\n        \"UI-RadioGroup__item\",\n        \"block aspect-square rounded-full border text-brand ring-offset-1 ring-offset-[--background]\",\n        \"focus:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-2\",\n        \"disabled:cursor-not-allowed data-[disabled=true]:opacity-50 data-[readonly=true]:cursor-not-allowed\",\n        \"data-[state=unchecked]:bg-white dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\n        \"data-[state=unchecked]:hover:bg-gray-100 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\n        \"data-[state=checked]:bg-brand data-[state=checked]:border-transparent\", // Checked\n        \"data-[error=true]:border-red-500 data-[error=true]:dark:border-red-500 data-[error=true]:data-[state=checked]:border-red-500 data-[error=true]:dark:data-[state=checked]:border-red-500\", // Error\n    ], {\n        variants: {\n            size: {\n                md: \"h-5 w-5\",\n                lg: \"h-6 w-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    itemIndicator: cva([\n        \"UI-RadioGroup__itemIndicator\",\n        \"flex items-center justify-center\",\n    ]),\n    itemLabel: cva([\n        \"UI-Checkbox_itemLabel\",\n        \"font-normal block\",\n        \"data-[disabled=true]:opacity-50\",\n    ], {\n        variants: {\n            size: {\n                md: \"text-md\",\n                lg: \"text-lg\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    itemContainer: cva([\n        \"UI-RadioGroup__itemContainer\",\n        \"flex gap-2 items-center relative\",\n    ]),\n    itemCheckIcon: cva([\n        \"UI-RadioGroup__itemCheckIcon\",\n        \"text-white\",\n    ], {\n        variants: {\n            size: {\n                md: \"h-4 w-4\",\n                lg: \"h-5 w-5\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport type RadioGroupOption = { value: string, label?: React.ReactNode, disabled?: boolean, readonly?: boolean }\n\nexport type RadioGroupProps = BasicFieldOptions &\n    ComponentAnatomy<typeof RadioGroupAnatomy> &\n    VariantProps<typeof RadioGroupAnatomy.item> & {\n    /**\n     * Selected value\n     */\n    value?: string | undefined\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: string | undefined\n    /**\n     * Callback fired when the selected value changes\n     */\n    onValueChange?: (value: string) => void\n    /**\n     * Radio options\n     */\n    options: RadioGroupOption[]\n    /**\n     * Replaces the default check icon\n     */\n    itemCheckIcon?: React.ReactNode\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n    /**\n     * Stack div class\n     */\n    stackClass?: string\n    /**\n     * Item div class\n     */\n    className?: string\n}\n\nexport const RadioGroup = React.forwardRef<HTMLButtonElement, RadioGroupProps>((props, ref) => {\n\n    const [{\n        size,\n        className,\n        stackClass,\n        value: controlledValue,\n        onValueChange,\n        options,\n        inputRef,\n        defaultValue,\n        /**/\n        itemClass,\n        itemIndicatorClass,\n        itemLabelClass,\n        itemContainerClass,\n        itemCheckIcon,\n        itemCheckIconClass,\n    }, basicFieldProps] = extractBasicFieldProps<RadioGroupProps>(props, React.useId())\n\n    const isFirst = React.useRef(true)\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [_value, _setValue] = React.useState<string | undefined>(controlledValue ?? defaultValue)\n\n    const handleOnValueChange = React.useCallback((value: string) => {\n        _setValue(value)\n        onValueChange?.(value)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            _setValue(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <RadioGroupPrimitive.Root\n                value={_value}\n                onValueChange={handleOnValueChange}\n                defaultValue={defaultValue}\n                className={cn(RadioGroupAnatomy.root(), className)}\n                disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                data-error={!!basicFieldProps.error}\n                data-disabled={basicFieldProps.disabled}\n                data-readonly={basicFieldProps.readonly}\n                aria-readonly={basicFieldProps.readonly}\n                loop\n            >\n                <div className={cn(\"UI-RadioGroup__stack space-y-1\", stackClass)}>\n\n                    {options.map(option => {\n                        return (\n                            <label\n                                key={option.value}\n                                className={cn(RadioGroupAnatomy.itemContainer(), itemContainerClass)}\n                                htmlFor={option.value}\n                                data-error={!!basicFieldProps.error}\n                                data-disabled={basicFieldProps.disabled || option.disabled}\n                                data-readonly={basicFieldProps.readonly || option.readonly}\n                                data-state={_value === option.value ? \"checked\" : \"unchecked\"}\n                            >\n                                <RadioGroupPrimitive.Item\n                                    ref={mergeRefs([buttonRef, ref])}\n                                    id={option.value}\n                                    key={option.value}\n                                    value={option.value}\n                                    disabled={basicFieldProps.disabled || basicFieldProps.readonly || option.disabled || option.readonly}\n                                    data-error={!!basicFieldProps.error}\n                                    data-disabled={basicFieldProps.disabled || option.disabled}\n                                    data-readonly={basicFieldProps.readonly || option.readonly}\n                                    className={cn(RadioGroupAnatomy.item({ size }), itemClass)}\n                                >\n                                    <RadioGroupPrimitive.Indicator\n                                        className={cn(\n                                            RadioGroupAnatomy.itemIndicator(),\n                                            itemIndicatorClass,\n                                        )}\n                                        data-error={!!basicFieldProps.error}\n                                        data-disabled={basicFieldProps.disabled || option.disabled}\n                                        data-readonly={basicFieldProps.readonly || option.readonly}\n                                    >\n                                        {itemCheckIcon ? itemCheckIcon : <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            viewBox=\"0 0 16 16\"\n                                            width=\"16\"\n                                            height=\"16\"\n                                            stroke=\"currentColor\"\n                                            fill=\"currentColor\"\n                                            className={cn(RadioGroupAnatomy.itemCheckIcon({ size }), itemCheckIconClass)}\n                                        >\n                                            <path d=\"M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z\"></path>\n                                        </svg>}\n                                    </RadioGroupPrimitive.Indicator>\n                                </RadioGroupPrimitive.Item>\n                                <label\n                                    className={cn(RadioGroupAnatomy.itemLabel(), itemLabelClass)}\n                                    htmlFor={option.value}\n                                    aria-disabled={option.disabled}\n                                    data-error={!!basicFieldProps.error}\n                                    data-disabled={basicFieldProps.disabled || option.disabled || option.disabled}\n                                    data-readonly={basicFieldProps.readonly || option.readonly}\n                                    data-state={_value === option.value ? \"checked\" : \"unchecked\"}\n                                >\n                                    {option.label ?? option.value}\n                                </label>\n                            </label>\n                        )\n                    })}\n                </div>\n            </RadioGroupPrimitive.Root>\n\n            <input\n                ref={inputRef}\n                type=\"radio\"\n                name={basicFieldProps.name}\n                className={hiddenInputStyles}\n                value={_value ?? \"\"}\n                checked={!!_value}\n                aria-hidden=\"true\"\n                required={basicFieldProps.required}\n                tabIndex={-1}\n                onChange={() => {}}\n                onFocusCapture={() => buttonRef.current?.focus()}\n            />\n        </BasicField>\n    )\n})\n\nRadioGroup.displayName = \"RadioGroup\"\n"
      }
    ]
  },
  {
    "component": "scroll-area",
    "name": "ScrollArea",
    "dependencies": [
      [
        "@radix-ui/react-scroll-area",
        "^1.2.0",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "scroll-area",
        "content": "export * from \"./scroll-area\"\n"
      },
      {
        "name": "scroll-area.tsx",
        "dir": "scroll-area",
        "content": "\"use client\"\n\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ScrollAreaAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-ScrollArea__root\",\n        \"relative overflow-hidden\",\n    ]),\n    viewport: cva([\n        \"UI-ScrollArea__viewport\",\n        \"h-full w-full rounded-[inherit]\",\n    ]),\n    scrollbar:\n        cva([\n            \"UI-ScrollArea__scrollbar\",\n            \"flex touch-none select-none transition-colors\",\n        ], {\n            variants: {\n                orientation: {\n                    vertical: \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n                    horizontal: \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n                },\n            },\n            defaultVariants: {\n                orientation: \"vertical\",\n            },\n        }),\n    thumb: cva([\n        \"UI-ScrollArea__thumb\",\n        \"relative flex-1 rounded-full bg-[--border]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ScrollAreaProps =\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n    & ComponentAnatomy<typeof ScrollAreaAnatomy>\n\nexport const ScrollArea = React.forwardRef<HTMLDivElement, ScrollAreaProps>((props, ref) => {\n    const {\n        className,\n        scrollbarClass,\n        thumbClass,\n        viewportClass,\n        children,\n        ...rest\n    } = props\n    return (\n        <ScrollAreaPrimitive.Root\n            ref={ref}\n            className={cn(ScrollAreaAnatomy.root(), className)}\n            {...rest}\n        >\n            <ScrollAreaPrimitive.Viewport className={cn(ScrollAreaAnatomy.viewport(), viewportClass)}>\n                {children}\n            </ScrollAreaPrimitive.Viewport>\n            <ScrollBar\n                className={scrollbarClass}\n                thumbClass={thumbClass}\n            />\n            <ScrollAreaPrimitive.Corner />\n        </ScrollAreaPrimitive.Root>\n    )\n\n})\nScrollArea.displayName = \"ScrollArea\"\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollBar\n * -----------------------------------------------------------------------------------------------*/\n\ntype ScrollBarProps =\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar> &\n    Pick<ComponentAnatomy<typeof ScrollAreaAnatomy>, \"thumbClass\">\n\nconst ScrollBar = React.forwardRef<HTMLDivElement, ScrollBarProps>((props, ref) => {\n    const {\n        className,\n        thumbClass,\n        orientation = \"vertical\",\n        ...rest\n    } = props\n\n    return (\n        <ScrollAreaPrimitive.ScrollAreaScrollbar\n            ref={ref}\n            orientation={orientation}\n            className={cn(ScrollAreaAnatomy.scrollbar({ orientation }), className)}\n            {...rest}\n        >\n            <ScrollAreaPrimitive.ScrollAreaThumb className={cn(ScrollAreaAnatomy.thumb(), thumbClass)} />\n        </ScrollAreaPrimitive.ScrollAreaScrollbar>\n    )\n})\nScrollBar.displayName = \"ScrollBar\"\n"
      }
    ]
  },
  {
    "component": "select",
    "name": "Select",
    "dependencies": [
      [
        "@radix-ui/react-select",
        "^2.1.2",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "select",
        "content": "export * from \"./select\"\n"
      },
      {
        "name": "select.tsx",
        "dir": "select",
        "content": "\"use client\"\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SelectAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Select__root\",\n        \"inline-flex items-center justify-between relative whitespace-nowrap truncate\",\n    ]),\n    chevronIcon: cva([\n        \"UI-Combobox__chevronIcon\",\n        \"ml-2 h-4 w-4 shrink-0 opacity-50\",\n    ]),\n    scrollButton: cva([\n        \"UI-Select__scrollButton\",\n        \"flex items-center justify-center h-[25px] bg-[--paper] text-base cursor-default\",\n    ]),\n    content: cva([\n        \"UI-Select__content\",\n        \"w-full overflow-hidden rounded-[--radius] shadow-md bg-[--paper] border leading-none z-50\",\n    ]),\n    viewport: cva([\n        \"UI-Select__viewport\",\n        \"p-1 z-10\",\n    ]),\n    item: cva([\n        \"UI-Select__item\",\n        \"text-base leading-none rounded-[--radius] flex items-center h-8 pr-2 pl-8 relative\",\n        \"select-none disabled:opacity-50 disabled:pointer-events-none\",\n        \"data-highlighted:outline-none data-highlighted:bg-[--subtle]\",\n        \"data-[disabled=true]:opacity-50 data-[disabled=true]:pointer-events-none\",\n    ]),\n    itemText: cva([\n        \"UI-Select__itemText\",\n        \"flex-none whitespace-nowrap truncate\",\n    ]),\n    checkIcon: cva([\n        \"UI-Select__checkIcon\",\n        \"absolute left-2 w-4 inline-flex items-center justify-center\",\n    ]),\n})\n\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SelectOption = { value: string, label?: string, disabled?: boolean }\n\nexport type SelectProps = InputStyling &\n    BasicFieldOptions &\n    Omit<React.ComponentPropsWithoutRef<\"button\">, \"value\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof SelectAnatomy> & {\n    /**\n     * The options to display in the dropdown\n     */\n    options: SelectOption[] | undefined\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * Direction of the text\n     */\n    dir?: \"ltr\" | \"rtl\"\n    /**\n     * The selected value\n     */\n    value?: string | undefined\n    /**\n     * Callback fired when the selected value changes\n     */\n    onValueChange?: (value: string) => void\n    /**\n     * Callback fired when the dropdown opens or closes\n     */\n    onOpenChange?: (open: boolean) => void\n    /**\n     * Default selected value when uncontrolled\n     */\n    defaultValue?: string\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLSelectElement>\n}\n\nexport const Select = React.forwardRef<HTMLButtonElement, SelectProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<SelectProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        /**/\n        className,\n        placeholder,\n        options,\n        chevronIconClass,\n        scrollButtonClass,\n        contentClass,\n        viewportClass,\n        checkIconClass,\n        itemClass,\n        itemTextClass,\n        /**/\n        dir,\n        value: controlledValue,\n        onValueChange,\n        onOpenChange,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<SelectProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const isFirst = React.useRef(true)\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [_value, _setValue] = React.useState<string | undefined>(controlledValue ?? defaultValue)\n\n    const handleOnValueChange = React.useCallback((value: string) => {\n        if (value === \"__placeholder__\") {\n            _setValue(\"\")\n            onValueChange?.(\"\")\n            return\n        }\n        _setValue(value)\n        onValueChange?.(value)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            _setValue(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <SelectPrimitive.Root\n                    dir={dir}\n                    value={_value}\n                    onValueChange={handleOnValueChange}\n                    onOpenChange={onOpenChange}\n                    defaultValue={defaultValue}\n                >\n\n                    <SelectPrimitive.Trigger\n                        ref={mergeRefs([buttonRef, ref])}\n                        id={basicFieldProps.id}\n                        className={cn(\n                            InputAnatomy.root({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                isDisabled: !!basicFieldProps.disabled,\n                                isReadonly: !!basicFieldProps.readonly,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            SelectAnatomy.root(),\n                            className,\n                        )}\n                        aria-label={basicFieldProps.name || \"Select\"}\n                        {...rest}\n                    >\n                        <SelectPrimitive.Value placeholder={placeholder} />\n\n                        <SelectPrimitive.Icon className={cn(!!rightIcon && \"hidden\")}>\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                viewBox=\"0 0 24 24\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"2\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                className={cn(SelectAnatomy.chevronIcon(), chevronIconClass)}\n                            >\n                                <path d=\"m6 9 6 6 6-6\" />\n                            </svg>\n                        </SelectPrimitive.Icon>\n\n                    </SelectPrimitive.Trigger>\n\n                    <SelectPrimitive.Portal>\n                        <SelectPrimitive.Content className={cn(SelectAnatomy.content(), contentClass)}>\n\n                            <SelectPrimitive.ScrollUpButton className={cn(SelectAnatomy.scrollButton(), scrollButtonClass)}>\n                                <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    viewBox=\"0 0 24 24\"\n                                    fill=\"none\"\n                                    stroke=\"currentColor\"\n                                    strokeWidth=\"2\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    className={cn(SelectAnatomy.chevronIcon(), \"rotate-180\", chevronIconClass)}\n                                >\n                                    <path d=\"m6 9 6 6 6-6\" />\n                                </svg>\n                            </SelectPrimitive.ScrollUpButton>\n\n                            <SelectPrimitive.Viewport className={cn(SelectAnatomy.viewport(), viewportClass)}>\n\n                                {(!!placeholder && !basicFieldProps.required) && (\n                                    <SelectPrimitive.Item\n                                        className={cn(\n                                            SelectAnatomy.item(),\n                                            itemClass,\n                                        )}\n                                        value={\"__placeholder__\"}\n                                    >\n                                        <SelectPrimitive.ItemText>{placeholder}</SelectPrimitive.ItemText>\n                                    </SelectPrimitive.Item>\n                                )}\n\n                                {options?.map(option => (\n                                    <SelectPrimitive.Item\n                                        key={option.value}\n                                        className={cn(\n                                            SelectAnatomy.item(),\n                                            itemClass,\n                                        )}\n                                        value={option.value}\n                                        disabled={option.disabled}\n                                        data-disabled={option.disabled}\n                                    >\n                                        <SelectPrimitive.ItemText className={cn(\n                                            SelectAnatomy.itemText(),\n                                            itemTextClass,\n                                        )}>{option.label}</SelectPrimitive.ItemText>\n                                        <SelectPrimitive.ItemIndicator asChild>\n                                            <svg\n                                                xmlns=\"http://www.w3.org/2000/svg\"\n                                                viewBox=\"0 0 24 24\"\n                                                fill=\"none\"\n                                                stroke=\"currentColor\"\n                                                strokeWidth=\"2\"\n                                                strokeLinecap=\"round\"\n                                                strokeLinejoin=\"round\"\n                                                className={cn(\n                                                    SelectAnatomy.checkIcon(),\n                                                    checkIconClass,\n                                                )}\n                                            >\n                                                <path d=\"M20 6 9 17l-5-5\" />\n                                            </svg>\n                                        </SelectPrimitive.ItemIndicator>\n                                    </SelectPrimitive.Item>\n                                ))}\n\n                            </SelectPrimitive.Viewport>\n\n                            <SelectPrimitive.ScrollDownButton className={cn(SelectAnatomy.scrollButton(), scrollButtonClass)}>\n                                <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    viewBox=\"0 0 24 24\"\n                                    fill=\"none\"\n                                    stroke=\"currentColor\"\n                                    strokeWidth=\"2\"\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    className={cn(SelectAnatomy.chevronIcon(), chevronIconClass)}\n                                >\n                                    <path d=\"m6 9 6 6 6-6\" />\n                                </svg>\n                            </SelectPrimitive.ScrollDownButton>\n\n                        </SelectPrimitive.Content>\n                    </SelectPrimitive.Portal>\n\n                </SelectPrimitive.Root>\n\n                <select\n                    ref={inputRef}\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    disabled={basicFieldProps.disabled}\n                    value={_value}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                >\n                    <option value=\"\" />\n                    {options?.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value}\n                            disabled={option.disabled}\n                        />\n                    ))}\n                </select>\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nSelect.displayName = \"Select\"\n"
      }
    ]
  },
  {
    "component": "separator",
    "name": "Separator",
    "dependencies": [
      [
        "@radix-ui/react-separator",
        "^1.1.0",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "separator",
        "content": "export * from \"./separator\"\n"
      },
      {
        "name": "separator.tsx",
        "dir": "separator",
        "content": "\"use client\"\n\nimport { cn } from \"../core/styling\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SeparatorAnatomy = {\n    root: cva([\n        \"UI-Separator__root\",\n        \"shrink-0 bg-[--border]\",\n    ], {\n        variants: {\n            orientation: {\n                horizontal: \"w-full h-[1px]\",\n                vertical: \"h-full w-[1px]\",\n            },\n        },\n    }),\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Separator\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SeparatorProps = React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n\nexport const Separator = React.forwardRef<HTMLDivElement, SeparatorProps>((props, ref) => {\n    const {\n        className,\n        orientation = \"horizontal\",\n        decorative = true,\n        ...rest\n    } = props\n\n    return (\n        <SeparatorPrimitive.Root\n            ref={ref}\n            decorative={decorative}\n            orientation={orientation}\n            className={cn(\n                SeparatorAnatomy.root({ orientation }),\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\n\nSeparator.displayName = \"Separator\"\n"
      }
    ]
  },
  {
    "component": "simple-dropzone",
    "name": "SimpleDropzone",
    "dependencies": [
      [
        "react-dropzone",
        "^14.2.10",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "simple-dropzone",
        "content": "export * from \"./simple-dropzone\"\n"
      },
      {
        "name": "simple-dropzone.tsx",
        "dir": "simple-dropzone",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Accept, FileError, useDropzone } from \"react-dropzone\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { CloseButton, IconButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { hiddenInputStyles } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SimpleDropzoneAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-SimpleDropzone__root\",\n        \"appearance-none w-full mb-2 cursor-pointer hover:text-[--text-color] flex items-center justify-center p-4 border rounded-[--radius] border-dashed\",\n        \"gap-3 text-sm sm:text-base\",\n        \"outline-none ring-[--ring] focus-visible:ring-2\",\n        \"text-[--muted] transition ease-in-out hover:border-[--foreground]\",\n        \"data-[drag-active=true]:border-brand-500\",\n        \"data-[drag-reject=true]:border-[--red]\",\n    ]),\n    list: cva([\n        \"UI-SimpleDropzone__list\",\n        \"flex rounded-md flex-wrap divide-y divide-[--border]\",\n    ]),\n    listItem: cva([\n        \"UI-SimpleDropzone__listItem\",\n        \"flex items-center justify-space-between relative p-1 hover:bg-[--subtle] w-full overflow-hidden\",\n    ]),\n    listItemDetailsContainer: cva([\n        \"UI-SimpleDropzone__listItemDetailsContainer\",\n        \"flex items-center gap-2 truncate w-full\",\n    ]),\n    listItemTitle: cva([\n        \"UI-SimpleDropzone__listItemTitle\",\n        \"truncate max-w-[180px] text-[.9rem]\",\n    ]),\n    listItemSize: cva([\n        \"UI-SimpleDropzone__listItemSize\",\n        \"text-xs uppercase text-center font-semibold align-center text-[--muted]\",\n    ]),\n    listItemRemoveButton: cva([\n        \"UI-SimpleDropzone__listItemRemoveButton\",\n        \"ml-2 rounded-full\",\n    ]),\n    imagePreviewGrid: cva([\n        \"UI-SimpleDropzone__imagePreviewGrid\",\n        \"flex gap-2 flex-wrap place-content-center pt-4\",\n    ]),\n    imagePreviewContainer: cva([\n        \"UI-SimpleDropzone__imagePreviewContainer\",\n        \"col-span-1 row-span-1 aspect-square w-36 h-auto\",\n    ]),\n    imagePreview: cva([\n        \"UI-SimpleDropzone__imagePreview\",\n        \"relative bg-transparent border h-full bg-center bg-no-repeat bg-contain rounded-md overflow-hidden\",\n        \"col-span-1 row-span-1\",\n    ]),\n    imagePreviewRemoveButton: cva([\n        \"UI-SimpleDropzone__imagePreviewRemoveButton\",\n        \"absolute top-1 right-1\",\n    ]),\n    fileIcon: cva([\n        \"UI-SimpleDropzone__fileIcon\",\n        \"w-5 h-5 flex-none\",\n    ]),\n    maxSizeText: cva([\n        \"UI-SimpleDropzone__maxSizeText\",\n        \"text-sm text-[--muted] font-medium\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * SimpleDropzone\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SimpleDropzoneProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\" | \"accept\" | \"type\" | \"onError\" | \"onDrop\"> &\n    ComponentAnatomy<typeof SimpleDropzoneAnatomy> &\n    BasicFieldOptions & {\n    /**\n     * Callback fired when files are selected\n     */\n    onValueChange?: (files: File[]) => void,\n    /**\n     * Whether to show a preview of the image(s) under the dropzone\n     */\n    withImagePreview?: boolean\n    /**\n     * Whether to allow multiple files\n     */\n    multiple?: boolean\n    /**\n     * The accepted file types\n     */\n    accept?: Accept\n    /**\n     * The minimum file size\n     */\n    minSize?: number\n    /**\n     * The maximum file size\n     */\n    maxSize?: number\n    /**\n     * The maximum number of files\n     */\n    maxFiles?: number\n    /**\n     * If false, allow dropped items to take over the current browser window\n     */\n    preventDropOnDocument?: boolean\n    /**\n     * Whether to prevent click to open file dialog\n     */\n    noClick?: boolean\n    /**\n     * Whether to prevent drag and drop\n     */\n    noDrag?: boolean\n    /**\n     * Callback fired when an error occurs\n     */\n    onError?: (err: Error) => void\n    /**\n     * Custom file validator function\n     */\n    validator?: <T extends File>(file: T) => FileError | FileError[] | null\n    /**\n     * The dropzoneText text displayed in the dropzone\n     */\n    dropzoneText?: string\n}\n\nexport const SimpleDropzone = React.forwardRef<HTMLInputElement, SimpleDropzoneProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        listClass,\n        listItemClass,\n        listItemDetailsContainerClass,\n        listItemRemoveButtonClass,\n        listItemSizeClass,\n        listItemTitleClass,\n        imagePreviewGridClass,\n        imagePreviewContainerClass,\n        imagePreviewRemoveButtonClass,\n        imagePreviewClass,\n        maxSizeTextClass,\n        fileIconClass,\n        onValueChange,\n        withImagePreview,\n        dropzoneText,\n        /**/\n        accept,\n        minSize,\n        maxSize,\n        maxFiles,\n        preventDropOnDocument,\n        noClick,\n        noDrag,\n        onError,\n        validator,\n        multiple,\n        value, // ignored\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps(props, React.useId())\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [files, setFiles] = React.useState<File[]>([])\n\n    const onDrop = React.useCallback((acceptedFiles: File[]) => {\n        // Update files - add the preview\n        setFiles(acceptedFiles.map(file => Object.assign(file, { preview: URL.createObjectURL(file) })))\n    }, [])\n\n    const handleRemoveFile = React.useCallback((file: number) => {\n        setFiles(p => p.toSpliced(file, 1))\n    }, [])\n\n    React.useEffect(() => {\n        onValueChange?.(files)\n    }, [files])\n\n    React.useEffect(() => () => {\n        files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n    }, [files])\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragReject,\n    } = useDropzone({\n        onDrop,\n        multiple,\n        minSize,\n        maxSize,\n        maxFiles,\n        preventDropOnDocument,\n        noClick,\n        noDrag,\n        validator,\n        accept,\n        onError\n    })\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <button\n                ref={buttonRef}\n                className={cn(\n                    SimpleDropzoneAnatomy.root(),\n                    className,\n                )}\n                data-drag-active={isDragActive}\n                data-drag-reject={isDragReject}\n                {...getRootProps()}\n                tabIndex={0}\n            >\n                <input\n                    ref={ref}\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name ?? \"files\"}\n                    value=\"\"\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                    aria-hidden=\"true\"\n                    {...getInputProps()}\n                    {...rest}\n                    className={cn(\"block\", hiddenInputStyles)}\n                    style={{ display: \"block\" }}\n                />\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\"\n                >\n                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                    <polyline points=\"7 10 12 15 17 10\" />\n                    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n                </svg>\n                <span>\n                    {dropzoneText ?? \"Click or drag file to this area to upload\"}\n                </span>\n            </button>\n\n            {maxSize && <div className={cn(SimpleDropzoneAnatomy.maxSizeText(), maxSizeTextClass)}>{`â¤`} {humanFileSize(maxSize, 0)}</div>}\n\n            {!withImagePreview && <div className={cn(SimpleDropzoneAnatomy.list(), listClass)}>\n                {files?.map((file: any, index) => {\n\n                    let Icon: React.ReactElement\n\n                    if ([\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/webm\"].includes(file.type)) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <circle cx=\"10\" cy=\"13\" r=\"2\" />\n                            <path d=\"m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22\" />\n                        </svg>\n                    } else if (file.type.includes(\"video\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <path d=\"m10 11 5 3-5 3v-6Z\" />\n                        </svg>\n                    } else if (file.type.includes(\"audio\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path\n                                d=\"M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3\"\n                            />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <path d=\"M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z\" />\n                            <path d=\"M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z\" />\n                            <path d=\"M2 19v-3a6 6 0 0 1 12 0v3\" />\n                        </svg>\n                    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\") || file.type.includes(\"txt\") || file.type.includes(\"text\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <line x1=\"16\" x2=\"8\" y1=\"13\" y2=\"13\" />\n                            <line x1=\"16\" x2=\"8\" y1=\"17\" y2=\"17\" />\n                            <line x1=\"10\" x2=\"8\" y1=\"9\" y2=\"9\" />\n                        </svg>\n                    } else if (file.type.includes(\"compressed\") || file.type.includes(\"zip\") || file.type.includes(\"archive\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path\n                                d=\"M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6\"\n                            />\n                            <circle cx=\"16\" cy=\"19\" r=\"2\" />\n                            <path d=\"M16 11v-1\" />\n                            <path d=\"M16 17v-2\" />\n                        </svg>\n                    } else {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                        </svg>\n                    }\n\n                    return (\n\n                        <div\n                            key={file.name}\n                            className={cn(SimpleDropzoneAnatomy.listItem(), listItemClass)}\n                        >\n                            <div\n                                className={cn(SimpleDropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClass)}\n                            >\n                                {Icon}\n                                <p className={cn(SimpleDropzoneAnatomy.listItemTitle(), listItemTitleClass)}>{file.name}</p>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemSize(), listItemSizeClass)}>{humanFileSize(file.size)}</p>\n                            </div>\n                            <IconButton\n                                size=\"xs\"\n                                intent=\"gray-basic\"\n                                icon={\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        className=\"w-4 h-4\"\n                                    >\n                                        <path d=\"M3 6h18\" />\n                                        <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\" />\n                                        <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\" />\n                                        <line x1=\"10\" x2=\"10\" y1=\"11\" y2=\"17\" />\n                                        <line x1=\"14\" x2=\"14\" y1=\"11\" y2=\"17\" />\n                                    </svg>\n                                }\n                                className={cn(SimpleDropzoneAnatomy.listItemRemoveButton(), listItemRemoveButtonClass)}\n                                onClick={() => handleRemoveFile(index)}\n                            />\n                        </div>\n                    )\n                })}\n            </div>}\n\n            {withImagePreview && !!files.length && <div className={cn(SimpleDropzoneAnatomy.imagePreviewGrid(), imagePreviewGridClass)}>\n                {files?.map((file, index) => {\n                    return (\n                        <div\n                            key={file.name}\n                            className={cn(SimpleDropzoneAnatomy.imagePreviewContainer(), imagePreviewContainerClass)}\n                        >\n                            <div\n                                className={cn(SimpleDropzoneAnatomy.imagePreview(), imagePreviewClass)}\n                                style={{ backgroundImage: file ? `url(${(file as File & { preview: string }).preview})` : undefined }}\n                            >\n                                <CloseButton\n                                    intent=\"alert\"\n                                    size=\"xs\"\n                                    className={cn(SimpleDropzoneAnatomy.imagePreviewRemoveButton(), imagePreviewRemoveButtonClass)}\n                                    onClick={() => handleRemoveFile(index)}\n                                />\n                            </div>\n                            <div className={cn(SimpleDropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClass)}>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemTitle(), listItemTitleClass)}>{file.name}</p>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemSize(), listItemSizeClass)}>{humanFileSize(file.size)}</p>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>}\n\n        </BasicField>\n    )\n\n})\n\nSimpleDropzone.displayName = \"SimpleDropzone\"\n\nfunction humanFileSize(size: number, precision = 2): string {\n    const i = Math.floor(Math.log(size) / Math.log(1024))\n    return (size / Math.pow(1024, i)).toFixed(precision).toString() + [\"bytes\", \"Kb\", \"Mb\", \"Gb\", \"Tb\"][i]\n}\n"
      }
    ]
  },
  {
    "component": "skeleton",
    "name": "Skeleton",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "skeleton",
        "content": "export * from \"./skeleton\"\n"
      },
      {
        "name": "skeleton.tsx",
        "dir": "skeleton",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SkeletonAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Skeleton__root\",\n        \"animate-pulse rounded-md bg-[--subtle] w-full h-12\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Skeleton\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SkeletonProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(SkeletonAnatomy.root(), className)}\n            {...rest}\n        />\n    )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"
      }
    ]
  },
  {
    "component": "stats",
    "name": "Stats",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "stats",
        "content": "export * from \"./stats\"\n"
      },
      {
        "name": "stats.tsx",
        "dir": "stats",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const StatsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Stats__root\",\n        \"grid grid-cols-1 divide-y divide-[--border] overflow-hidden md:grid-cols-3 md:divide-y-0 md:divide-x\",\n    ], {\n        variants: {\n            size: {\n                sm: null, md: null, lg: null,\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    item: cva([\n        \"UI-Stats__item\",\n        \"relative\",\n    ], {\n        variants: {\n            size: {\n                sm: \"p-3 sm:p-4\",\n                md: \"p-4 sm:p-6\",\n                lg: \"p-4 sm:p-7\",\n            },\n        },\n    }),\n    name: cva([\n        \"UI-Stats__name\",\n        \"text-sm font-normal text-[--muted]\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xs\",\n                md: \"text-sm\",\n                lg: \"text-base\",\n            },\n        },\n    }),\n    value: cva([\n        \"UI-Stats__value\",\n        \"mt-1 flex items-baseline md:block lg:flex font-semibold\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xl md:text-2xl\",\n                md: \"text-2xl md:text-3xl\",\n                lg: \"text-3xl md:text-4xl\",\n            },\n        },\n    }),\n    unit: cva([\n        \"UI-Stats__unit\",\n        \"ml-2 text-sm font-medium text-[--muted]\",\n    ]),\n    trend: cva([\n        \"UI-Stats__trend\",\n        \"inline-flex items-baseline text-sm font-medium\",\n        \"data-[trend=up]:text-[--green] data-[trend=down]:text-[--red]\",\n    ]),\n    icon: cva([\n        \"UI-Stats__icon\",\n        \"absolute top-5 right-5 opacity-30\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xl sm:text-2xl\",\n                md: \"text-2xl sm:text-3xl\",\n                lg: \"text-3xl sm:text-4xl\",\n            },\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Stats\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StatsItem = {\n    name: string,\n    value: string | number,\n    unit?: string | number,\n    change?: string | number,\n    trend?: \"up\" | \"down\",\n    icon?: React.ReactElement\n}\n\nexport type StatsProps = React.ComponentPropsWithRef<\"dl\"> &\n    ComponentAnatomy<typeof StatsAnatomy> &\n    VariantProps<typeof StatsAnatomy.root> & {\n    children?: React.ReactNode,\n    items: StatsItem[]\n}\n\nexport const Stats = React.forwardRef<HTMLDListElement, StatsProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        nameClass,\n        valueClass,\n        unitClass,\n        trendClass,\n        iconClass,\n        className,\n        items,\n        size = \"md\",\n        ...rest\n    } = props\n\n    return (\n        <dl\n            ref={ref}\n            className={cn(StatsAnatomy.root({ size }), className)}\n            {...rest}\n        >\n            {items.map((item) => (\n                <div key={item.name} className={cn(StatsAnatomy.item({ size }), itemClass)}>\n\n                    <dt className={cn(StatsAnatomy.name({ size }), nameClass)}>{item.name}</dt>\n\n                    <dd className={cn(StatsAnatomy.value({ size }), valueClass)}>\n                        {item.value}\n                        <span className={cn(StatsAnatomy.unit(), unitClass)}>{item.unit}</span>\n                    </dd>\n\n                    {(!!item.change || !!item.trend) &&\n                        <div\n                            className={cn(StatsAnatomy.trend(), trendClass)}\n                            data-trend={item.trend}\n                        >\n                            {item.trend && <span> {item.trend === \"up\" ? \"+\" : \"-\"}</span>}\n                            {item.change}\n                        </div>\n                    }\n\n                    <div className={cn(StatsAnatomy.icon({ size }), iconClass)}>\n                        {item.icon}\n                    </div>\n\n                </div>\n            ))}\n        </dl>\n    )\n\n})\n\nStats.displayName = \"Stats\"\n"
      }
    ]
  },
  {
    "component": "switch",
    "name": "Switch",
    "dependencies": [
      [
        "@radix-ui/react-switch",
        "^1.1.1",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "switch",
        "content": "export * from \"./switch\"\n"
      },
      {
        "name": "switch.tsx",
        "dir": "switch",
        "content": "\"use client\"\n\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { mergeRefs } from \"../core/utils\"\nimport { hiddenInputStyles } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\nexport const SwitchAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Switch__root\",\n        \"peer inline-flex shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-colors\",\n        \"disabled:cursor-not-allowed data-[disabled=true]:opacity-50\",\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-1\",\n        \"data-[state=unchecked]:bg-gray-200 dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\n        \"data-[state=unchecked]:hover:bg-gray-300 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\n        \"data-[state=checked]:bg-brand\", // Checked\n        \"data-[error=true]:border-red-500\", // Checked\n    ], {\n        variants: {\n            size: {\n                sm: \"h-5 w-9\",\n                md: \"h-6 w-11\",\n                lg: \"h-7 w-14\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    container: cva([\n        \"UI-Checkbox__container\",\n        \"inline-flex gap-2 items-center\",\n    ]),\n    thumb: cva([\n        \"UI-Switch__thumb\",\n        \"pointer-events-none block rounded-full bg-white shadow-lg ring-0 transition-transform\",\n        \"data-[state=unchecked]:translate-x-1\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-3 w-3 data-[state=checked]:translate-x-[1.1rem]\",\n                md: \"h-4 w-4 data-[state=checked]:translate-x-[1.4rem]\",\n                lg: \"h-5 w-5 data-[state=checked]:translate-x-[1.9rem]\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    label: cva([\n        \"UI-Switch__label\",\n        \"relative font-normal\",\n        \"data-[disabled=true]:text-gray-300\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Switch\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SwitchProps = BasicFieldOptions &\n    ComponentAnatomy<typeof SwitchAnatomy> &\n    VariantProps<typeof SwitchAnatomy.root> &\n    Omit<React.ComponentPropsWithoutRef<typeof SwitchPrimitive.Root>,\n        \"value\" | \"checked\" | \"disabled\" | \"required\" | \"defaultValue\" | \"defaultChecked\" | \"onCheckedChange\"> & {\n    /**\n     * Whether the switch is checked\n     */\n    value: boolean\n    /**\n     * Callback fired when the value changes\n     */\n    onValueChange: (value: boolean) => void\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: boolean\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n    className?: string\n}\n\nexport const Switch = React.forwardRef<HTMLButtonElement, SwitchProps>((props, ref) => {\n\n    const [{\n        size,\n        value: controlledValue,\n        className,\n        onValueChange,\n        labelClass,\n        containerClass,\n        thumbClass,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps(props, React.useId())\n\n    const isFirst = React.useRef(true)\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [_value, _setValue] = React.useState<boolean | undefined>(controlledValue ?? defaultValue ?? false)\n\n    const handleOnValueChange = React.useCallback((value: boolean) => {\n        _setValue(value)\n        onValueChange?.(value)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            _setValue(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    return (\n        <BasicField{...basicFieldProps} id={basicFieldProps.id}>\n            <div className={cn(SwitchAnatomy.container(), containerClass)}>\n                <SwitchPrimitive.Root\n                    ref={mergeRefs([buttonRef, ref])}\n                    id={basicFieldProps.id}\n                    className={cn(SwitchAnatomy.root({ size }), className)}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    data-readonly={basicFieldProps.readonly}\n                    data-error={!!basicFieldProps.error}\n                    checked={_value}\n                    onCheckedChange={handleOnValueChange}\n                    defaultChecked={defaultValue}\n                    {...rest}\n                >\n                    <SwitchPrimitive.Thumb className={cn(SwitchAnatomy.thumb({ size }), thumbClass)} />\n                </SwitchPrimitive.Root>\n                {!!label && <label\n                    className={cn(SwitchAnatomy.label(), labelClass)}\n                    htmlFor={basicFieldProps.id}\n                    data-disabled={basicFieldProps.disabled}\n                >\n                    {label}\n                </label>}\n\n                <input\n                    ref={inputRef}\n                    type=\"checkbox\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={_value ? \"on\" : \"off\"}\n                    checked={basicFieldProps.required ? _value : true}\n                    aria-hidden=\"true\"\n                    required={controlledValue === undefined && basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n            </div>\n        </BasicField>\n    )\n\n})\n\nSwitch.displayName = \"Switch\"\n"
      }
    ]
  },
  {
    "component": "table",
    "name": "Table",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "table",
        "content": "export * from \"./table\"\n"
      },
      {
        "name": "table.tsx",
        "dir": "table",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TableAnatomy = defineStyleAnatomy({\n    table: cva([\n        \"UI-Table__table\",\n        \"w-full caption-bottom text-sm\",\n    ]),\n    tableHeader: cva([\n        \"UI-Table__tableHeader\",\n        \"[&_tr]:border-b\",\n    ]),\n    tableBody: cva([\n        \"UI-Table__tableBody\",\n        \"[&_tr:last-child]:border-0\",\n    ]),\n    tableFooter: cva([\n        \"UI-Table__tableFooter\",\n        \"border-t bg-gray-100 dark:bg-gray-900 bg-opacity-40 font-medium [&>tr]:last:border-b-0\",\n    ]),\n    tableRow: cva([\n        \"UI-Table__tableRow\",\n        \"border-b transition-colors hover:bg-[--subtle] data-[state=selected]:bg-[--subtle]\",\n    ]),\n    tableHead: cva([\n        \"UI-Table__tableHead\",\n        \"h-12 px-4 text-left align-middle font-medium\",\n        \"[&:has([role=checkbox])]:pr-0\",\n    ]),\n    tableCell: cva([\n        \"UI-Table__tableCell\",\n        \"p-4 align-middle [&:has([role=checkbox])]:pr-0\",\n    ]),\n    tableCaption: cva([\n        \"UI-Table__tableCaption\",\n        \"mt-4 text-sm\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableProps = React.ComponentPropsWithoutRef<\"table\">\n\nexport const Table = React.forwardRef<HTMLTableElement, TableProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return (\n        <div className=\"relative w-full overflow-auto\">\n            <table\n                ref={ref}\n                className={cn(TableAnatomy.table(), className)}\n                {...rest}\n            />\n        </div>\n    )\n})\nTable.displayName = \"Table\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableHeaderProps = React.ComponentPropsWithoutRef<\"thead\">\n\nexport const TableHeader = React.forwardRef<HTMLTableSectionElement, TableHeaderProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <thead ref={ref} className={cn(TableAnatomy.tableHeader(), className)} {...rest} />\n})\nTableHeader.displayName = \"TableHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableBody\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableBodyProps = React.ComponentPropsWithoutRef<\"tbody\">\n\nexport const TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tbody ref={ref} className={cn(TableAnatomy.tableBody(), className)} {...rest} />\n})\nTableBody.displayName = \"TableBody\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableFooter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableFooterProps = React.ComponentPropsWithoutRef<\"tfoot\">\n\nexport const TableFooter = React.forwardRef<HTMLTableSectionElement, TableFooterProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tfoot ref={ref} className={cn(TableAnatomy.tableFooter(), className)} {...rest} />\n})\nTableFooter.displayName = \"TableFooter\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableRow\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableRowProps = React.ComponentPropsWithoutRef<\"tr\">\n\nexport const TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tr ref={ref} className={cn(TableAnatomy.tableRow(), className)} {...rest} />\n})\nTableRow.displayName = \"TableRow\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableHead\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableHeadProps = React.ComponentPropsWithoutRef<\"th\">\n\nexport const TableHead = React.forwardRef<HTMLTableCellElement, TableHeadProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <th ref={ref} className={cn(TableAnatomy.tableHead(), className)} {...rest} />\n})\nTableHead.displayName = \"TableHead\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableCell\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableCellProps = React.ComponentPropsWithoutRef<\"td\">\n\nexport const TableCell = React.forwardRef<HTMLTableCellElement, TableCellProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <td ref={ref} className={cn(TableAnatomy.tableCell(), className)} {...rest} />\n})\nTableCell.displayName = \"TableCell\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableCaption\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TableCaptionProps = React.ComponentPropsWithoutRef<\"caption\">\n\nexport const TableCaption = React.forwardRef<HTMLTableCaptionElement, TableCaptionProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <caption ref={ref} className={cn(TableAnatomy.tableCaption(), className)} {...rest} />\n})\nTableCaption.displayName = \"TableCaption\"\n"
      }
    ]
  },
  {
    "component": "tabs",
    "name": "Tabs",
    "dependencies": [
      [
        "@radix-ui/react-tabs",
        "^1.1.1",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tabs",
        "content": "export * from \"./tabs\"\nexport * from \"./static-tabs\"\n"
      },
      {
        "name": "static-tabs.tsx",
        "dir": "tabs",
        "content": "import { cva } from \"class-variance-authority\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const StaticTabsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-StaticTabs__root\",\n        \"flex w-full overflow-hidden overflow-x-auto\",\n    ]),\n    trigger: cva([\n        \"UI-StaticTabs__trigger\",\n        \"group/staticTabs__trigger inline-flex flex-none shrink-0 basis-auto items-center font-medium text-sm transition outline-none min-w-0 justify-center\",\n        \"text-[--muted] hover:text-[--text-color]\",\n        \"h-10 px-4 rounded-full\",\n        \"data-[current=true]:bg-[--subtle] data-[current=true]:font-semibold data-[current=true]:text-[--foreground]\",\n        \"focus-visible:bg-[--subtle]\",\n    ]),\n    icon: cva([\n        \"UI-StaticTabs__icon\",\n        \"-ml-0.5 mr-2 h-4 w-4\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * StaticTabs\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StaticTabsItem = {\n    name: string,\n    href: string | null | undefined,\n    iconType?: React.ElementType,\n    isCurrent: boolean\n}\n\nexport type StaticTabsProps = React.ComponentPropsWithRef<\"nav\"> &\n    ComponentAnatomy<typeof StaticTabsAnatomy> & {\n    items: StaticTabsItem[]\n}\n\nexport const StaticTabs = React.forwardRef<HTMLElement, StaticTabsProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        triggerClass,\n        iconClass,\n        items,\n        ...rest\n    } = props\n\n    return (\n        <nav\n            ref={ref}\n            className={cn(StaticTabsAnatomy.root(), className)}\n            role=\"navigation\"\n            {...rest}\n        >\n            {items.map((tab) => (\n                <Link\n                    key={tab.name}\n                    href={tab.href ?? \"#\"}\n                    className={cn(\n                        StaticTabsAnatomy.trigger(),\n                        triggerClass,\n                    )}\n                    aria-current={tab.isCurrent ? \"page\" : undefined}\n                    data-current={tab.isCurrent}\n                >\n                    {tab.iconType && <tab.iconType\n                        className={cn(\n                            StaticTabsAnatomy.icon(),\n                            iconClass,\n                        )}\n                        aria-hidden=\"true\"\n                        data-current={tab.isCurrent}\n                    />}\n                    <span>{tab.name}</span>\n                </Link>\n            ))}\n        </nav>\n    )\n\n})\n\nStaticTabs.displayName = \"StaticTabs\"\n"
      },
      {
        "name": "tabs.tsx",
        "dir": "tabs",
        "content": "\"use client\"\n\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TabsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Tabs__root\",\n    ]),\n    list: cva([\n        \"UI-Tabs__list\",\n        \"inline-flex h-12 items-center justify-center w-full\",\n    ]),\n    trigger: cva([\n        \"UI-Tabs__trigger appearance-none shadow-none\",\n        \"inline-flex h-full items-center justify-center whitespace-nowrap px-3 py-1.5 text-sm text-[--muted] font-medium ring-offset-[--background]\",\n        \"transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        \"border-transparent border-b-2 -mb-px\",\n        \"data-[state=active]:border-[--brand] data-[state=active]:text-[--foreground]\",\n    ]),\n    content: cva([\n        \"UI-Tabs__content\",\n        \"ring-offset-[--background]\",\n        \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/\n\nconst __TabsAnatomyContext = React.createContext<ComponentAnatomy<typeof TabsAnatomy>>({})\n\nexport type TabsProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root> & ComponentAnatomy<typeof TabsAnatomy>\n\nexport const Tabs = React.forwardRef<HTMLDivElement, TabsProps>((props, ref) => {\n    const {\n        className,\n        listClass,\n        triggerClass,\n        contentClass,\n        ...rest\n    } = props\n\n    return (\n        <__TabsAnatomyContext.Provider\n            value={{\n                listClass,\n                triggerClass,\n                contentClass,\n            }}\n        >\n            <TabsPrimitive.Root\n                ref={ref}\n                className={cn(TabsAnatomy.root(), className)}\n                {...rest}\n            />\n        </__TabsAnatomyContext.Provider>\n    )\n})\n\nTabs.displayName = \"Tabs\"\n\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsListProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n\nexport const TabsList = React.forwardRef<HTMLDivElement, TabsListProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { listClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.List\n            ref={ref}\n            className={cn(TabsAnatomy.list(), listClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsList.displayName = \"TabsList\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * TabsTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsTriggerProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n\nexport const TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { triggerClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.Trigger\n            ref={ref}\n            className={cn(TabsAnatomy.trigger(), triggerClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * TabsContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsContentProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n\nexport const TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { contentClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.Content\n            ref={ref}\n            className={cn(TabsAnatomy.content(), contentClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsContent.displayName = \"TabsContent\"\n\n"
      }
    ]
  },
  {
    "component": "text-input",
    "name": "TextInput",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "text-input",
        "content": "export * from \"./text-input\"\n"
      },
      {
        "name": "text-input.tsx",
        "dir": "text-input",
        "content": "import { cn } from \"../core/styling\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * TextInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TextInputProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\"> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * Callback invoked when the value changes. Returns the string value.\n     */\n    onValueChange?: (value: string) => void\n}\n\nexport const TextInput = React.forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<TextInputProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        onValueChange,\n        onChange,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<TextInputProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const handleOnChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        onValueChange?.(e.target.value)\n        onChange?.(e)\n    }, [])\n\n    return (\n        <BasicField{...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <input\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name}\n                    className={cn(\n                        \"form-input\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            isReadonly: !!basicFieldProps.readonly,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    data-readonly={basicFieldProps.readonly}\n                    aria-readonly={basicFieldProps.readonly}\n                    required={basicFieldProps.required}\n                    onChange={handleOnChange}\n                    {...rest}\n                    ref={ref}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nTextInput.displayName = \"TextInput\"\n"
      }
    ]
  },
  {
    "component": "textarea",
    "name": "Textarea",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "textarea",
        "content": "export * from \"./textarea\"\n"
      },
      {
        "name": "textarea.tsx",
        "dir": "textarea",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TextareaAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Textarea__root\",\n        \"w-full p-2\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-20\",\n                md: \"h-32\",\n                lg: \"h-64\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Textarea\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TextareaProps = Omit<React.ComponentPropsWithRef<\"textarea\">, \"size\"> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * Callback invoked when the value changes. Returns the string value.\n     */\n    onValueChange?: (value: string) => void\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<TextareaProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        onValueChange,\n        onChange,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<TextareaProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const handleOnChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        onValueChange?.(e.target.value)\n        onChange?.(e)\n    }, [])\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <textarea\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name}\n                    className={cn(\n                        \"form-textarea\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            isReadonly: !!basicFieldProps.readonly,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        TextareaAnatomy.root({ size }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    onChange={handleOnChange}\n                    {...rest}\n                    ref={ref}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nTextarea.displayName = \"Textarea\"\n"
      }
    ]
  },
  {
    "component": "timeline",
    "name": "Timeline",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "timeline",
        "content": "export * from \"./timeline\"\n"
      },
      {
        "name": "timeline.tsx",
        "dir": "timeline",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TimelineAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Timeline__root\",\n    ]),\n    item: cva([\n        \"UI-Timeline__item\",\n        \"flex text-md\",\n    ]),\n    leftSection: cva([\n        \"UI-Timeline__leftSection\",\n        \"flex flex-col items-center mr-4\",\n    ]),\n    icon: cva([\n        \"UI-Timeline__icon\",\n        \"flex items-center justify-center w-8 h-8 border rounded-full flex-none\",\n    ]),\n    line: cva([\n        \"UI-Timeline__line\",\n        \"w-px h-full bg-[--border]\",\n    ]),\n    detailsSection: cva([\n        \"UI-Timeline__detailsSection\",\n        \"pb-8\",\n    ]),\n    title: cva([\n        \"UI-Timeline__title\",\n        \"text-md font-semibold\",\n    ]),\n    description: cva([\n        \"UI-Timeline__description\",\n        \"text-[--muted] text-sm\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Timeline\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TimelineItem = {\n    title: React.ReactNode\n    description?: React.ReactNode\n    content?: React.ReactNode\n    icon: React.ReactNode\n    unstyledTitle?: boolean\n    unstyledDescription?: boolean\n    unstyledIcon?: boolean\n    titleClass?: string\n    descriptionClass?: string\n    iconClass?: string\n    lineClass?: string\n}\n\nexport type TimelineProps = React.ComponentPropsWithoutRef<\"div\"> & ComponentAnatomy<typeof TimelineAnatomy> & {\n    children?: React.ReactNode\n    items: TimelineItem[]\n}\n\nexport const Timeline = React.forwardRef<HTMLDivElement, TimelineProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        leftSectionClass,\n        descriptionClass,\n        detailsSectionClass,\n        titleClass,\n        lineClass,\n        iconClass,\n        className,\n        items,\n        ...rest\n    } = props\n\n    return (\n        <div\n            ref={ref}\n            className={cn(TimelineAnatomy.root(), className)}\n            {...rest}\n        >\n            {items.map((item, idx) => (\n                <div\n                    key={`${idx}`}\n                    className={cn(TimelineAnatomy.item(), itemClass)}\n                >\n                    {/*Left section*/}\n                    <div className={cn(TimelineAnatomy.leftSection(), leftSectionClass)}>\n                        <div\n                            className={cn(\n                                item.unstyledIcon ?\n                                    null :\n                                    TimelineAnatomy.icon(),\n                                iconClass,\n                                item.iconClass,\n                            )}\n                        >\n                            {item.icon}\n                        </div>\n                        {(idx < items.length - 1) && <div className={cn(TimelineAnatomy.line(), lineClass, item.lineClass)} />}\n                    </div>\n\n                    {/*Details section*/}\n                    <div className={cn(TimelineAnatomy.detailsSection(), detailsSectionClass)}>\n\n                        <div\n                            className={cn(\n                                item.unstyledTitle ?\n                                    null :\n                                    TimelineAnatomy.title(),\n                                titleClass,\n                                item.titleClass,\n                            )}\n                        >\n                            {item.title}\n                        </div>\n\n                        {item.description && <div\n                            className={cn(\n                                item.unstyledDescription ?\n                                    null :\n                                    TimelineAnatomy.description(),\n                                descriptionClass,\n                                item.descriptionClass,\n                            )}\n                        >\n                            {item.description}\n                        </div>}\n\n                        {item.content}\n\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n\n})\n\nTimeline.displayName = \"Timeline\"\n"
      }
    ]
  },
  {
    "component": "toaster",
    "name": "Toaster",
    "dependencies": [
      [
        "next-themes",
        "^0.3.0",
        ""
      ],
      [
        "sonner",
        "^1.5.0",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "toaster",
        "content": "export * from \"./toaster\"\n"
      },
      {
        "name": "toaster.tsx",
        "dir": "toaster",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { useTheme } from \"next-themes\"\nimport * as React from \"react\"\nimport { Toaster as Sonner } from \"sonner\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ToasterAnatomy = defineStyleAnatomy({\n    toaster: cva([\"group toaster\"]),\n    toast: cva([\n        \"group/toast\",\n        \"group-[.toaster]:py-3 group-[.toaster]:gap-3\",\n        \"group-[.toaster]:text-base group-[.toaster]:bg-[--paper] group-[.toaster]:text-[--foreground] group-[.toaster]:border-[--border] group-[.toaster]:shadow-lg\",\n        // Success\n        \"group-[.toaster]:data-[type=success]:bg-green-500 group-[.toaster]:data-[type=success]:text-white group-[.toaster]:data-[type=success]:border-[--green]\",\n        // Warning\n        \"group-[.toaster]:data-[type=warning]:bg-yellow-600 dark:group-[.toaster]:data-[type=warning]:bg-yellow-700 group-[.toaster]:data-[type=warning]:text-white group-[.toaster]:data-[type=warning]:border-[--yellow] dark:group-[.toaster]:data-[type=warning]:border-yellow-600\",\n        // Error\n        \"group-[.toaster]:data-[type=error]:bg-red-500 group-[.toaster]:data-[type=error]:text-white group-[.toaster]:data-[type=error]:border-[--red]\",\n        // Info\n        \"group-[.toaster]:data-[type=info]:bg-blue-500 group-[.toaster]:data-[type=info]:text-white group-[.toaster]:data-[type=info]:border-[--blue]\",\n    ]),\n    description: cva([\n        \"group/toast:text-sm group/toast:text-[--muted]\",\n        \"group-data-[type=success]/toast:text-green-100\",\n        \"group-data-[type=warning]/toast:text-yellow-100\",\n        \"group-data-[type=error]/toast:text-red-100\",\n        \"group-data-[type=info]/toast:text-blue-100\",\n    ]),\n    actionButton: cva([\"group/toast:bg-[--subtle] group/toast:text-[--foreground]\"]),\n    cancelButton: cva([\"group/toast:bg-[--subtle] group/toast:text-[--muted]\"]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Toaster\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ToasterProps = React.ComponentProps<typeof Sonner>\n\nexport const Toaster = ({ position = \"top-center\", ...props }: ToasterProps) => {\n\n    const allProps = React.useMemo(() => ({\n        position,\n        className: cn(ToasterAnatomy.toaster()),\n        toastOptions: {\n            classNames: {\n                toast: cn(ToasterAnatomy.toast()),\n                description: cn(ToasterAnatomy.description()),\n                actionButton: cn(ToasterAnatomy.actionButton()),\n                cancelButton: cn(ToasterAnatomy.cancelButton()),\n            },\n        },\n        ...props,\n    }), [])\n\n    const { theme = \"light\" } = useTheme()\n\n    return (\n        <>\n            {theme === \"light\" && <Sonner theme=\"light\" {...allProps} />}\n            {theme === \"dark\" && <Sonner theme=\"dark\" {...allProps} />}\n            {theme === \"system\" && <Sonner theme=\"system\" {...allProps} />}\n        </>\n    )\n}\n\nToaster.displayName = \"Toaster\"\n"
      }
    ]
  },
  {
    "component": "tooltip",
    "name": "Tooltip",
    "dependencies": [
      [
        "@radix-ui/react-tooltip",
        "^1.1.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tooltip",
        "content": "export * from \"./tooltip\"\n"
      },
      {
        "name": "tooltip.tsx",
        "dir": "tooltip",
        "content": "\"use client\"\n\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TooltipAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Tooltip__root\",\n        \"z-50 overflow-hidden rounded-[--radius] px-3 py-1.5 text-sm shadow-md animate-in fade-in-50\",\n        \"bg-gray-800 text-white\",\n        \"data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1\",\n        \"data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TooltipProps = React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> &\n    React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root> & {\n    /**\n     * The trigger that toggles the tooltip.\n     * - Passed props: `data-state`\t(\"closed\" | \"delayed-open\" | \"instant-open\")\n     */\n    trigger: React.ReactElement\n}\n\nexport const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        trigger,\n        // Root\n        delayDuration = 50,\n        disableHoverableContent,\n        defaultOpen,\n        open,\n        onOpenChange,\n        ...rest\n    } = props\n\n    return (\n        <TooltipProvider>\n            <TooltipPrimitive.Root\n                delayDuration={delayDuration}\n                disableHoverableContent={disableHoverableContent}\n                defaultOpen={defaultOpen}\n                open={open}\n                onOpenChange={onOpenChange}\n            >\n                <TooltipPrimitive.Trigger asChild>\n                    {trigger}\n                </TooltipPrimitive.Trigger>\n                <TooltipPrimitive.Content\n                    ref={ref}\n                    className={cn(TooltipAnatomy.root(), className)}\n                    {...rest}\n                >\n                    {children}\n                </TooltipPrimitive.Content>\n            </TooltipPrimitive.Root>\n        </TooltipProvider>\n    )\n\n})\n\nTooltip.displayName = \"Tooltip\"\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps your app to provide global functionality to your tooltips.\n */\nexport const TooltipProvider = TooltipPrimitive.Provider\n"
      }
    ]
  },
  {
    "component": "vertical-menu",
    "name": "VerticalMenu",
    "dependencies": [],
    "family": [
      "tooltip",
      "disclosure"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "vertical-menu",
        "content": "export * from \"./vertical-menu\"\n"
      },
      {
        "name": "vertical-menu.tsx",
        "dir": "vertical-menu",
        "content": "\"use client\"\n\nimport { Tooltip, TooltipProps } from \"../tooltip\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { useContext } from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { Disclosure, DisclosureContent, DisclosureItem, DisclosureTrigger } from \"../disclosure\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const VerticalMenuAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-VerticalMenu__root\",\n        \"flex flex-col gap-1\",\n    ]),\n    item: cva([\n        \"UI-VerticalMenu__item\",\n        \"group/verticalMenu_item relative flex flex-none truncate items-center w-full font-medium rounded-[--radius] transition cursor-pointer\",\n        \"hover:bg-[--subtle] hover:text-[--text-color]\",\n        \"focus-visible:bg-[--subtle] outline-none text-[--muted]\",\n        \"data-[current=true]:bg-[--subtle] data-[current=true]:text-[--foreground]\",\n    ], {\n        variants: {\n            collapsed: {\n                true: \"justify-center\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            collapsed: false,\n        },\n    }),\n    itemContent: cva([\n        \"UI-VerticalMenu__itemContent\",\n        \"w-full flex items-center relative\",\n    ], {\n        variants: {\n            size: {\n                sm: \"px-3 h-8 text-sm\",\n                md: \"px-3 h-10 text-sm\",\n                lg: \"px-3 h-12 text-base\",\n            },\n            collapsed: {\n                true: \"justify-center\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n            collapsed: false,\n        },\n    }),\n    parentItem: cva([\n        \"UI-VerticalMenu__parentItem\",\n        \"group/verticalMenu_parentItem\",\n        \"cursor-pointer w-full\",\n    ]),\n    itemChevron: cva([\n        \"UI-VerticalMenu__itemChevron\",\n        \"size-4 absolute transition-transform group-data-[state=open]/verticalMenu_parentItem:rotate-90\",\n    ], {\n        variants: {\n            size: {\n                sm: \"right-3\",\n                md: \"right-3\",\n                lg: \"right-3\",\n            },\n            collapsed: {\n                true: \"top-1 left-1 size-3\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n            collapsed: false,\n        },\n    }),\n    itemIcon: cva([\n        \"UI-VerticalMenu__itemIcon\",\n        \"flex-shrink-0 mr-3\",\n        \"text-[--muted]\",\n        \"group-hover/verticalMenu_item:text-[--foreground]\", // Item Hover\n        \"group-data-[current=true]/verticalMenu_item:text-[--foreground]\", // Item Current\n    ], {\n        variants: {\n            size: {\n                sm: \"size-4\",\n                md: \"size-5\",\n                lg: \"size-6\",\n            },\n            collapsed: {\n                true: \"mr-0\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    subContent: cva([\n        \"UI-VerticalMenu__subContent\",\n        \"border-b py-1\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * VerticalMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst __VerticalMenuContext = React.createContext<Pick<VerticalMenuProps, \"onAnyItemClick\" | \"onLinkItemClick\"> & { collapsed?: boolean }>({})\n\nexport type VerticalMenuItem = {\n    name: string\n    href?: string | null | undefined\n    iconType?: React.ElementType\n    isCurrent?: boolean\n    onClick?: React.MouseEventHandler<HTMLElement>\n    addon?: React.ReactNode\n    subContent?: React.ReactNode\n}\n\nexport type VerticalMenuProps = React.ComponentPropsWithRef<\"div\"> &\n    ComponentAnatomy<typeof VerticalMenuAnatomy> &\n    VariantProps<typeof VerticalMenuAnatomy.itemContent> & {\n    /**\n     * The items to render.\n     */\n    items: VerticalMenuItem[]\n    /**\n     * Props passed to each item tooltip that is shown when the menu is collapsed.\n     */\n    itemTooltipProps?: Omit<TooltipProps, \"trigger\">\n    /**\n     * Callback fired when any item is clicked.\n     */\n    onAnyItemClick?: React.MouseEventHandler<HTMLElement>\n    /**\n     * Callback fired when a link item is clicked.\n     */\n    onLinkItemClick?: React.MouseEventHandler<HTMLElement>\n}\n\nexport const VerticalMenu = React.forwardRef<HTMLDivElement, VerticalMenuProps>((props, ref) => {\n\n    const {\n        children,\n        size = \"md\",\n        collapsed: _collapsed1,\n        onAnyItemClick,\n        onLinkItemClick,\n        /**/\n        itemClass,\n        itemIconClass,\n        parentItemClass,\n        subContentClass,\n        itemChevronClass,\n        itemContentClass,\n        itemTooltipProps,\n        className,\n        items,\n        ...rest\n    } = props\n\n    const {\n        onLinkItemClick: _onLinkItemClick,\n        onAnyItemClick: _onAnyItemClick,\n        collapsed: _collapsed2,\n    } = useContext(__VerticalMenuContext)\n\n    const collapsed = _collapsed1 ?? _collapsed2 ?? false\n\n    const itemProps = (item: VerticalMenuItem) => ({\n        className: cn(\n            VerticalMenuAnatomy.item({ collapsed }),\n            itemClass,\n        ),\n        \"data-current\": item.isCurrent,\n        onClick: (e: React.MouseEvent<HTMLElement>) => {\n            if (item.href) {\n                onLinkItemClick?.(e)\n                _onLinkItemClick?.(e)\n            }\n            onAnyItemClick?.(e)\n            _onAnyItemClick?.(e)\n            item.onClick?.(e)\n        },\n    })\n\n    const ItemContentWrapper = React.useCallback((props: { children: React.ReactElement, name: string }) => {\n        return !collapsed ? props.children : (\n            <Tooltip trigger={props.children} side=\"right\" {...itemTooltipProps}>\n                {props.name}\n            </Tooltip>\n        )\n    }, [collapsed, itemTooltipProps])\n\n    const ItemContent = React.useCallback((item: VerticalMenuItem) => (\n        <ItemContentWrapper name={item.name}>\n            <div\n                className={cn(\n                    VerticalMenuAnatomy.itemContent({ size, collapsed }),\n                    itemContentClass,\n                )}\n            >\n                {item.iconType && <item.iconType\n                    className={cn(\n                        VerticalMenuAnatomy.itemIcon({ size, collapsed }),\n                        itemIconClass,\n                    )}\n                    aria-hidden=\"true\"\n                    data-current={item.isCurrent}\n                />}\n                {!collapsed && <span>{item.name}</span>}\n                {item.addon}\n            </div>\n        </ItemContentWrapper>\n    ), [collapsed, size, itemContentClass, itemIconClass])\n\n    return (\n        <nav\n            ref={ref}\n            className={cn(VerticalMenuAnatomy.root(), className)}\n            role=\"navigation\"\n            {...rest}\n        >\n            <__VerticalMenuContext.Provider\n                value={{\n                    onAnyItemClick,\n                    onLinkItemClick,\n                    collapsed: _collapsed1 ?? false,\n                }}\n            >\n                {items.map((item, idx) => {\n                    return (\n                        <React.Fragment key={item.name + idx}>\n                            {!item.subContent ?\n                                item.href ? (\n                                    <Link href={item.href} {...itemProps(item)}>\n                                        <ItemContent {...item} />\n                                    </Link>\n                                ) : (\n                                    <button {...itemProps(item)}>\n                                        <ItemContent {...item} />\n                                    </button>\n                                ) : (\n                                    <Disclosure type=\"multiple\">\n                                        <DisclosureItem value={item.name}>\n                                            <DisclosureTrigger>\n                                                <button\n                                                    className={cn(\n                                                        VerticalMenuAnatomy.item({ collapsed }),\n                                                        itemClass,\n                                                        VerticalMenuAnatomy.parentItem(),\n                                                        parentItemClass,\n                                                    )}\n                                                    aria-current={item.isCurrent ? \"page\" : undefined}\n                                                    data-current={item.isCurrent}\n                                                    onClick={item.onClick}\n                                                >\n                                                    <ItemContent {...item} />\n                                                    <svg\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                                        width=\"24\"\n                                                        height=\"24\"\n                                                        viewBox=\"0 0 24 24\"\n                                                        fill=\"none\"\n                                                        stroke=\"currentColor\"\n                                                        strokeWidth=\"2\"\n                                                        strokeLinecap=\"round\"\n                                                        strokeLinejoin=\"round\"\n                                                        className={cn(VerticalMenuAnatomy.itemChevron({ size, collapsed }), itemChevronClass)}\n                                                    >\n                                                        <polyline points=\"9 18 15 12 9 6\"></polyline>\n                                                    </svg>\n                                                </button>\n                                            </DisclosureTrigger>\n\n                                            <DisclosureContent className={cn(VerticalMenuAnatomy.subContent(), subContentClass)}>\n                                                {item.subContent && item.subContent}\n                                            </DisclosureContent>\n                                        </DisclosureItem>\n                                    </Disclosure>\n                                )}\n                        </React.Fragment>\n                    )\n                })}\n            </__VerticalMenuContext.Provider>\n        </nav>\n    )\n\n})\n\nVerticalMenu.displayName = \"VerticalMenu\"\n"
      }
    ]
  }
]