{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import path from \"path\"\nimport {\n    defineDocumentType,\n    defineNestedType,\n    makeSource,\n} from \"contentlayer/source-files\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\nimport rehypePrettyCode from \"rehype-pretty-code\"\nimport rehypeSlug from \"rehype-slug\"\nimport { codeImport } from \"remark-code-import\"\nimport remarkGfm from \"remark-gfm\"\nimport { getHighlighter, loadTheme } from \"shiki\"\nimport { visit } from \"unist-util-visit\"\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n    slug: {\n        type: \"string\",\n        resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n        type: \"string\",\n        resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n}\n\nconst LinksProperties = defineNestedType(() => ({\n    name: \"LinksProperties\",\n    fields: {\n        doc: {\n            type: \"string\",\n        },\n        api: {\n            type: \"string\",\n        },\n    },\n}))\n\nexport const Doc = defineDocumentType(() => ({\n    name: \"Doc\",\n    filePathPattern: `docs/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            required: true,\n        },\n        published: {\n            type: \"boolean\",\n            default: true,\n        },\n        links: {\n            type: \"nested\",\n            of: LinksProperties,\n        },\n        featured: {\n            type: \"boolean\",\n            default: false,\n            required: false,\n        },\n        component: {\n            type: \"boolean\",\n            default: false,\n            required: false,\n        },\n        toc: {\n            type: \"boolean\",\n            default: true,\n            required: false,\n        },\n    },\n    computedFields,\n}))\n\nexport default makeSource({\n    contentDirPath: \"./mdx\",\n    documentTypes: [Doc],\n    mdx: {\n        remarkPlugins: [remarkGfm, codeImport],\n        rehypePlugins: [\n            rehypeSlug,\n            // rehypeComponent,\n            () => (tree) => {\n                visit(tree, (node) => {\n                    if (node?.type === \"element\" && node?.tagName === \"pre\") {\n                        const [codeEl] = node.children\n                        if (codeEl.tagName !== \"code\") {\n                            return\n                        }\n\n                        if (codeEl.data?.meta) {\n                            // Extract event from meta and pass it down the tree.\n                            const regex = /event=\"([^\"]*)\"/\n                            const match = codeEl.data?.meta.match(regex)\n                            if (match) {\n                                node.__event__ = match ? match[1] : null\n                                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\")\n                            }\n                        }\n\n                        node.__rawString__ = codeEl.children?.[0].value\n                        node.__src__ = node.properties?.__src__\n                        node.__style__ = node.properties?.__style__\n                    }\n                })\n            },\n            [\n                rehypePrettyCode,\n                {\n                    // getHighlighter: async () => {\n                    //     const theme = await loadTheme(\n                    //         path.join(process.cwd(), \"/lib/themes/light.json\")\n                    //     )\n                    //     return await getHighlighter({ theme })\n                    // },\n                    // onVisitLine(node) {\n                    //     // Prevent lines from collapsing in `display: grid` mode, and allow empty\n                    //     // lines to be copy/pasted\n                    //     if (node.children.length === 0) {\n                    //         node.children = [{ type: \"text\", value: \" \" }]\n                    //     }\n                    // },\n                    // onVisitHighlightedLine(node) {\n                    //     node.properties.className.push(\"line--highlighted\")\n                    // },\n                    // onVisitHighlightedWord(node) {\n                    //     node.properties.className = [\"word--highlighted\"]\n                    // },\n                },\n            ],\n            () => (tree) => {\n                visit(tree, (node) => {\n                    if (node?.type === \"element\" && node?.tagName === \"div\") {\n                        if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n                            return\n                        }\n\n                        const preElement = node.children.at(-1)\n                        if (preElement.tagName !== \"pre\") {\n                            return\n                        }\n\n                        preElement.properties[\"__withMeta__\"] =\n                            node.children.at(0).tagName === \"div\"\n                        preElement.properties[\"__rawString__\"] = node.__rawString__\n\n                        if (node.__src__) {\n                            preElement.properties[\"__src__\"] = node.__src__\n                        }\n\n                        if (node.__event__) {\n                            preElement.properties[\"__event__\"] = node.__event__\n                        }\n\n                        if (node.__style__) {\n                            preElement.properties[\"__style__\"] = node.__style__\n                        }\n                    }\n                })\n            },\n            // rehypeNpmCommand,\n            [\n                rehypeAutolinkHeadings,\n                {\n                    properties: {\n                        className: [\"subheading-anchor\"],\n                        ariaLabel: \"Link to section\",\n                    },\n                },\n            ],\n        ],\n    },\n})\n"],
  "mappings": "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",
  "names": []
}
