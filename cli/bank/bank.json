[
  {
    "component": "accordion",
    "name": "Accordion",
    "dependencies": [
      [
        "@radix-ui/react-accordion",
        "^1.1.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "accordion.tsx",
        "dir": "accordion",
        "content": "\"use client\"\r\n\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AccordionAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Accordion__root\",\r\n    ]),\r\n    header: cva([\r\n        \"UI-Accordion__header\",\r\n        \"flex text-lg\",\r\n    ]),\r\n    trigger: cva([\r\n        \"UI-Accordion__trigger\",\r\n        \"flex flex-1 items-center justify-between px-4 py-2 font-medium transition-all hover:bg-[--subtle] [&[data-state=open]>svg]:rotate-180\",\r\n    ]),\r\n    triggerIcon: cva([\r\n        \"UI-Accordion__triggerIcon\",\r\n        \"h-4 w-4 shrink-0 transition-transform duration-200\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Accordion__item\",\r\n        \"border-b\",\r\n    ]),\r\n    contentContainer: cva([\r\n        \"UI-Accordion__contentContainer\",\r\n        \"overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\r\n    ]),\r\n    content: cva([\r\n        \"UI-Accordion__content\",\r\n        \"p-4\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Accordion\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst __AccordionAnatomyContext = React.createContext<ComponentAnatomy<typeof AccordionAnatomy>>({})\r\n\r\nexport type AccordionProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & ComponentAnatomy<typeof AccordionAnatomy>\r\n\r\nexport const Accordion = React.forwardRef<HTMLDivElement, AccordionProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        headerClass,\r\n        triggerClass,\r\n        triggerIconClass,\r\n        contentContainerClass,\r\n        contentClass,\r\n        itemClass,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <__AccordionAnatomyContext.Provider\r\n            value={{\r\n                itemClass,\r\n                headerClass,\r\n                triggerClass,\r\n                triggerIconClass,\r\n                contentContainerClass,\r\n                contentClass,\r\n            }}\r\n        >\r\n            <AccordionPrimitive.Root\r\n                ref={ref}\r\n                className={cn(AccordionAnatomy.root(), className)}\r\n                {...rest}\r\n            />\r\n        </__AccordionAnatomyContext.Provider>\r\n    )\r\n\r\n})\r\n\r\nAccordion.displayName = \"Accordion\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AccordionItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AccordionItemProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n\r\nexport const AccordionItem = React.forwardRef<HTMLDivElement, AccordionItemProps>((props, ref) => {\r\n\r\n    const { className, ...rest } = props\r\n\r\n    const { itemClass } = React.useContext(__AccordionAnatomyContext)\r\n\r\n    return (\r\n        <AccordionPrimitive.Item\r\n            ref={ref}\r\n            className={cn(AccordionAnatomy.item(), itemClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n\r\n})\r\n\r\nAccordionItem.displayName = \"AccordionItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AccordionTrigger\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AccordionTriggerProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> &\r\n    Pick<ComponentAnatomy<typeof AccordionAnatomy>, \"headerClass\" | \"triggerIconClass\">\r\n\r\nexport const AccordionTrigger = React.forwardRef<HTMLButtonElement, AccordionTriggerProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        headerClass,\r\n        triggerIconClass,\r\n        children,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        headerClass: _headerClass,\r\n        triggerClass: _triggerClass,\r\n        triggerIconClass: _triggerIconClass,\r\n    } = React.useContext(__AccordionAnatomyContext)\r\n\r\n    return (\r\n        <AccordionPrimitive.Header className={cn(AccordionAnatomy.header(), _headerClass, headerClass)}>\r\n            <AccordionPrimitive.Trigger\r\n                ref={ref}\r\n                className={cn(\r\n                    AccordionAnatomy.trigger(),\r\n                    _triggerClass,\r\n                    className,\r\n                )}\r\n                {...rest}\r\n            >\r\n                {children}\r\n                <svg\r\n                    className={cn(AccordionAnatomy.triggerIcon(), _triggerIconClass, triggerIconClass)}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                >\r\n                    <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth=\"2\"\r\n                        d=\"M19 9l-7 7-7-7\"\r\n                    />\r\n                </svg>\r\n            </AccordionPrimitive.Trigger>\r\n        </AccordionPrimitive.Header>\r\n    )\r\n\r\n})\r\n\r\nAccordionTrigger.displayName = \"AccordionTrigger\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AccordionContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AccordionContentProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> &\r\n    Pick<ComponentAnatomy<typeof AccordionAnatomy>, \"contentContainerClass\">\r\n\r\nexport const AccordionContent = React.forwardRef<HTMLDivElement, AccordionContentProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        contentContainerClass,\r\n        children,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        contentContainerClass: _contentContainerClass,\r\n        contentClass: _contentClass,\r\n    } = React.useContext(__AccordionAnatomyContext)\r\n\r\n    return (\r\n        <AccordionPrimitive.Content\r\n            ref={ref}\r\n            className={cn(AccordionAnatomy.contentContainer(), _contentContainerClass, contentContainerClass)}\r\n            {...rest}\r\n        >\r\n            <div className={cn(AccordionAnatomy.content(), _contentClass, className)}>\r\n                {children}\r\n            </div>\r\n        </AccordionPrimitive.Content>\r\n    )\r\n})\r\n\r\nAccordionContent.displayName = \"AccordionContent\"\r\n\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "accordion",
        "content": "export * from \"./accordion\"\r\n"
      }
    ]
  },
  {
    "component": "address-input",
    "name": "AddressInput",
    "dependencies": [
      [
        "@types/google.maps",
        "^3.54.10",
        "-D"
      ],
      [
        "@googlemaps/js-api-loader",
        "^1.16.2",
        ""
      ],
      [
        "use-debounce",
        "^10.0.0",
        ""
      ]
    ],
    "family": [
      "autocomplete"
    ],
    "files": [
      {
        "name": "address-input.tsx",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { Autocomplete, AutocompleteOption, AutocompleteProps } from \"../autocomplete\"\nimport { LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport * as React from \"react\"\nimport { GoogleMapsAutocompletionRequest, useGoogleMapsAutocomplete } from \"./use-address-autocomplete\"\n\n/* -------------------------------------------------------------------------------------------------\n * AddressInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AddressInputProps = Omit<AutocompleteProps, \"options\" | \"onInputChange\" | \"onChange\" | \"defaultValue\"> & {\n    /**\n     * Custom autocompletion request\n     */\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    /**\n     * Additional options to pass to the Google Maps API Loader\n     */\n    loaderOptions?: Partial<LoaderOptions>\n    /**\n     * List of allowed countries\n     *\n     * e.g. `[\"us\", \"ci\"]`\n     */\n    allowedCountries?: string | string[]\n    /**\n     * Callback triggered when the value changes\n     */\n    onValueChange?: (value: AutocompleteOption | undefined) => void\n    /**\n     * Message to display when there are no results\n     */\n    emptyMessage?: string\n    /**\n     * Field placeholder\n     */\n    placeholder?: string\n    /**\n     * Google Maps API key\n     *\n     * Optionally, you could remove this parameter and get the key from an environment variable\n     * @see https://developers.google.com/maps/documentation/javascript/get-api-key\n     */\n    apiKey: string\n    /**\n     * Default value when uncontrolled\n     *\n     * e.g: `{ value: null, label: \"Abidjan, CÃ´te d'Ivoire\" }`\n     */\n    defaultValue?: AutocompleteOption\n}\n\nexport const AddressInput = React.forwardRef<HTMLInputElement, AddressInputProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        autocompletionRequest,\n        loaderOptions,\n        defaultValue,\n        allowedCountries = [],\n        onValueChange,\n        apiKey,\n        placeholder = \"Enter an address\",\n        emptyMessage = \"No results\",\n        onTextChange,\n        type = \"options\",\n        ...rest\n    } = props\n\n    const { suggestions, fetchSuggestions, isFetching } = useGoogleMapsAutocomplete({\n        apiKey: apiKey,\n        minLengthAutocomplete: 0,\n        withSessionToken: false,\n        debounce: 300,\n        autocompletionRequest: autocompletionRequest || {\n            componentRestrictions: { country: allowedCountries },\n        },\n        loaderApiOptions: loaderOptions,\n    })\n\n    return (\n        <Autocomplete\n            ref={ref}\n            options={suggestions}\n            defaultValue={defaultValue}\n            onTextChange={v => {\n                onTextChange?.(v)\n                fetchSuggestions(v)\n            }}\n            onValueChange={onValueChange}\n            placeholder={placeholder}\n            emptyMessage={emptyMessage}\n            autoFilter={false}\n            isFetching={isFetching}\n            type={type}\n            {...rest}\n        />\n    )\n\n})\n\nAddressInput.displayName = \"AddressInput\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "address-input",
        "content": "export * from \"./address-input\"\n"
      },
      {
        "name": "use-address-autocomplete.ts",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { Loader, LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport * as React from \"react\"\nimport { useDebouncedCallback } from \"use-debounce\"\n\nexport type GoogleMapsAutocompletionRequest = Omit<google.maps.places.AutocompletionRequest, \"input\">\n\nexport type GoogleMapsAutocompleteProps = {\n    /**\n     * Google Maps API key\n     * @see https://developers.google.com/maps/documentation/javascript/get-api-key\n     */\n    apiKey: string,\n    /**\n     * Minimum length of the input before triggering the autocompletion\n     */\n    minLengthAutocomplete?: number,\n    /**\n     * Whether to use a session token for the autocompletion\n     * @see https://developers.google.com/maps/documentation/javascript/reference/places-autocomplete-service#AutocompletionRequest.sessionToken\n     */\n    withSessionToken?: boolean\n    /**\n     * Debounce time in ms\n     */\n    debounce?: number\n    /**\n     * Autocompletion request\n     */\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    /**\n     * Loader options\n     */\n    loaderApiOptions?: Partial<LoaderOptions>\n}\n\nexport const useGoogleMapsAutocomplete = ({\n    apiKey,\n    minLengthAutocomplete = 0,\n    withSessionToken = false,\n    debounce = 300,\n    autocompletionRequest,\n    loaderApiOptions = {},\n}: GoogleMapsAutocompleteProps) => {\n\n    const [autocompleteService, setAutocompleteService] = React.useState<google.maps.places.AutocompleteService | undefined>(undefined)\n    const [sessionToken, setSessionToken] = React.useState<google.maps.places.AutocompleteSessionToken | undefined>(undefined)\n\n    const initializeService = React.useCallback(() => {\n        if (!window.google) throw new Error(\"[AddressInput]: Google script not loaded\")\n        if (!window.google.maps) throw new Error(\"[AddressInput]: Google maps script not loaded\")\n        if (!window.google.maps.places) throw new Error(\"[AddressInput]: Google maps places script not loaded\")\n\n        setAutocompleteService(new window.google.maps.places.AutocompleteService())\n        setSessionToken(new google.maps.places.AutocompleteSessionToken())\n    }, [])\n\n    // Initialize service\n    React.useEffect(() => {\n        if (!apiKey) {\n            console.warn(\"[AddressInput]: No API key provided\")\n            return\n        }\n        (async () => {\n            try {\n                if (!window.google || !window.google.maps || !window.google.maps.places) {\n                    await new Loader({ apiKey: apiKey, ...{ libraries: [\"places\"], ...loaderApiOptions } }).load()\n                }\n                initializeService()\n            }\n            catch (error) {\n                console.error(error)\n            }\n        })()\n    }, [])\n\n\n    // Fetch suggestions\n    const [suggestions, setSuggestions] = React.useState<{ label: string, value: string }[]>([])\n    const [isFetching, setIsFetching] = React.useState<boolean>(false)\n\n    const fetchSuggestions = useDebouncedCallback((value: string): void => {\n        if (!autocompleteService) return setSuggestions([])\n        if (value.length < minLengthAutocomplete) return setSuggestions([])\n\n        const autocompletionReq: GoogleMapsAutocompletionRequest = { ...autocompletionRequest }\n\n        setIsFetching(true)\n        autocompleteService.getPlacePredictions(\n            requestBuilder(\n                autocompletionReq,\n                value,\n                withSessionToken && sessionToken,\n            ), (suggestions) => {\n                setIsFetching(false)\n                setSuggestions((suggestions || []).map(suggestion => ({\n                    label: suggestion.description,\n                    value: suggestion.place_id,\n                })))\n            },\n        )\n    }, debounce)\n\n    return {\n        suggestions,\n        fetchSuggestions,\n        isFetching,\n    }\n\n}\n\nconst requestBuilder = (\n    autocompletionRequest: GoogleMapsAutocompletionRequest,\n    input: string,\n    sessionToken?: google.maps.places.AutocompleteSessionToken,\n): google.maps.places.AutocompletionRequest => {\n    const { location, ...rest } = autocompletionRequest\n\n    const res: google.maps.places.AutocompletionRequest = {\n        input,\n        ...rest,\n    }\n\n    if (sessionToken) {\n        res.sessionToken = sessionToken\n    }\n\n    if (location) {\n        res.location = new google.maps.LatLng(location.toJSON())\n    }\n\n    return res\n}\n"
      }
    ]
  },
  {
    "component": "alert",
    "name": "Alert",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "alert.tsx",
        "dir": "alert",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AlertAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Alert__root\",\n        \"py-3 px-4 flex justify-between rounded-[--radius]\",\n    ], {\n        variants: {\n            intent: {\n                \"info\": \"bg-blue-50 text-blue-500 dark:bg-opacity-10 dark:text-blue-200\",\n                \"success\": \"bg-green-50 text-green-500 dark:bg-opacity-10 dark:text-green-200\",\n                \"warning\": \"bg-orange-50 text-orange-500 dark:bg-opacity-10 dark:text-orange-200\",\n                \"alert\": \"bg-red-50 text-red-500 dark:bg-opacity-10 dark:text-red-200\",\n                \"info-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"success-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"warning-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n                \"alert-basic\": \"bg-white text-gray-800 border dark:bg-gray-800 dark:text-gray-200\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info\",\n        },\n    }),\n    detailsContainer: cva([\n        \"UI-Alert__detailsContainer\",\n        \"flex\",\n    ]),\n    textContainer: cva([\n        \"UI-Alert__textContainer\",\n        \"flex flex-col self-center ml-3 gap-.5\",\n    ]),\n    title: cva([\n        \"UI-Alert__title\",\n        \"font-bold\",\n    ]),\n    description: cva([\n        \"UI-Alert__description\",\n    ]),\n    icon: cva([\n        \"UI-Alert__icon\",\n        \"text-2xl mt-1\",\n    ], {\n        variants: {\n            intent: {\n                \"info-basic\": \"text-blue-500\",\n                \"success-basic\": \"text-green-500\",\n                \"warning-basic\": \"text-orange-500\",\n                \"alert-basic\": \"text-red-500\",\n                \"info\": \"text-blue-500\",\n                \"success\": \"text-green-500\",\n                \"warning\": \"text-orange-500\",\n                \"alert\": \"text-red-500\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info-basic\",\n        },\n    }),\n    closeButton: cva([\n        \"UI-Alert__closeButton\",\n        \"flex-none self-start text-2xl hover:opacity-50 transition ease-in cursor-pointer h-5 w-5\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Alert\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AlertProps = React.ComponentPropsWithRef<\"div\"> &\n    VariantProps<typeof AlertAnatomy.root> &\n    ComponentAnatomy<typeof AlertAnatomy> & {\n    /**\n     * The title of the alert\n     */\n    title?: string,\n    /**\n     * The description text or content of the alert\n     */\n    description?: React.ReactNode\n    /**\n     * Replace the default icon with a custom icon\n     *\n     * - `iconClass` does not apply to custom icons\n     */\n    icon?: React.ReactNode\n    /**\n     * If true, a close button will be rendered\n     */\n    isClosable?: boolean\n    /**\n     * Callback invoked when the close button is clicked\n     */\n    onClose?: () => void\n}\n\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        title,\n        description,\n        isClosable,\n        onClose,\n        intent = \"info-basic\",\n        iconClass,\n        detailsContainerClass,\n        textContainerClass,\n        titleClass,\n        descriptionClass,\n        closeButtonClass,\n        icon,\n        ...rest\n    } = props\n\n    let Icon: any = null\n\n    if (intent === \"info-basic\" || intent === \"info\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <path d=\"M12 16v-4\"></path>\n            <path d=\"M12 8h.01\"></path>\n        </svg>\n    } else if (intent === \"alert-basic\" || intent === \"alert\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\"></line>\n        </svg>\n    } else if (intent === \"warning-basic\" || intent === \"warning\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path>\n            <line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"13\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\"></line>\n        </svg>\n    } else if (intent === \"success-basic\" || intent === \"success\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path>\n            <path d=\"m9 12 2 2 4-4\"></path>\n        </svg>\n    }\n\n    return (\n        <div\n            className={cn(\n                AlertAnatomy.root({ intent }),\n                className,\n            )}\n            {...rest}\n            ref={ref}\n        >\n            <div className={cn(AlertAnatomy.detailsContainer(), detailsContainerClass)}>\n                {icon ? icon : <div className={cn(AlertAnatomy.icon({ intent: intent }), iconClass)}>\n                    {Icon && Icon}\n                </div>}\n                <div className={cn(AlertAnatomy.textContainer(), textContainerClass)}>\n                    <span className={cn(AlertAnatomy.title(), titleClass)}>\n                        {title}\n                    </span>\n                    {!!description && <div className={cn(AlertAnatomy.description(), descriptionClass)}>\n                        {description}\n                    </div>}\n                </div>\n            </div>\n            {onClose && <button className={cn(AlertAnatomy.closeButton(), closeButtonClass)} onClick={onClose}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                >\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                </svg>\n            </button>}\n        </div>\n    )\n\n})\n\nAlert.displayName = \"Alert\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "alert",
        "content": "export * from \"./alert\"\n"
      }
    ]
  },
  {
    "component": "app-layout",
    "name": "AppLayout",
    "dependencies": [],
    "family": [
      "drawer"
    ],
    "files": [
      {
        "name": "app-layout.tsx",
        "dir": "app-layout",
        "content": "import { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AppLayoutAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayout__root appLayout\",\n        \"flex w-full group/appLayout\",\n    ], {\n        variants: {\n            withSidebar: {\n                true: \"flex-row with-sidebar\",\n                false: \"flex-col\",\n            },\n            sidebarSize: {\n                slim: \"sidebar-slim\",\n                sm: \"sidebar-sm\",\n                md: \"sidebar-md\",\n                lg: \"sidebar-lg\",\n                xl: \"sidebar-xl\",\n            },\n        },\n        compoundVariants: [\n            { withSidebar: true, sidebarSize: \"slim\", className: \"lg:[&>.appLayout]:pl-20\" },\n            { withSidebar: true, sidebarSize: \"sm\", className: \"lg:[&>.appLayout]:pl-48\" },\n            { withSidebar: true, sidebarSize: \"md\", className: \"lg:[&>.appLayout]:pl-64\" },\n            { withSidebar: true, sidebarSize: \"lg\", className: \"lg:[&>.appLayout]:pl-[20rem]\" },\n            { withSidebar: true, sidebarSize: \"xl\", className: \"lg:[&>.appLayout]:pl-[25rem]\" },\n        ],\n        defaultVariants: {\n            withSidebar: false,\n            sidebarSize: \"md\",\n        },\n    }),\n})\n\nexport const AppLayoutHeaderAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutHeader__root\",\n        \"relative w-full\",\n    ]),\n})\n\nexport const AppLayoutSidebarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutSidebar__root\",\n        \"hidden lg:fixed lg:inset-y-0 lg:flex lg:flex-col grow-0 shrink-0 basis-0\",\n        \"group-[.sidebar-slim]/appLayout:w-20\",\n        \"group-[.sidebar-sm]/appLayout:w-48\",\n        \"group-[.sidebar-md]/appLayout:w-64\",\n        \"group-[.sidebar-lg]/appLayout:w-[20rem]\",\n        \"group-[.sidebar-xl]/appLayout:w-[25rem]\",\n    ]),\n})\n\nexport const AppLayoutContentAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutContent__root\",\n        \"relative\",\n    ]),\n})\n\nexport const AppLayoutFooterAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutFooter__root\",\n        \"relative\",\n    ]),\n})\n\nexport const AppLayoutStackAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutStack__root\",\n        \"relative\",\n    ], {\n        variants: {\n            spacing: {\n                sm: \"space-y-2\",\n                md: \"space-y-4\",\n                lg: \"space-y-8\",\n                xl: \"space-y-10\",\n            },\n        },\n        defaultVariants: {\n            spacing: \"md\",\n        },\n    }),\n})\n\nexport const AppLayoutGridAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-AppLayoutGrid__root\",\n        \"relative block\",\n    ], {\n        variants: {\n            breakBelow: {\n                sm: \"sm:grid sm:space-y-0\",\n                md: \"md:grid md:space-y-0\",\n                lg: \"lg:grid lg:space-y-0\",\n                xl: \"xl:grid xl:space-y-0\",\n            },\n            spacing: {\n                sm: \"space-y-2 gap-2\",\n                md: \"space-y-4 gap-4\",\n                lg: \"space-y-8 gap-8\",\n                xl: \"space-y-10 gap-10\",\n            },\n            cols: {\n                1: \"grid-cols-1\",\n                2: \"grid-cols-2\",\n                3: \"grid-cols-3\",\n                4: \"grid-cols-4\",\n                5: \"grid-cols-5\",\n                6: \"grid-cols-6\",\n            },\n        },\n        defaultVariants: {\n            breakBelow: \"xl\",\n            spacing: \"md\",\n            cols: 3,\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayout\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutProps = React.ComponentPropsWithRef<\"div\"> &\n    ComponentAnatomy<typeof AppLayoutAnatomy> &\n    VariantProps<typeof AppLayoutAnatomy.root>\n\nexport const AppLayout = React.forwardRef<HTMLDivElement, AppLayoutProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        withSidebar = false,\n        sidebarSize,\n        ...rest\n    } = props\n\n    return (\n        <div\n            ref={ref}\n            className={cn(AppLayoutAnatomy.root({ withSidebar, sidebarSize }), className)}\n            {...rest}\n        >\n            {children}\n        </div>\n    )\n\n})\n\nAppLayout.displayName = \"AppLayout\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutHeaderProps = React.ComponentPropsWithRef<\"header\">\n\nexport const AppLayoutHeader = React.forwardRef<HTMLElement, AppLayoutHeaderProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <header\n            ref={ref}\n            className={cn(AppLayoutHeaderAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </header>\n    )\n\n})\n\nAppLayoutHeader.displayName = \"AppLayoutHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutSidebar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutSidebarProps = React.ComponentPropsWithRef<\"aside\">\n\nexport const AppLayoutSidebar = React.forwardRef<HTMLElement, AppLayoutSidebarProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <aside\n            ref={ref}\n            className={cn(AppLayoutSidebarAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </aside>\n    )\n\n})\n\nAppLayoutSidebar.displayName = \"AppLayoutSidebar\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutContentProps = React.ComponentPropsWithRef<\"main\">\n\nexport const AppLayoutContent = React.forwardRef<HTMLElement, AppLayoutContentProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <main\n            ref={ref}\n            className={cn(AppLayoutContentAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </main>\n    )\n\n})\n\nAppLayoutContent.displayName = \"AppLayoutContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutGrid\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutGridProps = React.ComponentPropsWithRef<\"section\"> &\n    VariantProps<typeof AppLayoutGridAnatomy.root>\n\nexport const AppLayoutGrid = React.forwardRef<HTMLElement, AppLayoutGridProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        breakBelow,\n        cols,\n        spacing,\n        ...rest\n    } = props\n\n    return (\n        <section\n            ref={ref}\n            className={cn(AppLayoutGridAnatomy.root({ breakBelow, cols, spacing }), className)}\n            {...rest}\n        >\n            {children}\n        </section>\n    )\n\n})\n\nAppLayoutGrid.displayName = \"AppLayoutGrid\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutFooter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutFooterProps = React.ComponentPropsWithRef<\"footer\">\n\nexport const AppLayoutFooter = React.forwardRef<HTMLElement, AppLayoutFooterProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    return (\n        <footer\n            ref={ref}\n            className={cn(AppLayoutFooterAnatomy.root(), className)}\n            {...rest}\n        >\n            {children}\n        </footer>\n    )\n\n})\n\nAppLayoutFooter.displayName = \"AppLayoutFooter\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppLayoutStack\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppLayoutStackProps = React.ComponentPropsWithRef<\"div\"> &\n    VariantProps<typeof AppLayoutStackAnatomy.root>\n\nexport const AppLayoutStack = React.forwardRef<HTMLDivElement, AppLayoutStackProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        spacing,\n        ...rest\n    } = props\n\n    return (\n        <div\n            ref={ref}\n            className={cn(AppLayoutStackAnatomy.root({ spacing }), className)}\n            {...rest}\n        >\n            {children}\n        </div>\n    )\n\n})\n\nAppLayoutStack.displayName = \"AppLayoutStack\"\n\n"
      },
      {
        "name": "app-sidebar.tsx",
        "dir": "app-layout",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { Drawer, DrawerProps } from \"../drawer\"\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\nconst __AppSidebarContext = React.createContext<{\n    open: boolean,\n    setOpen: (open: boolean) => void,\n}>({\n    open: false,\n    setOpen: () => {},\n})\n\nexport function useAppSidebarContext() {\n    const ctx = React.useContext(__AppSidebarContext)\n    if (!ctx) throw new Error(\"useAppSidebarContext must be used within a AppSidebarProvider\")\n    return ctx\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AppSidebarAnatomy = defineStyleAnatomy({\n    sidebar: cva([\n        \"UI-AppSidebar__sidebar\",\n        \"flex flex-grow flex-col overflow-y-auto border-r bg-[--background]\",\n    ]),\n})\n\nexport const AppSidebarTriggerAnatomy = defineStyleAnatomy({\n    trigger: cva([\n        \"UI-AppSidebarTrigger__trigger\",\n        \"block lg:hidden\",\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--subtle] hover:text-[--foreground] transition-colors\",\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarProps = React.ComponentPropsWithoutRef<\"div\"> & ComponentAnatomy<typeof AppSidebarAnatomy> & {\n    mobileDrawerProps?: Partial<DrawerProps>\n}\n\nexport const AppSidebar = React.forwardRef<HTMLDivElement, AppSidebarProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    const ctx = React.useContext(__AppSidebarContext)\n\n    return (\n        <>\n            <div\n                ref={ref}\n                className={cn(AppSidebarAnatomy.sidebar(), className)}\n                {...rest}\n            >\n                {children}\n            </div>\n            <Drawer\n                open={ctx.open}\n                onOpenChange={v => ctx.setOpen(v)}\n                side=\"left\"\n            >\n                {children}\n            </Drawer>\n        </>\n    )\n\n})\n\nAppSidebar.displayName = \"AppSidebar\"\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarTriggerProps = React.ComponentPropsWithoutRef<\"button\"> & ComponentAnatomy<typeof AppSidebarTriggerAnatomy>\n\nexport const AppSidebarTrigger = React.forwardRef<HTMLButtonElement, AppSidebarTriggerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        ...rest\n    } = props\n\n    const ctx = React.useContext(__AppSidebarContext)\n\n    return (\n        <button\n            ref={ref}\n            className={cn(AppSidebarTriggerAnatomy.trigger(), className)}\n            onClick={() => ctx.setOpen(!ctx.open)}\n            {...rest}\n        >\n            <span className=\"sr-only\">Open main menu</span>\n            {ctx.open ? (\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                >\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                </svg>\n            ) : (\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\n                >\n                    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\n                    <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\n                    <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\n                </svg>\n            )}\n        </button>\n    )\n\n})\n\nAppSidebarTrigger.displayName = \"AppSidebarTrigger\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * AppSidebarProvider\n * -----------------------------------------------------------------------------------------------*/\n\nexport type AppSidebarProviderProps = {\n    children?: React.ReactNode,\n    open?: boolean,\n    onOpenChange?: (open: boolean) => void,\n}\n\nexport const AppSidebarProvider: React.FC<AppSidebarProviderProps> = ({\n    children,\n    open: _open,\n    onOpenChange,\n}) => {\n\n    const [open, setOpen] = React.useState(_open ?? false)\n\n    React.useEffect(() => {\n        if (_open !== undefined)\n            setOpen(_open)\n    }, [_open])\n\n    return (\n        <__AppSidebarContext.Provider\n            value={{\n                open,\n                setOpen: (open: boolean) => {\n                    onOpenChange?.(open)\n                    setOpen(open)\n                },\n            }}\n        >\n            {children}\n        </__AppSidebarContext.Provider>\n    )\n}\n\nAppSidebarProvider.displayName = \"AppSidebarProvider\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "app-layout",
        "content": "export * from \"./app-layout\"\nexport * from \"./app-sidebar\"\n"
      }
    ]
  },
  {
    "component": "autocomplete",
    "name": "Autocomplete",
    "dependencies": [],
    "family": [
      "basic-field",
      "command",
      "input",
      "popover"
    ],
    "files": [
      {
        "name": "autocomplete.tsx",
        "dir": "autocomplete",
        "content": "\"use client\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandProps } from \"../command\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { mergeRefs } from \"../core/utils\"\r\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\nimport { Popover } from \"../popover\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AutocompleteAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Autocomplete__root\",\r\n    ]),\r\n    popover: cva([\r\n        \"UI-Autocomplete__popover\",\r\n        \"w-[--radix-popover-trigger-width] p-0\",\r\n    ]),\r\n    checkIcon: cva([\r\n        \"UI-Autocomplete__checkIcon\",\r\n        \"h-4 w-4\",\r\n        \"data-[selected=true]:opacity-100 data-[selected=false]:opacity-0\",\r\n    ]),\r\n    container: cva([\r\n        \"UI-Autocomplete__container\",\r\n        \"relative w-full\",\r\n    ]),\r\n    command: cva([\r\n        \"UI-Autocomplete__command\",\r\n        \"focus-within:ring-2 ring-[--ring] transition\",\r\n    ]),\r\n})\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Autocomplete\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AutocompleteOption = { value: string | null, label: string }\r\n\r\nexport type AutocompleteProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\" | \"value\" | \"defaultValue\"> &\r\n    BasicFieldOptions &\r\n    InputStyling &\r\n    ComponentAnatomy<typeof AutocompleteAnatomy> & {\r\n    /**\r\n     * The selected option\r\n     */\r\n    value?: AutocompleteOption | undefined\r\n    /**\r\n     * Callback invoked when the value changes.\r\n     */\r\n    onValueChange?: (value: { value: string | null, label: string } | undefined) => void\r\n    /**\r\n     * Callback invoked when the input text changes.\r\n     */\r\n    onTextChange?: (value: string) => void\r\n    /**\r\n     * The autocompletion options.\r\n     */\r\n    options: AutocompleteOption[]\r\n    /**\r\n     * The message to display when there are no options.\r\n     *\r\n     * If not provided, the options list will be hidden when there are no options.\r\n     */\r\n    emptyMessage?: React.ReactNode\r\n    /**\r\n     * The placeholder of the input.\r\n     */\r\n    placeholder?: string\r\n    /**\r\n     * Additional props to pass to the command component.\r\n     */\r\n    commandProps?: CommandProps\r\n    /**\r\n     * Default value of the input when uncontrolled.\r\n     */\r\n    defaultValue?: AutocompleteOption\r\n    /**\r\n     * If true, the options list will be filtered based on the input value.\r\n     * Set this to false if you want to filter the options yourself by listening to the `onTextChange` event.\r\n     *\r\n     * @default true\r\n     */\r\n    autoFilter?: boolean\r\n    /**\r\n     * If true, a loading indicator will be displayed.\r\n     */\r\n    isFetching?: boolean\r\n    /**\r\n     * The type of the autocomplete.\r\n     *\r\n     * - `custom`: Arbitrary values are allowed\r\n     * - `options`: Only values from the options list are allowed. Falls back to last valid option if the input value is not in the options list.\r\n     *\r\n     * @default \"custom\"\r\n     */\r\n    type?: \"custom\" | \"options\"\r\n}\r\n\r\nexport const Autocomplete = React.forwardRef<HTMLInputElement, AutocompleteProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<AutocompleteProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        popoverClass,\r\n        checkIconClass,\r\n        containerClass,\r\n        commandClass,\r\n        /**/\r\n        commandProps,\r\n        options,\r\n        emptyMessage,\r\n        placeholder,\r\n        value: controlledValue,\r\n        onValueChange,\r\n        onTextChange,\r\n        onChange,\r\n        defaultValue,\r\n        autoFilter = true,\r\n        isFetching,\r\n        type,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<AutocompleteProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const isFirst = React.useRef(true)\r\n    const isUpdating = React.useRef(false)\r\n\r\n    const inputValueRef = React.useRef<string>(controlledValue?.label || defaultValue?.label || \"\")\r\n    const [inputValue, setInputValue] = React.useState<string>(controlledValue?.label || defaultValue?.label || \"\")\r\n    const deferredInputValue = React.useDeferredValue(inputValue)\r\n    inputValueRef.current = inputValue\r\n\r\n    const optionsTypeValueRef = React.useRef<AutocompleteOption | undefined>(controlledValue || defaultValue || undefined)\r\n    const [value, setValue] = React.useState<AutocompleteOption | undefined>(controlledValue || defaultValue || undefined)\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const filteredOptions = React.useMemo(() => {\r\n        if (autoFilter) {\r\n            return options.filter(option => option.label.toLowerCase().includes(deferredInputValue.toLowerCase()))\r\n        }\r\n        return options\r\n    }, [autoFilter, options, deferredInputValue])\r\n\r\n    // The options list should open when there are options or when there is an empty message\r\n    const _optionListShouldOpen = !!emptyMessage || (options.length > 0 && filteredOptions.length > 0)\r\n\r\n    // Function used to compare two labels\r\n    const by = React.useCallback((a: string, b: string) => a.toLowerCase() === b.toLowerCase(), [])\r\n\r\n    const inputRef = React.useRef<HTMLInputElement>(null)\r\n    const commandInputRef = React.useRef<HTMLInputElement>(null)\r\n\r\n    // Update the input value when the controlled value changes\r\n    // Only when the default value is empty or when it is an updated value\r\n    React.useEffect(() => {\r\n        if (isUpdating.current) return\r\n        if (!defaultValue || !isFirst.current) {\r\n            setInputValue(controlledValue?.label ?? \"\")\r\n            setValue(controlledValue)\r\n            _updateOptionsTypeValueRef(controlledValue)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n    const handleOnOpenChange = React.useCallback((opening: boolean) => {\r\n        // If the input is disabled or readonly, do not open the popover\r\n        if (basicFieldProps.disabled || basicFieldProps.readonly) return\r\n        // If there are no options and the popover is opening, do not open it\r\n        if (options.length === 0 && opening) return\r\n        // If the input value has not and there are no filtered options, do not open the popover\r\n        // This is to avoid a visual glitch when the popover opens but is empty\r\n        if (inputValueRef.current === inputValue && opening && filteredOptions.length === 0) return\r\n\r\n        setOpen(opening)\r\n        if (!opening) {\r\n            React.startTransition(() => {\r\n                inputRef.current?.focus()\r\n            })\r\n        }\r\n    }, [options, inputValue, basicFieldProps.disabled, basicFieldProps.readonly])\r\n\r\n    const handleOnTextInputChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        isUpdating.current = true\r\n        onChange?.(e) // Emit the change event\r\n        setInputValue(e.target.value) // Update the input value\r\n\r\n        // Open the popover if there are filtered options\r\n        if (autoFilter && filteredOptions.length > 0) {\r\n            setOpen(true)\r\n        }\r\n    }, [filteredOptions])\r\n\r\n    React.useEffect(() => {\r\n        const v = deferredInputValue\r\n\r\n        const _option = options.find(n => by(n.label, v))\r\n        if (_option) {\r\n            handleUpdateValue(_option)\r\n        } else if (v.length > 0) {\r\n            handleUpdateValue({ value: null, label: v })\r\n        } else if (v.length === 0) {\r\n            handleUpdateValue(undefined)\r\n        }\r\n\r\n        isUpdating.current = false\r\n    }, [deferredInputValue, autoFilter])\r\n\r\n    // Called when an option is selected either by clicking on it or entering a valid value\r\n    const handleUpdateValue = React.useCallback((value: AutocompleteOption | undefined) => {\r\n        setValue(value)\r\n        onValueChange?.(value)\r\n        onTextChange?.(value?.label ?? \"\")\r\n        _updateOptionsTypeValueRef(value)\r\n    }, [])\r\n\r\n    // Focus the command input when arrow down is pressed\r\n    const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (!open) {\r\n            setOpen(true)\r\n        }\r\n        if (e.key === \"ArrowDown\") {\r\n            e.preventDefault()\r\n            commandInputRef.current?.focus()\r\n        }\r\n    }, [open])\r\n\r\n    // Conditionally update the options type value ref when it is valid\r\n    const _updateOptionsTypeValueRef = React.useCallback((value: AutocompleteOption | undefined) => {\r\n        if (!!value?.value || value === undefined) {\r\n            optionsTypeValueRef.current = value\r\n        }\r\n    }, [])\r\n\r\n    // If the type is `options`, make sure the value is always a valid option\r\n    // If the value entered doesn't match any option, fallback to the last valid option\r\n    const handleOptionsTypeOnBlur = React.useCallback(() => {\r\n        if (type === \"options\") {\r\n            React.startTransition(() => {\r\n                if (optionsTypeValueRef.current) {\r\n                    setInputValue(optionsTypeValueRef.current.label)\r\n                } else {\r\n                    setInputValue(\"\")\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <BasicField {...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <Popover\r\n                    open={open && _optionListShouldOpen}\r\n                    onOpenChange={handleOnOpenChange}\r\n                    className={cn(\r\n                        AutocompleteAnatomy.popover(),\r\n                        popoverClass,\r\n                    )}\r\n                    onOpenAutoFocus={e => e.preventDefault()}\r\n                    trigger={\r\n                        <div className={cn(AutocompleteAnatomy.container(), containerClass)}>\r\n                            <input\r\n                                ref={mergeRefs([inputRef, ref])}\r\n                                id={basicFieldProps.id}\r\n                                name={basicFieldProps.name}\r\n                                value={inputValue}\r\n                                onChange={handleOnTextInputChange}\r\n                                onBlur={handleOptionsTypeOnBlur}\r\n                                placeholder={placeholder}\r\n                                className={cn(\r\n                                    InputAnatomy.root({\r\n                                        size,\r\n                                        intent,\r\n                                        hasError: !!basicFieldProps.error,\r\n                                        isDisabled: !!basicFieldProps.disabled,\r\n                                        isReadonly: !!basicFieldProps.readonly,\r\n                                        hasRightAddon: !!rightAddon,\r\n                                        hasRightIcon: !!rightIcon,\r\n                                        hasLeftAddon: !!leftAddon,\r\n                                        hasLeftIcon: !!leftIcon,\r\n                                    }),\r\n                                    AutocompleteAnatomy.root(),\r\n                                )}\r\n                                disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                                data-disabled={basicFieldProps.disabled}\r\n                                data-error={!!basicFieldProps.error}\r\n                                aria-readonly={basicFieldProps.readonly}\r\n                                data-readonly={basicFieldProps.readonly}\r\n                                onKeyDown={handleKeyDown}\r\n                                required={basicFieldProps.required}\r\n                                {...rest}\r\n                            />\r\n                        </div>\r\n                    }\r\n                >\r\n                    <Command\r\n                        className={cn(AutocompleteAnatomy.command(), commandClass)}\r\n                        inputContainerClass=\"py-1\"\r\n                        shouldFilter={autoFilter}\r\n                        {...commandProps}\r\n                    >\r\n                        {isFetching && inputValue.length > 0 && <div className=\"w-full absolute top-0 left-0 px-1\">\r\n                            <div className=\"h-1 w-full bg-[--subtle] overflow-hidden relative rounded-full\">\r\n                                <div className=\"animate-indeterminate-progress absolute left-0 w-full h-full bg-brand origin-left-right\"></div>\r\n                            </div>\r\n                        </div>}\r\n                        <CommandInput\r\n                            value={inputValue}\r\n                            onValueChange={setInputValue}\r\n                            inputContainerClass={hiddenInputStyles}\r\n                            aria-hidden=\"true\"\r\n                            ref={commandInputRef}\r\n                        />\r\n                        <CommandList>\r\n                            {!!emptyMessage && (\r\n                                <CommandEmpty>{emptyMessage}</CommandEmpty>\r\n                            )}\r\n                            <CommandGroup>\r\n                                {options.map(option => (\r\n                                    <CommandItem\r\n                                        key={option.value}\r\n                                        value={option.label}\r\n                                        onSelect={(currentValue) => {\r\n                                            const _option = options.find(n => by(n.label, currentValue))\r\n                                            if (_option) {\r\n                                                if (value?.value === _option.value) {\r\n                                                    handleUpdateValue(undefined)\r\n                                                    setInputValue(\"\")\r\n                                                } else {\r\n                                                    handleUpdateValue(_option)\r\n                                                    setInputValue(_option.label)\r\n                                                }\r\n                                            }\r\n                                            React.startTransition(() => {\r\n                                                inputRef.current?.focus()\r\n                                            })\r\n                                        }}\r\n                                        leftIcon={\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                fill=\"none\"\r\n                                                stroke=\"currentColor\"\r\n                                                strokeWidth=\"2\"\r\n                                                strokeLinecap=\"round\"\r\n                                                strokeLinejoin=\"round\"\r\n                                                className={cn(\r\n                                                    AutocompleteAnatomy.checkIcon(),\r\n                                                    checkIconClass,\r\n                                                )}\r\n                                                data-selected={by(option.label, inputValue)}\r\n                                            >\r\n                                                <path d=\"M20 6 9 17l-5-5\" />\r\n                                            </svg>\r\n                                        }\r\n                                    >\r\n                                        {option.label}\r\n                                    </CommandItem>\r\n                                ))}\r\n                            </CommandGroup>\r\n                        </CommandList>\r\n                    </Command>\r\n                </Popover>\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n})\r\n\r\nAutocomplete.displayName = \"Autocomplete\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "autocomplete",
        "content": "export * from \"./autocomplete\"\r\n"
      }
    ]
  },
  {
    "component": "avatar",
    "name": "Avatar",
    "dependencies": [
      [
        "@radix-ui/react-avatar",
        "^1.0.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "avatar.tsx",
        "dir": "avatar",
        "content": "\"use client\"\r\n\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AvatarAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Avatar__root\",\r\n        \"relative flex shrink-0 overflow-hidden rounded-full\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                xs: \"h-6 w-6\",\r\n                sm: \"h-8 w-8\",\r\n                md: \"h-10 w-10\",\r\n                lg: \"h-14 w-14\",\r\n                xl: \"h-20 w-20\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    image: cva([\r\n        \"UI-Avatar__image\",\r\n        \"aspect-square h-full w-full\",\r\n    ]),\r\n    fallback: cva([\r\n        \"UI-Avatar__fallback\",\r\n        \"flex h-full w-full items-center justify-center rounded-full bg-[--muted] text-white dark:text-gray-800 font-semibold\",\r\n    ]),\r\n    fallbackIcon: cva([\r\n        \"UI-Avatar__fallback-icon\",\r\n        \"fill-transparent\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Avatar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AvatarProps =\r\n    React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> &\r\n    React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> &\r\n    ComponentAnatomy<typeof AvatarAnatomy> &\r\n    VariantProps<typeof AvatarAnatomy.root> & {\r\n    fallback?: React.ReactNode\r\n    imageRef?: React.Ref<HTMLImageElement>\r\n    fallbackRef?: React.Ref<HTMLSpanElement>\r\n}\r\n\r\nexport const Avatar = React.forwardRef<HTMLImageElement, AvatarProps>((props, ref) => {\r\n    const {\r\n        className,\r\n        children,\r\n        imageRef,\r\n        fallbackRef,\r\n        asChild,\r\n        imageClass,\r\n        fallbackClass,\r\n        fallback,\r\n        fallbackIconClass,\r\n        size,\r\n        ...rest\r\n    } = props\r\n    return (\r\n        <AvatarPrimitive.Root\r\n            ref={ref}\r\n            className={cn(AvatarAnatomy.root({ size }), className)}\r\n        >\r\n            <AvatarPrimitive.Image\r\n                ref={imageRef}\r\n                className={cn(AvatarAnatomy.image(), imageClass)}\r\n                {...rest}\r\n            />\r\n            <AvatarPrimitive.Fallback\r\n                ref={fallbackRef}\r\n                className={cn(AvatarAnatomy.fallback(), fallbackClass)}\r\n            >\r\n                {(!fallback) &&\r\n                    <svg\r\n                        viewBox=\"0 0 128 128\" className={cn(AvatarAnatomy.fallbackIcon(), fallbackIconClass)}\r\n                        role=\"img\" aria-label=\"avatar\"\r\n                    >\r\n                        <path\r\n                            fill=\"currentColor\"\r\n                            d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"currentColor\"\r\n                            d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\r\n                        ></path>\r\n                    </svg>}\r\n                {fallback}\r\n            </AvatarPrimitive.Fallback>\r\n        </AvatarPrimitive.Root>\r\n    )\r\n})\r\nAvatar.displayName = \"Avatar\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "avatar",
        "content": "export * from \"./avatar\"\r\n"
      }
    ]
  },
  {
    "component": "badge",
    "name": "Badge",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "badge.tsx",
        "dir": "badge",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BadgeAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Badge__root\",\n        \"inline-flex flex-none text-base w-fit overflow-hidden justify-center items-center gap-2\",\n    ], {\n        variants: {\n            intent: {\n                \"gray\": \"text-gray-800 bg-gray-100 border border-gray-500 border-opacity-40 dark:text-gray-300 dark:bg-opacity-10\",\n                \"primary\": \"text-brand-500 bg-brand-50 border border-brand-500 border-opacity-40 dark:text-brand-300 dark:bg-opacity-10\",\n                \"success\": \"text-green-500 bg-green-50 border border-green-500 border-opacity-40 dark:text-green-300 dark:bg-opacity-10\",\n                \"warning\": \"text-orange-500 bg-orange-50 border border-orange-500 border-opacity-40 dark:text-orange-300 dark:bg-opacity-10\",\n                \"alert\": \"text-red-500 bg-red-50 border border-red-500 border-opacity-40 dark:text-red-300 dark:bg-opacity-10\",\n                \"blue\": \"text-blue-500 bg-blue-50 border border-blue-500 border-opacity-40 dark:text-blue-300 dark:bg-opacity-10\",\n                \"white\": \"text-white bg-gray-800 border border-gray-500 border-opacity-40 dark:text-white dark:bg-opacity-10\",\n                \"basic\": \"text-gray-900 bg-transparent\",\n                \"primary-solid\": \"text-white bg-brand-500\",\n                \"success-solid\": \"text-white bg-green-500\",\n                \"warning-solid\": \"text-white bg-orange-500\",\n                \"alert-solid\": \"text-white bg-red-500\",\n                \"blue-solid\": \"text-white bg-blue-500\",\n                \"gray-solid\": \"text-white bg-gray-500\",\n                \"white-solid\": \"text-gray-900 bg-white\",\n            },\n            size: {\n                sm: \"h-[1.2rem] px-1.5 text-xs\",\n                md: \"h-6 px-2 text-xs\",\n                lg: \"h-7 px-3 text-md\",\n                xl: \"h-8 px-4 text-lg\",\n            },\n            tag: {\n                false: \"font-semibold tracking-wide rounded-full\",\n                true: \"font-semibold border-none rounded-[--radius]\",\n            },\n        },\n        defaultVariants: {\n            intent: \"gray\",\n            size: \"md\",\n            tag: false,\n        },\n    }),\n    closeButton: cva([\n        \"UI-Badge__close-button\",\n        \"text-lg -mr-1 cursor-pointer transition ease-in hover:opacity-60\",\n    ]),\n    icon: cva([\n        \"UI-Badge__icon\",\n        \"inline-flex self-center flex-shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Badge\n * -----------------------------------------------------------------------------------------------*/\n\nexport type BadgeProps = React.ComponentPropsWithRef<\"span\"> &\n    VariantProps<typeof BadgeAnatomy.root> &\n    ComponentAnatomy<typeof BadgeAnatomy> & {\n    /**\n     * If true, the badge will not be fully rounded.\n     */\n    tag?: boolean,\n    /**\n     * If true, a close button will be rendered.\n     */\n    isClosable?: boolean,\n    /**\n     * Callback invoked when the close button is clicked.\n     */\n    onClose?: () => void,\n    /**\n     * The left icon element.\n     */\n    leftIcon?: React.ReactElement\n    /**\n     * The right icon element.\n     */\n    rightIcon?: React.ReactElement\n    /**\n     * The spacing between the icon and the badge content.\n     */\n    iconSpacing?: React.CSSProperties[\"marginRight\"]\n}\n\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size,\n        intent,\n        tag = false,\n        isClosable,\n        onClose,\n        leftIcon,\n        rightIcon,\n        iconSpacing = \"0\",\n        closeButtonClass,\n        iconClass,\n        ...rest\n    } = props\n\n    return (\n        <span\n            ref={ref}\n            className={cn(BadgeAnatomy.root({ size, intent, tag }), className)}\n            {...rest}\n        >\n            {leftIcon && <span className={cn(BadgeAnatomy.icon(), iconClass)} style={{ marginRight: iconSpacing }}>{leftIcon}</span>}\n\n            {children}\n\n            {rightIcon && <span className={cn(BadgeAnatomy.icon(), iconClass)} style={{ marginLeft: iconSpacing }}>{rightIcon}</span>}\n\n            {isClosable && <span className={cn(BadgeAnatomy.closeButton(), closeButtonClass)} onClick={onClose}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\n                    fill=\"currentColor\"\n                >\n                    <path\n                        d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n                    ></path>\n                </svg>\n            </span>}\n        </span>\n    )\n\n})\n\nBadge.displayName = \"Badge\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "badge",
        "content": "export * from \"./badge\"\n"
      }
    ]
  },
  {
    "component": "basic-field",
    "name": "BasicField",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "basic-field.tsx",
        "dir": "basic-field",
        "content": "import { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const BasicFieldAnatomy = defineStyleAnatomy({\r\n    fieldLabel: cva([\r\n        \"UI-BasicField__fieldLabel\",\r\n        \"text-base w-fit font-semibold self-start\",\r\n        \"data-[error=true]:text-red-500\",\r\n    ]),\r\n    fieldAsterisk: cva(\"UI-BasicField__fieldAsterisk ml-1 text-red-500 text-sm\"),\r\n    fieldDetails: cva(\"UI-BasicField__fieldDetails\"),\r\n    field: cva(\"UI-BasicField__field relative w-full space-y-1\"),\r\n    fieldHelpText: cva(\"UI-BasicField__fieldHelpText text-sm text-[--muted]\"),\r\n    fieldErrorText: cva(\"UI-BasicField__fieldErrorText text-sm text-red-500\"),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BasicFieldOptions\r\n * - Field components inherit these props\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type BasicFieldOptions = ComponentAnatomy<typeof BasicFieldAnatomy> & {\r\n    id?: string | undefined\r\n    name?: string\r\n    label?: React.ReactNode\r\n    labelProps?: { [key: string]: any }\r\n    help?: React.ReactNode\r\n    error?: string\r\n    required?: boolean\r\n    disabled?: boolean\r\n    readonly?: boolean\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Extract BasicFieldProps\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function extractBasicFieldProps<Props extends BasicFieldOptions>(props: Props, id: string) {\r\n    const {\r\n        name,\r\n        label,\r\n        labelProps,\r\n        help,\r\n        error,\r\n        required,\r\n        disabled = false,\r\n        readonly = false,\r\n        fieldDetailsClass,\r\n        fieldLabelClass,\r\n        fieldAsteriskClass,\r\n        fieldClass,\r\n        fieldErrorTextClass,\r\n        fieldHelpTextClass,\r\n        id: _id,\r\n        ...rest\r\n    } = props\r\n    return [\r\n        rest,\r\n        {\r\n            id: _id || id,\r\n            name,\r\n            label,\r\n            help,\r\n            error,\r\n            disabled,\r\n            required,\r\n            readonly,\r\n            fieldAsteriskClass,\r\n            fieldErrorTextClass,\r\n            fieldHelpTextClass,\r\n            fieldDetailsClass,\r\n            fieldLabelClass,\r\n            fieldClass,\r\n            labelProps,\r\n        },\r\n    ] as [\r\n        Omit<Props,\r\n            \"label\" | \"name\" | \"help\" | \"error\" |\r\n            \"disabled\" | \"required\" | \"readonly\" |\r\n            \"fieldDetailsClass\" | \"fieldLabelClass\" | \"fieldClass\" | \"fieldHelpTextClass\" |\r\n            \"fieldErrorTextClass\" | \"id\" | \"labelProps\" | \"fieldAsteriskClass\"\r\n        >,\r\n            Omit<BasicFieldOptions, \"id\"> & {\r\n            id: string\r\n        }\r\n    ]\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BasicField\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type BasicFieldProps = React.ComponentPropsWithoutRef<\"div\"> & BasicFieldOptions\r\n\r\nexport const BasicField = React.memo(React.forwardRef<HTMLDivElement, BasicFieldProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        labelProps,\r\n        id,\r\n        label,\r\n        error,\r\n        help,\r\n        disabled,\r\n        readonly,\r\n        required,\r\n        fieldClass,\r\n        fieldDetailsClass,\r\n        fieldLabelClass,\r\n        fieldAsteriskClass,\r\n        fieldErrorTextClass,\r\n        fieldHelpTextClass,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(\r\n                BasicFieldAnatomy.field(),\r\n                className,\r\n                fieldClass,\r\n            )}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {!!label &&\r\n                <label\r\n                    htmlFor={disabled ? undefined : id}\r\n                    className={cn(BasicFieldAnatomy.fieldLabel(), fieldLabelClass)}\r\n                    data-error={!!error}\r\n                    {...labelProps}\r\n                >\r\n                    {label}\r\n                    {required &&\r\n                        <span className={cn(BasicFieldAnatomy.fieldAsterisk(), fieldAsteriskClass)}>*</span>\r\n                    }\r\n                </label>\r\n            }\r\n\r\n            {children}\r\n\r\n            {(!!help || !!error) &&\r\n                <div className={cn(BasicFieldAnatomy.fieldDetails(), fieldDetailsClass)}>\r\n                    {!!help &&\r\n                        <p className={cn(BasicFieldAnatomy.fieldHelpText(), fieldHelpTextClass)}>{help}</p>}\r\n                    {!!error &&\r\n                        <p className={cn(BasicFieldAnatomy.fieldErrorText(), fieldErrorTextClass)}>{error}</p>}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}))\r\n\r\nBasicField.displayName = \"BasicField\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "basic-field",
        "content": "export * from \"./basic-field\"\r\n"
      }
    ]
  },
  {
    "component": "breadcrumbs",
    "name": "Breadcrumbs",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "breadcrumbs.tsx",
        "dir": "breadcrumbs",
        "content": "\"use client\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport Link from \"next/link\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const BreadcrumbsAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Breadcrumbs__root\",\r\n        \"flex\",\r\n    ]),\r\n    list: cva([\r\n        \"UI-Breadcrumbs__list\",\r\n        \"flex items-center space-x-2\",\r\n    ]),\r\n    chevronIcon: cva([\r\n        \"UI-Breadcrumbs__chevronIcon\",\r\n        \"h-5 w-5 flex-shrink-0 text-gray-400 mr-4\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Breadcrumbs__item\",\r\n        \"flex items-center\",\r\n    ]),\r\n    itemLink: cva([\r\n        \"UI-Breadcrumbs__itemLink\",\r\n        \"text-sm font-medium text-[--muted] hover:text-[--text-color]\",\r\n        \"data-[selected=true]:pointer-events-none data-[selected=true]:font-semibold data-[selected=true]:text-[--text-color]\", // Selected\r\n    ]),\r\n    homeItem: cva([\r\n        \"UI-Breadcrumbs__homeItem\",\r\n        \"text-[--muted] hover:text-[--text-color]\",\r\n    ]),\r\n    homeIcon: cva([\r\n        \"UI-Breadcrumbs__homeIcon\",\r\n        \"h-5 w-5 flex-shrink-0\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Breadcrumbs\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type BreadcrumbsProps = React.ComponentPropsWithRef<\"nav\"> &\r\n    ComponentAnatomy<typeof BreadcrumbsAnatomy> & {\r\n    rootHref?: string\r\n    items: { name: string, href: string | null | undefined, isCurrent: boolean }[]\r\n    showHomeButton?: boolean\r\n    homeIcon?: React.ReactElement\r\n}\r\n\r\nexport const Breadcrumbs: React.FC<BreadcrumbsProps> = React.forwardRef<HTMLElement, BreadcrumbsProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        listClass,\r\n        itemClass,\r\n        itemLinkClass,\r\n        chevronIconClass,\r\n        homeIconClass,\r\n        homeItemClass,\r\n        className,\r\n        items,\r\n        rootHref = \"/\",\r\n        showHomeButton = true,\r\n        homeIcon,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <nav\r\n            className={cn(BreadcrumbsAnatomy.root(), className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ol role=\"list\" className={cn(BreadcrumbsAnatomy.list(), listClass)}>\r\n                {showHomeButton &&\r\n                    <li>\r\n                        <div>\r\n                            <Link\r\n                                href={rootHref}\r\n                                className={cn(BreadcrumbsAnatomy.homeItem(), homeItemClass)}\r\n                            >\r\n                                {homeIcon ? homeIcon :\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n                                        strokeWidth=\"2\" stroke=\"currentColor\"\r\n                                        className={cn(BreadcrumbsAnatomy.homeIcon(), homeIconClass)}\r\n                                    >\r\n                                        <path\r\n                                            strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                            d=\"M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\"\r\n                                        />\r\n                                    </svg>}\r\n                            </Link>\r\n                        </div>\r\n                    </li>\r\n                }\r\n                {items.map((page, idx) => (\r\n                    <li key={page.name}>\r\n                        <div className={cn(BreadcrumbsAnatomy.item(), itemClass)}>\r\n                            {(!showHomeButton && idx > 0 || showHomeButton) &&\r\n                                <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(BreadcrumbsAnatomy.chevronIcon(), chevronIconClass)}\r\n                                >\r\n                                    <polyline points=\"9 18 15 12 9 6\"></polyline>\r\n                                </svg>\r\n                            }\r\n                            <Link\r\n                                href={page.href ?? \"#\"}\r\n                                className={cn(BreadcrumbsAnatomy.itemLink(), itemLinkClass)}\r\n                                data-selected={page.isCurrent}\r\n                                aria-current={page.isCurrent ? \"page\" : undefined}\r\n                            >\r\n                                {page.name}\r\n                            </Link>\r\n                        </div>\r\n                    </li>\r\n                ))}\r\n            </ol>\r\n        </nav>\r\n    )\r\n\r\n})\r\n\r\nBreadcrumbs.displayName = \"Breadcrumbs\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "breadcrumbs",
        "content": "export * from \"./breadcrumbs\"\r\n"
      }
    ]
  },
  {
    "component": "button",
    "name": "Button",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "button.tsx",
        "dir": "button",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ButtonAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Button_root\",\r\n        \"shadow-sm whitespace-nowrap font-semibold rounded-[--radius]\",\r\n        \"inline-flex items-center text-white transition ease-in duration-100 text-center text-base justify-center\",\r\n        \"focus-visible:outline-none focus-visible:ring-2 ring-offset-1 ring-offset-[--background] focus-visible:ring-[--ring]\",\r\n        \"disabled:opacity-50 disabled:pointer-events-none\",\r\n    ], {\r\n        variants: {\r\n            intent: {\r\n                \"primary\": \"bg-brand-500 hover:bg-brand-600 active:bg-brand-700 border border-transparent\",\r\n                \"primary-outline\": \"text-brand-500 border border-brand-500 bg-transparent hover:bg-brand-500 active:bg-brand-600 active:border-transparent hover:text-white dark:text-brand-300 dark:hover:border-brand-500 dark:active:bg-brand-600 dark:border-brand-200 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\r\n                \"primary-subtle\": \"text-brand-600 border border-brand-500 bg-brand-50 border-transparent hover:bg-brand-100 active:bg-brand-200 dark:text-brand-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\r\n                \"primary-link\": \"shadow-none text-brand-500 border border-transparent bg-transparent hover:underline active:text-brand-700 dark:text-brand-300 dark:active:text-brand-400\",\r\n                \"primary-basic\": \"shadow-none text-brand-500 border border-transparent bg-transparent hover:bg-brand-100 active:bg-brand-200 dark:text-brand-300 dark:hover:bg-opacity-10 dark:active:text-brand-200\",\r\n\r\n                \"warning\": \"bg-orange-500 hover:bg-orange-600 active:bg-orange-700 border border-transparent\",\r\n                \"warning-outline\": \"text-orange-500 border border-orange-500 bg-transparent hover:bg-orange-500 active:bg-orange-600 active:border-transparent hover:text-white dark:text-orange-300 dark:hover:border-orange-500 dark:active:bg-orange-600 dark:border-orange-200 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\r\n                \"warning-subtle\": \"text-orange-600 border border-orange-500 bg-orange-50 border-transparent hover:bg-orange-100 active:bg-orange-200 dark:text-orange-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\r\n                \"warning-link\": \"shadow-none text-orange-500 border border-transparent bg-transparent hover:underline active:text-orange-700 dark:text-orange-300 dark:active:text-orange-400\",\r\n                \"warning-basic\": \"shadow-none text-orange-500 border border-transparent bg-transparent hover:bg-orange-100 active:bg-orange-200 dark:text-orange-300 dark:hover:bg-opacity-10 dark:active:text-orange-200\",\r\n\r\n                \"success\": \"bg-green-500 hover:bg-green-600 active:bg-green-700 border border-transparent\",\r\n                \"success-outline\": \"text-green-500 border border-green-500 bg-transparent hover:bg-green-500 active:bg-green-600 active:border-transparent hover:text-white dark:text-green-300 dark:hover:border-green-500 dark:active:bg-green-600 dark:border-green-200 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\r\n                \"success-subtle\": \"text-green-600 border border-green-500 bg-green-50 border-transparent hover:bg-green-100 active:bg-green-200 dark:text-green-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\r\n                \"success-link\": \"shadow-none text-green-500 border border-transparent bg-transparent hover:underline active:text-green-700 dark:text-green-300 dark:active:text-green-400\",\r\n                \"success-basic\": \"shadow-none text-green-500 border border-transparent bg-transparent hover:bg-green-100 active:bg-green-200 dark:text-green-300 dark:hover:bg-opacity-10 dark:active:text-green-200\",\r\n\r\n                \"alert\": \"bg-red-500 hover:bg-red-600 active:bg-red-700 border border-transparent\",\r\n                \"alert-outline\": \"text-red-500 border border-red-500 bg-transparent hover:bg-red-500 active:bg-red-600 active:border-transparent hover:text-white dark:text-red-300 dark:hover:border-red-500 dark:active:bg-red-600 dark:border-red-200 dark:hover:text-white dark:active:border-transparent dark:active:text-white\",\r\n                \"alert-subtle\": \"text-red-600 border border-red-500 bg-red-50 border-transparent hover:bg-red-100 active:bg-red-200 dark:text-red-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\r\n                \"alert-link\": \"shadow-none text-red-500 border border-transparent bg-transparent hover:underline active:text-red-700 dark:text-red-300 dark:active:text-red-400\",\r\n                \"alert-basic\": \"shadow-none text-red-500 border border-transparent bg-transparent hover:bg-red-100 active:bg-red-200 dark:text-red-300 dark:hover:bg-opacity-10 dark:active:text-red-200\",\r\n\r\n                \"gray\": \"bg-gray-500 hover:bg-gray-600 active:bg-gray-700 border border-transparent\",\r\n                \"gray-outline\": \"text-gray-600 border border-gray-300 bg-transparent hover:bg-gray-100 active:border-transparent active:bg-gray-200 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-800 dark:active:bg-gray-700 dark:active:border-transparent dark:hover:text-gray-100\",\r\n                \"gray-subtle\": \"text-gray-600 border border-gray-500 bg-gray-100 border-transparent hover:bg-gray-200 active:bg-gray-300 dark:text-gray-300 dark:bg-opacity-10 dark:hover:bg-opacity-20\",\r\n                \"gray-link\": \"shadow-none text-gray-500 border border-transparent bg-transparent hover:underline active:text-gray-700 dark:text-gray-300 dark:active:text-gray-400\",\r\n                \"gray-basic\": \"shadow-none text-gray-500 border border-transparent bg-transparent hover:bg-gray-100 active:bg-gray-200 dark:active:bg-opacity-20 dark:text-gray-300 dark:hover:bg-opacity-10 dark:active:text-gray-200\",\r\n\r\n                \"white\": \"text-black bg-white hover:bg-gray-200 active:bg-gray-300 border border-transparent\",\r\n                \"white-outline\": \"text-white border border-gray-200 bg-transparent hover:bg-white hover:text-black active:bg-gray-100 active:text-black\",\r\n                \"white-subtle\": \"text-white bg-white bg-opacity-15 hover:bg-opacity-20 border border-transparent active:bg-opacity-25\",\r\n                \"white-link\": \"shadow-none text-white border border-transparent bg-transparent hover:underline active:text-gray-200\",\r\n                \"white-basic\": \"shadow-none text-white border border-transparent bg-transparent hover:bg-white hover:bg-opacity-15 active:bg-opacity-20 active:text-white-300\",\r\n            },\r\n            rounded: {\r\n                true: \"rounded-full\",\r\n                false: null,\r\n            },\r\n            contentWidth: {\r\n                true: \"w-fit\",\r\n                false: null,\r\n            },\r\n            size: {\r\n                xs: \"text-sm h-6 px-2\",\r\n                sm: \"text-sm h-8 px-4\",\r\n                md: \"h-10 px-4\",\r\n                lg: \"h-12 px-6 text-lg\",\r\n                xl: \"text-2xl h-14 px-8\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            intent: \"primary\",\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    icon: cva([\r\n        \"UI-Button__icon\",\r\n        \"inline-flex self-center flex-shrink-0\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Button\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n\r\nexport type ButtonProps = React.ComponentPropsWithoutRef<\"button\"> &\r\n    VariantProps<typeof ButtonAnatomy.root> &\r\n    ComponentAnatomy<typeof ButtonAnatomy> & {\r\n    loading?: boolean,\r\n    leftIcon?: React.ReactNode\r\n    rightIcon?: React.ReactNode\r\n    iconSpacing?: React.CSSProperties[\"marginInline\"],\r\n}\r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        size,\r\n        className,\r\n        rounded = false,\r\n        contentWidth = false,\r\n        intent,\r\n        leftIcon,\r\n        rightIcon,\r\n        iconSpacing = \"0.5rem\",\r\n        loading,\r\n        iconClass,\r\n        disabled,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className={cn(\r\n                ButtonAnatomy.root({\r\n                    size,\r\n                    intent,\r\n                    rounded,\r\n                    contentWidth,\r\n                }),\r\n                className,\r\n            )}\r\n            disabled={disabled || loading}\r\n            aria-disabled={disabled}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {loading ? (\r\n                <>\r\n                    <svg\r\n                        width=\"15\"\r\n                        height=\"15\"\r\n                        fill=\"currentColor\"\r\n                        className=\"animate-spin\"\r\n                        viewBox=\"0 0 1792 1792\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        style={{ marginInlineEnd: iconSpacing }}\r\n                    >\r\n                        <path\r\n                            d=\"M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z\"\r\n                        >\r\n                        </path>\r\n                    </svg>\r\n                    {children}\r\n                </>\r\n            ) : <>\r\n                {leftIcon &&\r\n                    <span\r\n                        className={cn(ButtonAnatomy.icon(), iconClass)}\r\n                        style={{ marginInlineEnd: iconSpacing }}\r\n                    >\r\n                        {leftIcon}\r\n                    </span>}\r\n                {children}\r\n                {rightIcon &&\r\n                    <span\r\n                        className={cn(ButtonAnatomy.icon(), iconClass)}\r\n                        style={{ marginInlineStart: iconSpacing }}\r\n                    >\r\n                        {rightIcon}\r\n                    </span>}\r\n            </>}\r\n        </button>\r\n    )\r\n\r\n})\r\n\r\nButton.displayName = \"Button\"\r\n"
      },
      {
        "name": "close-button.tsx",
        "dir": "button",
        "content": "import { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { IconButton, IconButtonProps } from \".\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CloseButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CloseButtonProps = Omit<IconButtonProps, \"icon\"> & {\r\n    icon?: React.ReactNode\r\n}\r\n\r\nexport const CloseButton = React.forwardRef<HTMLButtonElement, CloseButtonProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        icon,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <IconButton\r\n            type=\"button\"\r\n            intent=\"gray-basic\"\r\n            size=\"sm\"\r\n            className={cn(\r\n                \"rounded-full text-2xl flex-none\",\r\n                className,\r\n            )}\r\n            icon={!icon ? <span>\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\r\n                    fill=\"currentColor\"\r\n                >\r\n                    <path\r\n                        d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\r\n                    ></path>\r\n                </svg>\r\n            </span> : icon}\r\n            {...rest}\r\n            ref={ref}\r\n        />\r\n    )\r\n\r\n})\r\n\r\nCloseButton.displayName = \"CloseButton\"\r\n"
      },
      {
        "name": "icon-button.tsx",
        "dir": "button",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { Button, ButtonProps } from \".\"\r\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const IconButtonAnatomy = defineStyleAnatomy({\r\n    root: cva(\"UI-IconButton_root p-0 flex-none\", {\r\n        variants: {\r\n            size: {\r\n                xs: \"text-xl h-6 w-6\",\r\n                sm: \"text-xl h-8 w-8\",\r\n                md: \"text-2xl h-10 w-10\",\r\n                lg: \"text-3xl h-12 w-12\",\r\n                xl: \"text-4xl h-14 w-14\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * IconButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n\r\nexport type IconButtonProps = Omit<ButtonProps, \"leftIcon\" | \"rightIcon\" | \"iconSpacing\" | \"iconClass\" | \"children\"> &\r\n    VariantProps<typeof IconButtonAnatomy.root> & {\r\n    icon?: React.ReactNode\r\n}\r\n\r\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        icon,\r\n        size,\r\n        loading,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                className={cn(\r\n                    IconButtonAnatomy.root({ size }),\r\n                    className,\r\n                )}\r\n                loading={loading}\r\n                iconSpacing=\"0\"\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {!loading && icon}\r\n            </Button>\r\n        </>\r\n    )\r\n\r\n})\r\n\r\nIconButton.displayName = \"IconButton\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "button",
        "content": "export * from \"./button\"\r\nexport * from \"./close-button\"\r\nexport * from \"./icon-button\"\r\n"
      }
    ]
  },
  {
    "component": "calendar",
    "name": "Calendar",
    "dependencies": [
      [
        "react-day-picker",
        "^8.10.0",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "calendar.tsx",
        "dir": "calendar",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { DayPicker } from \"react-day-picker\"\nimport { ButtonAnatomy } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CalendarAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Calendar__root\",\n        \"p-3\",\n    ]),\n    months: cva([\n        \"UI-Calendar__months\",\n        \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n    ]),\n    month: cva([\n        \"UI-Calendar__month\",\n        \"space-y-4\",\n    ]),\n    caption: cva([\n        \"UI-Calendar__caption\",\n        \"flex justify-center pt-1 relative items-center\",\n    ]),\n    captionLabel: cva([\n        \"UI-Calendar__captionLabel\",\n        \"text-sm font-medium\",\n    ]),\n    nav: cva([\n        \"UI-Calendar__nav\",\n        \"space-x-1 flex items-center\",\n    ]),\n    navButton: cva([\n        \"UI-Calendar__navButton\",\n        // \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n    ]),\n    navButtonPrevious: cva([\n        \"UI-Calendar__navButtonPrevious\",\n        \"absolute left-1\",\n    ]),\n    navButtonNext: cva([\n        \"UI-Calendar__navButtonNext\",\n        \"absolute right-1\",\n    ]),\n    table: cva([\n        \"UI-Calendar__table\",\n        \"w-full border-collapse space-y-1\",\n    ]),\n    headRow: cva([\n        \"UI-Calendar__headRow\",\n        \"flex\",\n    ]),\n    headCell: cva([\n        \"UI-Calendar__headCell\",\n        \"text-[--muted] rounded-[--radius] w-9 font-normal text-[0.8rem]\",\n    ]),\n    row: cva([\n        \"UI-Calendar__row\",\n        \"flex w-full mt-2\",\n    ]),\n    cell: cva([\n        \"UI-Calendar__cell\",\n        \"h-9 w-9 text-center text-sm p-0 relative\",\n        \"[&:has([aria-selected].day-range-end)]:rounded-r-[--radius]\",\n        \"[&:has([aria-selected].day-outside)]:bg-[--subtle]/50\",\n        \"[&:has([aria-selected])]:bg-[--subtle]\",\n        \"first:[&:has([aria-selected])]:rounded-l-[--radius]\",\n        \"last:[&:has([aria-selected])]:rounded-r-[--radius]\",\n        \"focus-within:relative focus-within:z-20\",\n    ]),\n    day: cva([\n        \"UI-Calendar__day\",\n        \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\",\n    ]),\n    dayRangeEnd: cva([\n        \"UI-Calendar__dayRangeEnd\",\n        \"day-range-end\",\n    ]),\n    daySelected: cva([\n        \"UI-Calendar__daySelected\",\n        \"bg-brand text-white hover:bg-brand hover:text-white\",\n        \"focus:bg-brand focus:text-white rounded-[--radius] font-semibold\",\n    ]),\n    dayToday: cva([\n        \"UI-Calendar__dayToday\",\n        \"bg-[--subtle] text-[--text] rounded-[--radius]\",\n    ]),\n    dayOutside: cva([\n        \"UI-Calendar__dayOutside\",\n        \"day-outside text-[--muted] opacity-30\",\n        \"aria-selected:bg-[--subtle]/50\",\n        \"aria-selected:text-white\",\n        \"aria-selected:opacity-30\",\n    ]),\n    dayDisabled: cva([\n        \"UI-Calendar__dayDisabled\",\n        \"text-[--muted] opacity-30\",\n    ]),\n    dayRangeMiddle: cva([\n        \"UI-Calendar__dayRangeMiddle\",\n        \"aria-selected:bg-[--subtle]\",\n        \"aria-selected:text-[--foreground]\",\n    ]),\n    dayHidden: cva([\n        \"UI-Calendar__dayHidden\",\n        \"invisible\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Calendar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CalendarProps =\n    React.ComponentProps<typeof DayPicker> &\n    ComponentAnatomy<typeof CalendarAnatomy>\n\nexport function Calendar(props: CalendarProps) {\n\n    const {\n        className,\n        classNames,\n        showOutsideDays = true,\n        monthsClass,\n        monthClass,\n        captionClass,\n        captionLabelClass,\n        navClass,\n        navButtonClass,\n        navButtonPreviousClass,\n        navButtonNextClass,\n        tableClass,\n        headRowClass,\n        headCellClass,\n        rowClass,\n        cellClass,\n        dayClass,\n        dayRangeEndClass,\n        daySelectedClass,\n        dayTodayClass,\n        dayOutsideClass,\n        dayDisabledClass,\n        dayRangeMiddleClass,\n        dayHiddenClass,\n        ...rest\n    } = props\n\n    return (\n        <DayPicker\n            fixedWeeks\n            showOutsideDays={showOutsideDays}\n            className={cn(CalendarAnatomy.root(), className)}\n            classNames={{\n                months: cn(CalendarAnatomy.months(), monthsClass),\n                month: cn(CalendarAnatomy.month(), monthClass),\n                caption: cn(CalendarAnatomy.caption(), captionClass),\n                caption_label: cn(CalendarAnatomy.captionLabel(), captionLabelClass),\n                nav: cn(CalendarAnatomy.nav(), navClass),\n                nav_button: cn(CalendarAnatomy.navButton(), ButtonAnatomy.root({ size: \"sm\", intent: \"gray-basic\" }), navButtonClass),\n                nav_button_previous: cn(CalendarAnatomy.navButtonPrevious(), navButtonPreviousClass),\n                nav_button_next: cn(CalendarAnatomy.navButtonNext(), navButtonNextClass),\n                table: cn(CalendarAnatomy.table(), tableClass),\n                head_row: cn(CalendarAnatomy.headRow(), headRowClass),\n                head_cell: cn(CalendarAnatomy.headCell(), headCellClass),\n                row: cn(CalendarAnatomy.row(), rowClass),\n                cell: cn(CalendarAnatomy.cell(), cellClass),\n                day: cn(CalendarAnatomy.day(), dayClass),\n                day_range_end: cn(CalendarAnatomy.dayRangeEnd(), dayRangeEndClass),\n                day_selected: cn(CalendarAnatomy.daySelected(), daySelectedClass),\n                day_today: cn(CalendarAnatomy.dayToday(), dayTodayClass),\n                day_outside: cn(CalendarAnatomy.dayOutside(), dayOutsideClass),\n                day_disabled: cn(CalendarAnatomy.dayDisabled(), dayDisabledClass),\n                day_range_middle: cn(CalendarAnatomy.dayRangeMiddle(), dayRangeMiddleClass),\n                day_hidden: cn(CalendarAnatomy.dayHidden(), dayHiddenClass),\n                ...classNames,\n            }}\n            components={{\n                IconLeft: ({ ...props }) => <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"size-4\"\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg>,\n                IconRight: ({ ...props }) => <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"rotate-180 size-4\"\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg>,\n            }}\n            {...rest}\n        />\n    )\n}\n\nCalendar.displayName = \"Calendar\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "calendar",
        "content": "export * from \"./calendar\"\n"
      }
    ]
  },
  {
    "component": "card",
    "name": "Card",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "card.tsx",
        "dir": "card",
        "content": "\"use client\"\n\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CardAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Card__root\",\n        \"rounded-lg border bg-[--paper] shadow-sm\",\n    ]),\n    header: cva([\n        \"UI-Card__header\",\n        \"flex flex-col space-y-1.5 p-4\",\n    ]),\n    title: cva([\n        \"UI-Card__title\",\n        \"text-2xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Card__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n    content: cva([\n        \"UI-Card__content\",\n        \"p-4 pt-0\",\n    ]),\n    footer: cva([\n        \"UI-Card__footer\",\n        \"flex items-center p-4 pt-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Card\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.root(), className)}\n            {...rest}\n        />\n    )\n})\nCard.displayName = \"Card\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardHeaderProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.header(), className)}\n            {...rest}\n        />\n    )\n})\nCardHeader.displayName = \"CardHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardTitle\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardTitleProps = React.ComponentPropsWithoutRef<\"h3\">\n\nexport const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <h3\n            ref={ref}\n            className={cn(CardAnatomy.title(), className)}\n            {...rest}\n        />\n    )\n})\nCardTitle.displayName = \"CardTitle\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardDescription\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardDescriptionProps = React.ComponentPropsWithoutRef<\"p\">\n\nexport const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <p\n            ref={ref}\n            className={cn(CardAnatomy.description(), className)}\n            {...rest}\n        />\n    )\n})\nCardDescription.displayName = \"CardDescription\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardContentProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.content(), className)}\n            {...rest}\n        />\n    )\n})\nCardContent.displayName = \"CardContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * CardFooter\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CardFooterProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(CardAnatomy.footer(), className)}\n            {...rest}\n        />\n    )\n})\nCardFooter.displayName = \"CardFooter\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "card",
        "content": "export * from \"./card\"\n"
      }
    ]
  },
  {
    "component": "carousel",
    "name": "Carousel",
    "dependencies": [
      [
        "embla-carousel-react",
        "8.0.0-rc15",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "carousel.tsx",
        "dir": "carousel",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport useEmblaCarousel, {\n    type EmblaCarouselType as CarouselApi,\n    type EmblaOptionsType as CarouselOptions,\n    type EmblaPluginType as CarouselPlugin,\n} from \"embla-carousel-react\"\nimport * as React from \"react\"\nimport { IconButton } from \"../button\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CarouselAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Carousel__root\",\n        \"relative\",\n    ]),\n    content: cva([\n        \"UI-Carousel__content\",\n        \"overflow-hidden\",\n    ]),\n    innerContent: cva([\n        \"UI-Carousel__innerContent\",\n        \"flex\",\n    ], {\n        variants: {\n            gap: { none: null, sm: null, md: null, lg: null, xl: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { gap: \"none\", orientation: \"horizontal\", className: \"ml-0\" },\n            { gap: \"sm\", orientation: \"horizontal\", className: \"-ml-2\" },\n            { gap: \"md\", orientation: \"horizontal\", className: \"-ml-4\" },\n            { gap: \"lg\", orientation: \"horizontal\", className: \"-ml-6\" },\n            { gap: \"xl\", orientation: \"horizontal\", className: \"-ml-8\" },\n            /**/\n            { gap: \"none\", orientation: \"vertical\", className: \"-mt-0 flex-col\" },\n            { gap: \"sm\", orientation: \"vertical\", className: \"-mt-2 flex-col\" },\n            { gap: \"md\", orientation: \"vertical\", className: \"-mt-4 flex-col\" },\n            { gap: \"lg\", orientation: \"vertical\", className: \"-mt-6 flex-col\" },\n            { gap: \"xl\", orientation: \"vertical\", className: \"-mt-8 flex-col\" },\n        ],\n    }),\n    item: cva([\n        \"UI-Carousel__item\",\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n    ], {\n        variants: {\n            gap: { none: null, sm: null, md: null, lg: null, xl: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { gap: \"none\", orientation: \"horizontal\", className: \"pl-0\" },\n            { gap: \"sm\", orientation: \"horizontal\", className: \"pl-2\" },\n            { gap: \"md\", orientation: \"horizontal\", className: \"pl-4\" },\n            { gap: \"lg\", orientation: \"horizontal\", className: \"pl-6\" },\n            { gap: \"xl\", orientation: \"horizontal\", className: \"pl-8\" },\n            /**/\n            { gap: \"none\", orientation: \"vertical\", className: \"pt-0\" },\n            { gap: \"sm\", orientation: \"vertical\", className: \"pt-2\" },\n            { gap: \"md\", orientation: \"vertical\", className: \"pt-4\" },\n            { gap: \"lg\", orientation: \"vertical\", className: \"pt-6\" },\n            { gap: \"xl\", orientation: \"vertical\", className: \"pt-8\" },\n        ],\n    }),\n    button: cva([\n        \"UI-Carousel__button\",\n        \"absolute rounded-full\",\n    ], {\n        variants: {\n            placement: { previous: null, next: null },\n            orientation: { horizontal: null, vertical: null },\n        },\n        compoundVariants: [\n            { placement: \"previous\", orientation: \"horizontal\", className: \"-left-12 top-1/2 -translate-y-1/2\" },\n            { placement: \"previous\", orientation: \"vertical\", className: \"-top-12 left-1/2 -translate-x-1/2 rotate-90\" },\n            { placement: \"next\", orientation: \"horizontal\", className: \"-right-12 top-1/2 -translate-y-1/2\" },\n            { placement: \"next\", orientation: \"vertical\", className: \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\" },\n        ],\n    }),\n    chevronIcon: cva([\n        \"UI-Carousel__chevronIcon\",\n        \"size-6\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Carousel\n * -----------------------------------------------------------------------------------------------*/\n\nexport const __CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n    const context = React.useContext(__CarouselContext)\n\n    if (!context) {\n        throw new Error(\"useCarousel must be used within a <Carousel />\")\n    }\n\n    return context\n}\n\nexport type CarouselProps = {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin[]\n    orientation?: \"horizontal\" | \"vertical\"\n    gap?: \"none\" | \"sm\" | \"md\" | \"lg\" | \"xl\"\n    setApi?: (api: CarouselApi) => void\n}\n\nexport type CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nexport const Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>((props, ref) => {\n\n    const {\n        orientation = \"horizontal\",\n        opts,\n        gap = \"md\",\n        setApi,\n        plugins,\n        className,\n        children,\n        ...rest\n    } = props\n\n    const [carouselRef, api] = useEmblaCarousel({ ...opts, axis: orientation === \"horizontal\" ? \"x\" : \"y\" }, plugins)\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n        if (!api) return\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === \"ArrowLeft\") {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === \"ArrowRight\") {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext],\n    )\n\n    React.useEffect(() => {\n        if (!api || !setApi) return\n\n        setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n        if (!api) return\n\n        onSelect(api)\n        api.on(\"reInit\", onSelect)\n        api.on(\"select\", onSelect)\n\n        return () => {\n            api?.off(\"select\", onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <__CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                gap,\n                orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext,\n            }}\n        >\n            <div\n                ref={ref}\n                onKeyDownCapture={handleKeyDown}\n                className={cn(CarouselAnatomy.root(), className)}\n                role=\"region\"\n                aria-roledescription=\"carousel\"\n                {...rest}\n            >\n                {children}\n            </div>\n        </__CarouselContext.Provider>\n    )\n})\nCarousel.displayName = \"Carousel\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselContentProps = React.ComponentPropsWithoutRef<\"div\"> & {\n    contentClass?: string\n}\n\nexport const CarouselContent = React.forwardRef<HTMLDivElement, CarouselContentProps>((props, ref) => {\n    const { className, contentClass, ...rest } = props\n    const { carouselRef, orientation, gap } = useCarousel()\n\n    return (\n        <div ref={carouselRef} className={cn(CarouselAnatomy.content(), contentClass)}>\n            <div\n                ref={ref}\n                className={cn(CarouselAnatomy.innerContent({ orientation, gap }), className)}\n                {...rest}\n            />\n        </div>\n    )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselItemProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const CarouselItem = React.forwardRef<HTMLDivElement, CarouselItemProps>((props, ref) => {\n    const { className, ...rest } = props\n    const { orientation, gap } = useCarousel()\n\n    return (\n        <div\n            ref={ref}\n            role=\"group\"\n            aria-roledescription=\"slide\"\n            className={cn(CarouselAnatomy.item({ orientation, gap }), className)}\n            {...rest}\n        />\n    )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselPrevious\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CarouselButton = React.ComponentProps<typeof IconButton> & { chevronIconClass?: string }\n\nexport const CarouselPrevious = React.forwardRef<HTMLButtonElement, CarouselButton>((props, ref) => {\n    const { className, chevronIconClass, intent = \"gray-outline\", ...rest } = props\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n    return (\n        <IconButton\n            ref={ref}\n            intent={intent}\n            className={CarouselAnatomy.button({ orientation, placement: \"previous\" })}\n            disabled={!canScrollPrev}\n            onClick={scrollPrev}\n            icon={<svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={cn(CarouselAnatomy.chevronIcon(), chevronIconClass)}\n            >\n                <path d=\"m15 18-6-6 6-6\" />\n            </svg>}\n            {...rest}\n        />\n    )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\n/* -------------------------------------------------------------------------------------------------\n * CarouselNext\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CarouselNext = React.forwardRef<HTMLButtonElement, CarouselButton>((props, ref) => {\n    const { className, chevronIconClass, intent = \"gray-outline\", ...rest } = props\n    const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n    return (\n        <IconButton\n            ref={ref}\n            intent={intent}\n            className={CarouselAnatomy.button({ orientation, placement: \"next\" })}\n            disabled={!canScrollNext}\n            onClick={scrollNext}\n            icon={<svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={cn(CarouselAnatomy.chevronIcon(), chevronIconClass)}\n            >\n                <path d=\"m9 18 6-6-6-6\" />\n            </svg>}\n            {...rest}\n        />\n    )\n})\nCarouselNext.displayName = \"CarouselNext\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "carousel",
        "content": "export * from \"./carousel\"\n"
      }
    ]
  },
  {
    "component": "charts",
    "name": "Charts",
    "dependencies": [
      [
        "recharts",
        "^2.6.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "area-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Area, AreaChart as ReChartsAreaChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { cn } from \"../core/styling\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"./color-theme\"\r\nimport { BaseChartProps, ChartCurveType } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AreaChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type AreaChartProps = React.ComponentPropsWithoutRef<\"div\"> &\r\n    BaseChartProps & {\r\n    stack?: boolean\r\n    /**\r\n     * The type of curve to use for the line\r\n     */\r\n    curveType?: ChartCurveType\r\n    /**\r\n     * Connect null data points\r\n     */\r\n    connectNulls?: boolean\r\n    /**\r\n     * Display dots for each data point\r\n     */\r\n    showDots?: boolean\r\n    /**\r\n     * Angle the x-axis labels\r\n     */\r\n    angledLabels?: boolean\r\n}\r\n\r\nexport const AreaChart: React.FC<AreaChartProps> = React.forwardRef<HTMLDivElement, AreaChartProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        stack = false,\r\n        curveType = \"linear\",\r\n        connectNulls = false,\r\n        angledLabels = false,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        showDots = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = React.useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            className={cn(\"w-full h-80\", className)}\r\n            {...rest}\r\n        >\r\n            <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\r\n                {data?.length ? (\r\n                    <ReChartsAreaChart data={data}>\r\n                        {showGridLines ? (\r\n                            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\r\n                        ) : null}\r\n                        <XAxis\r\n                            hide={!showXAxis}\r\n                            dataKey={index}\r\n                            tick={{ transform: \"translate(0, 8)\" }}\r\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                            style={{\r\n                                fontSize: \".75rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                                color: \"red\",\r\n                            }}\r\n                            interval=\"preserveStartEnd\"\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            padding={{ left: 10, right: 10 }}\r\n                            minTickGap={5}\r\n                            spacing={120}\r\n                            textAnchor={angledLabels ? \"end\" : undefined}\r\n                            angle={angledLabels ? -40 : undefined}\r\n                        />\r\n                        <YAxis\r\n                            width={yAxisWidth}\r\n                            hide={!showYAxis}\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            type=\"number\"\r\n                            domain={yAxisDomain as AxisDomain}\r\n                            tick={{ transform: \"translate(-3, 0)\" }}\r\n                            style={{\r\n                                fontSize: \".8rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                            }}\r\n                            tickFormatter={valueFormatter}\r\n                            allowDecimals={allowDecimals}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                                position={{ y: 0 }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => {\r\n                            const hexColor = `var(--${categoryColors.get(category)})`\r\n                            return (\r\n                                <defs key={category}>\r\n                                    {showGradient ? (\r\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                            <stop offset=\"5%\" stopColor={hexColor} stopOpacity={0.2} />\r\n                                            <stop offset=\"95%\" stopColor={hexColor} stopOpacity={0} />\r\n                                        </linearGradient>\r\n                                    ) : (\r\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                            <stop stopColor={hexColor} stopOpacity={0.3} />\r\n                                        </linearGradient>\r\n                                    )}\r\n                                </defs>\r\n                            )\r\n                        })}\r\n\r\n                        {categories.map((category) => (\r\n                            <Area\r\n                                key={category}\r\n                                name={category}\r\n                                type={curveType}\r\n                                dataKey={category}\r\n                                stroke={`var(--${categoryColors.get(category)})`}\r\n                                fill={`url(#${categoryColors.get(category)})`}\r\n                                strokeWidth={2}\r\n                                dot={showDots}\r\n                                isAnimationActive={showAnimation}\r\n                                stackId={stack ? \"a\" : undefined}\r\n                                connectNulls={connectNulls}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n\r\n                    </ReChartsAreaChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nAreaChart.displayName = \"AreaChart\"\r\n"
      },
      {
        "name": "bar-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { Bar, BarChart as ReChartsBarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"./color-theme\"\r\nimport { BaseChartProps } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BarChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type BarChartProps = React.ComponentPropsWithRef<\"div\"> &\r\n    BaseChartProps & {\r\n    /**\r\n     * Display bars vertically or horizontally\r\n     */\r\n    layout?: \"vertical\" | \"horizontal\"\r\n    /**\r\n     * If true, the bars will be stacked\r\n     */\r\n    stack?: boolean\r\n    /**\r\n     * Display bars as a percentage of the total\r\n     */\r\n    relative?: boolean\r\n}\r\n\r\nexport const BarChart: React.FC<BarChartProps> = React.forwardRef<HTMLDivElement, BarChartProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        layout = \"horizontal\",\r\n        stack = false,\r\n        relative = false,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = React.useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            className={cn(\"w-full h-80\", className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                {data?.length ? (\r\n                    <ReChartsBarChart\r\n                        data={data}\r\n                        stackOffset={relative ? \"expand\" : \"none\"}\r\n                        layout={layout === \"vertical\" ? \"vertical\" : \"horizontal\"}\r\n                    >\r\n                        {showGridLines ? (\r\n                            <CartesianGrid\r\n                                strokeDasharray=\"3 3\"\r\n                                horizontal={layout !== \"vertical\"}\r\n                                vertical={layout === \"vertical\"}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {layout !== \"vertical\" ? (\r\n                            <XAxis\r\n                                hide={!showXAxis}\r\n                                dataKey={index}\r\n                                interval=\"preserveStartEnd\"\r\n                                tick={{ transform: \"translate(0, 6)\" }} // Padding between labels and axis\r\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                                tickLine={false}\r\n                                axisLine={false}\r\n                            />\r\n                        ) : (\r\n                            <XAxis\r\n                                hide={!showXAxis}\r\n                                type=\"number\"\r\n                                tick={{ transform: \"translate(-3, 0)\" }}\r\n                                domain={yAxisDomain as AxisDomain}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                                tickLine={false}\r\n                                axisLine={false}\r\n                                tickFormatter={valueFormatter}\r\n                                padding={{ left: 10, right: 10 }}\r\n                                minTickGap={5}\r\n                                allowDecimals={allowDecimals}\r\n                            />\r\n                        )}\r\n                        {layout !== \"vertical\" ? (\r\n                            <YAxis\r\n                                width={yAxisWidth}\r\n                                hide={!showYAxis}\r\n                                axisLine={false}\r\n                                tickLine={false}\r\n                                type=\"number\"\r\n                                domain={yAxisDomain as AxisDomain}\r\n                                tick={{ transform: \"translate(-3, 0)\" }}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                                tickFormatter={\r\n                                    relative ? (value: number) => `${(value * 100).toString()} %` : valueFormatter\r\n                                }\r\n                                allowDecimals={allowDecimals}\r\n                            />\r\n                        ) : (\r\n                            <YAxis\r\n                                width={yAxisWidth}\r\n                                hide={!showYAxis}\r\n                                dataKey={index}\r\n                                axisLine={false}\r\n                                tickLine={false}\r\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                                type=\"category\"\r\n                                interval=\"preserveStartEnd\"\r\n                                tick={{ transform: \"translate(0, 6)\" }}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ fill: \"#d1d5db\", opacity: \"0.15\" }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                                position={{ y: 0 }}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => (\r\n                            <Bar\r\n                                key={category}\r\n                                name={category}\r\n                                type=\"linear\"\r\n                                stackId={stack || relative ? \"a\" : undefined}\r\n                                dataKey={category}\r\n                                fill={`var(--${categoryColors.get(category)})`}\r\n                                isAnimationActive={showAnimation}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n                    </ReChartsBarChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nBarChart.displayName = \"BarChart\"\r\n"
      },
      {
        "name": "chart-legend.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { UIColor } from \"./color-theme\"\r\nimport * as React from \"react\"\r\nimport { Legend } from \"./legend\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartLegend\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ChartLegend = (\r\n    { payload }: any,\r\n    categoryColors: Map<string, UIColor>,\r\n    setLegendHeight: React.Dispatch<React.SetStateAction<number>>,\r\n) => {\r\n    const legendRef = React.useRef<HTMLDivElement>(null)\r\n\r\n    const [windowSize, setWindowSize] = React.useState<undefined | number>(undefined)\r\n\r\n    React.useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowSize(window.innerWidth)\r\n            const calculateHeight = (height: number | undefined) =>\r\n                height ?\r\n                    Number(height) + 20 // 20px extra padding\r\n                    : 60 // default height\r\n            setLegendHeight(calculateHeight(legendRef.current?.clientHeight))\r\n        }\r\n        handleResize()\r\n        window.addEventListener(\"resize\", handleResize)\r\n\r\n        return () => window.removeEventListener(\"resize\", handleResize)\r\n    }, [windowSize])\r\n\r\n    return (\r\n        <div ref={legendRef} className=\"flex w-full items-center justify-center mt-4\">\r\n            <Legend\r\n                categories={payload.map((entry: any) => entry.value)}\r\n                colors={payload.map((entry: any) => categoryColors.get(entry.value))}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nChartLegend.displayName = \"ChartLegend\"\r\n"
      },
      {
        "name": "chart-tooltip.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { ChartValueFormatter } from \"../charts/types\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { UIColor } from \"./color-theme\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ChartTooltipAnatomy = defineStyleAnatomy({\r\n    frame: cva([\r\n        \"UI-ChartTooltip__frame\",\r\n        \"border bg-[--paper] p-2 rounded-[--radius]\",\r\n    ]),\r\n    header: cva([\r\n        \"UI-ChartTooltip__header\",\r\n        \"mb-2 font-semibold\",\r\n    ]),\r\n    label: cva([\r\n        \"UI-ChartTooltip__label\",\r\n    ]),\r\n    content: cva([\r\n        \"UI-ChartTooltip__content\",\r\n        \"space-y-1\",\r\n    ]),\r\n})\r\n\r\nexport const ChartTooltipRowAnatomy = defineStyleAnatomy({\r\n    row: cva([\r\n        \"UI-ChartTooltip__row\",\r\n        \"flex items-center justify-between space-x-8\",\r\n    ]),\r\n    labelContainer: cva([\r\n        \"UI-ChartTooltip__labelContainer\",\r\n        \"flex items-center space-x-2\",\r\n    ]),\r\n    dot: cva([\r\n        \"UI-ChartTooltip__dot\",\r\n        \"shrink-0\",\r\n        \"h-3 w-3 bg-gray rounded-full shadow-sm\",\r\n    ]),\r\n    value: cva([\r\n        \"UI-ChartTooltip__value\",\r\n        \"font-semibold tabular-nums text-right whitespace-nowrap\",\r\n    ]),\r\n    label: cva([\r\n        \"UI-ChartTooltip__label\",\r\n        \"text-sm text-right whitespace-nowrap font-medium text-[--muted]\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltipFrame\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ChartTooltipFrameProps = React.ComponentPropsWithoutRef<\"div\">\r\n\r\nexport const ChartTooltipFrame = ({ children, className }: ChartTooltipFrameProps) => (\r\n    <div className={cn(ChartTooltipAnatomy.frame(), className)}>\r\n        {children}\r\n    </div>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltipRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ChartTooltipRowProps = ComponentAnatomy<typeof ChartTooltipRowAnatomy> & {\r\n    value: string\r\n    name: string\r\n    color: UIColor\r\n}\r\n\r\nexport const ChartTooltipRow = (\r\n    {\r\n        value,\r\n        name,\r\n        color,\r\n        dotClass,\r\n        rowClass,\r\n        valueClass,\r\n        labelClass,\r\n        labelContainerClass,\r\n    }: ChartTooltipRowProps) => (\r\n    <div className={cn(ChartTooltipRowAnatomy.row(), rowClass)}>\r\n        <div className={cn(ChartTooltipRowAnatomy.labelContainer(), labelContainerClass)}>\r\n            <span\r\n                className={cn(ChartTooltipRowAnatomy.dot(), dotClass)}\r\n                style={{ backgroundColor: `var(--${color})` }}\r\n            />\r\n            <p className={cn(ChartTooltipRowAnatomy.label(), labelClass)}>\r\n                {name}\r\n            </p>\r\n        </div>\r\n        <p className={cn(ChartTooltipRowAnatomy.value(), valueClass)}>\r\n            {value}\r\n        </p>\r\n    </div>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ChartTooltipProps = ComponentAnatomy<typeof ChartTooltipAnatomy> & {\r\n    active: boolean | undefined\r\n    payload: any\r\n    label: string\r\n    categoryColors: Map<string, UIColor>\r\n    valueFormatter: ChartValueFormatter\r\n}\r\n\r\nexport const ChartTooltip = (props: ChartTooltipProps) => {\r\n\r\n    const {\r\n        active,\r\n        payload,\r\n        label,\r\n        categoryColors,\r\n        valueFormatter,\r\n        headerClass,\r\n        contentClass,\r\n        frameClass,\r\n        labelClass,\r\n    } = props\r\n    if (active && payload) {\r\n        return (\r\n            <ChartTooltipFrame className={frameClass}>\r\n                <div className={cn(ChartTooltipAnatomy.header(), headerClass)}>\r\n                    <p className={cn(ChartTooltipAnatomy.label(), labelClass)}>\r\n                        {label}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className={cn(ChartTooltipAnatomy.content(), contentClass)}>\r\n                    {payload.map(({ value, name }: { value: number; name: string }, idx: number) => (\r\n                        <ChartTooltipRow\r\n                            key={`id-${idx}`}\r\n                            value={valueFormatter(value)}\r\n                            name={name}\r\n                            color={categoryColors.get(name) ?? \"brand\"}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </ChartTooltipFrame>\r\n        )\r\n    }\r\n    return null\r\n}\r\n"
      },
      {
        "name": "color-theme.ts",
        "dir": "charts",
        "content": "/* -------------------------------------------------------------------------------------------------\r\n * Colors\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ColorPalette = [\r\n    \"brand\",\r\n    \"purple\",\r\n    \"blue\",\r\n    \"amber\",\r\n    \"green\",\r\n    \"yellow\",\r\n    \"cyan\",\r\n    \"lime\",\r\n    \"sky\",\r\n    \"red\",\r\n    \"pink\",\r\n    \"orange\",\r\n    \"stone\",\r\n    \"teal\",\r\n    \"neutral\",\r\n    \"fuchsia\",\r\n    \"violet\",\r\n    \"slate\",\r\n    \"zinc\",\r\n    \"emerald\",\r\n    \"indigo\",\r\n    \"gray\",\r\n    \"rose\",\r\n]\r\nexport type UIColor = (typeof ColorPalette)[number];\r\n"
      },
      {
        "name": "donut-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { Pie, PieChart as ReChartsDonutChart, ResponsiveContainer, Tooltip } from \"recharts\"\r\nimport { ChartTooltipFrame, ChartTooltipRow } from \"./chart-tooltip\"\r\nimport { ColorPalette, UIColor } from \"./color-theme\"\r\nimport { ChartValueFormatter } from \"./types\"\r\nimport { defaultValueFormatter, parseChartData, parseChartLabelInput } from \"./utils\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DonutChartProps = React.HTMLAttributes<HTMLDivElement> & {\r\n    data: any[]\r\n    category?: string\r\n    index?: string\r\n    colors?: UIColor[]\r\n    variant?: \"donut\" | \"pie\"\r\n    valueFormatter?: ChartValueFormatter\r\n    label?: string\r\n    showLabel?: boolean\r\n    showAnimation?: boolean\r\n    showTooltip?: boolean\r\n    noDataText?: string\r\n}\r\n\r\nexport const DonutChart = React.forwardRef<HTMLDivElement, DonutChartProps>((props, ref) => {\r\n    const {\r\n        data = [],\r\n        category = \"value\",\r\n        index = \"name\",\r\n        colors = ColorPalette,\r\n        variant = \"donut\",\r\n        valueFormatter = defaultValueFormatter,\r\n        label,\r\n        showLabel = true,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        className,\r\n        noDataText,\r\n        ...other\r\n    } = props\r\n    const isDonut = variant == \"donut\"\r\n\r\n    const parsedLabelInput = parseChartLabelInput(label, valueFormatter, data, category)\r\n\r\n    return (\r\n        <div ref={ref} className={cn(\"w-full h-44\", className)} {...other}>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                {data?.length ? (\r\n                    <ReChartsDonutChart>\r\n                        {showLabel && isDonut ? (\r\n                            <text\r\n                                x=\"50%\"\r\n                                y=\"50%\"\r\n                                textAnchor=\"middle\"\r\n                                dominantBaseline=\"middle\"\r\n                                fill={`var(--muted)`}\r\n                                className=\"font-semibold\"\r\n                            >\r\n                                {parsedLabelInput}\r\n                            </text>\r\n                        ) : null}\r\n                        <Pie\r\n                            data={parseChartData(data, colors)}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            startAngle={90}\r\n                            endAngle={-270}\r\n                            innerRadius={isDonut ? \"75%\" : \"0%\"}\r\n                            outerRadius=\"100%\"\r\n                            paddingAngle={0}\r\n                            dataKey={category}\r\n                            nameKey={index}\r\n                            isAnimationActive={showAnimation}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                content={({ active, payload }) => (\r\n                                    <DonutChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        valueFormatter={valueFormatter}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n                    </ReChartsDonutChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n})\r\n\r\nDonutChart.displayName = \"DonutChart\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChartTooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DonutChartTooltipProps = {\r\n    active?: boolean\r\n    payload: any\r\n    valueFormatter: ChartValueFormatter\r\n}\r\n\r\nexport const DonutChartTooltip = ({ active, payload, valueFormatter }: DonutChartTooltipProps) => {\r\n    if (active && payload[0]) {\r\n        const payloadRow = payload[0]\r\n        return (\r\n            <ChartTooltipFrame>\r\n                <div className={cn(\"py-2 px-2\")}>\r\n                    <ChartTooltipRow\r\n                        value={valueFormatter(payloadRow.value)}\r\n                        name={payloadRow.name}\r\n                        color={payloadRow.payload.color}\r\n                    />\r\n                </div>\r\n            </ChartTooltipFrame>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nDonutChartTooltip.displayName = \"DonutChartTooltip\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "charts",
        "content": "export * from \"./area-chart\"\r\nexport * from \"./bar-chart\"\r\nexport * from \"./line-chart\"\r\nexport * from \"./donut-chart\"\r\nexport * from \"./legend\"\r\nexport * from \"./types\"\r\n"
      },
      {
        "name": "legend.tsx",
        "dir": "charts",
        "content": "import { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { ColorPalette, UIColor } from \"./color-theme\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const LegendAnatomy = defineStyleAnatomy({\r\n    legend: cva([\r\n        \"UI-Legend__legend\",\r\n        \"flex flex-wrap overflow-hidden truncate\",\r\n    ]),\r\n    legendItem: cva([\r\n        \"UI-Legend__legendItem\",\r\n        \"inline-flex items-center truncate mr-4\",\r\n    ]),\r\n    dot: cva([\r\n        \"UI-Legend__dot\",\r\n        \"shrink-0\",\r\n        \"flex-none h-3 w-3 bg-gray rounded-full shadow-sm mr-2\",\r\n    ]),\r\n    label: cva([\r\n        \"UI-Legend__label\",\r\n        \"whitespace-nowrap truncate text-sm font-medium text-gray-700 dark:text-gray-300\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LegendItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type LegendItemProps = {\r\n    name: string\r\n    color: UIColor\r\n    dotClass?: string\r\n    labelClass?: string\r\n    legendItemClass?: string\r\n}\r\n\r\nconst LegendItem = ({ name, color, dotClass, legendItemClass, labelClass }: LegendItemProps) => (\r\n    <li className={cn(LegendAnatomy.legendItem(), legendItemClass)}>\r\n        <svg\r\n            className={cn(LegendAnatomy.dot(), dotClass)}\r\n            style={{ color: `var(--${color})` }}\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 8 8\"\r\n        >\r\n            <circle cx={4} cy={4} r={4} />\r\n        </svg>\r\n        <p className={cn(LegendAnatomy.label(), labelClass)}>\r\n            {name}\r\n        </p>\r\n    </li>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Legend\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type LegendProps = React.ComponentPropsWithRef<\"ol\"> & ComponentAnatomy<typeof LegendAnatomy> & {\r\n    categories: string[]\r\n    colors?: UIColor[]\r\n}\r\n\r\nexport const Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {\r\n    const {\r\n        categories,\r\n        colors = ColorPalette,\r\n        className,\r\n        legendClass,\r\n        legendItemClass,\r\n        labelClass,\r\n        dotClass,\r\n        ...rest\r\n    } = props\r\n    return (\r\n        <ol\r\n            ref={ref}\r\n            className={cn(\r\n                LegendAnatomy.legend(),\r\n                legendClass,\r\n                className,\r\n            )}\r\n            {...rest}\r\n        >\r\n            {categories.map((category, idx) => (\r\n                <LegendItem\r\n                    key={`item-${idx}`}\r\n                    name={category}\r\n                    color={colors[idx] ?? \"brand\"}\r\n                    dotClass={dotClass}\r\n                    legendItemClass={legendItemClass}\r\n                    labelClass={labelClass}\r\n                />\r\n            ))}\r\n        </ol>\r\n    )\r\n})\r\n\r\nLegend.displayName = \"Legend\"\r\n"
      },
      {
        "name": "line-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { CartesianGrid, Legend, Line, LineChart as ReChartsLineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"./color-theme\"\r\nimport { BaseChartProps, ChartCurveType } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LineChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type LineChartProps = React.ComponentPropsWithRef<\"div\"> & BaseChartProps & {\r\n    /**\r\n     * The type of curve to use for the line\r\n     */\r\n    curveType?: ChartCurveType\r\n    /**\r\n     * Connect null data points\r\n     */\r\n    connectNulls?: boolean\r\n    /**\r\n     * Angle the x-axis labels\r\n     */\r\n    angledLabels?: boolean\r\n}\r\n\r\n\r\nexport const LineChart: React.FC<LineChartProps> = React.forwardRef<HTMLDivElement, LineChartProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        curveType = \"linear\",\r\n        connectNulls = false,\r\n        angledLabels,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = React.useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            className={cn(\"w-full h-80\", className)}\r\n            {...rest}\r\n        >\r\n            <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\r\n                {data?.length ? (\r\n                    <ReChartsLineChart data={data}>\r\n                        {showGridLines ? (\r\n                            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false} />\r\n                        ) : null}\r\n                        <XAxis\r\n                            hide={!showXAxis}\r\n                            dataKey={index}\r\n                            tick={{ transform: \"translate(0, 8)\" }}\r\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                            style={{\r\n                                fontSize: \".75rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                                color: \"red\",\r\n                            }}\r\n                            interval=\"preserveStartEnd\"\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            padding={{ left: 10, right: 10 }}\r\n                            minTickGap={5}\r\n                            textAnchor={angledLabels ? \"end\" : undefined}\r\n                            angle={angledLabels ? -40 : undefined}\r\n                        />\r\n                        <YAxis\r\n                            width={yAxisWidth}\r\n                            hide={!showYAxis}\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            type=\"number\"\r\n                            domain={yAxisDomain as AxisDomain}\r\n                            tick={{ transform: \"translate(-3, 0)\" }}\r\n                            style={{\r\n                                fontSize: \".8rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                            }}\r\n                            tickFormatter={valueFormatter}\r\n                            allowDecimals={allowDecimals}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                                position={{ y: 0 }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => (\r\n                            <Line\r\n                                key={category}\r\n                                name={category}\r\n                                type={curveType}\r\n                                dataKey={category}\r\n                                stroke={`var(--${categoryColors.get(category)})`}\r\n                                strokeWidth={2}\r\n                                dot={false}\r\n                                isAnimationActive={showAnimation}\r\n                                connectNulls={connectNulls}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n\r\n                    </ReChartsLineChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nLineChart.displayName = \"LineChart\"\r\n"
      },
      {
        "name": "types.ts",
        "dir": "charts",
        "content": "import * as React from \"react\"\r\n\r\nexport type ChartValueFormatter = {\r\n    (value: number): string\r\n}\r\n\r\nexport type ChartCurveType = \"linear\" | \"natural\" | \"step\"\r\n\r\nexport interface BaseChartProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    data: any[] | null | undefined\r\n    categories: string[]\r\n    index: string\r\n    // Choose the color for each category\r\n    colors?: string[]\r\n    // Change the formatting\r\n    valueFormatter?: ChartValueFormatter\r\n    // Show only the first and last elements in the x-axis. Great for smaller charts or sparklines.\r\n    startEndOnly?: boolean\r\n    showXAxis?: boolean\r\n    showYAxis?: boolean\r\n    yAxisWidth?: number\r\n    // Sets an animation to the chart when it is loaded.\r\n    showAnimation?: boolean\r\n    showTooltip?: boolean\r\n    showGradient?: boolean\r\n    showLegend?: boolean\r\n    showGridLines?: boolean\r\n    // Adjusts the minimum value in relation to the magnitude of the data.\r\n    autoMinValue?: boolean\r\n    // Sets the minimum value of the shown chart data.\r\n    minValue?: number\r\n    // Sets the maximum value of the shown chart data.\r\n    maxValue?: number\r\n    // Controls if the ticks of a numeric axis are displayed as decimals or not.\r\n    allowDecimals?: boolean\r\n    // The displayed text when the data is empty.\r\n    noDataText?: string\r\n}\r\n"
      },
      {
        "name": "utils.ts",
        "dir": "charts",
        "content": "import { ChartValueFormatter } from \"../charts\"\r\nimport { UIColor } from \"./color-theme\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Chart Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const constructCategoryColors = (\r\n    categories: string[],\r\n    colors: UIColor[],\r\n): Map<string, UIColor> => {\r\n    const categoryColors = new Map<string, UIColor>()\r\n    categories.forEach((category, idx) => {\r\n        categoryColors.set(category, colors[idx] ?? \"gray\")\r\n    })\r\n    return categoryColors\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const getYAxisDomain = (\r\n    autoMinValue: boolean,\r\n    minValue: number | undefined,\r\n    maxValue: number | undefined,\r\n) => {\r\n    const minDomain = autoMinValue ? \"auto\" : minValue ?? 0\r\n    const maxDomain = maxValue ?? \"auto\"\r\n    return [minDomain, maxDomain]\r\n}\r\n\r\nexport const defaultValueFormatter: ChartValueFormatter = (value: number) => value.toString()\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChart Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const parseChartData = (data: any[], colors: UIColor[]) =>\r\n    data.map((dataPoint: any, idx: number) => {\r\n        const baseColor = idx < colors.length ? colors[idx] : \"brand\"\r\n        return {\r\n            ...dataPoint,\r\n            // explicitly adding color key if not present for tooltip coloring\r\n            color: baseColor,\r\n            fill: `var(--${baseColor})`, // Color\r\n        }\r\n    })\r\n\r\nconst sumNumericArray = (arr: number[]) =>\r\n    arr.reduce((prefixSum, num) => prefixSum + num, 0)\r\n\r\nconst calculateDefaultLabel = (data: any[], category: string) =>\r\n    sumNumericArray(data.map((dataPoint) => dataPoint[category]))\r\n\r\nexport const parseChartLabelInput = (\r\n    labelInput: string | undefined,\r\n    valueFormatter: ChartValueFormatter,\r\n    data: any[],\r\n    category: string,\r\n) => (labelInput ? labelInput : valueFormatter(calculateDefaultLabel(data, category)))\r\n"
      }
    ]
  },
  {
    "component": "checkbox",
    "name": "Checkbox",
    "dependencies": [
      [
        "@radix-ui/react-checkbox",
        "^1.0.4",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "checkbox-group.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\r\n\r\nimport { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { Checkbox, CheckboxProps } from \".\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { hiddenInputStyles } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CheckboxGroup\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype CheckboxGroupContextValue = {\r\n    group_size: CheckboxProps[\"size\"]\r\n}\r\n\r\nexport const __CheckboxGroupContext = React.createContext<CheckboxGroupContextValue | null>(null)\r\n\r\nexport type CheckboxGroupProps = BasicFieldOptions & {\r\n    /**\r\n     * The value of the checkbox group.\r\n     */\r\n    value?: string[]\r\n    /**\r\n     * The default value of the checkbox group when uncontrolled.\r\n     */\r\n    defaultValue?: string[]\r\n    /**\r\n     * Callback invoked when the value of the checkbox group changes.\r\n     */\r\n    onValueChange?: (value: string[]) => void\r\n    /**\r\n     * The size of the checkboxes.\r\n     */\r\n    size?: CheckboxProps[\"size\"]\r\n    /**\r\n     * The options of the checkbox group.\r\n     */\r\n    options: { value: string, label?: React.ReactNode, disabled?: boolean, readonly?: boolean }[]\r\n    /**\r\n     * Class names applied to the container.\r\n     */\r\n    stackClass?: string\r\n    /**\r\n     * Class names applied to the checkbox container.\r\n     */\r\n    itemContainerClass?: string\r\n    /**\r\n     * Class names applied to the checkbox label.\r\n     */\r\n    itemLabelClass?: string\r\n    /**\r\n     * Class names applied to the checkbox button.\r\n     */\r\n    itemClass?: string\r\n    /**\r\n     * Class names applied to the checkbox check icon.\r\n     */\r\n    itemCheckIconClass?: string\r\n}\r\n\r\nexport const CheckboxGroup = React.forwardRef<HTMLInputElement, CheckboxGroupProps>((props, ref) => {\r\n\r\n    const [{\r\n        value: controlledValue,\r\n        defaultValue = [],\r\n        onValueChange,\r\n        stackClass,\r\n        itemLabelClass,\r\n        itemClass,\r\n        itemContainerClass,\r\n        itemCheckIconClass,\r\n        options,\r\n        size = undefined,\r\n    }, basicFieldProps] = extractBasicFieldProps<CheckboxGroupProps>(props, React.useId())\r\n\r\n    const [value, setValue] = React.useState<string[]>(controlledValue ?? defaultValue)\r\n\r\n    const handleUpdateValue = React.useCallback((v: string) => {\r\n        return (checked: boolean | \"indeterminate\") => {\r\n            setValue(p => {\r\n                const newArr = checked === true\r\n                    ? [...p, ...(p.includes(v) ? [] : [v])]\r\n                    : checked === false\r\n                        ? p.filter(v1 => v1 !== v)\r\n                        : [...p]\r\n                onValueChange?.(newArr)\r\n                return newArr\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (controlledValue !== undefined) {\r\n            setValue(controlledValue)\r\n        }\r\n    }, [controlledValue])\r\n\r\n\r\n    return (\r\n        <__CheckboxGroupContext.Provider\r\n            value={{\r\n                group_size: size,\r\n            }}\r\n        >\r\n            <BasicField {...basicFieldProps}>\r\n                <div className={cn(\"UI-CheckboxGroup__stack space-y-1\", stackClass)}>\r\n                    {options.map((opt) => (\r\n                        <Checkbox\r\n                            key={opt.value}\r\n                            label={opt.label}\r\n                            value={value.includes(opt.value)}\r\n                            onValueChange={handleUpdateValue(opt.value)}\r\n                            hideError\r\n                            error={basicFieldProps.error}\r\n                            className={itemClass}\r\n                            labelClass={itemLabelClass}\r\n                            containerClass={itemContainerClass}\r\n                            checkIconClass={itemCheckIconClass}\r\n                            disabled={basicFieldProps.disabled || opt.disabled}\r\n                            readonly={basicFieldProps.readonly || opt.readonly}\r\n                            tabIndex={0}\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n                <input\r\n                    ref={ref}\r\n                    type=\"text\"\r\n                    id={basicFieldProps.name}\r\n                    name={basicFieldProps.name}\r\n                    className={hiddenInputStyles}\r\n                    value={basicFieldProps.required\r\n                        ? (!!value.length ? JSON.stringify(value) : \"\")\r\n                        : JSON.stringify(value)}\r\n                    aria-hidden=\"true\"\r\n                    required={basicFieldProps.required}\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                />\r\n\r\n            </BasicField>\r\n        </__CheckboxGroupContext.Provider>\r\n    )\r\n\r\n})\r\n\r\nCheckboxGroup.displayName = \"CheckboxGroup\"\r\n"
      },
      {
        "name": "checkbox.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\r\n\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { __CheckboxGroupContext } from \"../checkbox\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { mergeRefs } from \"../core/utils\"\r\nimport { hiddenInputStyles } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CheckboxAnatomy = defineStyleAnatomy({\r\n    container: cva(\"UI-Checkbox__container inline-flex gap-2 items-center\"),\r\n    root: cva([\r\n        \"UI-Checkbox__root\",\r\n        \"appearance-none peer block relative overflow-hidden transition h-5 w-5 shrink-0 text-white rounded-md ring-offset-1 border ring-offset-[--background]\",\r\n        \"border-gray-300 dark:border-gray-700\",\r\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] disabled:cursor-not-allowed data-[disabled=true]:opacity-50\",\r\n        \"data-[state=unchecked]:bg-white dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\r\n        \"data-[state=unchecked]:hover:bg-gray-100 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\r\n        \"data-[state=checked]:bg-brand dark:data-[state=checked]:bg-brand data-[state=checked]:border-brand\", // Checked\r\n        \"data-[state=indeterminate]:bg-[--muted] dark:data-[state=indeterminate]:bg-gray-700 data-[state=indeterminate]:text-white data-[state=indeterminate]:border-transparent\", // Checked\r\n        \"data-[error=true]:border-red-500 data-[error=true]:dark:border-red-500 data-[error=true]:data-[state=checked]:border-red-500 data-[error=true]:dark:data-[state=checked]:border-red-500\", // Error\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                md: \"h-5 w-5\",\r\n                lg: \"h-6 w-6\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    label: cva([\r\n        \"UI-Checkbox_label\",\r\n        \"font-normal\",\r\n        \"data-[disabled=true]:opacity-50\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                md: \"text-md\",\r\n                lg: \"text-lg\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    indicator: cva([\r\n        \"UI-Checkbox__indicator\",\r\n        \"flex h-full w-full items-center justify-center relative\",\r\n    ]),\r\n    checkIcon: cva(\"UI-Checkbox__checkIcon absolute\", {\r\n        variants: {\r\n            size: {\r\n                md: \"h-4 w-4\",\r\n                lg: \"h-5 w-5\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Checkbox\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CheckboxProps =\r\n    BasicFieldOptions &\r\n    VariantProps<typeof CheckboxAnatomy.label> &\r\n    ComponentAnatomy<typeof CheckboxAnatomy> &\r\n    Omit<React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>,\r\n        \"value\" | \"checked\" | \"disabled\" | \"required\" | \"onCheckedChange\" | \"defaultValue\"> & {\r\n    /**\r\n     * If true, no error message will be shown when the field is invalid.\r\n     */\r\n    hideError?: boolean\r\n    /**\r\n     * The size of the checkbox.\r\n     */\r\n    value?: boolean | \"indeterminate\"\r\n    /**\r\n     * Default value when uncontrolled\r\n     */\r\n    defaultValue?: boolean | \"indeterminate\"\r\n    /**\r\n     * Callback fired when the value changes\r\n     */\r\n    onValueChange?: (value: boolean | \"indeterminate\") => void\r\n    /**\r\n     * Ref to the input element\r\n     */\r\n    inputRef?: React.Ref<HTMLInputElement>,\r\n}\r\n\r\nexport const Checkbox = React.forwardRef<HTMLButtonElement, CheckboxProps>((props, ref) => {\r\n\r\n    const [{\r\n        className,\r\n        hideError,\r\n        containerClass,\r\n        checkIconClass,\r\n        labelClass,\r\n        indicatorClass,\r\n        onValueChange,\r\n        defaultValue,\r\n        value: controlledValue,\r\n        size,\r\n        inputRef,\r\n        ...rest\r\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps<CheckboxProps>(props, React.useId())\r\n\r\n    const groupContext = React.useContext(__CheckboxGroupContext)\r\n\r\n    const _size = groupContext?.group_size ?? size\r\n\r\n    const isFirst = React.useRef(true)\r\n\r\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\r\n\r\n    const [_value, _setValue] = React.useState<boolean | \"indeterminate\">(controlledValue ?? defaultValue ?? false)\r\n\r\n    const handleOnValueChange = React.useCallback((value: boolean) => {\r\n        _setValue(value)\r\n        onValueChange?.(value)\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (!defaultValue || !isFirst.current) {\r\n            _setValue(controlledValue ?? false)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n    return (\r\n        <BasicField\r\n            fieldClass=\"flex gap-2\"\r\n            {...basicFieldProps}\r\n            error={hideError ? undefined : basicFieldProps.error} // The error message hidden when `hideError` is true\r\n        >\r\n            <label\r\n                className={cn(\r\n                    CheckboxAnatomy.container(),\r\n                    containerClass,\r\n                )}\r\n                htmlFor={basicFieldProps.id}\r\n            >\r\n                <CheckboxPrimitive.Root\r\n                    ref={mergeRefs([buttonRef, ref])}\r\n                    id={basicFieldProps.id}\r\n                    className={cn(CheckboxAnatomy.root({ size: _size }), className)}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-error={!!basicFieldProps.error}\r\n                    aria-readonly={basicFieldProps.readonly}\r\n                    data-readonly={basicFieldProps.readonly}\r\n                    checked={_value}\r\n                    onCheckedChange={handleOnValueChange}\r\n                    {...rest}\r\n                >\r\n                    <CheckboxPrimitive.CheckboxIndicator className={cn(CheckboxAnatomy.indicator(), indicatorClass)}>\r\n                        {(_value !== \"indeterminate\") && <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            viewBox=\"0 0 16 16\"\r\n                            stroke=\"currentColor\"\r\n                            fill=\"currentColor\"\r\n                            className={cn(CheckboxAnatomy.checkIcon({ size: _size }), checkIconClass)}\r\n                        >\r\n                            <path\r\n                                d=\"M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z\"\r\n                            />\r\n                        </svg>}\r\n\r\n                        {_value === \"indeterminate\" && <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"3\"\r\n                            className={cn(CheckboxAnatomy.checkIcon({ size: _size }), checkIconClass)}\r\n                        >\r\n                            <line x1=\"5\" x2=\"19\" y1=\"12\" y2=\"12\" />\r\n                        </svg>}\r\n                    </CheckboxPrimitive.CheckboxIndicator>\r\n                </CheckboxPrimitive.Root>\r\n                {!!label &&\r\n                    <label\r\n                        className={cn(CheckboxAnatomy.label({ size: _size }), labelClass)}\r\n                        htmlFor={basicFieldProps.id}\r\n                        data-disabled={basicFieldProps.disabled}\r\n                    >\r\n                        {label}\r\n                    </label>\r\n                }\r\n\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"checkbox\"\r\n                    name={basicFieldProps.name}\r\n                    className={hiddenInputStyles}\r\n                    value={_value === \"indeterminate\" ? \"indeterminate\" : _value ? \"on\" : \"off\"}\r\n                    checked={basicFieldProps.required ? _value === true : true}\r\n                    aria-hidden=\"true\"\r\n                    required={basicFieldProps.required}\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                    onFocusCapture={() => buttonRef.current?.focus()}\r\n                />\r\n            </label>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nCheckbox.displayName = \"Checkbox\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "checkbox",
        "content": "export * from \"./checkbox\"\r\nexport * from \"./checkbox-group\"\r\n"
      }
    ]
  },
  {
    "component": "collapsible",
    "name": "Collapsible",
    "dependencies": [
      [
        "@radix-ui/react-collapsible",
        "^1.0.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "collapsible.tsx",
        "dir": "collapsible",
        "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nexport const Collapsible = CollapsiblePrimitive.Root\n\nCollapsible.displayName = \"Collapsible\"\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleTrigger>\n\nexport const CollapsibleTrigger = React.forwardRef<HTMLButtonElement, CollapsibleTriggerProps>((props, ref) => {\n    const { children, ...rest } = props\n\n    return (\n        <CollapsiblePrimitive.CollapsibleTrigger\n            ref={ref}\n            asChild\n            {...rest}\n        >\n            {children}\n        </CollapsiblePrimitive.CollapsibleTrigger>\n    )\n})\n\nCollapsibleTrigger.displayName = \"CollapsibleTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleContent>\n\nexport const CollapsibleContent = React.forwardRef<HTMLDivElement, CollapsibleContentProps>((props, ref) => {\n\n    return (\n        <CollapsiblePrimitive.CollapsibleContent\n            ref={ref}\n            {...props}\n        />\n    )\n})\n\nCollapsibleContent.displayName = \"CollapsibleContent\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "collapsible",
        "content": "export * from \"./collapsible\"\n"
      }
    ]
  },
  {
    "component": "combobox",
    "name": "Combobox",
    "dependencies": [
      [
        "fast-deep-equal",
        "^3.1.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "command",
      "input",
      "popover"
    ],
    "files": [
      {
        "name": "combobox.tsx",
        "dir": "combobox",
        "content": "\"use client\"\r\n\r\nimport { mergeRefs } from \"../core/utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandProps } from \"../command\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\nimport { Popover } from \"../popover\"\r\nimport equal from \"fast-deep-equal\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ComboboxAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Combobox__root\",\r\n        \"justify-between h-auto\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"min-h-8 px-2 py-1 text-sm\",\r\n                md: \"min-h-10 px-3 py-2 \",\r\n                lg: \"min-h-12 px-4 py-3 text-md\",\r\n            },\r\n        },\r\n    }),\r\n    popover: cva([\r\n        \"UI-Combobox__popover\",\r\n        \"w-[--radix-popover-trigger-width] p-0\",\r\n    ]),\r\n    checkIcon: cva([\r\n        \"UI-Combobox__checkIcon\",\r\n        \"h-4 w-4\",\r\n        \"data-[selected=true]:opacity-100 data-[selected=false]:opacity-0\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Combobox__item\",\r\n        \"flex gap-1 items-center bg-gray-100 dark:bg-gray-800 px-2 pr-1 rounded-[--radius] line-clamp-1 max-w-96\",\r\n    ]),\r\n    placeholder: cva([\r\n        \"UI-Combobox__placeholder\",\r\n        \"text-[--muted] truncate\",\r\n    ]),\r\n    inputValuesContainer: cva([\r\n        \"UI-Combobox__inputValuesContainer\",\r\n        \"grow flex flex-wrap gap-2\",\r\n    ]),\r\n    chevronIcon: cva([\r\n        \"UI-Combobox__chevronIcon\",\r\n        \"ml-2 h-4 w-4 shrink-0 opacity-50\",\r\n    ]),\r\n    removeItemButton: cva([\r\n        \"UI-Badge__removeItemButton\",\r\n        \"text-lg cursor-pointer transition ease-in hover:opacity-60\",\r\n    ]),\r\n})\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Combobox\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ComboboxProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\"> &\r\n    BasicFieldOptions &\r\n    InputStyling &\r\n    ComponentAnatomy<typeof ComboboxAnatomy> & {\r\n    /**\r\n     * The selected values\r\n     */\r\n    value?: string[]\r\n    /**\r\n     * Callback fired when the selected values change\r\n     */\r\n    onValueChange?: (value: string[]) => void\r\n    /**\r\n     * Callback fired when the search input changes\r\n     */\r\n    onTextChange?: (value: string) => void\r\n    /**\r\n     * Additional props for the command component\r\n     */\r\n    commandProps?: CommandProps\r\n    /**\r\n     * The options to display in the dropdown\r\n     */\r\n    options: { value: string, textValue?: string, label: React.ReactNode }[]\r\n    /**\r\n     * The message to display when there are no options\r\n     */\r\n    emptyMessage: React.ReactNode\r\n    /**\r\n     * The placeholder text\r\n     */\r\n    placeholder?: string\r\n    /**\r\n     * Allow multiple values to be selected\r\n     */\r\n    multiple?: boolean\r\n    /**\r\n     * Default value when uncontrolled\r\n     */\r\n    defaultValue?: string[]\r\n    /**\r\n     * Ref to the input element\r\n     */\r\n    inputRef?: React.Ref<HTMLInputElement>\r\n}\r\n\r\nexport const Combobox = React.forwardRef<HTMLButtonElement, ComboboxProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<ComboboxProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        popoverClass,\r\n        checkIconClass,\r\n        itemClass,\r\n        placeholderClass,\r\n        inputValuesContainerClass,\r\n        chevronIconClass,\r\n        removeItemButtonClass,\r\n        /**/\r\n        commandProps,\r\n        options,\r\n        emptyMessage,\r\n        placeholder,\r\n        value: controlledValue,\r\n        onValueChange,\r\n        onTextChange,\r\n        multiple = false,\r\n        defaultValue,\r\n        inputRef,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<ComboboxProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\r\n\r\n    const valueRef = React.useRef<string[]>(controlledValue || defaultValue || [])\r\n    const [value, setValue] = React.useState<string[]>(controlledValue || defaultValue || [])\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleUpdateValue = React.useCallback((value: string[]) => {\r\n        setValue(value)\r\n        valueRef.current = value\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (controlledValue !== undefined && !equal(controlledValue, valueRef.current)) {\r\n            handleUpdateValue(controlledValue)\r\n        }\r\n    }, [controlledValue])\r\n\r\n    React.useEffect(() => {\r\n        onValueChange?.(value)\r\n    }, [value])\r\n\r\n    const selectedOptions = options.filter((option) => value.includes(option.value))\r\n\r\n    const selectedValues = (\r\n        (!!value.length && !!selectedOptions.length) ?\r\n            multiple ? selectedOptions.map((option) => <div key={option.value} className={cn(ComboboxAnatomy.item(), itemClass)}>\r\n                <span className=\"truncate\">{option.textValue || option.value}</span>\r\n                <span\r\n                    className={cn(ComboboxAnatomy.removeItemButton(), \"rounded-full\", removeItemButtonClass)} onClick={(e) => {\r\n                    e.preventDefault()\r\n                    handleUpdateValue(value.filter((v) => v !== option.value))\r\n                    setOpen(false)\r\n                }}\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\r\n                        fill=\"currentColor\"\r\n                    >\r\n                        <path\r\n                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\r\n                        ></path>\r\n                    </svg>\r\n                </span>\r\n            </div>) : <span className=\"truncate\">{selectedOptions[0].label}</span>\r\n            : <span className={cn(ComboboxAnatomy.placeholder(), placeholderClass)}>{placeholder}</span>\r\n    )\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <Popover\r\n                    open={open}\r\n                    onOpenChange={setOpen}\r\n                    className={cn(\r\n                        ComboboxAnatomy.popover(),\r\n                        popoverClass,\r\n                    )}\r\n                    trigger={<button\r\n                        ref={mergeRefs([buttonRef, ref])}\r\n                        id={basicFieldProps.id}\r\n                        role=\"combobox\"\r\n                        aria-expanded={open}\r\n                        className={cn(\r\n                            InputAnatomy.root({\r\n                                size,\r\n                                intent,\r\n                                hasError: !!basicFieldProps.error,\r\n                                isDisabled: !!basicFieldProps.disabled,\r\n                                isReadonly: !!basicFieldProps.readonly,\r\n                                hasRightAddon: !!rightAddon,\r\n                                hasRightIcon: !!rightIcon,\r\n                                hasLeftAddon: !!leftAddon,\r\n                                hasLeftIcon: !!leftIcon,\r\n                            }),\r\n                            ComboboxAnatomy.root({\r\n                                size,\r\n                            }),\r\n                        )}\r\n                        {...rest}\r\n                    >\r\n                        <div className={cn(ComboboxAnatomy.inputValuesContainer())}>\r\n                            {selectedValues}\r\n                        </div>\r\n                        <div className=\"flex items-center\">\r\n                            {(!!value.length && !!selectedOptions.length && !multiple) && (\r\n                                <span\r\n                                    className={cn(ComboboxAnatomy.removeItemButton(), removeItemButtonClass)} onClick={(e) => {\r\n                                    e.preventDefault()\r\n                                    handleUpdateValue([])\r\n                                    setOpen(false)\r\n                                }}\r\n                                >\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\r\n                                        fill=\"currentColor\"\r\n                                    >\r\n                                        <path\r\n                                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\r\n                                        ></path>\r\n                                    </svg>\r\n                                </span>\r\n                            )}\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                fill=\"none\"\r\n                                stroke=\"currentColor\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                className={cn(\r\n                                    ComboboxAnatomy.chevronIcon(),\r\n                                    chevronIconClass,\r\n                                )}\r\n                            >\r\n                                <path d=\"m7 15 5 5 5-5\" />\r\n                                <path d=\"m7 9 5-5 5 5\" />\r\n                            </svg>\r\n                        </div>\r\n                    </button>}\r\n                >\r\n                    <Command\r\n                        inputContainerClass=\"py-1\"\r\n                        {...commandProps}\r\n                    >\r\n                        <CommandInput\r\n                            placeholder={placeholder}\r\n                            onValueChange={onTextChange}\r\n                        />\r\n                        <CommandList>\r\n                            <CommandEmpty>{emptyMessage}</CommandEmpty>\r\n                            <CommandGroup>\r\n                                {options.map((option) => (\r\n                                    <CommandItem\r\n                                        key={option.value}\r\n                                        value={option.textValue || option.value}\r\n                                        onSelect={(currentValue) => {\r\n                                            const _option = options.find(n => (n.textValue || n.value).toLowerCase() === currentValue.toLowerCase())\r\n                                            if (_option) {\r\n                                                if (!multiple) {\r\n                                                    handleUpdateValue(value.includes(_option.value) ? [] : [_option.value])\r\n                                                } else {\r\n                                                    handleUpdateValue(\r\n                                                        !value.includes(_option.value)\r\n                                                            ? [...value, _option.value]\r\n                                                            : value.filter((v) => v !== _option.value),\r\n                                                    )\r\n                                                }\r\n                                            }\r\n                                            setOpen(false)\r\n                                        }}\r\n                                        leftIcon={\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                fill=\"none\"\r\n                                                stroke=\"currentColor\"\r\n                                                strokeWidth=\"2\"\r\n                                                strokeLinecap=\"round\"\r\n                                                strokeLinejoin=\"round\"\r\n                                                className={cn(\r\n                                                    ComboboxAnatomy.checkIcon(),\r\n                                                    checkIconClass,\r\n                                                )}\r\n                                                data-selected={value.includes(option.value)}\r\n                                            >\r\n                                                <path d=\"M20 6 9 17l-5-5\" />\r\n                                            </svg>\r\n                                        }\r\n                                    >\r\n                                        {option.label}\r\n                                    </CommandItem>\r\n                                ))}\r\n                            </CommandGroup>\r\n                        </CommandList>\r\n                    </Command>\r\n                </Popover>\r\n\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    name={basicFieldProps.name}\r\n                    className={hiddenInputStyles}\r\n                    value={basicFieldProps.required ? (!!value.length ? JSON.stringify(value) : \"\") : JSON.stringify(value)}\r\n                    aria-hidden=\"true\"\r\n                    required={basicFieldProps.required}\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                    onFocusCapture={() => buttonRef.current?.focus()}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n})\r\n\r\nCombobox.displayName = \"Combobox\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "combobox",
        "content": "export * from \"./combobox\"\r\n"
      }
    ]
  },
  {
    "component": "command",
    "name": "Command",
    "dependencies": [
      [
        "cmdk",
        "^0.2.0",
        ""
      ]
    ],
    "family": [
      "input"
    ],
    "files": [
      {
        "name": "command.tsx",
        "dir": "command",
        "content": "\"use client\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Command as CommandPrimitive } from \"cmdk\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { InputAnatomy } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CommandAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Command__root\",\r\n        \"flex h-full w-full flex-col overflow-hidden rounded-md bg-[--paper] text-[--foreground]\",\r\n    ]),\r\n    inputContainer: cva([\r\n        \"UI-Command__input\",\r\n        \"flex items-center px-3 py-2\",\r\n        \"cmdk-input-wrapper\",\r\n    ]),\r\n    inputIcon: cva([\r\n        \"UI-Command__inputIcon\",\r\n        \"mr-2 h-5 w-5 shrink-0 opacity-50\",\r\n    ]),\r\n    list: cva([\r\n        \"UI-Command__list\",\r\n        \"max-h-64 overflow-y-auto overflow-x-hidden\",\r\n    ]),\r\n    empty: cva([\r\n        \"UI-Command__empty\",\r\n        \"py-6 text-center text-base text-[--muted]\",\r\n    ]),\r\n    group: cva([\r\n        \"UI-Command__group\",\r\n        \"overflow-hidden p-1 text-[--foreground]\",\r\n        \"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-sm [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-[--muted]\",\r\n    ]),\r\n    separator: cva([\r\n        \"UI-Command__separator\",\r\n        \"-mx-1 h-px bg-[--border]\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Command__item\",\r\n        \"relative flex cursor-default select-none items-center rounded-[--radius] px-2 py-1.5 text-base outline-none\",\r\n        \"aria-selected:bg-[--subtle] data-disabled:pointer-events-none data-disabled:opacity-50\",\r\n    ]),\r\n    itemIconContainer: cva([\r\n        \"UI-Command__itemIconContainer\",\r\n        \"mr-2 text-base shrink-0 w-4\",\r\n    ]),\r\n    shortcut: cva([\r\n        \"UI-Command__shortcut\",\r\n        \"ml-auto text-xs tracking-widest text-[--muted]\",\r\n    ]),\r\n})\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Command\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst __CommandAnatomyContext = React.createContext<CommandAnatomyProps>({})\r\n\r\ntype CommandAnatomyProps = ComponentAnatomy<typeof CommandAnatomy>\r\n\r\nexport type CommandProps = React.ComponentPropsWithoutRef<typeof CommandPrimitive> & CommandAnatomyProps\r\n\r\nexport const Command = React.forwardRef<HTMLDivElement, CommandProps>((props, ref) => {\r\n    const {\r\n        className,\r\n        inputContainerClass,\r\n        inputIconClass,\r\n        listClass,\r\n        emptyClass,\r\n        groupClass,\r\n        separatorClass,\r\n        itemClass,\r\n        itemIconContainerClass,\r\n        shortcutClass,\r\n        loop = true,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <__CommandAnatomyContext.Provider\r\n            value={{\r\n                inputContainerClass,\r\n                inputIconClass,\r\n                listClass,\r\n                emptyClass,\r\n                groupClass,\r\n                separatorClass,\r\n                itemClass,\r\n                itemIconContainerClass,\r\n                shortcutClass,\r\n            }}\r\n        >\r\n            <CommandPrimitive\r\n                ref={ref}\r\n                className={cn(CommandAnatomy.root(), className)}\r\n                loop={loop}\r\n                {...rest}\r\n            />\r\n        </__CommandAnatomyContext.Provider>\r\n    )\r\n})\r\nCommand.displayName = CommandPrimitive.displayName\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandInputProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n    & Pick<ComponentAnatomy<typeof CommandAnatomy>, \"inputContainerClass\" | \"inputIconClass\">\r\n\r\nexport const CommandInput = React.forwardRef<HTMLInputElement, CommandInputProps>((props, ref) => {\r\n    const {\r\n        className,\r\n        inputContainerClass,\r\n        inputIconClass,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        inputContainerClass: _inputContainerClass,\r\n        inputIconClass: _inputIconClass,\r\n    } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <div className={cn(CommandAnatomy.inputContainer(), _inputContainerClass, inputContainerClass)} cmdk-input-wrapper=\"\">\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"24\"\r\n                height=\"24\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                className={cn(CommandAnatomy.inputIcon(), _inputIconClass, inputIconClass)}\r\n            >\r\n                <circle cx=\"11\" cy=\"11\" r=\"8\" />\r\n                <path d=\"m21 21-4.3-4.3\" />\r\n            </svg>\r\n            <CommandPrimitive.Input\r\n                ref={ref}\r\n                className={cn(InputAnatomy.root({\r\n                    intent: \"unstyled\",\r\n                    size: \"sm\",\r\n                    isDisabled: rest.disabled,\r\n                }), className)}\r\n                {...rest}\r\n            />\r\n        </div>\r\n    )\r\n})\r\nCommandInput.displayName = \"CommandInput\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandList\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandListProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n\r\nexport const CommandList = React.forwardRef<HTMLDivElement, CommandListProps>((props, ref) => {\r\n    const { className, ...rest } = props\r\n\r\n    const { listClass } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <CommandPrimitive.List\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.list(), listClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n})\r\nCommandList.displayName = \"CommandList\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandEmpty\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandEmptyProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n\r\nexport const CommandEmpty = React.forwardRef<HTMLDivElement, CommandEmptyProps>((props, ref) => {\r\n    const { className, ...rest } = props\r\n\r\n    const { emptyClass } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <CommandPrimitive.Empty\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.empty(), emptyClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n})\r\nCommandEmpty.displayName = \"CommandEmpty\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandGroup\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandGroupProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n\r\nexport const CommandGroup = React.forwardRef<HTMLDivElement, CommandGroupProps>((props, ref) => {\r\n    const { className, ...rest } = props\r\n\r\n    const { groupClass } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <CommandPrimitive.Group\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.group(), groupClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n})\r\nCommandGroup.displayName = \"CommandGroup\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandSeparator\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandSeparatorProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n\r\nexport const CommandSeparator = React.forwardRef<HTMLDivElement, CommandSeparatorProps>((props, ref) => {\r\n    const { className, ...rest } = props\r\n\r\n    const { separatorClass } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <CommandPrimitive.Separator\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.separator(), separatorClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n})\r\nCommandSeparator.displayName = \"CommandSeparator\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandItemProps =\r\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n    & Pick<ComponentAnatomy<typeof CommandAnatomy>, \"itemIconContainerClass\">\r\n    & { leftIcon?: React.ReactNode }\r\n\r\nexport const CommandItem = React.forwardRef<HTMLDivElement, CommandItemProps>((props, ref) => {\r\n    const { className, itemIconContainerClass, leftIcon, children, ...rest } = props\r\n\r\n    const {\r\n        itemClass,\r\n        itemIconContainerClass: _itemIconContainerClass,\r\n    } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <CommandPrimitive.Item\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.item(), itemClass, className)}\r\n            {...rest}\r\n        >\r\n            {leftIcon && (\r\n                <span className={cn(CommandAnatomy.itemIconContainer(), _itemIconContainerClass, itemIconContainerClass)}>\r\n                    {leftIcon}\r\n                </span>\r\n            )}\r\n            {children}\r\n        </CommandPrimitive.Item>\r\n    )\r\n})\r\nCommandItem.displayName = \"CommandItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CommandShortcut\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type CommandShortcutProps = React.ComponentPropsWithoutRef<\"span\">\r\n\r\nexport const CommandShortcut = React.forwardRef<HTMLSpanElement, CommandShortcutProps>((props, ref) => {\r\n    const { className, ...rest } = props\r\n\r\n    const { shortcutClass } = React.useContext(__CommandAnatomyContext)\r\n\r\n    return (\r\n        <span\r\n            ref={ref}\r\n            className={cn(CommandAnatomy.shortcut(), shortcutClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n})\r\nCommandShortcut.displayName = \"CommandShortcut\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "command",
        "content": "export * from \"./command\"\r\n"
      }
    ]
  },
  {
    "component": "core",
    "name": "Core",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "hooks.ts",
        "dir": "core",
        "content": "import * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * useEventListener\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useEventListener<\n    KW extends keyof WindowEventMap,\n    KH extends keyof HTMLElementEventMap,\n    KM extends keyof MediaQueryListEventMap,\n    T extends HTMLElement | MediaQueryList | void = void,\n>(\n    eventName: KW | KH | KM,\n    handler: (\n        event:\n            | WindowEventMap[KW]\n            | HTMLElementEventMap[KH]\n            | MediaQueryListEventMap[KM]\n            | Event,\n    ) => void,\n    element?: React.RefObject<T>,\n    options?: boolean | AddEventListenerOptions,\n) {\n    // Create a ref that stores handler\n    const savedHandler = React.useRef(handler)\n\n    useIsomorphicLayoutEffect(() => {\n        savedHandler.current = handler\n    }, [handler])\n\n    React.useEffect(() => {\n        // Define the listening target\n        const targetElement: T | Window = element?.current ?? window\n\n        if (!(targetElement && targetElement.addEventListener)) return\n\n        // Create event listener that calls handler function stored in ref\n        const listener: typeof handler = event => savedHandler.current(event)\n\n        targetElement.addEventListener(eventName, listener, options)\n\n        // Remove event listener on cleanup\n        return () => {\n            targetElement.removeEventListener(eventName, listener, options)\n        }\n    }, [eventName, element, options])\n}\n\n\n/* -------------------------------------------------------------------------------------------------\n * useIsomorphicLayoutEffect\n * -----------------------------------------------------------------------------------------------*/\n\nexport const useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? React.useLayoutEffect : React.useEffect\n\n/* -------------------------------------------------------------------------------------------------\n * useUpdateEffect\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useUpdateEffect(effect: React.EffectCallback, deps?: React.DependencyList) {\n    const isInitialMount = React.useRef(true)\n\n    React.useEffect(() => {\n        if (isInitialMount.current) {\n            isInitialMount.current = false\n        } else {\n            return effect()\n        }\n    }, deps)\n}\n"
      },
      {
        "name": "styling.ts",
        "dir": "core",
        "content": "import { cva } from \"class-variance-authority\"\r\nimport { ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport type Anatomy = { [key: string]: ReturnType<typeof cva> }\r\n\r\n// export type ComponentAnatomy<T extends Anatomy> = {\r\n//     [K in keyof T as `${string & K}Class`]?: string\r\n// }\r\n\r\nexport type ComponentAnatomy<T extends Anatomy> = {\r\n    [K in keyof T as K extends \"root\" ? never : `${string & K}Class`]?: string;\r\n}\r\n\r\n/**\r\n * @example\r\n * const ComponentAnatomy = defineStyleAnatomy({\r\n *    label: cva(null, {\r\n *       variants: {\r\n *          intent: {\r\n *             \"success\": \"\",\r\n *             \"alert\": \"\",\r\n *          },\r\n *       },\r\n *    }),\r\n *    ...\r\n * })\r\n *\r\n * type ComponentProps = ComponentWithAnatomy<typeof ComponentAnatomy>\r\n *\r\n * const MyComponent = React.forwardRef((props, forwardedRef) => {\r\n *   const { controlClass, ...rest }: ComponentProps = props\r\n *\r\n *   return (\r\n *      <div\r\n *          className={cn(ComponentAnatomy.control({ intent: \"success\" }, controlClass))}\r\n *          ref={forwardedRef}\r\n *      />\r\n *   )\r\n * })\r\n */\r\nexport function defineStyleAnatomy<A extends Anatomy = Anatomy>(config: A) {\r\n    return config\r\n}\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n"
      },
      {
        "name": "utils.ts",
        "dir": "core",
        "content": "import type * as React from \"react\"\r\n\r\nexport function mergeRefs<T = any>(\r\n    refs: Array<React.MutableRefObject<T> | React.LegacyRef<T> | undefined | null>,\r\n): React.RefCallback<T> {\r\n    return (value) => {\r\n        refs.forEach((ref) => {\r\n            if (typeof ref === \"function\") {\r\n                ref(value)\r\n            } else if (ref != null) {\r\n                (ref as React.MutableRefObject<T | null>).current = value\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const isEmpty = (obj: any) => [Object, Array].includes((obj || {}).constructor) && !Object.entries((obj || {})).length\r\n\r\n"
      }
    ]
  },
  {
    "component": "currency-input",
    "name": "CurrencyInput",
    "dependencies": [
      [
        "react-currency-input-field",
        "^3.6.14",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "currency-input.tsx",
        "dir": "currency-input",
        "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport CurrencyInputPrimitive, { CurrencyInputOnChangeValues } from \"react-currency-input-field\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn } from \"../core/styling\"\r\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CurrencyInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype IntlConfig = { locale: string, currency?: string }\r\n\r\nexport type CurrencyInputProps =\r\n    Omit<React.ComponentPropsWithoutRef<\"input\">, \"size\" | \"disabled\" | \"defaultValue\"> &\r\n    InputStyling &\r\n    BasicFieldOptions & {\r\n    /**\r\n     * Allow decimals\r\n     *\r\n     * Default = true\r\n     */\r\n    allowDecimals?: boolean\r\n    /**\r\n     * Allow user to enter negative value\r\n     *\r\n     * Default = true\r\n     */\r\n    allowNegativeValue?: boolean\r\n    /**\r\n     * Component id\r\n     */\r\n    id?: string\r\n    /**\r\n     *  Maximum characters the user can enter\r\n     */\r\n    maxLength?: number\r\n    /**\r\n     * Limit length of decimals allowed\r\n     *\r\n     * Default = 2\r\n     */\r\n    decimalsLimit?: number\r\n    /**\r\n     * Specify decimal scale for padding/trimming\r\n     *\r\n     * Example:\r\n     *   1.5 -> 1.50\r\n     *   1.234 -> 1.23\r\n     */\r\n    decimalScale?: number\r\n    /**\r\n     * Default value if uncontrolled\r\n     */\r\n    defaultValue?: number | string\r\n    /**\r\n     * Value will always have the specified length of decimals\r\n     *\r\n     * Example:\r\n     *   123 -> 1.23\r\n     *\r\n     * Note: This formatting only happens onBlur\r\n     */\r\n    fixedDecimalLength?: number\r\n    /**\r\n     * Placeholder if there is no value\r\n     */\r\n    placeholder?: string\r\n    /**\r\n     * Include a prefix eg. Â£\r\n     */\r\n    prefix?: string\r\n    /**\r\n     * Include a suffix eg. â¬\r\n     */\r\n    suffix?: string\r\n    /**\r\n     * Incremental value change on arrow down and arrow up key press\r\n     */\r\n    step?: number\r\n    /**\r\n     * Separator between integer part and fractional part of value.\r\n     *\r\n     * This cannot be a number\r\n     */\r\n    decimalSeparator?: string\r\n    /**\r\n     * Separator between thousand, million and billion\r\n     *\r\n     * This cannot be a number\r\n     */\r\n    groupSeparator?: string\r\n    /**\r\n     * Disable auto adding separator between values eg. 1000 -> 1,000\r\n     *\r\n     * Default = false\r\n     */\r\n    disableGroupSeparators?: boolean\r\n    /**\r\n     * Disable abbreviations (m, k, b)\r\n     *\r\n     * Default = false\r\n     */\r\n    disableAbbreviations?: boolean\r\n    /**\r\n     * International locale config, examples:\r\n     *   { locale: 'ja-JP', currency: 'JPY' }\r\n     *   { locale: 'en-IN', currency: 'INR' }\r\n     *\r\n     * Any prefix, groupSeparator or decimalSeparator options passed in\r\n     * will override Intl Locale config\r\n     */\r\n    intlConfig?: IntlConfig\r\n    /**\r\n     * Transform the raw value form the input before parsing\r\n     */\r\n    transformRawValue?: (rawValue: string) => string\r\n    /**\r\n     * Callback invoked when value changes\r\n     */\r\n    onValueChange?: (value: (string | undefined), name?: string, values?: CurrencyInputOnChangeValues) => void\r\n}\r\n\r\nexport const CurrencyInput = React.forwardRef<HTMLInputElement, CurrencyInputProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<CurrencyInputProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        /**/\r\n        value,\r\n        onValueChange,\r\n        transformRawValue,\r\n        intlConfig,\r\n        allowDecimals,\r\n        allowNegativeValue,\r\n        decimalsLimit,\r\n        decimalScale,\r\n        disabled,\r\n        fixedDecimalLength,\r\n        placeholder,\r\n        prefix,\r\n        suffix,\r\n        step,\r\n        decimalSeparator,\r\n        groupSeparator,\r\n        disableGroupSeparators,\r\n        disableAbbreviations,\r\n        defaultValue,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<CurrencyInputProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <CurrencyInputPrimitive\r\n                    ref={ref}\r\n                    id={basicFieldProps.id}\r\n                    name={basicFieldProps.name}\r\n                    defaultValue={defaultValue}\r\n                    className={cn(\r\n                        \"form-input\",\r\n                        InputAnatomy.root({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            isDisabled: !!basicFieldProps.disabled,\r\n                            isReadonly: !!basicFieldProps.readonly,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        className,\r\n                    )}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                    required={basicFieldProps.required}\r\n                    value={value}\r\n                    onValueChange={onValueChange}\r\n                    transformRawValue={transformRawValue}\r\n                    intlConfig={intlConfig}\r\n                    allowDecimals={allowDecimals}\r\n                    allowNegativeValue={allowNegativeValue}\r\n                    decimalsLimit={decimalsLimit}\r\n                    decimalScale={decimalScale}\r\n                    fixedDecimalLength={fixedDecimalLength}\r\n                    placeholder={placeholder}\r\n                    prefix={prefix}\r\n                    suffix={suffix}\r\n                    step={step}\r\n                    decimalSeparator={decimalSeparator}\r\n                    groupSeparator={groupSeparator}\r\n                    disableGroupSeparators={disableGroupSeparators}\r\n                    disableAbbreviations={disableAbbreviations}\r\n                    {...rest}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nCurrencyInput.displayName = \"CurrencyInput\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "currency-input",
        "content": "export * from \"./currency-input\"\r\n"
      }
    ]
  },
  {
    "component": "datagrid",
    "name": "Datagrid",
    "dependencies": [
      [
        "@tanstack/react-table",
        "^8.9.1",
        ""
      ],
      [
        "zod",
        "^3.21.4",
        ""
      ],
      [
        "date-fns",
        "^2.30.0",
        ""
      ],
      [
        "fast-deep-equal",
        "^3.1.3",
        ""
      ]
    ],
    "family": [
      "button",
      "checkbox",
      "date-picker",
      "dropdown-menu",
      "radio-group",
      "select",
      "card",
      "loading-spinner",
      "number-input",
      "pagination",
      "skeleton",
      "text-input",
      "tooltip"
    ],
    "files": [
      {
        "name": "datagrid-cell-input-field.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\r\n\r\nimport { Cell, Row, Table } from \"@tanstack/react-table\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { z, ZodTypeAny } from \"zod\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { DataGridEditingHelper } from \"./helpers\"\r\nimport { DataGridValidationRowErrors } from \"./use-datagrid-editing\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DataGridCellInputFieldAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGridCellInputField__root\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridCellInputField\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Context passed to a field in order to render a cell input\r\n * @example\r\n * withEditing({ field: (ctx: DataGridCellInputFieldContext) => <></> })\r\n */\r\nexport type DataGridEditingFieldContext<T> = {\r\n    value: T,\r\n    onChange: (value: T) => void\r\n    ref: React.MutableRefObject<any>\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type DataGridEditingValueUpdater<T extends Record<string, any>> = (\r\n    value: unknown,\r\n    row: Row<T>,\r\n    cell: Cell<T, unknown>,\r\n    zodType: ZodTypeAny | undefined,\r\n) => void\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type DataGridCellInputFieldProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridCellInputFieldAnatomy> & {\r\n    /**\r\n     * Meta information about the field from the column definition\r\n     * - This is defined by the `withEditing` helper\r\n     */\r\n    meta: DataGridEditingHelper\r\n    /** Cell being edited */\r\n    cell: Cell<T, unknown>\r\n    /** Table instance */\r\n    table: Table<T>\r\n    /** Row being edited */\r\n    row: Row<T>\r\n    /** Errors coming from the built-in row validation (useDataGridEditing) */\r\n    rowErrors: DataGridValidationRowErrors\r\n    /** Emits updates to the hook (useDataGridEditing) */\r\n    onValueUpdated: DataGridEditingValueUpdater<T>\r\n    /** Field container class name */\r\n    className?: string\r\n}\r\n\r\nexport function DataGridCellInputField<Schema extends z.ZodObject<z.ZodRawShape>, T extends Record<string, any>, Key extends keyof z.infer<Schema>>\r\n(props: DataGridCellInputFieldProps<T>) {\r\n\r\n    const {\r\n        className,\r\n        cell,\r\n        table,\r\n        row,\r\n        rowErrors,\r\n        onValueUpdated,\r\n        meta: {\r\n            field,\r\n            zodType,\r\n            valueFormatter: _valueFormatter,\r\n        },\r\n    } = props\r\n    const defaultValueFormatter = (value: any) => value\r\n    const valueFormatter = (_valueFormatter ?? defaultValueFormatter) as (value: any) => any\r\n\r\n    const cellValue = valueFormatter(cell.getContext().getValue())\r\n    const inputRef = React.useRef<any>(null)\r\n\r\n    const [value, setValue] = React.useState<unknown>(cellValue)\r\n\r\n    React.useLayoutEffect(() => {\r\n        onValueUpdated(cellValue, row, cell, zodType)\r\n        inputRef.current?.focus()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={cn(DataGridCellInputFieldAnatomy.root(), className)}>\r\n            {field({\r\n                value: value,\r\n                onChange: (value => {\r\n                    setValue(value)\r\n                    onValueUpdated(valueFormatter(value), row, cell, zodType)\r\n                }),\r\n                ref: inputRef,\r\n            }, {\r\n                rowErrors: rowErrors,\r\n                table: table,\r\n                row: row,\r\n                cell: cell,\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nDataGridCellInputField.displayName = \"DataGridCellInputField\"\r\n"
      },
      {
        "name": "datagrid-filter.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\r\n\r\nimport { Column } from \"@tanstack/react-table\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { DataGridAnatomy, DataGridFilteringHelper, getColumnHelperMeta, getValueFormatter } from \".\"\r\nimport { CloseButton } from \"../button\"\r\nimport { CheckboxGroup } from \"../checkbox\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { DateRangePicker } from \"../date-picker\"\r\nimport { DropdownMenu, DropdownMenuGroup, DropdownMenuItem } from \"../dropdown-menu\"\r\nimport { RadioGroup } from \"../radio-group\"\r\nimport { Select } from \"../select\"\r\nimport translations, { dateFnsLocales } from \"./locales\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DataGridFilterAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGridFilter__root\",\r\n        \"flex gap-2 items-center\",\r\n    ]),\r\n})\r\n\r\nexport const DataGridActiveFilterAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGridActiveFilter__root\",\r\n        \"py-1 px-2 rounded-[--radius] border flex gap-2 items-center\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridFilter\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridFilterProps<T extends Record<string, any>> = React.ComponentPropsWithoutRef<\"div\"> &\r\n    ComponentAnatomy<typeof DataGridFilterAnatomy> & {\r\n    column: Column<T>\r\n    onRemove: () => void\r\n    lng?: string\r\n}\r\n\r\nexport function DataGridFilter<T extends Record<string, any>>(props: DataGridFilterProps<T>) {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        column,\r\n        onRemove,\r\n        lng = \"en\",\r\n        ...rest\r\n    } = props\r\n\r\n    const filterParams = getColumnHelperMeta(column, \"filteringMeta\")!\r\n    const filterValue = React.useMemo(() => column.getFilterValue(), [column.getFilterValue()]) as any\r\n    const setFilterValue = React.useMemo(() => column.setFilterValue, [column.setFilterValue])\r\n    const icon = filterParams.icon\r\n\r\n    // Value formatter - if undefined, use the default behavior\r\n    const valueFormatter = filterParams.valueFormatter || getValueFormatter(column)\r\n\r\n    // Get the options\r\n    const options = filterParams.options ?? []\r\n\r\n    // Update handler\r\n    const handleUpdate = React.useCallback((value: any) => {\r\n        setFilterValue(value)\r\n    }, [])\r\n\r\n    return (\r\n        <div\r\n            className={cn(DataGridFilterAnatomy.root(), className)}\r\n            {...rest}\r\n        >\r\n            {(filterParams.type === \"select\" && (!options || options.length === 0)) && (\r\n                <div className=\"text-red-500\">/!\\ \"Select\" filtering option passed without options</div>\r\n            )}\r\n            {/*Select*/}\r\n            {(filterParams.type === \"select\" && !!options && options.length > 0) && (\r\n                <Select\r\n                    leftIcon={icon ? icon :\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"2\"\r\n                            strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\"\r\n                        >\r\n                            <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\" />\r\n                        </svg>}\r\n                    leftAddon={filterParams.name}\r\n                    options={[...options.map(n => ({ value: n.value, label: valueFormatter(n.value) }))]}\r\n                    onValueChange={v => handleUpdate(v.trim().toLowerCase())}\r\n                    size={\"sm\"}\r\n                    fieldClass=\"w-fit\"\r\n                    className=\"sm:w-auto pr-8 md:max-w-sm\"\r\n                />\r\n            )}\r\n            {/*Boolean*/}\r\n            {(filterParams.type === \"boolean\") && (\r\n                <DropdownMenu\r\n                    className=\"right-[inherit] left\"\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filterParams}\r\n                            value={valueFormatter(filterValue)}\r\n                        />\r\n                    }\r\n                >\r\n                    <DropdownMenuGroup>\r\n                        <DropdownMenuItem onClick={() => handleUpdate(true)}>\r\n                            {typeof valueFormatter(true) === \"boolean\" ? translations[\"true\"][lng] : valueFormatter(true)}\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuItem onClick={() => handleUpdate(false)}>\r\n                            {typeof valueFormatter(false) === \"boolean\" ? translations[\"false\"][lng] : valueFormatter(false)}\r\n                        </DropdownMenuItem>\r\n                    </DropdownMenuGroup>\r\n                </DropdownMenu>\r\n            )}\r\n            {/*Checkbox*/}\r\n            {(filterParams.type === \"checkbox\" && !!options.length) && (\r\n                <DropdownMenu\r\n                    className=\"right-[inherit] left\"\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filterParams}\r\n                            value={Array.isArray(filterValue) ?\r\n                                (filterValue as any).map((n: string) => valueFormatter(n)) :\r\n                                valueFormatter(filterValue)\r\n                            }\r\n                        />}\r\n                >\r\n                    <DropdownMenuGroup className=\"p-1\">\r\n                        {filterParams.options?.length && (\r\n                            <CheckboxGroup\r\n                                options={filterParams.options}\r\n                                value={filterValue}\r\n                                onValueChange={handleUpdate}\r\n                                itemContainerClass=\"flex flex-row-reverse w-full justify-between\"\r\n                                itemLabelClass=\"cursor-pointer\"\r\n                            />\r\n                        )}\r\n                    </DropdownMenuGroup>\r\n                </DropdownMenu>\r\n            )}\r\n            {/*Radio*/}\r\n            {(filterParams.type === \"radio\" && !!options.length) && (\r\n                <DropdownMenu\r\n                    className=\"right-[inherit] left\"\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filterParams}\r\n                            value={Array.isArray(filterValue) ?\r\n                                (filterValue as any).map((n: string) => valueFormatter(n)) :\r\n                                valueFormatter(filterValue)\r\n                            }\r\n                        />}\r\n                >\r\n                    <DropdownMenuGroup className=\"p-1\">\r\n                        {filterParams.options?.length && (\r\n                            <RadioGroup\r\n                                options={filterParams.options}\r\n                                value={filterValue}\r\n                                onValueChange={handleUpdate}\r\n                                itemContainerClass=\"flex flex-row-reverse w-full justify-between\"\r\n                                itemLabelClass=\"cursor-pointer\"\r\n                            />\r\n                        )}\r\n                    </DropdownMenuGroup>\r\n                </DropdownMenu>\r\n            )}\r\n            {/*Date*/}\r\n            {filterParams.type === \"date-range\" && (\r\n                <div className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")}>\r\n                    {filterParams.icon && <span>{filterParams.icon}</span>}\r\n                    <span>{filterParams.name}:</span>\r\n                    <DateRangePicker\r\n                        value={filterValue ? {\r\n                            from: filterValue.start,\r\n                            to: filterValue.end,\r\n                        } : undefined}\r\n                        onValueChange={value => handleUpdate({\r\n                            start: value?.from,\r\n                            end: value?.to,\r\n                        })}\r\n                        placeholder={translations[\"date-range-placeholder\"][lng]}\r\n                        intent={\"unstyled\"}\r\n                        locale={dateFnsLocales[lng]}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            <CloseButton onClick={onRemove} size={\"sm\"} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nDataGridFilter.displayName = \"DataGridFilter\"\r\n\r\n\r\ninterface DataGridActiveFilterProps extends Omit<React.ComponentPropsWithRef<\"button\">, \"value\">,\r\n    ComponentAnatomy<typeof DataGridActiveFilterAnatomy> {\r\n    children?: React.ReactNode\r\n    options: DataGridFilteringHelper<any>\r\n    value: unknown\r\n}\r\n\r\nexport const DataGridActiveFilter = React.forwardRef<HTMLButtonElement, DataGridActiveFilterProps>((props, ref) => {\r\n\r\n    const { children, options, value, ...rest } = props\r\n\r\n    // Truncate and join the value to be displayed if it is an array\r\n    const displayedValue = Array.isArray(value) ? (value.length > 2 ? [...value.slice(0, 2), \"...\"].join(\", \") : value.join(\", \")) : String(value)\r\n\r\n    return (\r\n        <button\r\n            ref={ref}\r\n            className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")} {...rest}\r\n        >\r\n            {options.icon && <span>{options.icon}</span>}\r\n            <span>{options.name}:</span>\r\n            <span className=\"font-semibold flex flex-none overflow-hidden whitespace-normal\">{displayedValue}</span>\r\n        </button>\r\n    )\r\n\r\n})\r\n\r\nDataGridActiveFilter.displayName = \"DataGridActiveFilter\"\r\n"
      },
      {
        "name": "datagrid-instance.tsx",
        "dir": "datagrid",
        "content": "import {\r\n    ColumnDef,\r\n    ColumnFiltersState,\r\n    ColumnOrderState,\r\n    FilterFn,\r\n    getCoreRowModel,\r\n    getFilteredRowModel,\r\n    getSortedRowModel,\r\n    OnChangeFn,\r\n    PaginationState,\r\n    RowSelectionState,\r\n    SortingState,\r\n    useReactTable,\r\n    VisibilityState,\r\n} from \"@tanstack/react-table\"\r\nimport { dateRangeFilter } from \"./use-datagrid-filtering\"\r\nimport * as React from \"react\"\r\nimport { Checkbox } from \"../checkbox\"\r\nimport { DataGridOnRowEdit, DataGridOnRowValidationError } from \"./use-datagrid-editing\"\r\nimport { DataGridOnRowSelect } from \"./use-datagrid-row-selection\"\r\nimport { AnyZodObject } from \"zod\"\r\n\r\nexport type DataGridInstanceProps<T extends Record<string, any>> = {\r\n    data: T[] | null | undefined\r\n    rowCount: number\r\n    columns: ColumnDef<T>[]\r\n    isLoading?: boolean\r\n\r\n    /**\r\n     * Hide columns below a certain breakpoint.\r\n     */\r\n    hideColumns?: { below: number, hide: string[] }[]\r\n    columnOrder?: ColumnOrderState | undefined\r\n\r\n    /* -------------------------------------------------------------------------------------------------\r\n     * Row selection\r\n     * -----------------------------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * If true, rows will be selectable.\r\n     * A checkbox will be shown in the first column of each row.\r\n     * - Requires `rowSelectionPrimaryKey` for more accurate selection (default is row index)\r\n     */\r\n    enableRowSelection?: boolean\r\n    /**\r\n     * Callback invoked when a row is selected.\r\n     */\r\n    onRowSelect?: DataGridOnRowSelect<T>\r\n    /**\r\n     * The column used to uniquely identify the row.\r\n     */\r\n    rowSelectionPrimaryKey?: string\r\n    /**\r\n     * Requires `rowSelectionPrimaryKey`\r\n     */\r\n    enablePersistentRowSelection?: boolean\r\n\r\n    /* -------------------------------------------------------------------------------------------------\r\n     * Sorting\r\n     * -----------------------------------------------------------------------------------------------*/\r\n\r\n    enableSorting?: boolean\r\n    enableManualSorting?: boolean\r\n\r\n    /* -------------------------------------------------------------------------------------------------\r\n     * Filters\r\n     * -----------------------------------------------------------------------------------------------*/\r\n\r\n    enableColumnFilters?: boolean\r\n    enableFilters?: boolean\r\n    enableManualFiltering?: boolean\r\n    enableGlobalFilter?: boolean\r\n\r\n    /* -------------------------------------------------------------------------------------------------\r\n     * Pagination\r\n     * -----------------------------------------------------------------------------------------------*/\r\n\r\n    enableManualPagination?: boolean\r\n\r\n    /* -------------------------------------------------------------------------------------------------\r\n     * Editing\r\n     * -----------------------------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Requires `enableOptimisticUpdates`\r\n     * NOTE: This will not work if your `validationSchema` contains server-side validation.\r\n     */\r\n    enableOptimisticUpdates?: boolean\r\n    /**\r\n     * The column used to uniquely identify the row.\r\n     */\r\n    optimisticUpdatePrimaryKey?: string\r\n    /**\r\n     * If true, a loading indicator will be shown while the row is being updated.\r\n     */\r\n    isDataMutating?: boolean\r\n    /**\r\n     * Zod validation schema for the columns.\r\n     */\r\n    validationSchema?: AnyZodObject\r\n    /**\r\n     * Callback invoked when a cell is successfully edited.\r\n     */\r\n    onRowEdit?: DataGridOnRowEdit<T>\r\n    /**\r\n     * Callback invoked when a cell fails validation.\r\n     */\r\n    onRowValidationError?: DataGridOnRowValidationError<T>\r\n\r\n    initialState?: {\r\n        sorting?: SortingState\r\n        pagination?: PaginationState\r\n        rowSelection?: RowSelectionState\r\n        globalFilter?: string\r\n        columnFilters?: ColumnFiltersState\r\n        columnVisibility?: VisibilityState\r\n    }\r\n\r\n    state?: {\r\n        sorting?: SortingState\r\n        pagination?: PaginationState\r\n        rowSelection?: RowSelectionState\r\n        globalFilter?: string\r\n        columnFilters?: ColumnFiltersState\r\n        columnVisibility?: VisibilityState\r\n    },\r\n\r\n    onSortingChange?: OnChangeFn<SortingState>\r\n    onPaginationChange?: OnChangeFn<PaginationState>\r\n    onRowSelectionChange?: OnChangeFn<RowSelectionState>\r\n    onGlobalFilterChange?: OnChangeFn<string>\r\n    onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\r\n    onColumnVisibilityChange?: OnChangeFn<VisibilityState>\r\n\r\n    filterFns?: Record<string, FilterFn<T>>\r\n}\r\n\r\nexport function useDataGrid<T extends Record<string, any>>(props: DataGridInstanceProps<T>) {\r\n\r\n    const defaultValues: Required<DataGridInstanceProps<T>[\"state\"]> = {\r\n        globalFilter: \"\",\r\n        sorting: [],\r\n        pagination: { pageIndex: 0, pageSize: 5 },\r\n        rowSelection: {},\r\n        columnFilters: [],\r\n        columnVisibility: {},\r\n    }\r\n\r\n    const {\r\n        data: _actualData,\r\n        rowCount: _initialRowCount,\r\n        columns,\r\n        initialState,\r\n        state,\r\n\r\n        onRowValidationError,\r\n        validationSchema,\r\n\r\n        columnOrder,\r\n\r\n        onSortingChange,\r\n        onPaginationChange,\r\n        onRowSelectionChange,\r\n        onGlobalFilterChange,\r\n        onColumnFiltersChange,\r\n        onColumnVisibilityChange,\r\n\r\n        enableManualSorting = false,\r\n        enableManualFiltering = false,\r\n        enableManualPagination = false,\r\n        enableRowSelection = false,\r\n        enablePersistentRowSelection = false,\r\n        enableOptimisticUpdates = false,\r\n\r\n        enableColumnFilters = true,\r\n        enableSorting = true,\r\n        enableFilters = true,\r\n        enableGlobalFilter = true,\r\n\r\n        filterFns,\r\n\r\n        ...rest\r\n    } = props\r\n\r\n    const [data, setData] = React.useState<T[]>(_actualData ?? [])\r\n\r\n    const [rowCount, setRowCount] = React.useState(_initialRowCount)\r\n\r\n    React.useEffect(() => {\r\n        if (_actualData) setData(_actualData)\r\n    }, [_actualData])\r\n\r\n    React.useEffect(() => {\r\n        if (_initialRowCount) setRowCount(_initialRowCount)\r\n    }, [_initialRowCount])\r\n\r\n    const [globalFilter, setGlobalFilter] = React.useState<string>(initialState?.globalFilter ?? defaultValues.globalFilter)\r\n    const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(initialState?.rowSelection ?? defaultValues.rowSelection)\r\n    const [sorting, setSorting] = React.useState<SortingState>(initialState?.sorting ?? defaultValues.sorting)\r\n    const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(initialState?.columnFilters ?? defaultValues.columnFilters)\r\n    const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(initialState?.columnVisibility ?? defaultValues.columnVisibility)\r\n    const [pagination, setPagination] = React.useState<PaginationState>(initialState?.pagination ?? defaultValues.pagination)\r\n\r\n    const pageCount = React.useMemo(() => Math.ceil(rowCount / pagination.pageSize) ?? -1, [rowCount, pagination.pageSize])\r\n\r\n    const columnsWithSelection = React.useMemo<ColumnDef<T>[]>(() => [{\r\n        id: \"_select\",\r\n        size: 0,\r\n        maxSize: 0,\r\n        enableSorting: false,\r\n        disableSortBy: true,\r\n        disableGlobalFilter: true,\r\n        header: ({ table }) => {\r\n            return (\r\n                <Checkbox\r\n                    value={table.getIsSomeRowsSelected() ? \"indeterminate\" : table.getIsAllRowsSelected()}\r\n                    onValueChange={() => table.toggleAllRowsSelected()}\r\n                />\r\n            )\r\n        },\r\n        cell: ({ row }) => {\r\n            return (\r\n                <div className=\"px-1\">\r\n                    <Checkbox\r\n                        key={row.id}\r\n                        value={row.getIsSomeSelected() ? \"indeterminate\" : row.getIsSelected()}\r\n                        disabled={!row.getCanSelect()}\r\n                        onValueChange={row.getToggleSelectedHandler()}\r\n                    />\r\n                </div>\r\n            )\r\n        },\r\n    }, ...columns], [columns])\r\n\r\n    const sortingState = React.useMemo(() => state?.sorting ?? sorting, [state?.sorting, sorting])\r\n    const paginationState = React.useMemo(() => state?.pagination ?? pagination, [state?.pagination, pagination])\r\n    const rowSelectionState = React.useMemo(() => state?.rowSelection ?? rowSelection, [state?.rowSelection, rowSelection])\r\n    const globalFilterState = React.useMemo(() => state?.globalFilter ?? globalFilter, [state?.globalFilter, globalFilter])\r\n    const columnFiltersState = React.useMemo(() => state?.columnFilters ?? columnFilters, [state?.columnFilters, columnFilters])\r\n    const columnVisibilityState = React.useMemo(() => state?.columnVisibility ?? columnVisibility, [state?.columnVisibility, columnVisibility])\r\n\r\n    const changeHandler = React.useCallback((func: any, func2: any) => {\r\n        return ((updaterOrValue) => {\r\n            if (func) func(updaterOrValue)\r\n            if (func2) func2(updaterOrValue)\r\n        }) as OnChangeFn<any>\r\n    }, [])\r\n\r\n    const table = useReactTable<T>({\r\n        data: data,\r\n        columns: enableRowSelection ? columnsWithSelection : columns,\r\n        pageCount: pageCount,\r\n        globalFilterFn: (row, columnId, filterValue) => {\r\n            const safeValue: string = ((): string => {\r\n                const value: any = row.getValue(columnId)\r\n                return typeof value === \"number\" ? String(value) : value\r\n            })()\r\n            return safeValue?.trim().toLowerCase().includes(filterValue.trim().toLowerCase())\r\n        },\r\n        state: {\r\n            sorting: sortingState,\r\n            pagination: paginationState,\r\n            rowSelection: rowSelectionState,\r\n            globalFilter: globalFilterState,\r\n            columnFilters: columnFiltersState,\r\n            columnVisibility: columnVisibilityState,\r\n            columnOrder: columnOrder,\r\n        },\r\n        onSortingChange: changeHandler(onSortingChange, setSorting),\r\n        onPaginationChange: changeHandler(onPaginationChange, setPagination),\r\n        onRowSelectionChange: changeHandler(onRowSelectionChange, setRowSelection),\r\n        onGlobalFilterChange: changeHandler(onGlobalFilterChange, setGlobalFilter),\r\n        onColumnFiltersChange: changeHandler(onColumnFiltersChange, setColumnFilters),\r\n        onColumnVisibilityChange: changeHandler(onColumnVisibilityChange, setColumnVisibility),\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getSortedRowModel: enableManualSorting ? undefined : getSortedRowModel(),\r\n        getFilteredRowModel: enableManualFiltering ? undefined : getFilteredRowModel(),\r\n        filterFns: {\r\n            dateRangeFilter: dateRangeFilter,\r\n            ...filterFns,\r\n        },\r\n        manualPagination: enableManualPagination,\r\n        manualSorting: enableManualSorting,\r\n        manualFiltering: enableManualFiltering,\r\n        enableRowSelection: enableRowSelection,\r\n        enableSorting: enableSorting,\r\n        enableColumnFilters: enableColumnFilters,\r\n        enableFilters: enableFilters,\r\n        enableGlobalFilter: enableGlobalFilter,\r\n        getRowId: !!props.rowSelectionPrimaryKey ? (row) => row[props.rowSelectionPrimaryKey!] : undefined,\r\n    })\r\n\r\n    const displayedRows = React.useMemo(() => {\r\n        const pn = table.getState().pagination\r\n        if (enableManualPagination) {\r\n            return table.getRowModel().rows\r\n        }\r\n        return table.getRowModel().rows.slice(pn.pageIndex * pn.pageSize, (pn.pageIndex + 1) * pn.pageSize)\r\n    }, [table.getRowModel().rows, table.getState().pagination])\r\n\r\n    React.useLayoutEffect(() => {\r\n        table.setPageIndex(0)\r\n    }, [table.getState().globalFilter])\r\n\r\n    React.useEffect(() => {\r\n        if (!enableManualPagination) {\r\n            setRowCount(table.getRowModel().rows.length)\r\n        }\r\n    }, [table.getRowModel().rows])\r\n\r\n    return {\r\n        ...rest,\r\n\r\n        table,\r\n        displayedRows,\r\n        setData,\r\n        data,\r\n        pageCount,\r\n        rowCount,\r\n        columns,\r\n\r\n        sorting: sortingState,\r\n        pagination: paginationState,\r\n        rowSelection: rowSelectionState,\r\n        globalFilter: globalFilterState,\r\n        columnFilters: columnFiltersState,\r\n        columnVisibility: columnVisibilityState,\r\n\r\n        enableManualSorting,\r\n        enableManualFiltering,\r\n        enableManualPagination,\r\n        enableRowSelection,\r\n        enablePersistentRowSelection,\r\n        enableOptimisticUpdates,\r\n        enableGlobalFilter,\r\n\r\n        validationSchema,\r\n        onRowValidationError,\r\n\r\n        handleGlobalFilterChange: onGlobalFilterChange ?? setGlobalFilter,\r\n        handleColumnFiltersChange: onColumnFiltersChange ?? setColumnFilters,\r\n\r\n    }\r\n\r\n}\r\n\r\nexport type DataGridApi<T extends Record<string, any>> = ReturnType<typeof useDataGrid<T>>\r\n"
      },
      {
        "name": "datagrid.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\r\n\r\nimport { flexRender } from \"@tanstack/react-table\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { Button, IconButton } from \"../button\"\r\nimport { Card } from \"../card\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { DropdownMenu, DropdownMenuItem } from \"../dropdown-menu\"\r\nimport { LoadingOverlay } from \"../loading-spinner\"\r\nimport { NumberInput } from \"../number-input\"\r\nimport { Pagination, PaginationTrigger } from \"../pagination\"\r\nimport { Select } from \"../select\"\r\nimport { Skeleton } from \"../skeleton\"\r\nimport { TextInput, TextInputProps } from \"../text-input\"\r\nimport { Tooltip } from \"../tooltip\"\r\nimport { DataGridCellInputField } from \"./datagrid-cell-input-field\"\r\nimport { DataGridFilter } from \"./datagrid-filter\"\r\nimport { DataGridApi, DataGridInstanceProps, useDataGrid } from \"./datagrid-instance\"\r\nimport { getColumnHelperMeta, getValueFormatter } from \"./helpers\"\r\nimport translations from \"./locales\"\r\nimport { useDataGridEditing } from \"./use-datagrid-editing\"\r\nimport { useDataGridFiltering } from \"./use-datagrid-filtering\"\r\nimport { useDataGridResponsiveness } from \"./use-datagrid-responsiveness\"\r\nimport { useDataGridRowSelection } from \"./use-datagrid-row-selection\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DataGridAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGrid__root\",\r\n    ]),\r\n    header: cva([\r\n        \"UI-DataGrid__header\",\r\n        \"block space-y-4 w-full mb-4\",\r\n    ]),\r\n    toolbar: cva([\r\n        \"UI-DataGrid__toolbar\",\r\n        \"flex w-full items-center gap-4 flex-wrap\",\r\n    ]),\r\n    tableContainer: cva([\r\n        \"UI-DataGrid__tableContainer\",\r\n        \"align-middle inline-block min-w-full max-w-full overflow-x-auto relative\",\r\n    ]),\r\n    table: cva([\r\n        \"UI-DataGrid__table\",\r\n        \"w-full relative table-auto md:table-fixed\",\r\n    ]),\r\n    tableHead: cva([\r\n        \"UI-DataGrid__tableHead\",\r\n        \"border-b\",\r\n    ]),\r\n    th: cva([\r\n        \"UI-DataGrid__th group/th\",\r\n        \"px-3 h-12 text-left text-sm font-bold\",\r\n        \"data-[is-selection-col=true]:px-3 data-[is-selection-col=true]:sm:px-1 data-[is-selection-col=true]:text-center\",\r\n    ]),\r\n    titleChevronContainer: cva([\r\n        \"UI-DataGrid__titleChevronContainer\",\r\n        \"absolute flex items-center inset-y-0 top-1 -right-9 group\",\r\n    ]),\r\n    titleChevron: cva([\r\n        \"UI-DataGrid__titleChevron\",\r\n        \"mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500 relative bottom-0.5\",\r\n    ]),\r\n    tableBody: cva([\r\n        \"UI-DataGrid__tableBody\",\r\n        \"divide-y divide-[--border] w-full relative\",\r\n    ]),\r\n    td: cva([\r\n        \"UI-DataGrid__td\",\r\n        \"px-2 py-2 w-full whitespace-nowrap text-base font-normal text-[--text-color]\",\r\n        \"data-[is-selection-col=true]:px-2 data-[is-selection-col=true]:sm:px-0 data-[is-selection-col=true]:text-center\",\r\n        \"data-[action-col=false]:truncate data-[action-col=false]:overflow-ellipsis\",\r\n        \"data-[row-selected=true]:bg-brand-50 dark:data-[row-selected=true]:bg-gray-800\",\r\n        \"data-[editing=true]:ring-1 data-[editing=true]:ring-[--ring] ring-inset\",\r\n        \"data-[editable=true]:hover:bg-[--subtle] md:data-[editable=true]:focus:ring-2 md:data-[editable=true]:focus:ring-[--slate]\",\r\n        \"focus:outline-none\",\r\n    ]),\r\n    tr: cva([\r\n        \"UI-DataGrid__tr\",\r\n        \"hover:bg-[--subtle] truncate\",\r\n    ]),\r\n    footer: cva([\r\n        \"UI-DataGrid__footer\",\r\n        \"flex flex-col sm:flex-row w-full items-center gap-2 justify-between p-2 mt-2 overflow-x-auto max-w-full\",\r\n    ]),\r\n    footerPageDisplayContainer: cva([\r\n        \"UI-DataGrid__footerPageDisplayContainer\",\r\n        \"flex flex-none items-center gap-1 ml-2 text-sm\",\r\n    ]),\r\n    footerPaginationInputContainer: cva([\r\n        \"UI-DataGrid__footerPaginationInputContainer\",\r\n        \"flex flex-none items-center gap-2\",\r\n    ]),\r\n    filterDropdownButton: cva([\r\n        \"UI-DataGrid__filterDropdownButton\",\r\n        \"flex gap-2 items-center bg-[--paper] border rounded-[--radius] h-10 py-1 px-3 cursor-pointer hover:bg-[--subtle]\",\r\n        \"select-none focus-visible:ring-2 outline-none ring-[--ring]\",\r\n    ]),\r\n    editingCard: cva([\r\n        \"UI-DataGrid__editingCard\",\r\n        \"flex items-center gap-2 rounded-md px-3 py-2\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGrid\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridAnatomy> & DataGridInstanceProps<T> & {\r\n    tableApi?: DataGridApi<T>,\r\n    globalSearchInputProps?: Partial<DataGridSearchInputProps & TextInputProps>\r\n    hideGlobalSearchInput?: boolean\r\n    className?: string\r\n    lng?: string\r\n}\r\n\r\nexport function DataGrid<T extends Record<string, any>>(props: DataGridProps<T>) {\r\n\r\n    const {\r\n        lng = \"en\",\r\n        className,\r\n        headerClass,\r\n        toolbarClass,\r\n        tableContainerClass,\r\n        tableHeadClass,\r\n        tableClass,\r\n        thClass,\r\n        titleChevronClass,\r\n        titleChevronContainerClass,\r\n        tableBodyClass,\r\n        trClass,\r\n        tdClass,\r\n        footerClass,\r\n        footerPageDisplayContainerClass,\r\n        footerPaginationInputContainerClass,\r\n        filterDropdownButtonClass,\r\n        editingCardClass,\r\n        tableApi,\r\n        globalSearchInputProps,\r\n        hideGlobalSearchInput,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        table,\r\n        data,\r\n        setData,\r\n        displayedRows,\r\n        globalFilter,\r\n        columnFilters,\r\n        handleGlobalFilterChange,\r\n        handleColumnFiltersChange,\r\n        isLoading,\r\n        isDataMutating,\r\n        hideColumns,\r\n        enablePersistentRowSelection,\r\n        onRowEdit,\r\n        onRowSelect,\r\n        rowSelectionPrimaryKey,\r\n        enableRowSelection,\r\n        enableOptimisticUpdates,\r\n        optimisticUpdatePrimaryKey,\r\n        enableManualPagination,\r\n        enableGlobalFilter,\r\n        validationSchema,\r\n        onRowValidationError,\r\n    } = (tableApi ?? useDataGrid<T>({ ...rest })) as DataGridApi<T>\r\n\r\n    const isInLoadingState = isLoading || (!enableOptimisticUpdates && isDataMutating)\r\n    const { tableRef } = useDataGridResponsiveness({ table, hideColumns })\r\n\r\n    const {\r\n        selectedRowCount,\r\n    } = useDataGridRowSelection({\r\n        table: table,\r\n        data: data,\r\n        displayedRows: displayedRows,\r\n        persistent: enablePersistentRowSelection,\r\n        onRowSelect: onRowSelect,\r\n        rowSelectionPrimaryKey: rowSelectionPrimaryKey,\r\n        enabled: enableRowSelection,\r\n    })\r\n\r\n    const {\r\n        getFilterDefaultValue,\r\n        unselectedFilterableColumns,\r\n        filteredColumns,\r\n        filterableColumns,\r\n    } = useDataGridFiltering({\r\n        table: table,\r\n        columnFilters: columnFilters,\r\n    })\r\n\r\n    const {\r\n        handleStartEditing,\r\n        getIsCellActivelyEditing,\r\n        getIsCellEditable,\r\n        getIsCurrentlyEditing,\r\n        getFirstCellBeingEdited,\r\n        handleStopEditing,\r\n        handleOnSave,\r\n        handleUpdateValue,\r\n        rowErrors,\r\n    } = useDataGridEditing({\r\n        table: table,\r\n        data: data,\r\n        rows: displayedRows,\r\n        onRowEdit: onRowEdit,\r\n        isDataMutating: isDataMutating,\r\n        enableOptimisticUpdates: enableOptimisticUpdates,\r\n        optimisticUpdatePrimaryKey: optimisticUpdatePrimaryKey,\r\n        manualPagination: enableManualPagination,\r\n        onDataChange: setData,\r\n        schema: validationSchema,\r\n        onRowValidationError: onRowValidationError,\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={cn(DataGridAnatomy.root(), className)}>\r\n            <div className={cn(DataGridAnatomy.header(), headerClass)}>\r\n\r\n                <div className={cn(DataGridAnatomy.toolbar(), toolbarClass)}>\r\n                    {/* Search Box */}\r\n                    {(enableGlobalFilter && !hideGlobalSearchInput) && (\r\n                        <DataGridSearchInput\r\n                            value={globalFilter ?? \"\"}\r\n                            onChange={value => handleGlobalFilterChange(String(value))}\r\n                            {...globalSearchInputProps}\r\n                        />\r\n                    )}\r\n                    {/* Filter dropdown */}\r\n                    {(unselectedFilterableColumns.length > 0) && (\r\n                        <DropdownMenu\r\n                            trigger={\r\n                                <button\r\n                                    className={cn(DataGridAnatomy.filterDropdownButton(), filterDropdownButtonClass)}\r\n                                >\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                        fill=\"none\"\r\n                                        stroke=\"currentColor\"\r\n                                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                        className=\"w-4 h-4\"\r\n                                    >\r\n                                        <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\" />\r\n                                    </svg>\r\n                                    <span>{translations[\"filters\"][lng]} ({unselectedFilterableColumns.length})</span>\r\n                                </button>\r\n                            }\r\n                        >\r\n                            {/*Filter list*/}\r\n                            {unselectedFilterableColumns.map(col => {\r\n                                const defaultValue = getFilterDefaultValue(col)\r\n                                const icon = getColumnHelperMeta(col, \"filteringMeta\")?.icon\r\n                                const name = getColumnHelperMeta(col, \"filteringMeta\")?.name\r\n                                return (\r\n                                    <DropdownMenuItem\r\n                                        key={col.id}\r\n                                        onClick={() => handleColumnFiltersChange(p => [...p, {\r\n                                            id: col.id,\r\n                                            value: defaultValue,\r\n                                        }])}\r\n                                    >\r\n                                        {icon && <span className=\"text-md mr-2\">{icon}</span>}\r\n                                        <span>{name}</span>\r\n                                    </DropdownMenuItem>\r\n                                )\r\n                            })}\r\n                        </DropdownMenu>\r\n                    )}\r\n                    {/*Remove filters button*/}\r\n                    {unselectedFilterableColumns.length !== filterableColumns.length && (\r\n                        <Tooltip\r\n                            trigger={<IconButton\r\n                                icon={\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                        stroke=\"currentColor\" strokeWidth=\"2\"\r\n                                        strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\"\r\n                                    >\r\n                                        <path d=\"M9 14 4 9l5-5\" />\r\n                                        <path d=\"M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11\" />\r\n                                    </svg>\r\n                                }\r\n                                intent=\"gray-outline\"\r\n                                size=\"md\"\r\n                                onClick={() => handleColumnFiltersChange([])}\r\n                            />}\r\n                        >\r\n                            {translations[\"remove-filters\"][lng]}\r\n                        </Tooltip>\r\n                    )}\r\n                    {/*Selected row count*/}\r\n                    {(selectedRowCount > 0) && <div className=\"text-sm\">\r\n                        {selectedRowCount} {translations[`row${selectedRowCount > 1 ? \"s\" : \"\"}-selected`][lng]}\r\n                    </div>}\r\n                </div>\r\n\r\n                {/*Display filters*/}\r\n                {(filteredColumns.length > 0) && <div className={cn(DataGridAnatomy.toolbar(), toolbarClass)}>\r\n                    {/*Display selected filters*/}\r\n                    {filteredColumns.map(col => {\r\n                        return (\r\n                            <DataGridFilter\r\n                                key={col.id}\r\n                                column={col}\r\n                                onRemove={() => handleColumnFiltersChange(filters => [...filters.filter(filter => filter.id !== col.id)])}\r\n                                lng={lng}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>}\r\n\r\n                {/*Manage editing*/}\r\n                {getIsCurrentlyEditing() &&\r\n                    <Card className={cn(DataGridAnatomy.editingCard(), editingCardClass)}>\r\n                        <Button size=\"sm\" onClick={handleOnSave} loading={isDataMutating}>\r\n                            {translations[\"save\"][lng]}\r\n                        </Button>\r\n                        <Button\r\n                            size=\"sm\"\r\n                            onClick={handleStopEditing}\r\n                            intent=\"gray-outline\"\r\n                            disabled={isDataMutating}\r\n                        >\r\n                            {translations[\"cancel\"][lng]}\r\n                        </Button>\r\n                    </Card>}\r\n\r\n            </div>\r\n\r\n            {/* Table */}\r\n            <div ref={tableRef} className={cn(DataGridAnatomy.tableContainer(), tableContainerClass)}>\r\n\r\n                <table className={cn(DataGridAnatomy.table(), tableClass)}>\r\n\r\n                    {/*Head*/}\r\n\r\n                    <thead className={cn(DataGridAnatomy.tableHead(), tableHeadClass)}>\r\n                    {table.getHeaderGroups().map((headerGroup) => (\r\n                        <tr key={headerGroup.id}>\r\n                            {headerGroup.headers.map((header, index) => (\r\n                                <th\r\n                                    key={header.id}\r\n                                    colSpan={header.colSpan}\r\n                                    scope=\"col\"\r\n                                    className={cn(DataGridAnatomy.th(), thClass)}\r\n                                    data-is-selection-col={`${index === 0 && enableRowSelection}`}\r\n                                    style={{ width: header.getSize() }}\r\n                                >\r\n                                    {((index !== 0 && enableRowSelection) || !enableRowSelection) ? <div\r\n                                        className={cn(\r\n                                            \"flex items-center justify-between\",\r\n                                            {\r\n                                                \"cursor-pointer\": header.column.getCanSort(),\r\n                                            },\r\n                                        )}\r\n                                    >\r\n                                        {header.isPlaceholder ? null : (\r\n                                            <div\r\n                                                className=\"flex relative items-center\"\r\n                                                {...{\r\n                                                    onClick: header.column.getToggleSortingHandler(),\r\n                                                }}\r\n                                            >\r\n                                                {flexRender(\r\n                                                    header.column.columnDef.header,\r\n                                                    header.getContext(),\r\n                                                )}\r\n                                                <span\r\n                                                    className={cn(DataGridAnatomy.titleChevronContainer(), titleChevronContainerClass)}\r\n                                                >\r\n                                                    {header.column.getIsSorted() === \"asc\" &&\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\r\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\r\n                                                            strokeLinecap=\"round\"\r\n                                                            strokeLinejoin=\"round\"\r\n                                                            className={cn(DataGridAnatomy.titleChevron(), titleChevronClass)}\r\n                                                        >\r\n                                                            <polyline points=\"18 15 12 9 6 15\" />\r\n                                                        </svg>\r\n                                                    }\r\n                                                    {header.column.getIsSorted() === \"desc\" &&\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\r\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\r\n                                                            strokeLinecap=\"round\"\r\n                                                            strokeLinejoin=\"round\"\r\n                                                            className={cn(DataGridAnatomy.titleChevron(), titleChevronClass)}\r\n                                                        >\r\n                                                            <polyline points=\"6 9 12 15 18 9\" />\r\n                                                        </svg>\r\n                                                    }\r\n                                                    {(header.column.getIsSorted() === false && header.column.getCanSort()) &&\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\"\r\n                                                            height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                            fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\r\n                                                            strokeLinecap=\"round\"\r\n                                                            strokeLinejoin=\"round\"\r\n                                                            className={cn(\r\n                                                                DataGridAnatomy.titleChevron(),\r\n                                                                \"w-4 h-4 opacity-0 transition-opacity group-hover/th:opacity-100\",\r\n                                                                titleChevronClass,\r\n                                                            )}\r\n                                                        >\r\n                                                            <path d=\"m7 15 5 5 5-5\" />\r\n                                                            <path d=\"m7 9 5-5 5 5\" />\r\n                                                        </svg>\r\n                                                    }\r\n                                                </span>\r\n                                            </div>\r\n                                        )}\r\n                                    </div> : flexRender(\r\n                                        header.column.columnDef.header,\r\n                                        header.getContext(),\r\n                                    )}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    </thead>\r\n\r\n                    {/*Body*/}\r\n\r\n                    <tbody className={cn(DataGridAnatomy.tableBody(), tableBodyClass)}>\r\n\r\n                    {displayedRows.map((row) => {\r\n                        return (\r\n                            <tr key={row.id} className={cn(DataGridAnatomy.tr(), trClass)}>\r\n                                {row.getVisibleCells().map((cell, index) => {\r\n\r\n                                    // If cell is editable and cell's row is being edited\r\n                                    const isCurrentlyEditable = getIsCellEditable(cell.id) && !getIsCellActivelyEditing(cell.id)\r\n                                        && (!getIsCurrentlyEditing() || getFirstCellBeingEdited()?.rowId === cell.row.id)\r\n\r\n                                    return (\r\n                                        <td\r\n                                            key={cell.id}\r\n                                            className={cn(DataGridAnatomy.td(), tdClass)}\r\n                                            data-is-selection-col={`${index === 0 && enableRowSelection}`} // If cell is in the selection\r\n                                            // column\r\n                                            data-action-col={`${cell.column.id === \"_actions\"}`} // If cell is in the action column\r\n                                            data-row-selected={cell.getContext().row.getIsSelected()} // If cell's row is currently selected\r\n                                            data-editing={getIsCellActivelyEditing(cell.id)} // If cell is being edited\r\n                                            data-editable={isCurrentlyEditable} // If cell is editable\r\n                                            data-row-editing={getFirstCellBeingEdited()?.rowId === cell.row.id} // If cell's row is being edited\r\n                                            style={{\r\n                                                width: cell.column.getSize(),\r\n                                                maxWidth: cell.column.columnDef.maxSize,\r\n                                            }}\r\n                                            onDoubleClick={() => React.startTransition(() => {\r\n                                                handleStartEditing(cell.id)\r\n                                            })}\r\n                                            onKeyUp={event => {\r\n                                                if (event.key === \"Enter\") React.startTransition(() => handleStartEditing(cell.id))\r\n                                            }}\r\n                                            tabIndex={isCurrentlyEditable ? 0 : undefined} // Is focusable if it can be edited\r\n                                        >\r\n                                            {((!getIsCellEditable(cell.id) || !getIsCellActivelyEditing(cell.id))) && flexRender(\r\n                                                cell.column.columnDef.cell,\r\n                                                {\r\n                                                    ...cell.getContext(),\r\n                                                    renderValue: () => getValueFormatter(cell.column)(cell.getContext().getValue()),\r\n                                                },\r\n                                            )}\r\n                                            {getIsCellActivelyEditing(cell.id) && (\r\n                                                <DataGridCellInputField\r\n                                                    cell={cell}\r\n                                                    row={cell.row}\r\n                                                    table={table}\r\n                                                    rowErrors={rowErrors}\r\n                                                    meta={getColumnHelperMeta(cell.column, \"editingMeta\")!}\r\n                                                    onValueUpdated={handleUpdateValue}\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {(isInLoadingState && displayedRows.length > 0) && (\r\n                    <LoadingOverlay className=\"backdrop-blur-[1px] bg-opacity-40 pt-0\" />\r\n                )}\r\n\r\n                {/*Skeleton*/}\r\n                {(isInLoadingState && displayedRows.length === 0) && [...Array(5).keys()].map((i, idx) => (\r\n                    <Skeleton key={idx} className=\"rounded-none h-12\" />\r\n                ))}\r\n\r\n                {/*No rows*/}\r\n                {(displayedRows.length === 0 && !isInLoadingState && filteredColumns.length === 0) && (\r\n                    <p className=\"flex w-full justify-center py-4\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n                            <path\r\n                                fill=\"#D1C4E9\"\r\n                                d=\"M38 7H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2z\"\r\n                            />\r\n                            <circle cx=\"38\" cy=\"38\" r=\"10\" fill=\"#F44336\" />\r\n                            <g fill=\"#fff\">\r\n                                <path d=\"m43.31 41.181l-2.12 2.122l-8.485-8.484l2.121-2.122z\" />\r\n                                <path d=\"m34.819 43.31l-2.122-2.12l8.484-8.485l2.122 2.121z\" />\r\n                            </g>\r\n                        </svg>\r\n                    </p>\r\n                )}\r\n\r\n                {/*No results with filters*/}\r\n                {(displayedRows.length === 0 && !isInLoadingState && filteredColumns.length > 0) && (\r\n                    <div className=\"w-full text-center py-4\">\r\n                        <p className=\"flex w-full justify-center mb-4\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\r\n                                <path\r\n                                    fill=\"#D1C4E9\"\r\n                                    d=\"M38 7H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2zm0 12H10c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h28c1.1 0 2-.9 2-2v-6c0-1.1-.9-2-2-2z\"\r\n                                />\r\n                                <circle cx=\"38\" cy=\"38\" r=\"10\" fill=\"#F44336\" />\r\n                                <g fill=\"#fff\">\r\n                                    <path d=\"m43.31 41.181l-2.12 2.122l-8.485-8.484l2.121-2.122z\" />\r\n                                    <path d=\"m34.819 43.31l-2.122-2.12l8.484-8.485l2.122 2.121z\" />\r\n                                </g>\r\n                            </svg>\r\n                        </p>\r\n                        <p>{translations[\"no-matching-result\"][lng]}</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className={cn(DataGridAnatomy.footer(), footerClass)}>\r\n\r\n                <Pagination>\r\n                    <PaginationTrigger\r\n                        direction=\"previous\"\r\n                        isChevrons\r\n                        onClick={() => table.setPageIndex(0)}\r\n                        isDisabled={!table.getCanPreviousPage() || isInLoadingState}\r\n                    />\r\n                    <PaginationTrigger\r\n                        direction=\"previous\"\r\n                        onClick={() => table.previousPage()}\r\n                        isDisabled={!table.getCanPreviousPage() || isInLoadingState}\r\n                    />\r\n                    <PaginationTrigger\r\n                        direction=\"next\"\r\n                        onClick={() => table.nextPage()}\r\n                        isDisabled={!table.getCanNextPage() || isInLoadingState}\r\n                    />\r\n                    <PaginationTrigger\r\n                        direction=\"next\"\r\n                        isChevrons\r\n                        onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n                        isDisabled={!table.getCanNextPage() || isInLoadingState}\r\n                    />\r\n                </Pagination>\r\n\r\n                <div className={cn(DataGridAnatomy.footerPageDisplayContainer(), footerPageDisplayContainerClass)}>\r\n                    {table.getPageCount() > 0 && (\r\n                        <>\r\n                            <div>{translations[\"page\"][lng]}</div>\r\n                            <strong>\r\n                                {table.getState().pagination.pageIndex + 1} / {table.getPageCount()}\r\n                            </strong>\r\n                        </>\r\n                    )}\r\n                </div>\r\n\r\n                <div className={cn(DataGridAnatomy.footerPaginationInputContainer(), footerPaginationInputContainerClass)}>\r\n                    {(data.length > 0) && <NumberInput\r\n                        hideControls\r\n                        value={table.getState().pagination.pageIndex + 1}\r\n                        min={1}\r\n                        onValueChange={v => {\r\n                            const page = v ? v - 1 : 0\r\n                            React.startTransition(() => {\r\n                                if (v <= table.getPageCount()) {\r\n                                    table.setPageIndex(page)\r\n                                }\r\n                            })\r\n                        }}\r\n                        className=\"inline-flex flex-none items-center w-[3rem]\"\r\n                        size=\"sm\"\r\n                    />}\r\n                    <Select\r\n                        value={String(table.getState().pagination.pageSize)}\r\n                        onValueChange={v => {\r\n                            table.setPageSize(Number(v))\r\n                        }}\r\n                        options={[Number(table.getState().pagination.pageSize),\r\n                            ...[5, 10, 20, 30, 40, 50].filter(n => n !== Number(table.getState().pagination.pageSize))].map(pageSize => ({\r\n                            value: String(pageSize),\r\n                            label: String(pageSize),\r\n                        }))}\r\n                        fieldClass=\"w-auto\"\r\n                        className=\"w-auto\"\r\n                        disabled={isInLoadingState}\r\n                        size=\"sm\"\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nDataGrid.displayName = \"DataGrid\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridSearchInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DataGridSearchInputProps {\r\n    value: string,\r\n    onChange: (value: string) => void\r\n    debounce?: number\r\n}\r\n\r\nexport function DataGridSearchInput(props: DataGridSearchInputProps & Omit<TextInputProps, \"onChange\">) {\r\n\r\n    const { value: initialValue, onChange, debounce = 500, ...rest } = props\r\n\r\n    const [value, setValue] = React.useState(initialValue)\r\n\r\n    React.useEffect(() => {\r\n        setValue(initialValue)\r\n    }, [initialValue])\r\n\r\n    React.useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            onChange(value)\r\n        }, debounce)\r\n\r\n        return () => clearTimeout(timeout)\r\n    }, [value])\r\n\r\n    return (\r\n        <TextInput\r\n            size=\"md\"\r\n            fieldClass=\"md:max-w-[30rem]\"\r\n            {...rest}\r\n            value={value}\r\n            onChange={e => setValue(e.target.value)}\r\n            leftIcon={<svg\r\n                xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                className=\"w-5 h-5 text-[--muted]\"\r\n            >\r\n                <circle cx=\"11\" cy=\"11\" r=\"8\" />\r\n                <path d=\"m21 21-4.3-4.3\" />\r\n            </svg>}\r\n        />\r\n    )\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridWithApi\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridWithApiProps<T extends Record<string, any>> = ComponentAnatomy<typeof DataGridAnatomy> & {\r\n    api: DataGridApi<T>\r\n}\r\n\r\nexport function DataGridWithApi<T extends Record<string, any>>(props: DataGridWithApiProps<T>) {\r\n\r\n    const {\r\n        api,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        data,\r\n        rowCount,\r\n        columns,\r\n    } = api\r\n\r\n    return <DataGrid\r\n        data={data}\r\n        rowCount={rowCount}\r\n        columns={columns}\r\n        tableApi={api}\r\n        {...rest}\r\n    />\r\n\r\n}\r\n"
      },
      {
        "name": "helpers.ts",
        "dir": "datagrid",
        "content": "import { BuiltInFilterFn, Cell, Column, ColumnDef, Row, Table } from \"@tanstack/react-table\"\r\nimport { AnyZodObject, z, ZodAny, ZodTypeAny } from \"zod\"\r\nimport { DataGridEditingFieldContext } from \"./datagrid-cell-input-field\"\r\nimport React from \"react\"\r\nimport { DataGridValidationRowErrors } from \"./use-datagrid-editing\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Editing\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridEditingHelper<T extends any = unknown, ZodType extends ZodTypeAny = ZodAny> = {\r\n    zodType?: ZodType\r\n    field: (\r\n        context: DataGridEditingFieldContext<ZodType extends ZodAny ? T : z.infer<ZodType>>,\r\n        options: {\r\n            rowErrors: DataGridValidationRowErrors\r\n            table: Table<any>\r\n            row: Row<any>\r\n            cell: Cell<any, unknown>\r\n        },\r\n    ) => React.ReactElement\r\n    valueFormatter?: <K = z.infer<ZodType>, R = z.infer<ZodType>>(value: K) => R\r\n}\r\n\r\nfunction withEditing<T extends any = unknown, ZodType extends ZodTypeAny = ZodAny>(params: DataGridEditingHelper<T, ZodType>) {\r\n    return {\r\n        editingMeta: {\r\n            ...params,\r\n        },\r\n    }\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Filtering\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridFilteringType = \"select\" | \"radio\" | \"checkbox\" | \"boolean\" | \"date-range\"\r\n\r\nexport interface FilterFns {\r\n    dateRangeFilter: any\r\n}\r\n\r\ntype _DefaultFilteringProps = {\r\n    type: DataGridFilteringType\r\n    name: string,\r\n    icon?: React.ReactElement\r\n    options?: { value: string, label?: any }[]\r\n    valueFormatter?: (value: any) => any\r\n}\r\n\r\ntype DefaultFilteringProps<T extends DataGridFilteringType> = {\r\n    type: T\r\n    name: string,\r\n    icon?: React.ReactElement\r\n    options: { value: string, label?: T extends \"select\" ? string : React.ReactNode }[]\r\n    valueFormatter?: (value: any) => any\r\n}\r\n\r\n// Improve type safety by removing \"options\" when the type doesn't need it\r\nexport type DataGridFilteringHelper<T extends DataGridFilteringType = \"select\"> =\r\n    T extends Extract<DataGridFilteringType, \"select\" | \"radio\" | \"checkbox\">\r\n        ? DefaultFilteringProps<T>\r\n        : Omit<DefaultFilteringProps<T>, \"options\">\r\n\r\n/**\r\n * Built-in filter functions supported DataGrid\r\n */\r\nexport type DataGridSupportedFilterFn =\r\n    Extract<BuiltInFilterFn, \"equals\" | \"equalsString\" | \"arrIncludesSome\" | \"inNumberRange\">\r\n    | \"dateRangeFilter\"\r\n\r\nfunction withFiltering<T extends DataGridFilteringType>(params: DataGridFilteringHelper<T>) {\r\n    return {\r\n        filteringMeta: {\r\n            ...params,\r\n        },\r\n    }\r\n}\r\n\r\nconst getFilterFn = (type: DataGridFilteringType) => {\r\n    const fns: { [key: string]: DataGridSupportedFilterFn } = {\r\n        select: \"equalsString\",\r\n        boolean: \"equals\",\r\n        checkbox: \"arrIncludesSome\",\r\n        radio: \"equalsString\",\r\n        \"date-range\": \"dateRangeFilter\",\r\n    }\r\n    return fns[type] as any\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Value formatter\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nfunction withValueFormatter<T extends any, R extends any = any>(callback: (value: T) => R) {\r\n    return {\r\n        valueFormatter: callback,\r\n    }\r\n}\r\n\r\nexport function getValueFormatter<T>(column: Column<T>): (value: any) => any {\r\n    return (column.columnDef.meta as any)?.valueFormatter || ((value: any) => value)\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Column Def Helpers\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridHelpers = \"filteringMeta\" | \"editingMeta\" | \"valueFormatter\"\r\n\r\nexport type DataGridColumnDefHelpers<T extends Record<string, any>> = {\r\n    withFiltering: typeof withFiltering\r\n    getFilterFn: typeof getFilterFn\r\n    withEditing: typeof withEditing\r\n    withValueFormatter: typeof withValueFormatter\r\n}\r\n\r\n/**\r\n * Return\r\n * @example\r\n * const columns = useMemo(() => defineDataGridColumns<T>(() => [\r\n *  ...\r\n * ]), [])\r\n * @param callback\r\n */\r\nexport function defineDataGridColumns<T extends Record<string, any>, Schema extends AnyZodObject = any>(\r\n    callback: (helpers: DataGridColumnDefHelpers<T>, schema?: Schema) => Array<ColumnDef<T>>,\r\n) {\r\n    return callback({\r\n        withFiltering,\r\n        getFilterFn,\r\n        withEditing,\r\n        withValueFormatter,\r\n    })\r\n}\r\n\r\n\r\nexport function getColumnHelperMeta<T, K extends DataGridHelpers>(column: Column<T>, helper: K) {\r\n    return (column.columnDef.meta as any)?.[helper] as (\r\n        K extends \"filteringMeta\" ? _DefaultFilteringProps :\r\n            K extends \"editingMeta\" ? DataGridEditingHelper :\r\n                K extends \"valueFormatter\" ? ReturnType<typeof withValueFormatter> :\r\n                    never\r\n        ) | undefined\r\n}\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "datagrid",
        "content": "export * from \"./datagrid\"\r\nexport * from \"./helpers\"\r\nexport * from \"./datagrid-instance\"\r\n"
      },
      {
        "name": "locales.ts",
        "dir": "datagrid",
        "content": "import { enUS, fr } from \"date-fns/locale\"\n\nexport const dateFnsLocales = {\n    \"fr\": fr,\n    \"en\": enUS,\n} as {\n    [key: string]: any,\n}\nexport default {\n    \"filters\": {\n        \"fr\": \"Filtres\",\n        \"en\": \"Filters\",\n    },\n    \"no-matching-result\": {\n        \"fr\": \"Aucun rÃ©sultat ne correspond aux filtres\",\n        \"en\": \"No results matching filters\",\n    },\n    \"remove-filters\": {\n        \"fr\": \"Retirer les filtres\",\n        \"en\": \"Remove all filters\",\n    },\n    \"page\": {\n        \"fr\": \"Page\",\n        \"en\": \"Page\",\n    },\n    \"rows-selected\": {\n        \"fr\": \"lignes sÃ©lectionnÃ©es\",\n        \"en\": \"rows selected\",\n    },\n    \"row-selected\": {\n        \"fr\": \"ligne sÃ©lectionnÃ©e\",\n        \"en\": \"row selected\",\n    },\n    \"save\": {\n        \"fr\": \"Enregistrer\",\n        \"en\": \"Save\",\n    },\n    \"cancel\": {\n        \"fr\": \"Annuler\",\n        \"en\": \"Cancel\",\n    },\n    \"updating\": {\n        \"fr\": \"Modification\",\n        \"en\": \"Updating\",\n    },\n    \"true\": {\n        \"fr\": \"Vrai\",\n        \"en\": \"True\",\n    },\n    \"false\": {\n        \"fr\": \"Faux\",\n        \"en\": \"False\",\n    },\n    \"date-range-placeholder\": {\n        \"fr\": \"SÃ©lectionnez une pÃ©riode\",\n        \"en\": \"Select a range\",\n    },\n} as {\n    [key: string]: { [key: string]: string },\n}\n"
      },
      {
        "name": "use-datagrid-editing.ts",
        "dir": "datagrid",
        "content": "import { Row, Table } from \"@tanstack/react-table\"\r\nimport equal from \"fast-deep-equal\"\r\nimport * as React from \"react\"\r\nimport { AnyZodObject, ZodIssue } from \"zod\"\r\nimport { DataGridEditingValueUpdater } from \"./datagrid-cell-input-field\"\r\n\r\n\r\nexport type DataGridRowEditedEvent<T extends Record<string, any>> = {\r\n    row: Row<T>\r\n    originalData: T\r\n    data: T\r\n}\r\n\r\n/**\r\n * Type of the `onRowEdit` event\r\n */\r\nexport type DataGridOnRowEdit<T extends Record<string, any>> = (event: DataGridRowEditedEvent<T>) => void\r\n\r\n//----\r\n\r\nexport type DataGridRowValidationError<T extends Record<string, any>> = {\r\n    row: Row<T>\r\n    originalData: T\r\n    data: T\r\n    errors: ZodIssue[]\r\n}\r\n\r\n/**\r\n * Type of the `onRowValidationError` event\r\n */\r\nexport type DataGridOnRowValidationError<T extends Record<string, any>> = (event: DataGridRowValidationError<T>) => void\r\n\r\n//----\r\n\r\nexport type DataGridValidationRowErrors = Array<{ rowId: string, key: string, message: string }>\r\n\r\n/**\r\n * Hook props\r\n */\r\ntype Props<T extends Record<string, any>> = {\r\n    data: T[]\r\n    table: Table<T>\r\n    rows: Row<T>[]\r\n    onRowEdit?: DataGridOnRowEdit<T>\r\n    isDataMutating: boolean | undefined\r\n    enableOptimisticUpdates: boolean\r\n    onDataChange: React.Dispatch<React.SetStateAction<T[]>>\r\n    optimisticUpdatePrimaryKey: string | undefined\r\n    manualPagination: boolean\r\n    schema: AnyZodObject | undefined\r\n    onRowValidationError: DataGridOnRowValidationError<T> | undefined\r\n}\r\n\r\nexport function useDataGridEditing<T extends Record<string, any>>(props: Props<T>) {\r\n\r\n    const {\r\n        data,\r\n        table,\r\n        rows,\r\n        onRowEdit,\r\n        isDataMutating,\r\n        onDataChange,\r\n        enableOptimisticUpdates,\r\n        optimisticUpdatePrimaryKey,\r\n        manualPagination,\r\n        schema,\r\n        onRowValidationError,\r\n    } = props\r\n\r\n    const leafColumns = table.getAllLeafColumns()\r\n    // Keep track of the state of each editable cell\r\n    const [editableCellStates, setEditableCellStates] = React.useState<{\r\n        id: string,\r\n        colId: string,\r\n        rowId: string,\r\n        isEditing: boolean\r\n    }[]>([])\r\n\r\n    // Track updated value\r\n    const [activeValue, setActiveValue] = React.useState<unknown>(undefined)\r\n    // Track current row data being updated\r\n    const [rowData, setRowData] = React.useState<T | undefined>(undefined)\r\n    // Track current row being updated\r\n    const [row, setRow] = React.useState<Row<T> | undefined>(undefined)\r\n\r\n    const [rowErrors, setRowErrors] = React.useState<DataGridValidationRowErrors>([])\r\n\r\n    // Keep track of editable columns (columns defined with the `withEditing` helper)\r\n    const editableColumns = React.useMemo(() => {\r\n        return leafColumns.filter(n => n.getIsVisible() && !!(n.columnDef.meta as any)?.editingMeta)\r\n    }, [leafColumns])\r\n\r\n    React.useEffect(() => {\r\n        if (manualPagination) {\r\n            setActiveValue(undefined)\r\n            setRowData(undefined)\r\n            setRow(undefined)\r\n            setEditableCellStates([])\r\n        }\r\n    }, [table.getState().pagination.pageIndex, table.getState().pagination.pageSize])\r\n\r\n    // Keep track of editable cells (cells whose columns are editable)\r\n    const editableCells = React.useMemo(() => {\r\n        if (rows.length > 0) {\r\n            return rows.flatMap(row => row.getVisibleCells().filter(cell => !!editableColumns.find(col => col.id === cell.column.id)?.id))\r\n        }\r\n        return []\r\n    }, [rows])\r\n\r\n    // Set/update editable cells\r\n    React.useLayoutEffect(() => {\r\n        // Control the states of individual cells that can be edited\r\n        if (editableCells.length > 0) {\r\n            editableCells.map(cell => {\r\n                setEditableCellStates(prev => [...prev, {\r\n                    id: cell.id,\r\n                    colId: cell.column.id,\r\n                    rowId: cell.row.id,\r\n                    isEditing: false,\r\n                }])\r\n            })\r\n        }\r\n    }, [editableCells])\r\n\r\n    /**/\r\n    const handleStartEditing = React.useCallback((cellId: string) => {\r\n        // Manage editing state of cells\r\n        setEditableCellStates(prev => {\r\n            const others = prev.filter(prevCell => prevCell.id !== cellId)\r\n            const cell = prev.find(prevCell => prevCell.id === cellId)\r\n\r\n            if (cell && prev.every(prevCell => !prevCell.isEditing)) { // (Event 1) When we select a cell and nothing else is being edited\r\n                return [...others, { ...cell, id: cellId, isEditing: true }]\r\n\r\n            } else if (cell && prev.some(prevCell => prevCell.isEditing)) { // (Event 2) When another cell is being edited\r\n                const otherCellBeingEdited = prev.find(prevCell => prevCell.isEditing) // Find the cell being edited\r\n\r\n                if (otherCellBeingEdited?.rowId === cell?.rowId) { // Only allow cells on the same row to be edited\r\n                    return [...others, { ...cell, id: cellId, isEditing: true }]\r\n                }\r\n            }\r\n            return prev\r\n        })\r\n    }, [])\r\n\r\n    /**/\r\n    const getIsCellActivelyEditing = React.useCallback((cellId: string) => {\r\n        return editableCellStates.some(cell => cell.id === cellId && cell.isEditing)\r\n    }, [editableCellStates])\r\n    /**/\r\n    const getIsCellEditable = React.useCallback((cellId: string) => {\r\n        return !!editableCellStates.find(cell => cell.id === cellId)\r\n    }, [editableCellStates])\r\n    /**/\r\n    const getIsCurrentlyEditing = React.useCallback(() => {\r\n        return editableCellStates.some(cell => cell.isEditing)\r\n    }, [editableCellStates])\r\n    /**/\r\n    const getFirstCellBeingEdited = React.useCallback(() => {\r\n        return editableCellStates.find(cell => cell.isEditing)\r\n    }, [editableCellStates])\r\n    /**/\r\n    const handleStopEditing = React.useCallback(() => {\r\n        setEditableCellStates(prev => {\r\n            return prev.map(n => ({ ...n, isEditing: false }))\r\n        })\r\n    }, [])\r\n\r\n    const mutationRef = React.useRef<boolean>(false)\r\n\r\n    /**\r\n     * When `isDataMutating` is provided to watch mutations,\r\n     * Wait for it to be `false` to cancel editing\r\n     */\r\n    React.useEffect(() => {\r\n        if (isDataMutating !== undefined && !isDataMutating && mutationRef.current) {\r\n            handleStopEditing()\r\n            mutationRef.current = false\r\n        }\r\n    }, [isDataMutating])\r\n\r\n    /**\r\n     * When `isDataMutating` is not provided, immediately cancel editing\r\n     */\r\n    React.useEffect(() => {\r\n        if (isDataMutating === undefined) {\r\n            handleStopEditing()\r\n        }\r\n    }, [mutationRef.current])\r\n\r\n    const saveEdit = React.useCallback((transformedData?: T) => {\r\n        if (!row || !rowData) return handleStopEditing()\r\n\r\n        // Compare data\r\n        if (!equal(rowData, row.original)) {\r\n            // Return new data\r\n            onRowEdit && onRowEdit({\r\n                originalData: row.original,\r\n                data: transformedData || rowData,\r\n                row: row,\r\n            })\r\n\r\n            // Optimistic update\r\n            if (enableOptimisticUpdates && optimisticUpdatePrimaryKey) {\r\n                let clone = structuredClone(data)\r\n                const index = clone.findIndex(p => {\r\n                    if (!p[optimisticUpdatePrimaryKey] || !rowData[optimisticUpdatePrimaryKey]) return false\r\n                    return p[optimisticUpdatePrimaryKey] === rowData[optimisticUpdatePrimaryKey]\r\n                })\r\n                if (clone[index] && index > -1) {\r\n                    clone[index] = rowData\r\n                    onDataChange(clone) // Emit optimistic update\r\n                } else {\r\n                    console.error(\"[DataGrid] Could not perform optimistic update. Make sure `optimisticUpdatePrimaryKey` is a valid property.\")\r\n                }\r\n\r\n            } else if (enableOptimisticUpdates) {\r\n                console.error(\"[DataGrid] Could not perform optimistic update. Make sure `optimisticUpdatePrimaryKey` is defined.\")\r\n            }\r\n\r\n            // Immediately stop edit if optimistic updates are enabled\r\n            if (enableOptimisticUpdates) {\r\n                handleStopEditing()\r\n            } else {\r\n                // Else, we wait for `isDataMutating` to be false\r\n                mutationRef.current = true\r\n            }\r\n        } else {\r\n            handleStopEditing()\r\n        }\r\n    }, [row, rowData])\r\n\r\n    const handleOnSave = React.useCallback(async () => {\r\n        if (!row || !rowData) return\r\n        setRowErrors([])\r\n\r\n        // Safely parse the schema object when a `validationSchema` is provided\r\n        if (schema) {\r\n            try {\r\n                const parsed = await schema.safeParseAsync(rowData)\r\n                if (parsed.success) {\r\n                    let finalData = structuredClone(rowData)\r\n                    Object.keys(parsed.data).map(key => {\r\n                        // @ts-expect-error\r\n                        finalData[key] = parsed.data[key]\r\n                    })\r\n                    saveEdit(finalData)\r\n                } else {\r\n\r\n\r\n                    parsed.error.errors.map(error => {\r\n                        setRowErrors(prev => [\r\n                            ...prev,\r\n                            { rowId: row.id, key: String(error.path[0]), message: error.message },\r\n                        ])\r\n                    })\r\n\r\n                    if (onRowValidationError) {\r\n                        onRowValidationError({\r\n                            data: rowData,\r\n                            originalData: row.original,\r\n                            row: row,\r\n                            errors: parsed.error.errors,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.error(\"[DataGrid] Could not perform validation\")\r\n            }\r\n        } else {\r\n            saveEdit()\r\n        }\r\n\r\n    }, [row, rowData])\r\n\r\n    /**\r\n     * This fires every time the user updates a cell value\r\n     */\r\n    const handleUpdateValue = React.useCallback<DataGridEditingValueUpdater<T>>((value, _row, cell, zodType) => {\r\n        setActiveValue(value) // Set the updated value (could be anything)\r\n        setRow(_row) // Set the row being updated\r\n        setRowData(prev => ({\r\n            // If we are updating a different row, reset the rowData, else keep the past updates\r\n            ...((row?.id !== _row.id || !rowData) ? _row.original : rowData),\r\n            [cell.column.id]: value,\r\n        }))\r\n    }, [row, rowData])\r\n\r\n\r\n    return {\r\n        handleStartEditing,\r\n        getIsCellActivelyEditing,\r\n        getIsCellEditable,\r\n        getIsCurrentlyEditing,\r\n        getFirstCellBeingEdited,\r\n        handleStopEditing,\r\n        handleOnSave,\r\n        handleUpdateValue,\r\n        rowErrors,\r\n    }\r\n\r\n}\r\n"
      },
      {
        "name": "use-datagrid-filtering.ts",
        "dir": "datagrid",
        "content": "import { Column, ColumnFiltersState, Table } from \"@tanstack/react-table\"\r\nimport * as React from \"react\"\r\nimport { getColumnHelperMeta } from \"./helpers\"\r\nimport addDays from \"date-fns/addDays\"\r\nimport isSameDay from \"date-fns/isSameDay\"\r\n\r\ninterface DataGridFilteringHookProps<T> {\r\n    table: Table<T>,\r\n    columnFilters: ColumnFiltersState,\r\n}\r\n\r\nexport function useDataGridFiltering<T>(props: DataGridFilteringHookProps<T>) {\r\n\r\n    const {\r\n        table,\r\n        columnFilters,\r\n    } = props\r\n\r\n    /**\r\n     * Item filtering\r\n     */\r\n    const [filterableColumns, filteredColumns] = React.useMemo(() => {\r\n        return [\r\n            table.getAllLeafColumns().filter(col => col.getCanFilter() && !!getColumnHelperMeta(col, \"filteringMeta\")),\r\n            table.getAllLeafColumns().filter(col => columnFilters.map(filter => filter.id).includes(col.id)),\r\n        ]\r\n    }, [table.getAllLeafColumns(), columnFilters])\r\n    const unselectedFilterableColumns = filterableColumns.filter(n => !columnFilters.map(c => c.id).includes(n.id))\r\n\r\n    // Get the default value for a filter when the user selects it\r\n    const getFilterDefaultValue = React.useCallback((col: Column<any>) => {\r\n        // Since the column is filterable, get options\r\n        const options = getColumnHelperMeta(col, \"filteringMeta\")\r\n        if (options) {\r\n            if (options.type === \"select\" || options.type === \"radio\") {\r\n                return options.options?.[0]?.value ?? \"\"\r\n            } else if (options.type === \"boolean\") {\r\n                return true\r\n            } else if (options.type === \"checkbox\") {\r\n                return options.options?.map(n => n.value) ?? []\r\n            } else if (options.type === \"date-range\") {\r\n                return { from: new Date(), to: addDays(new Date(), 7) }\r\n            }\r\n        }\r\n        return null\r\n    }, [])\r\n\r\n    return {\r\n        getFilterDefaultValue,\r\n        unselectedFilterableColumns,\r\n        filteredColumns,\r\n        filterableColumns,\r\n    }\r\n\r\n}\r\n\r\nexport const dateRangeFilter = (row: any, columnId: string, filterValue: any) => {\r\n    if (!filterValue || !filterValue.start || !filterValue.end) return true\r\n    const value: Date = row.getValue(columnId)\r\n    return (value >= filterValue.start && value <= filterValue.end) || isSameDay(value, filterValue.start) || isSameDay(value, filterValue.end)\r\n}\r\n"
      },
      {
        "name": "use-datagrid-responsiveness.ts",
        "dir": "datagrid",
        "content": "import { useDataGridSize } from \"./use-datagrid-size\"\r\nimport * as React from \"react\"\r\nimport { Table } from \"@tanstack/react-table\"\r\n\r\ninterface DataGridResponsivenessHookProps<T extends Record<string, any>> {\r\n    hideColumns: { below: number, hide: string[] }[] | undefined,\r\n    table: Table<T>\r\n}\r\n\r\nexport function useDataGridResponsiveness<T extends Record<string, any>>(props: DataGridResponsivenessHookProps<T>) {\r\n\r\n    const {\r\n        hideColumns = [],\r\n        table,\r\n    } = props\r\n\r\n    const [tableRef, { width: tableWidth }] = useDataGridSize<HTMLDivElement>()\r\n    const deferredTableWidth = React.useDeferredValue(tableWidth)\r\n\r\n    React.useLayoutEffect(() => {\r\n        hideColumns.map(({ below, hide }) => {\r\n            table.getAllLeafColumns().map(column => {\r\n                if (hide.includes(column.id)) {\r\n                    if (tableWidth !== 0 && tableWidth < below) {\r\n                        if (column.getIsVisible()) column.toggleVisibility(false)\r\n                    } else {\r\n                        if (!column.getIsVisible()) column.toggleVisibility(true)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }, [hideColumns, deferredTableWidth])\r\n\r\n    return {\r\n        tableRef,\r\n        tableWidth,\r\n    }\r\n\r\n}\r\n"
      },
      {
        "name": "use-datagrid-row-selection.ts",
        "dir": "datagrid",
        "content": "import { Row, Table } from \"@tanstack/react-table\"\r\nimport * as React from \"react\"\r\n\r\nexport type DataGridOnRowSelect<T> = (event: DataGridRowSelectedEvent<T>) => void\r\n\r\ntype DataGridRowSelectionProps<T> = {\r\n    /**\r\n     * Whether the row selection is persistent.\r\n     * If true, the selected rows will be cached and restored when the table is paginated, filtered, sorted or when the data changes.\r\n     */\r\n    persistent: boolean\r\n    /**\r\n     * Callback fired when a row is selected.\r\n     */\r\n    onRowSelect?: DataGridOnRowSelect<T>\r\n    /**\r\n     * The table instance.\r\n     */\r\n    table: Table<T>,\r\n    /**\r\n     * The data passed to the table.\r\n     */\r\n    data: T[] | null\r\n    /**\r\n     * The rows currently displayed in the table.\r\n     */\r\n    displayedRows: Row<T>[]\r\n    /**\r\n     * The primary key of the data. This is used to identify the rows.\r\n     */\r\n    rowSelectionPrimaryKey: string | undefined\r\n    /**\r\n     * Whether row selection is enabled.\r\n     */\r\n    enabled: boolean\r\n}\r\n\r\nexport type DataGridRowSelectedEvent<T> = {\r\n    data: T[]\r\n}\r\n\r\nexport function useDataGridRowSelection<T extends Record<string, any>>(props: DataGridRowSelectionProps<T>) {\r\n\r\n    const {\r\n        table,\r\n        data,\r\n        onRowSelect,\r\n        persistent,\r\n        rowSelectionPrimaryKey: key,\r\n        displayedRows,\r\n        enabled,\r\n    } = props\r\n\r\n\r\n    const rowSelection = React.useMemo(() => table.getState().rowSelection, [table.getState().rowSelection])\r\n    const selectedRowsRef = React.useRef<Map<string | number, T>>(new Map())\r\n\r\n    //----------------------------------\r\n\r\n    const canSelect = React.useRef<boolean>(enabled)\r\n\r\n    React.useEffect(() => {\r\n        selectedRowsRef.current.clear()\r\n\r\n        if (enabled && !key) {\r\n            console.error(\r\n                \"[DataGrid] You've enable row selection without providing a primary key. Make sure to define the `rowSelectionPrimaryKey` prop.\")\r\n            canSelect.current = false\r\n        }\r\n    }, [])\r\n\r\n    const firstCheckRef = React.useRef<boolean>(false)\r\n\r\n    React.useEffect(() => {\r\n        if (enabled && key && !firstCheckRef.current && displayedRows.length > 0 && !displayedRows.some(row => !!row.original[key])) {\r\n            console.error(\"[DataGrid] The key provided by `rowSelectionPrimaryKey` does not match any property in the data.\")\r\n            firstCheckRef.current = true\r\n            canSelect.current = false\r\n        }\r\n    }, [displayedRows])\r\n\r\n    /** Client-side row selection **/\r\n    React.useEffect(() => {\r\n        if (data && data?.length > 0 && canSelect.current && !!key) {\r\n            const selectedKeys = new Set<string | number>(Object.keys(rowSelection))\r\n\r\n            if (persistent) {\r\n                // Remove the keys that are no longer selected\r\n                selectedRowsRef.current.forEach((_, k) => {\r\n                    if (!selectedKeys.has(k.toString())) {\r\n                        selectedRowsRef.current.delete(k)\r\n                    }\r\n                })\r\n\r\n                // Add the selected rows to the selectedRowsRef\r\n                selectedKeys.forEach(n => {\r\n                    const row = data.find((v: any) => v[key] === n)\r\n                    if (row) {\r\n                        selectedRowsRef.current.set(n, row)\r\n                    }\r\n                })\r\n\r\n                onRowSelect && onRowSelect({\r\n                    data: Array.from(selectedRowsRef.current.values()).filter((v: any) => selectedKeys.has(v[key])) ?? [],\r\n                })\r\n            } else {\r\n                onRowSelect && onRowSelect({\r\n                    data: data.filter((v: any) => selectedKeys.has(v[key])) ?? [],\r\n                })\r\n            }\r\n\r\n        }\r\n    }, [rowSelection])\r\n\r\n\r\n    return {\r\n        selectedRowCount: Object.keys(rowSelection).length,\r\n    }\r\n\r\n}\r\n"
      },
      {
        "name": "use-datagrid-size.ts",
        "dir": "datagrid",
        "content": "import * as React from \"react\"\r\nimport { useEventListener, useIsomorphicLayoutEffect } from \"../core/hooks\"\r\n\r\nexport function useDataGridSize<T extends HTMLElement = HTMLDivElement>(): [\r\n    (node: T | null) => void,\r\n    { width: number, height: number },\r\n] {\r\n    const [ref, setRef] = React.useState<T | null>(null)\r\n    const [size, setSize] = React.useState<{ width: number, height: number }>({\r\n        width: 0,\r\n        height: 0,\r\n    })\r\n\r\n    const handleSize = React.useCallback(() => {\r\n        setSize({\r\n            width: ref?.offsetWidth || 0,\r\n            height: ref?.offsetHeight || 0,\r\n        })\r\n\r\n    }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n    useEventListener(\"resize\", handleSize)\r\n\r\n    useIsomorphicLayoutEffect(() => {\r\n        handleSize()\r\n    }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n    return [setRef, size]\r\n}\r\n"
      }
    ]
  },
  {
    "component": "date-picker",
    "name": "DatePicker",
    "dependencies": [
      [
        "date-fns",
        "^2.30.0",
        ""
      ],
      [
        "react-day-picker",
        "^8.10.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "calendar",
      "input",
      "modal",
      "popover",
      "select"
    ],
    "files": [
      {
        "name": "date-picker.tsx",
        "dir": "date-picker",
        "content": "\"use client\"\n\nimport { mergeRefs } from \"../core/utils\"\nimport { cva } from \"class-variance-authority\"\nimport { format, getYear, setYear } from \"date-fns\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Calendar } from \"../calendar\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Modal } from \"../modal\"\nimport { Popover } from \"../popover\"\nimport { Select } from \"../select\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DatePickerAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DatePicker__root\",\n    ]),\n    placeholder: cva([\n        \"UI-DatePicker__placeholder\",\n        \"text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DatePicker\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DatePickerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof DatePickerAnatomy> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The selected date\n     */\n    value?: Date\n    /**\n     * Callback fired when the selected date changes\n     */\n    onValueChange?: (value: Date | undefined) => void\n    /**\n     * Default value if uncontrolled\n     */\n    defaultValue?: Date\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * The locale for formatting the date\n     */\n    locale?: Locale\n    /**\n     * Hide the year selector above the calendar\n     */\n    hideYearSelector?: boolean\n    /**\n     * Props to pass to the calendar\n     *\n     * This is useful for setting the min and max dates\n     */\n    pickerOptions?: Partial<Omit<React.ComponentProps<typeof Calendar>, \"locale\" | \"mode\">>\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n}\n\nexport const DatePicker = React.forwardRef<HTMLButtonElement, DatePickerProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<DatePickerProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        placeholderClass,\n        /**/\n        value: controlledValue,\n        onValueChange,\n        placeholder,\n        locale,\n        hideYearSelector,\n        pickerOptions,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<DatePickerProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon || <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"size-4\"\n        >\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" ry=\"2\" />\n            <line x1=\"16\" x2=\"16\" y1=\"2\" y2=\"6\" />\n            <line x1=\"8\" x2=\"8\" y1=\"2\" y2=\"6\" />\n            <line x1=\"3\" x2=\"21\" y1=\"10\" y2=\"10\" />\n        </svg>,\n    })\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const isFirst = React.useRef(true)\n\n    const [date, setDate] = React.useState<Date | undefined>(controlledValue || defaultValue)\n\n    const handleOnSelect = React.useCallback((date: Date | undefined) => {\n        setDate(date)\n        onValueChange?.(date)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            setDate(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const Input = (\n        <button\n            ref={mergeRefs([buttonRef, ref])}\n            id={basicFieldProps.id}\n            name={basicFieldProps.name}\n            className={cn(\n                \"form-input\",\n                InputAnatomy.root({\n                    size,\n                    intent,\n                    hasError: !!basicFieldProps.error,\n                    isDisabled: !!basicFieldProps.disabled,\n                    isReadonly: !!basicFieldProps.readonly,\n                    hasRightAddon: !!rightAddon,\n                    hasRightIcon: !!rightIcon,\n                    hasLeftAddon: !!leftAddon,\n                    hasLeftIcon: !!leftIcon,\n                }),\n                DatePickerAnatomy.root(),\n                className,\n            )}\n            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n            data-disabled={basicFieldProps.disabled}\n            data-readonly={basicFieldProps.readonly}\n            aria-readonly={basicFieldProps.readonly}\n            {...rest}\n        >\n            {date ?\n                format(date, \"PPP\", { locale: locale }) :\n                <span className={cn(DatePickerAnatomy.placeholder(), placeholderClass)}>{placeholder || \"Select a date\"}</span>}\n        </button>\n    )\n\n    const Picker = (\n        <div>\n            {!hideYearSelector && <div className=\"flex items-center justify-between p-1 sm:border-b\">\n                <Select\n                    size=\"sm\"\n                    intent=\"filled\"\n                    options={Array(getYear(new Date()) - 1899).fill(0).map((_, i) => (\n                        { label: String(getYear(new Date()) + 100 - i), value: String(getYear(new Date()) + 100 - i) }\n                    ))}\n                    value={String(getYear(date ?? new Date()))}\n                    onValueChange={value => setDate(setYear(date ?? new Date(), Number(value)))}\n                />\n            </div>}\n            <Calendar\n                {...pickerOptions}\n                mode=\"single\"\n                month={date ?? new Date()}\n                onMonthChange={month => setDate(month)}\n                selected={date}\n                onSelect={handleOnSelect}\n                locale={locale}\n                initialFocus\n                tableClass=\"w-auto mx-auto\"\n            />\n        </div>\n    )\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <div className=\"hidden sm:block w-full\">\n                    <Popover\n                        className=\"w-auto p-0\"\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Popover>\n                </div>\n\n                <div className=\"block sm:hidden w-full\">\n                    <Modal\n                        title={placeholder || \"Select a date\"}\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Modal>\n                </div>\n\n                <input\n                    ref={inputRef}\n                    type=\"date\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={date ? date.toISOString().split(\"T\")[0] : \"\"}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nDatePicker.displayName = \"DatePicker\"\n"
      },
      {
        "name": "date-range-picker.tsx",
        "dir": "date-picker",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport { format } from \"date-fns\"\nimport * as React from \"react\"\nimport { DateRange } from \"react-day-picker\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Calendar } from \"../calendar\"\nimport { mergeRefs } from \"../core/utils\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\nimport { Modal } from \"../modal\"\nimport { Popover } from \"../popover\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DateRangePickerAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DateRangePicker__root\",\n        \"truncate\",\n    ]),\n    placeholder: cva([\n        \"UI-DateRangePicker__placeholder\",\n        \"text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DateRangePicker\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DateRangePickerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"size\" | \"value\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof DateRangePickerAnatomy> &\n    InputStyling &\n    BasicFieldOptions & {\n    /**\n     * The selected date\n     */\n    value?: DateRange\n    /**\n     * Default value if uncontrolled\n     */\n    defaultValue?: DateRange\n    /**\n     * Callback fired when the selected date changes\n     */\n    onValueChange?: (value: DateRange | undefined) => void\n    /**\n     * The placeholder text\n     */\n    placeholder?: string\n    /**\n     * The locale for formatting the date\n     */\n    locale?: Locale\n    /**\n     * Props to pass to the calendar\n     *\n     * This is useful for setting the min and max dates\n     */\n    pickerOptions?: Partial<Omit<React.ComponentProps<typeof Calendar>, \"locale\" | \"mode\">>\n    /**\n     * Ref to the input element\n     */\n    inputRef?: React.Ref<HTMLInputElement>\n}\n\nexport const DateRangePicker = React.forwardRef<HTMLButtonElement, DateRangePickerProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<DateRangePickerProps>(props, React.useId())\n\n    const [{\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        className,\n        placeholderClass,\n        /**/\n        value: controlledValue,\n        onValueChange,\n        placeholder,\n        locale,\n        defaultValue,\n        inputRef,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<DateRangePickerProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon || <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"size-4\"\n        >\n            <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" ry=\"2\" />\n            <line x1=\"16\" x2=\"16\" y1=\"2\" y2=\"6\" />\n            <line x1=\"8\" x2=\"8\" y1=\"2\" y2=\"6\" />\n            <line x1=\"3\" x2=\"21\" y1=\"10\" y2=\"10\" />\n        </svg>,\n    })\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const isFirst = React.useRef(true)\n\n    const [date, setDate] = React.useState<DateRange | undefined>(controlledValue || defaultValue)\n\n    const handleOnSelect = React.useCallback((date: DateRange | undefined) => {\n        setDate(date)\n        onValueChange?.(date)\n    }, [])\n\n    React.useEffect(() => {\n        if (!defaultValue || !isFirst.current) {\n            setDate(controlledValue)\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const Input = (\n        <button\n            ref={mergeRefs([buttonRef, ref])}\n            id={basicFieldProps.id}\n            name={basicFieldProps.name}\n            className={cn(\n                \"form-input\",\n                InputAnatomy.root({\n                    size,\n                    intent,\n                    hasError: !!basicFieldProps.error,\n                    isDisabled: !!basicFieldProps.disabled,\n                    isReadonly: !!basicFieldProps.readonly,\n                    hasRightAddon: !!rightAddon,\n                    hasRightIcon: !!rightIcon,\n                    hasLeftAddon: !!leftAddon,\n                    hasLeftIcon: !!leftIcon,\n                }),\n                DateRangePickerAnatomy.root(),\n                className,\n            )}\n            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n            data-disabled={basicFieldProps.disabled}\n            data-readonly={basicFieldProps.readonly}\n            aria-readonly={basicFieldProps.readonly}\n            {...rest}\n        >\n            {date?.from ? (\n                date.to ? <span className=\"line-clamp-1\">{`${format(date.from, \"PPP\")} - ${format(date.to, \"PPP\")}`}</span> : format(date.from, \"PPP\")\n            ) : <span className={cn(DateRangePickerAnatomy.placeholder(), placeholderClass)}>{placeholder || \"Select a date\"}</span>}\n        </button>\n    )\n\n    const Picker = (\n        <Calendar\n            captionLayout=\"dropdown-buttons\"\n            mode=\"range\"\n            defaultMonth={date?.from ?? new Date()}\n            selected={date}\n            onSelect={handleOnSelect}\n            locale={locale}\n            initialFocus\n            tableClass=\"w-auto mx-auto\"\n            numberOfMonths={2}\n        />\n    )\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <InputContainer {...inputContainerProps}>\n\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <div className=\"hidden sm:block w-full\">\n                    <Popover\n                        className=\"w-auto p-0\"\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Popover>\n                </div>\n\n                <div className=\"block sm:hidden w-full\">\n                    <Modal\n                        title={placeholder || \"Select a date\"}\n                        trigger={Input}\n                    >\n                        {Picker}\n                    </Modal>\n                </div>\n\n                <input\n                    ref={inputRef}\n                    type=\"text\"\n                    name={basicFieldProps.name}\n                    className={hiddenInputStyles}\n                    value={date ? `${date.from?.toISOString()?.split(\"T\")?.[0]}${date.to ? \",\" + date.to.toISOString().split(\"T\")[0] : \"\"}` : \"\"}\n                    aria-hidden=\"true\"\n                    required={basicFieldProps.required}\n                    tabIndex={-1}\n                    onChange={() => {}}\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                />\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon {...rightIconProps} />\n\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nDateRangePicker.displayName = \"DateRangePicker\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "date-picker",
        "content": "export * from \"./date-picker\"\nexport * from \"./date-range-picker\"\n"
      }
    ]
  },
  {
    "component": "disclosure",
    "name": "Disclosure",
    "dependencies": [
      [
        "@radix-ui/react-accordion",
        "^1.1.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "disclosure.tsx",
        "dir": "disclosure",
        "content": "\"use client\"\r\n\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DisclosureAnatomy = defineStyleAnatomy({\r\n    item: cva([\r\n        \"UI-Disclosure__item\",\r\n    ]),\r\n    contentContainer: cva([\r\n        \"UI-Disclosure__contentContainer\",\r\n        \"overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\r\n    ]),\r\n    content: cva([\r\n        \"UI-Disclosure__content\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Disclosure\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst __DisclosureAnatomyContext = React.createContext<ComponentAnatomy<typeof DisclosureAnatomy>>({})\r\n\r\nexport type DisclosureProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & ComponentAnatomy<typeof DisclosureAnatomy>\r\n\r\nexport const Disclosure = React.forwardRef<HTMLDivElement, DisclosureProps>((props, ref) => {\r\n\r\n    const {\r\n        contentContainerClass,\r\n        contentClass,\r\n        itemClass,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <__DisclosureAnatomyContext.Provider\r\n            value={{\r\n                itemClass,\r\n                contentContainerClass,\r\n                contentClass,\r\n            }}\r\n        >\r\n            <AccordionPrimitive.Root\r\n                ref={ref}\r\n                {...rest}\r\n            />\r\n        </__DisclosureAnatomyContext.Provider>\r\n    )\r\n\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DisclosureItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DisclosureItemProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & ComponentAnatomy<typeof DisclosureAnatomy>\r\n\r\nexport const DisclosureItem = React.forwardRef<HTMLDivElement, DisclosureItemProps>((props, ref) => {\r\n\r\n    const { className, ...rest } = props\r\n\r\n    const { itemClass } = React.useContext(__DisclosureAnatomyContext)\r\n\r\n    return (\r\n        <AccordionPrimitive.Item\r\n            ref={ref}\r\n            className={cn(DisclosureAnatomy.item(), itemClass, className)}\r\n            {...rest}\r\n        />\r\n    )\r\n\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DisclosureTrigger\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DisclosureTriggerAnatomyProps = Omit<ComponentAnatomy<typeof DisclosureAnatomy>, \"itemClass\" | \"triggerClass\">\r\ntype DisclosureTriggerProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & DisclosureTriggerAnatomyProps\r\n\r\nexport const DisclosureTrigger = React.forwardRef<HTMLButtonElement, DisclosureTriggerProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        children,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <AccordionPrimitive.Header asChild>\r\n            <AccordionPrimitive.Trigger asChild>\r\n                {children}\r\n            </AccordionPrimitive.Trigger>\r\n        </AccordionPrimitive.Header>\r\n    )\r\n\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DisclosureContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DisclosureContentAnatomyProps = Omit<ComponentAnatomy<typeof DisclosureAnatomy>, \"contentClass\">\r\ntype DisclosureContentProps = React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> & DisclosureContentAnatomyProps\r\n\r\nexport const DisclosureContent = React.forwardRef<HTMLDivElement, DisclosureContentProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        contentContainerClass,\r\n        children,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        contentContainerClass: _contentContainerClass,\r\n        contentClass: _contentClass,\r\n    } = React.useContext(__DisclosureAnatomyContext)\r\n\r\n    return (\r\n        <AccordionPrimitive.Content\r\n            ref={ref}\r\n            className={cn(DisclosureAnatomy.contentContainer(), _contentContainerClass, contentContainerClass)}\r\n            {...rest}\r\n        >\r\n            <div className={cn(DisclosureAnatomy.content(), _contentClass, className)}>\r\n                {children}\r\n            </div>\r\n        </AccordionPrimitive.Content>\r\n    )\r\n})\r\n\r\nDisclosureItem.displayName = \"DisclosureItem\"\r\nDisclosureTrigger.displayName = \"DisclosureTrigger\"\r\nDisclosureContent.displayName = \"DisclosureContent\"\r\n\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "disclosure",
        "content": "export * from \"./disclosure\"\r\n"
      }
    ]
  },
  {
    "component": "drawer",
    "name": "Drawer",
    "dependencies": [
      [
        "@radix-ui/react-dialog",
        "^1.0.4",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "drawer.tsx",
        "dir": "drawer",
        "content": "\"use client\"\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { CloseButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DrawerAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-Drawer__overlay\",\n        \"fixed inset-0 z-[50] bg-black/80\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n    ]),\n    content: cva([\n        \"UI-Drawer__content\",\n        \"fixed z-50 w-full gap-4 bg-[--background] p-6 shadow-lg\",\n        \"transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-500 data-[state=open]:duration-500\",\n    ], {\n        variants: {\n            side: {\n                top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n                bottom: \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n                left: \"inset-y-0 left-0 h-full border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\n                right: \"inset-y-0 right-0 h-full border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\n            },\n            size: { sm: null, md: null, lg: null, xl: null, full: \"w-[90%]\" },\n        },\n        compoundVariants: [\n            { size: \"sm\", side: \"left\", className: \"sm:max-w-sm\" },\n            { size: \"sm\", side: \"right\", className: \"sm:max-w-sm\" },\n            { size: \"md\", side: \"left\", className: \"sm:max-w-md\" },\n            { size: \"md\", side: \"right\", className: \"sm:max-w-md\" },\n            { size: \"lg\", side: \"left\", className: \"sm:max-w-2xl\" },\n            { size: \"lg\", side: \"right\", className: \"sm:max-w-2xl\" },\n            { size: \"xl\", side: \"left\", className: \"sm:max-w-5xl\" },\n            { size: \"xl\", side: \"right\", className: \"sm:max-w-5xl\" },\n            /**/\n            { size: \"full\", side: \"top\", className: \"h-dvh\" },\n            { size: \"full\", side: \"bottom\", className: \"h-dvh\" },\n        ],\n        defaultVariants: {\n            side: \"right\",\n            size: \"md\",\n        },\n    }),\n    close: cva([\n        \"UI-Drawer__close\",\n        \"absolute right-4 top-4\",\n    ]),\n    header: cva([\n        \"UI-Drawer__header\",\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n    ]),\n    footer: cva([\n        \"UI-Drawer__footer\",\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n    ]),\n    title: cva([\n        \"UI-Drawer__title\",\n        \"text-xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Drawer__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Drawer\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DrawerProps = Omit<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>, \"modal\"> &\n    Pick<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>,\n        \"onOpenAutoFocus\" | \"onCloseAutoFocus\" | \"onEscapeKeyDown\" | \"onPointerDownCapture\" | \"onInteractOutside\"> &\n    VariantProps<typeof DrawerAnatomy.content> &\n    ComponentAnatomy<typeof DrawerAnatomy> & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The button that opens the modal\n     */\n    trigger?: React.ReactElement\n    /**\n     * Title of the modal\n     */\n    title?: React.ReactNode\n    /**\n     * An optional accessible description to be announced when the dialog is opened.\n     */\n    description?: React.ReactNode\n    /**\n     * Footer of the modal\n     */\n    footer?: React.ReactNode\n    /**\n     * Optional replacement for the default close button\n     */\n    closeButton?: React.ReactElement\n    /**\n     * Whether to hide the close button\n     */\n    hideCloseButton?: boolean\n}\n\nexport function Drawer(props: DrawerProps) {\n\n    const {\n        allowOutsideInteraction = false,\n        trigger,\n        title,\n        footer,\n        description,\n        children,\n        closeButton,\n        overlayClass,\n        contentClass,\n        closeClass,\n        headerClass,\n        footerClass,\n        titleClass,\n        descriptionClass,\n        hideCloseButton,\n        side,\n        size,\n        // Content\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onEscapeKeyDown,\n        onPointerDownCapture,\n        onInteractOutside,\n        ...rest\n    } = props\n\n    return (\n        <DialogPrimitive.Root modal={!allowOutsideInteraction} {...rest}>\n\n            {trigger && <DialogPrimitive.Trigger asChild>{trigger}</DialogPrimitive.Trigger>}\n\n            <DialogPrimitive.Portal>\n\n                <DialogPrimitive.Overlay className={cn(DrawerAnatomy.overlay(), overlayClass)} />\n\n                <DialogPrimitive.Content\n                    className={cn(DrawerAnatomy.content({ size, side }), contentClass)}\n                    onOpenAutoFocus={onOpenAutoFocus}\n                    onCloseAutoFocus={onCloseAutoFocus}\n                    onEscapeKeyDown={onEscapeKeyDown}\n                    onPointerDownCapture={onPointerDownCapture}\n                    onInteractOutside={onInteractOutside}\n                >\n\n                    {(title || description) && <div className={cn(DrawerAnatomy.header(), headerClass)}>\n                        {title && <DialogPrimitive.Title className={cn(DrawerAnatomy.title(), titleClass)}>\n                            {title}\n                        </DialogPrimitive.Title>}\n                        {description && <DialogPrimitive.Description className={cn(DrawerAnatomy.description(), descriptionClass)}>\n                            {description}\n                        </DialogPrimitive.Description>}\n                    </div>}\n\n                    {children}\n\n                    {footer && <div className={cn(DrawerAnatomy.footer(), footerClass)}>\n                        {footer}\n                    </div>}\n\n                    {!hideCloseButton && <DialogPrimitive.Close className={cn(DrawerAnatomy.close(), closeClass)} asChild>\n                        {closeButton ? closeButton : <CloseButton />}\n                    </DialogPrimitive.Close>}\n\n                </DialogPrimitive.Content>\n\n            </DialogPrimitive.Portal>\n\n        </DialogPrimitive.Root>\n    )\n}\n\nDrawer.displayName = \"Drawer\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "drawer",
        "content": "export * from \"./drawer\"\n"
      }
    ]
  },
  {
    "component": "dropdown-menu",
    "name": "DropdownMenu",
    "dependencies": [
      [
        "@radix-ui/react-dropdown-menu",
        "^2.0.5",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "dropdown-menu.tsx",
        "dir": "dropdown-menu",
        "content": "\"use client\"\n\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DropdownMenuAnatomy = defineStyleAnatomy({\n    subTrigger: cva([\n        \"UI-DropdownMenu__subTrigger\",\n        \"focus:bg-[--subtle] data-[state=open]:bg-[--subtle]\",\n    ]),\n    subContent: cva([\n        \"UI-DropdownMenu__subContent\",\n        \"z-50 min-w-[12rem] overflow-hidden rounded-[--radius] border bg-[--background] p-1 text-[--foreground] shadow-sm\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n    root: cva([\n        \"UI-DropdownMenu__root\",\n        \"z-50 min-w-[12rem] overflow-hidden rounded-[--radius] border bg-[--background] p-1 text-[--foreground] shadow-sm\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n    item: cva([\n        \"UI-DropdownMenu__item\",\n        \"relative flex cursor-default select-none items-center rounded-[--radius] px-2 py-1 text-sm outline-none transition-colors\",\n        \"focus:bg-[--subtle] data-[disabled]:pointer-events-none\",\n        \"data-[disabled]:opacity-50\",\n    ]),\n    group: cva([\n        \"UI-DropdownMenu__group\",\n    ]),\n    label: cva([\n        \"UI-DropdownMenu__label\",\n        \"px-2 py-1.5 text-sm font-semibold text-[--muted]\",\n    ]),\n    separator: cva([\n        \"UI-DropdownMenu__separator\",\n        \"-mx-1 my-1 h-px bg-[--border]\",\n    ]),\n    shortcut: cva([\n        \"UI-DropdownMenu__shortcut\",\n        \"ml-auto text-xs tracking-widest opacity-60\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst __DropdownMenuAnatomyContext = React.createContext<ComponentAnatomy<typeof DropdownMenuAnatomy>>({})\n\nexport type DropdownMenuProps =\n    ComponentAnatomy<typeof DropdownMenuAnatomy> &\n    Pick<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Root>, \"defaultOpen\" | \"open\" | \"onOpenChange\" | \"dir\"> &\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content> & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The trigger element that is always visible and is used to open the menu.\n     */\n    trigger?: React.ReactNode\n}\n\nexport const DropdownMenu = React.forwardRef<HTMLDivElement, DropdownMenuProps>((props, ref) => {\n    const {\n        children,\n        trigger,\n        // Root\n        defaultOpen,\n        open,\n        onOpenChange,\n        dir,\n        allowOutsideInteraction,\n        // Content\n        sideOffset = 4,\n        className,\n        subContentClass,\n        subTriggerClass,\n        shortcutClass,\n        itemClass,\n        labelClass,\n        separatorClass,\n        groupClass,\n        ...rest\n    } = props\n\n    return (\n        <__DropdownMenuAnatomyContext.Provider\n            value={{\n                subContentClass,\n                subTriggerClass,\n                shortcutClass,\n                itemClass,\n                labelClass,\n                separatorClass,\n                groupClass,\n            }}\n        >\n            <DropdownMenuPrimitive.Root\n                defaultOpen={defaultOpen}\n                open={open}\n                onOpenChange={onOpenChange}\n                dir={dir}\n                modal={!allowOutsideInteraction}\n                {...rest}\n            >\n                <DropdownMenuPrimitive.Trigger asChild>\n                    {trigger}\n                </DropdownMenuPrimitive.Trigger>\n\n                <DropdownMenuPrimitive.Portal>\n                    <DropdownMenuPrimitive.Content\n                        ref={ref}\n                        sideOffset={sideOffset}\n                        className={cn(DropdownMenuAnatomy.root(), className)}\n                        {...rest}\n                    >\n                        {children}\n                    </DropdownMenuPrimitive.Content>\n                </DropdownMenuPrimitive.Portal>\n            </DropdownMenuPrimitive.Root>\n        </__DropdownMenuAnatomyContext.Provider>\n    )\n})\n\nDropdownMenu.displayName = \"DropdownMenu\"\n\n\nexport type DropdownMenuGroupProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Group>;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DropdownMenuGroup = React.forwardRef<HTMLDivElement, DropdownMenuGroupProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { groupClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Group\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.group(), groupClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuSubProps =\n    Pick<ComponentAnatomy<typeof DropdownMenuAnatomy>, \"subTriggerClass\"> &\n    Pick<React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Sub>, \"defaultOpen\" | \"open\" | \"onOpenChange\"> &\n    React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent> & {\n    /**\n     * The content of the default trigger element that will open the sub menu.\n     *\n     * By default, the trigger will be an item with a right chevron icon.\n     */\n    triggerContent?: React.ReactNode\n    /**\n     * Props to pass to the default trigger element that will open the sub menu.\n     */\n    triggerProps?: React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger>\n    triggerInset?: boolean\n}\n\nexport const DropdownMenuSub = React.forwardRef<HTMLDivElement, DropdownMenuSubProps>((props, ref) => {\n    const {\n        children,\n        triggerContent,\n        triggerProps,\n        triggerInset,\n        // Sub\n        defaultOpen,\n        open,\n        onOpenChange,\n        // SubContent\n        sideOffset = 8,\n        className,\n        subTriggerClass,\n        ...rest\n    } = props\n\n    const { subTriggerClass: _subTriggerClass, subContentClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Sub\n            {...rest}\n        >\n            <DropdownMenuPrimitive.SubTrigger\n                className={cn(\n                    DropdownMenuAnatomy.item(),\n                    DropdownMenuAnatomy.subTrigger(),\n                    triggerInset && \"pl-8\",\n                    _subTriggerClass,\n                    subTriggerClass,\n                    className,\n                )}\n                {...triggerProps}\n            >\n                {triggerContent}\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(\n                        DropdownMenuAnatomy.shortcut(),\n                        \"w-4 h-4 ml-auto\",\n                    )}\n                >\n                    <path d=\"m9 18 6-6-6-6\" />\n                </svg>\n            </DropdownMenuPrimitive.SubTrigger>\n\n            <DropdownMenuPrimitive.Portal>\n                <DropdownMenuPrimitive.SubContent\n                    ref={ref}\n                    sideOffset={sideOffset}\n                    className={cn(\n                        DropdownMenuAnatomy.subContent(),\n                        subContentClass,\n                        className,\n                    )}\n                    {...rest}\n                >\n                    {children}\n                </DropdownMenuPrimitive.SubContent>\n            </DropdownMenuPrimitive.Portal>\n        </DropdownMenuPrimitive.Sub>\n    )\n})\n\nDropdownMenuSub.displayName = \"DropdownMenuSub\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuItemProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n}\n\nexport const DropdownMenuItem = React.forwardRef<HTMLDivElement, DropdownMenuItemProps>((props, ref) => {\n    const { className, inset, ...rest } = props\n\n    const { itemClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Item\n            ref={ref}\n            className={cn(\n                DropdownMenuAnatomy.item(),\n                inset && \"pl-8\",\n                itemClass,\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuLabelProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n}\n\nexport const DropdownMenuLabel = React.forwardRef<HTMLDivElement, DropdownMenuLabelProps>((props, ref) => {\n    const { className, inset, ...rest } = props\n\n    const { labelClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Label\n            ref={ref}\n            className={cn(\n                DropdownMenuAnatomy.label(),\n                inset && \"pl-8\",\n                labelClass,\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuSeparatorProps = React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n\nexport const DropdownMenuSeparator = React.forwardRef<HTMLDivElement, DropdownMenuSeparatorProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { separatorClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <DropdownMenuPrimitive.Separator\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.separator(), separatorClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuShortcut\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DropdownMenuShortcutProps = React.HTMLAttributes<HTMLSpanElement>\n\nexport const DropdownMenuShortcut = React.forwardRef<HTMLSpanElement, DropdownMenuShortcutProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { shortcutClass } = React.useContext(__DropdownMenuAnatomyContext)\n\n    return (\n        <span\n            ref={ref}\n            className={cn(DropdownMenuAnatomy.shortcut(), shortcutClass, className)}\n            {...rest}\n        />\n    )\n})\n\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "dropdown-menu",
        "content": "export * from \"./dropdown-menu\"\n"
      }
    ]
  },
  {
    "component": "form",
    "name": "Form",
    "dependencies": [
      [
        "zod",
        "^3.21.4",
        ""
      ],
      [
        "react-hook-form",
        "^7.44.2",
        ""
      ],
      [
        "@hookform/resolvers",
        "^3.1.0",
        ""
      ]
    ],
    "family": [
      "button",
      "loading-spinner",
      "modal",
      "address-input",
      "autocomplete",
      "basic-field",
      "checkbox",
      "combobox",
      "currency-input",
      "date-picker",
      "simple-dropzone",
      "native-select",
      "number-input",
      "phone-input",
      "radio-group",
      "select",
      "switch",
      "text-input",
      "textarea"
    ],
    "files": [
      {
        "name": "danger-zone.tsx",
        "dir": "form",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Button } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport { Modal } from \"../modal\"\nimport locales from \"./locales.json\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DangerZoneAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-DangerZone__root\",\n        \"p-4 flex flex-col sm:flex-row gap-2 text-center sm:text-left rounded-md border border-[--red]\",\n    ]),\n    icon: cva([\n        \"UI-DangerZone__icon\",\n        \"place-self-center sm:place-self-start text-red-500 w-4 mt-2\",\n    ]),\n    title: cva([\n        \"UI-DangerZone__title\",\n        \"text-lg text-[--red] font-semibold\",\n    ]),\n    dialogTitle: cva([\n        \"UI-DangerZone__dialogTitle\",\n        \"text-lg font-medium leading-6\",\n    ]),\n    dialogBody: cva([\n        \"UI-DangerZone__dialogBody\",\n        \"mt-2 text-sm text-[--muted]\",\n    ]),\n    dialogAction: cva([\n        \"UI-DangerZone__dialogAction\",\n        \"mt-4 flex gap-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DangerZone\n * -----------------------------------------------------------------------------------------------*/\n\nexport type DangerZoneProps = React.ComponentPropsWithRef<\"div\"> & ComponentAnatomy<typeof DangerZoneAnatomy> & {\n    /**\n     * Description of the action that will be performed when the delete button is clicked.\n     */\n    actionText: string\n    /**\n     * Callback fired when the delete button is clicked.\n     */\n    onDelete?: () => void\n    /**\n     * If true, a loading overlay will be shown when the delete button is clicked.\n     * @default true\n     **/\n    showLoadingOverlayOnDelete?: boolean\n    locale?: \"fr\" | \"en\"\n}\n\nexport const DangerZone = React.forwardRef<HTMLDivElement, DangerZoneProps>((props, ref) => {\n\n    const {\n        children,\n        actionText,\n        onDelete,\n        className,\n        locale = \"en\",\n        showLoadingOverlayOnDelete = true,\n        titleClass,\n        iconClass,\n        dialogBodyClass,\n        dialogTitleClass,\n        dialogActionClass,\n        ...rest\n    } = props\n\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const [blockScreen, setBlockScreen] = React.useState<boolean>(false)\n\n    return (\n        <>\n            <LoadingOverlay show={blockScreen} />\n\n            <div ref={ref} className={cn(DangerZoneAnatomy.root(), className)} {...rest}>\n                <span className={cn(DangerZoneAnatomy.icon(), iconClass)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                        <path\n                            d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"\n                        ></path>\n                    </svg>\n                </span>\n                <div>\n                    <h2 className={cn(DangerZoneAnatomy.title(), titleClass)}>{locales[\"dangerZone\"][\"name\"][locale]}</h2>\n                    <p className=\"\"><span\n                        className=\"font-semibold\"\n                    >{actionText}</span>. {locales[\"dangerZone\"][\"irreversible_action\"][locale]}\n                    </p>\n                    <Button\n                        size=\"sm\"\n                        intent=\"alert-subtle\"\n                        className=\"mt-2\"\n                        leftIcon={<span className=\"w-4\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                <path\n                                    d=\"M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z\"\n                                ></path>\n                            </svg>\n                        </span>}\n                        onClick={() => setIsOpen(true)}\n                    >{locales[\"dangerZone\"][\"delete\"][locale]}</Button>\n                </div>\n            </div>\n\n            <Modal open={isOpen} onOpenChange={open => setIsOpen(open)}>\n                <h3 className={cn(DangerZoneAnatomy.dialogTitle(), dialogTitleClass)}>\n                    {locales[\"dangerZone\"][\"confirm_delete\"][locale]}\n                </h3>\n                <div className={cn(DangerZoneAnatomy.dialogBody(), dialogBodyClass)}>\n                    {locales[\"dangerZone\"][\"irreversible_action\"][locale]}\n                </div>\n\n                <div className={cn(DangerZoneAnatomy.dialogAction(), dialogActionClass)}>\n                    <Button\n                        intent=\"gray-outline\"\n                        size=\"sm\"\n                        onClick={() => setIsOpen(false)}\n                    >{locales[\"dangerZone\"][\"cancel\"][locale]}</Button>\n                    <Button\n                        intent=\"alert\" size=\"sm\" onClick={() => {\n                        setIsOpen(false)\n                        showLoadingOverlayOnDelete && setBlockScreen(true)\n                        onDelete && onDelete()\n                    }}\n                    >{locales[\"dangerZone\"][\"delete\"][locale]}</Button>\n                </div>\n            </Modal>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "define-schema.ts",
        "dir": "form",
        "content": "import { z as zod, ZodType } from \"zod\"\nimport { schemaPresets } from \"./schema-presets\"\n\n/* -------------------------------------------------------------------------------------------------\n * Helper type\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InferType<S extends ZodType<any, any, any>> = zod.infer<S>\n\n/* -------------------------------------------------------------------------------------------------\n * Helper functions\n * -----------------------------------------------------------------------------------------------*/\n\ntype DataSchemaCallback<S extends zod.ZodRawShape> = ({ z, presets }: {\n    z: typeof zod,\n    presets: typeof schemaPresets\n}) => zod.ZodObject<S>\n\nexport const defineSchema = <S extends zod.ZodRawShape>(callback: DataSchemaCallback<S>): zod.ZodObject<S> => {\n    return callback({ z: zod, presets: schemaPresets })\n}\n"
      },
      {
        "name": "fields.tsx",
        "dir": "form",
        "content": "\"use client\"\r\n\r\nimport React, { forwardRef, useMemo } from \"react\"\r\nimport { Controller, FormState, get, useController, useFormContext } from \"react-hook-form\"\r\nimport { AddressInput, AddressInputProps } from \"../address-input\"\r\nimport { Autocomplete, AutocompleteProps } from \"../autocomplete\"\r\nimport { BasicFieldOptions } from \"../basic-field\"\r\nimport { Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps } from \"../checkbox\"\r\nimport { Combobox, ComboboxProps } from \"../combobox\"\r\nimport { CurrencyInput, CurrencyInputProps } from \"../currency-input\"\r\nimport { DatePicker, DatePickerProps, DateRangePicker, DateRangePickerProps } from \"../date-picker\"\r\nimport { SimpleDropzone, SimpleDropzoneProps } from \"../simple-dropzone\"\r\nimport { NativeSelect, NativeSelectProps } from \"../native-select\"\r\nimport { NumberInput, NumberInputProps } from \"../number-input\"\r\nimport { PhoneInput, PhoneInputProps } from \"../phone-input\"\r\nimport { RadioGroup, RadioGroupProps } from \"../radio-group\"\r\nimport { Select, SelectProps } from \"../select\"\r\nimport { Switch, SwitchProps } from \"../switch\"\r\nimport { TextInput, TextInputProps } from \"../text-input\"\r\nimport { Textarea, TextareaProps } from \"../textarea\"\r\nimport { useFormSchema } from \"./form\"\r\nimport { createPolymorphicComponent } from \"./polymorphic-component\"\r\nimport { SubmitField } from \"./submit-field\"\r\n\r\n\r\n/**\r\n * Add the BasicField types to any Field\r\n */\r\nexport type FieldBaseProps = Omit<BasicFieldOptions, \"name\"> & {\r\n    name: string\r\n    onChange?: any\r\n    onBlur?: any\r\n    required?: boolean\r\n}\r\n\r\nexport type FieldComponent<T> = T & FieldBaseProps\r\n\r\nexport type FieldProps = React.ComponentPropsWithRef<\"div\">\r\n\r\n/**\r\n * @description This wrapper makes it easier to work with custom form components by controlling their state.\r\n * @example\r\n * // Props order\r\n * <Controller>\r\n *    <InputComponent\r\n *       defaultValue={}   // Can be overridden\r\n *       onChange={}       // Can be overridden\r\n *       onBlur={}         // Can be overridden\r\n *       {...props}        // <FieldComponent {...} /> -> <Field.Component {...} />\r\n *       error={}          // Cannot be overridden\r\n *    />\r\n * </Controller>\r\n * @param InputComponent\r\n */\r\nexport function withControlledInput<T extends FieldBaseProps>(InputComponent: React.FC<T>) {\r\n    return forwardRef<FieldProps, T>(\r\n        (inputProps, ref) => {\r\n            const { control, formState, ...context } = useFormContext()\r\n            const { shape } = useFormSchema()\r\n\r\n            /* Get the `required` status from the Schema */\r\n            const required = useMemo(() => {\r\n                return !!get(shape, inputProps.name) &&\r\n                    !get(shape, inputProps.name)?.isOptional() &&\r\n                    !get(shape, inputProps.name)?.isNullable()\r\n            }, [shape])\r\n\r\n            return (\r\n                <Controller\r\n                    name={inputProps.name}\r\n                    control={control}\r\n                    rules={{ required: inputProps.required }}\r\n                    render={({ field: { ref: _ref, ...field } }) => (\r\n                        /**\r\n                         * We pass \"value, onChange, onBlur, error, required\" to all components that will be defined using the wrapper.\r\n                         * For other components like \"Switch\" and \"Checkbox\" which do not use the \"value\" prop, you need to deconstruct it to avoid it\r\n                         * being passed.\r\n                         */\r\n                        <InputComponent\r\n                            value={field.value} // Default prop, can be overridden in Field component definition\r\n                            onChange={callAllHandlers(inputProps.onChange, field.onChange)} // Default prop, can be overridden in Field component\r\n                            onBlur={callAllHandlers(inputProps.onBlur, field.onBlur)} // Default prop, can be overridden in Field component\r\n                            required={required}\r\n                            {...inputProps} // Props passed in <FieldComponent /> then props passed in <Field.Component />\r\n                            // The props below will not be overridden.\r\n                            // e.g: <Field.ComponentField error=\"Error\" /> will not work\r\n                            error={getFormError(field.name, formState)?.message}\r\n                            ref={useMergeRefs(ref, _ref)}\r\n                        />\r\n                    )}\r\n                />\r\n            )\r\n        },\r\n    )\r\n}\r\n\r\nconst withUncontrolledInput = <T extends FieldBaseProps>(InputComponent: React.FC<T>) => {\r\n    return forwardRef<HTMLInputElement, T>(\r\n        (props, ref) => {\r\n            const { register, formState } = useFormContext()\r\n            const { ref: _ref, ...field } = register(props.name)\r\n\r\n            return (\r\n                <InputComponent\r\n                    {...props}\r\n                    onChange={callAllHandlers(props.onChange, field.onChange)}\r\n                    onBlur={callAllHandlers(props.onBlur, field.onBlur)}\r\n                    error={getFormError(props.name, formState)?.message}\r\n                    name={field.name}\r\n                    ref={useMergeRefs(ref, _ref)}\r\n                />\r\n            )\r\n        },\r\n    )\r\n}\r\n\r\n\r\nconst TextInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<TextInputProps>>(\r\n    (props, ref) => {\r\n        return <TextInput\r\n            {...props}\r\n            value={props.value ?? \"\"}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst TextareaField = React.memo(withControlledInput(forwardRef<HTMLTextAreaElement, FieldComponent<TextareaProps>>(\r\n    (props, ref) => {\r\n        return <Textarea\r\n            {...props}\r\n            value={props.value ?? \"\"}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst DatePickerField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<DatePickerProps>>((\r\n    { onChange, ...props }, ref) => {\r\n\r\n    return <DatePicker\r\n        {...props}\r\n        onValueChange={onChange}\r\n        ref={ref}\r\n    />\r\n})))\r\n\r\nconst DateRangePickerField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<DateRangePickerProps>>((\r\n    { onChange, ...props }, ref) => {\r\n\r\n    return <DateRangePicker\r\n        {...props}\r\n        onValueChange={onChange}\r\n        ref={ref}\r\n    />\r\n})))\r\n\r\n\r\nconst NativeSelectField = React.memo(withControlledInput(forwardRef<HTMLSelectElement, FieldComponent<NativeSelectProps>>(\r\n    (props, ref) => {\r\n        const context = useFormContext()\r\n        const controller = useController({ name: props.name })\r\n\r\n        // Set the default value as the first option if no default value is passed and there is no placeholder\r\n        React.useEffect(() => {\r\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value && !props.placeholder) {\r\n                controller.field.onChange(props.options?.[0]?.value)\r\n            }\r\n        }, [])\r\n\r\n        return <NativeSelect\r\n            {...props}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst SelectField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<SelectProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <Select\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst NumberField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<NumberInputProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <NumberInput\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\n\r\nconst ComboboxField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<ComboboxProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <Combobox\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst SwitchField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<SwitchProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <Switch\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst CheckboxField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<CheckboxProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <Checkbox\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst CheckboxGroupField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<CheckboxGroupProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <CheckboxGroup\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\n\r\nconst RadioGroupField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<RadioGroupProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <RadioGroup\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\n\r\nconst CurrencyInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<CurrencyInputProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <CurrencyInput\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst PhoneInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<PhoneInputProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <PhoneInput\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst AutocompleteField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<AutocompleteProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <Autocomplete\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst AddressInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<AddressInputProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n        return <AddressInput\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nconst SimpleDropzoneField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<SimpleDropzoneProps>>(\r\n    ({ onChange, ...props }, ref) => {\r\n\r\n        const controller = useController({ name: props.name })\r\n\r\n        // Set the default value to an empty array\r\n        React.useEffect(() => {\r\n            controller.field.onChange([])\r\n        }, [])\r\n\r\n        return <SimpleDropzone\r\n            {...props}\r\n            onValueChange={onChange}\r\n            ref={ref}\r\n        />\r\n    },\r\n)))\r\n\r\nexport const Field = createPolymorphicComponent<\"div\", FieldProps, {\r\n    Text: typeof TextInputField,\r\n    Textarea: typeof TextareaField,\r\n    Select: typeof SelectField,\r\n    NativeSelect: typeof NativeSelectField,\r\n    Switch: typeof SwitchField,\r\n    Checkbox: typeof CheckboxField,\r\n    CheckboxGroup: typeof CheckboxGroupField,\r\n    RadioGroup: typeof RadioGroupField,\r\n    Currency: typeof CurrencyInputField,\r\n    Number: typeof NumberField,\r\n    DatePicker: typeof DatePickerField\r\n    DateRangePicker: typeof DateRangePickerField\r\n    Combobox: typeof ComboboxField\r\n    Phone: typeof PhoneInputField\r\n    Autocomplete: typeof AutocompleteField\r\n    Address: typeof AddressInputField\r\n    SimpleDropzone: typeof SimpleDropzoneField\r\n    Submit: typeof SubmitField\r\n}>({\r\n    Text: TextInputField,\r\n    Textarea: TextareaField,\r\n    Select: SelectField,\r\n    NativeSelect: NativeSelectField,\r\n    Switch: SwitchField,\r\n    Checkbox: CheckboxField,\r\n    CheckboxGroup: CheckboxGroupField,\r\n    RadioGroup: RadioGroupField,\r\n    Currency: CurrencyInputField,\r\n    Number: NumberField,\r\n    DatePicker: DatePickerField,\r\n    DateRangePicker: DateRangePickerField,\r\n    Combobox: ComboboxField,\r\n    Phone: PhoneInputField,\r\n    Autocomplete: AutocompleteField,\r\n    Address: AddressInputField,\r\n    SimpleDropzone: SimpleDropzoneField,\r\n    Submit: SubmitField,\r\n})\r\n\r\nField.displayName = \"Field\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const getFormError = (name: string, formState: FormState<{ [x: string]: any }>) => {\r\n    return get(formState.errors, name)\r\n}\r\n\r\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\r\n\r\nexport function assignRef<T = any>(\r\n    ref: ReactRef<T> | null | undefined,\r\n    value: T,\r\n) {\r\n    if (ref == null) return\r\n\r\n    if (typeof ref === \"function\") {\r\n        ref(value)\r\n        return\r\n    }\r\n\r\n    try {\r\n        ref.current = value\r\n    }\r\n    catch (error) {\r\n        throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\r\n    }\r\n}\r\n\r\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\r\n    return (node: T | null) => {\r\n        refs.forEach((ref) => {\r\n            assignRef(ref, node)\r\n        })\r\n    }\r\n}\r\n\r\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\r\n    return useMemo(() => mergeRefs(...refs), refs)\r\n}\r\n\r\ntype Args<T extends Function> = T extends (...args: infer R) => any ? R : never\r\n\r\nfunction callAllHandlers<T extends (event: any) => void>(\r\n    ...fns: (T | undefined)[]\r\n) {\r\n    return function func(event: Args<T>[0]) {\r\n        fns.some((fn) => {\r\n            fn?.(event)\r\n            return event?.defaultPrevented\r\n        })\r\n    }\r\n}\r\n"
      },
      {
        "name": "form.tsx",
        "dir": "form",
        "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport * as React from \"react\"\nimport { FormProvider, SubmitErrorHandler, SubmitHandler, useForm, UseFormProps, UseFormReturn, WatchObserver } from \"react-hook-form\"\nimport { z, ZodObject } from \"zod\"\nimport { cn } from \"../core/styling\"\nimport { isEmpty } from \"../core/utils\"\nimport { getZodDefaults } from \"./zod-resolver\"\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nconst __FormSchemaContext = React.createContext<{\n    shape: z.ZodRawShape,\n    schema: z.ZodObject<z.ZodRawShape>\n} | undefined>(undefined)\n\nexport const useFormSchema = (): { shape: z.ZodRawShape, schema: z.ZodObject<z.ZodRawShape> } => {\n    return React.useContext(__FormSchemaContext)!\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nexport type FormProps<Schema extends z.ZodObject<z.ZodRawShape> = ZodObject<any>> =\n    UseFormProps<z.infer<Schema>> &\n    Omit<React.ComponentPropsWithRef<\"form\">, \"children\" | \"onChange\" | \"onSubmit\" | \"onError\" | \"ref\"> & {\n    /**\n     * The schema of the form.\n     */\n    schema: Schema\n    onSubmit: SubmitHandler<z.infer<Schema>>\n    /**\n     * Triggers when any of the field change.\n     */\n    onChange?: WatchObserver<z.infer<Schema>>\n    /**\n     * Triggers when there are validation errors.\n     */\n    onError?: SubmitErrorHandler<z.infer<Schema>>\n    /**\n     * Ref to the form element.\n     */\n    formRef?: React.RefObject<HTMLFormElement>\n\n    children?: MaybeRenderProp<UseFormReturn<z.infer<Schema>>>\n    /**\n     * @default w-full space-y-3\n     */\n    stackClassName?: string\n    mRef?: React.Ref<UseFormReturn<z.infer<Schema>>>\n}\n\n/**\n * @example\n * <Form\n *     schema={definedSchema}\n *     onSubmit={console.log}\n *     onError={console.log}\n *     onChange={console.log}\n *     defaultValues={undefined}\n *  >\n *     <Field.Submit role=\"create\" />\n *  </Form>\n * @param props\n * @constructor\n */\nexport const Form = <Schema extends z.ZodObject<z.ZodRawShape>>(props: FormProps<Schema>) => {\n\n    const {\n        mode = \"onSubmit\",\n        resolver,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n        schema,\n        defaultValues: _defaultValues,\n        onChange,\n        onSubmit,\n        onError,\n        formRef,\n        children,\n        mRef,\n        /**/\n        stackClassName,\n        ...rest\n    } = props\n\n    const defaultValues = React.useMemo(() => {\n        if (isEmpty(getZodDefaults(schema)) && isEmpty(_defaultValues)) return undefined\n        return {\n            ...getZodDefaults(schema),\n            ..._defaultValues,\n        } as any\n    }, [])\n\n    const form = {\n        mode,\n        resolver,\n        defaultValues,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n    }\n\n    form.resolver = zodResolver(schema)\n\n    const methods = useForm(form)\n    const { handleSubmit } = methods\n\n    React.useImperativeHandle(mRef, () => methods, [mRef, methods])\n\n    React.useEffect(() => {\n        let subscription: ReturnType<typeof methods.watch> | undefined\n        if (onChange) {\n            subscription = methods.watch(onChange)\n        }\n        return () => subscription?.unsubscribe()\n    }, [methods, onChange])\n\n    return (\n        <FormProvider {...methods}>\n            <__FormSchemaContext.Provider value={{ schema, shape: schema.shape }}>\n                <form\n                    ref={formRef}\n                    onSubmit={handleSubmit(onSubmit, onError)}\n                    {...rest}\n                >\n                    <div className={cn(\"w-full space-y-3\", stackClassName)}>\n                        {runIfFn(children, methods)}\n                    </div>\n                </form>\n            </__FormSchemaContext.Provider>\n        </FormProvider>\n    )\n\n}\n\nForm.displayName = \"Form\"\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\ntype MaybeRenderProp<P> =\n    | React.ReactNode\n    | ((props: P) => React.ReactNode)\n\nconst isFunction = <T extends Function = Function>(value: any): value is T => typeof value === \"function\"\n\nfunction runIfFn<T, U>(\n    valueOrFn: T | ((...fnArgs: U[]) => T),\n    ...args: U[]\n): T {\n    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n"
      },
      {
        "name": "index.tsx",
        "dir": "form",
        "content": "export * from \"./form\"\nexport * from \"./fields\"\nexport * from \"./define-schema\"\nexport * from \"./danger-zone\"\n"
      },
      {
        "name": "locales.json",
        "dir": "form",
        "content": "{\n  \"form\": {\n    \"create\": {\n      \"fr\": \"CrÃ©er\",\n      \"en\": \"Create\"\n    },\n    \"add\": {\n      \"fr\": \"Ajouter\",\n      \"en\": \"Add\"\n    },\n    \"update\": {\n      \"fr\": \"Modifier\",\n      \"en\": \"Update\"\n    },\n    \"search\": {\n      \"fr\": \"Chercher\",\n      \"en\": \"Search\"\n    },\n    \"save\": {\n      \"fr\": \"Enregistrer\",\n      \"en\": \"Save\"\n    },\n    \"submit\": {\n      \"fr\": \"Soumettre\",\n      \"en\": \"Submit\"\n    }\n  },\n  \"dangerZone\": {\n    \"delete\": {\n      \"fr\": \"Supprimer\",\n      \"en\": \"Delete\"\n    },\n    \"irreversible_action\": {\n      \"fr\": \"Cette action est irrÃ©versible.\",\n      \"en\": \"This action is irreversible.\"\n    },\n    \"name\": {\n      \"fr\": \"Zone de danger\",\n      \"en\": \"Danger Zone\"\n    },\n    \"confirm_delete\": {\n      \"fr\": \"Ãtes-vous sÃ»r de vouloir effectuer cette action ?\",\n      \"en\": \"Are you sure you want to confirm this action ?\"\n    },\n    \"cancel\": {\n      \"fr\": \"Annuler\",\n      \"en\": \"Cancel\"\n    }\n  }\n}\n"
      },
      {
        "name": "polymorphic-component.ts",
        "dir": "form",
        "content": "import * as React from \"react\"\n\ntype ExtendedProps<Props = {}, OverrideProps = {}> = OverrideProps &\n    Omit<Props, keyof OverrideProps>;\ntype ElementType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\ntype PropsOf<C extends ElementType> = JSX.LibraryManagedAttributes<C,\n    React.ComponentPropsWithoutRef<C>>;\ntype ComponentProp<C> = {\n    component?: C;\n};\ntype InheritedProps<C extends ElementType, Props = {}> = ExtendedProps<PropsOf<C>, Props>;\nexport type PolymorphicRef<C> = C extends React.ElementType\n    ? React.ComponentPropsWithRef<C>[\"ref\"]\n    : never;\nexport type PolymorphicComponentProps<C, Props = {}> = C extends React.ElementType\n    ? InheritedProps<C, Props & ComponentProp<C>> & { ref?: PolymorphicRef<C> }\n    : Props & { component: React.ElementType };\n\nexport function createPolymorphicComponent<ComponentDefaultType,\n    Props,\n    StaticComponents = Record<string, never>>(component: any) {\n    type ComponentProps<C> = PolymorphicComponentProps<C, Props>;\n\n    type _PolymorphicComponent = <C = ComponentDefaultType>(\n        props: ComponentProps<C>,\n    ) => React.ReactElement;\n\n    type ComponentProperties = Omit<React.FunctionComponent<ComponentProps<any>>, never>;\n\n    type PolymorphicComponent = _PolymorphicComponent & ComponentProperties & StaticComponents;\n\n    return component as PolymorphicComponent\n}\n"
      },
      {
        "name": "schema-presets.ts",
        "dir": "form",
        "content": "import { z } from \"zod\"\n\nexport const schemaPresets = {\n    name: z.string().min(2).trim(),\n    select: z.string().min(1),\n    checkboxGroup: z.array(z.string()),\n    multiSelect: z.array(z.string()),\n    autocomplete: z.object({ label: z.string(), value: z.string().nullable() }),\n    validAddress: z.object({\n        label: z.string(), value: z.string({\n            required_error: \"Invalid address\",\n            invalid_type_error: \"Invalid address\",\n        }),\n    }),\n    time: z.object({ hour: z.number().min(0).max(23), minute: z.number().min(0).max(59) }),\n    phone: z.string().min(10, \"Invalid phone number\"),\n    boolean: z.boolean(),\n    files: z\n        .array(z.custom<File>())\n        .refine((files) => files.every((file) => file instanceof File), { message: \"Expected a file\" }),\n    filesOrEmpty: z\n        .array(z.custom<File>()).min(0)\n        .refine((files) => files.every((file) => file instanceof File), { message: \"Expected a file\" }),\n    dateRangePicker: z.object({ from: z.date(), to: z.date() }),\n    datePicker: z.date(),\n}\n"
      },
      {
        "name": "submit-field.tsx",
        "dir": "form",
        "content": "import React from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { Button, ButtonProps } from \"../button\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport locales from \"./locales.json\"\n\n/* -------------------------------------------------------------------------------------------------\n * SubmitField\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SubmitFieldProps = Omit<ButtonProps, \"type\"> & {\n    /**\n     * Role of the button.\n     * - If \"create\", a loading overlay will be shown when the submission is successful.\n     * @default \"save\"\n     */\n    role?: \"submit\" | \"save\" | \"create\" | \"add\" | \"search\" | \"update\"\n    /**\n     * If true, the button will be disabled when the submission is successful.\n     */\n    disableOnSuccess?: boolean\n    /**\n     * If true, the button will be disabled if the form is invalid.\n     */\n    disableIfInvalid?: boolean\n    /**\n     * If true, a loading overlay will be shown when the submission is successful.\n     */\n    showLoadingOverlayOnSuccess?: boolean\n    /**\n     * If true, a loading overlay will be shown when the form is submitted when the role is \"create\".\n     * @default true\n     */\n    showLoadingOverlayOnCreate?: boolean\n    /**\n     * A loading overlay to show when the form is submitted.\n     */\n    loadingOverlay?: React.ReactNode\n    /**\n     * The locale to use.\n     */\n    locale?: \"fr\" | \"en\"\n}\n\nexport const SubmitField = React.forwardRef<HTMLButtonElement, SubmitFieldProps>((props, ref) => {\n\n    const {\n        children,\n        loading,\n        disabled,\n        role = \"save\",\n        disableOnSuccess = role === \"create\",\n        disableIfInvalid = false,\n        showLoadingOverlayOnSuccess = false,\n        showLoadingOverlayOnCreate = true,\n        loadingOverlay,\n        locale = \"en\",\n        ...rest\n    } = props\n\n    const { formState } = useFormContext()\n\n    const disableSuccess = disableOnSuccess ? formState.isSubmitSuccessful : false\n    const disableInvalid = disableIfInvalid ? !formState.isValid : false\n\n    return (\n        <>\n            {showLoadingOverlayOnSuccess && loadingOverlay || (\n                <LoadingOverlay show={formState.isSubmitSuccessful} />\n            )}\n            {role === \"create\" && loadingOverlay || (\n                <LoadingOverlay show={formState.isSubmitSuccessful} />\n            )}\n\n            <Button\n                type=\"submit\"\n                loading={formState.isSubmitting || loading}\n                disabled={disableInvalid || disabled || disableSuccess}\n                ref={ref}\n                {...rest}\n            >\n                {children ? children : locales[\"form\"][role][locale]}\n            </Button>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "zod-resolver.ts",
        "dir": "form",
        "content": "import { zodResolver } from \"@hookform/resolvers/zod\"\nimport { FieldValues, get } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nexport { zodResolver }\n\nexport type Options = {\n    min?: number\n    max?: number\n}\n\nconst getType = (field: z.ZodTypeAny) => {\n    switch (field._def.typeName) {\n        case \"ZodArray\":\n            return \"array\"\n        case \"ZodObject\":\n            return \"object\"\n        case \"ZodNumber\":\n            return \"number\"\n        case \"ZodDate\":\n            return \"date\"\n        case \"ZodString\":\n        default:\n            return \"text\"\n    }\n}\n\nconst getArrayOption = (field: any, name: string) => {\n    return field._def[name]?.value\n}\n\n/**\n * A helper function to render forms automatically based on a Zod schema\n *\n * @param schema The Yup schema\n * @returns {FieldProps[]}\n */\nexport const getFieldsFromSchema = (schema: z.ZodTypeAny): FieldValues[] => {\n    const fields: FieldValues[] = []\n\n    let schemaFields: Record<string, any> = {}\n    if (schema._def.typeName === \"ZodArray\") {\n        schemaFields = schema._def.type.shape\n    } else if (schema._def.typeName === \"ZodObject\") {\n        schemaFields = schema._def.shape()\n    } else {\n        return fields\n    }\n\n    for (const name in schemaFields) {\n        const field = schemaFields[name]\n\n        const options: Options = {}\n        if (field._def.typeName === \"ZodArray\") {\n            options.min = getArrayOption(field, \"minLength\")\n            options.max = getArrayOption(field, \"maxLength\")\n        }\n\n        const meta = field.description && zodParseMeta(field.description)\n\n        fields.push({\n            name,\n            label: meta?.label || field.description || name,\n            type: meta?.type || getType(field),\n            ...options,\n        })\n    }\n    return fields\n}\n\n\nexport const getNestedSchema = (schema: z.ZodTypeAny, path: string) => {\n    return get(schema._def.shape(), path)\n}\n\nexport const zodFieldResolver = <T extends z.ZodTypeAny>(schema: T) => {\n    return {\n        getFields() {\n            return getFieldsFromSchema(schema)\n        },\n        getNestedFields(name: string) {\n            return getFieldsFromSchema(getNestedSchema(schema, name))\n        },\n    }\n}\n\nexport interface ZodMeta {\n    label: string\n    type?: string\n}\n\nexport const zodMeta = (meta: ZodMeta) => {\n    return JSON.stringify(meta)\n}\n\nexport const zodParseMeta = (meta: string) => {\n    try {\n        return JSON.parse(meta)\n    }\n    catch (e) {\n        return meta\n    }\n}\n\n/**\n * @link https://github.com/colinhacks/zod/discussions/1953#discussioncomment-4811588\n * @param schema\n */\nexport function getZodDefaults<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            if (value instanceof z.ZodDefault) return [key, value._def.defaultValue()]\n            return [key, undefined]\n        }),\n    )\n}\n\n/**\n * @param schema\n */\nexport function getZodDescriptions<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            return [key, (value as any)._def.description ?? undefined]\n        }),\n    )\n}\n\n/**\n * @example\n * const meta = useMemo(() => getZodParsedDescription<{ minValue: CalendarDate }>(schema, props.name), [])\n * @param schema\n * @param key\n */\nexport function getZodParsedDescription<T extends {\n    [p: string]: any\n}>(schema: z.AnyZodObject, key: string): T | undefined {\n    const obj = getZodDescriptions(schema)\n    const parsedDescription = (typeof obj[key] === \"string\" || obj[key] instanceof String) ? JSON.parse(obj[key]) : undefined\n    if (parsedDescription.constructor == Object) {\n        return parsedDescription as T\n    }\n    return undefined\n\n}\n"
      }
    ]
  },
  {
    "component": "horizontal-draggable-scroll",
    "name": "HorizontalDraggableScroll",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "horizontal-draggable-scroll.tsx",
        "dir": "horizontal-draggable-scroll",
        "content": "\"use client\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { useIsomorphicLayoutEffect, useUpdateEffect } from \"../core/hooks\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { useDraggableScroll } from \"./use-draggable-scroll\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nconst HorizontalDraggableScrollAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-HorizontalDraggableScroll__root\",\n        \"relative flex items-center lg:gap-2\",\n    ]),\n    container: cva([\n        \"UI-HorizontalDraggableScroll__container\",\n        \"flex max-w-full w-full space-x-3 overflow-x-scroll scrollbar-hide scroll\",\n    ]),\n    chevronOverlay: cva([\n        \"flex flex-none items-center justify-center cursor-pointer hover:text-[--foreground] absolute bg-gradient-to-r from-[--background] z-40\",\n        \"h-full w-16 opacity-50 hover:opacity-100 transition-opacity\",\n        \"data-[state=hidden]:opacity-0 data-[state=hidden]:pointer-events-none\",\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out\",\n        \"data-[state=visible]:fade-in-0 data-[state=hidden]:fade-out-0\",\n        \"data-[state=visible]:duration-600 data-[state=hidden]:duration-600\",\n    ], {\n        variants: {\n            side: {\n                left: \"left-0 bg-gradient-to-r\",\n                right: \"right-0 bg-gradient-to-l\",\n            },\n        },\n    }),\n    scrollContainer: cva([\n        \"flex max-w-full w-full space-x-3 overflow-x-scroll scrollbar-hide scroll\",\n    ]),\n    chevronIcon: cva([\n        \"w-7 h-7 stroke-2 mx-auto\",\n    ]),\n\n})\n\n/* -------------------------------------------------------------------------------------------------\n * HorizontalDraggableScroll\n * -----------------------------------------------------------------------------------------------*/\n\nexport type HorizontalDraggableScrollProps = ComponentAnatomy<typeof HorizontalDraggableScrollAnatomy> & {\n    className?: string\n    children?: React.ReactNode\n    /**\n     * Callback fired when the slider has reached the end\n     */\n    onSlideEnd?: () => void\n    /**\n     * The amount of pixels to scroll when the chevron is clicked\n     * @default 500\n     */\n    scrollAmount?: number\n    /**\n     * Decay rate of the inertial effect by using an optional parameter.\n     * A value of 0.95 means that at the speed will decay 5% of its current value at every 1/60 seconds.\n     */\n    decayRate?: number\n    /**\n     * Control drag sensitivity by specifying the minimum distance in order to distinguish an intentional drag movement from an unwanted one.\n     */\n    safeDisplacement?: number\n    /**\n     * Whether to apply a rubber band effect when the slider reaches the end\n     */\n    applyRubberBandEffect?: boolean\n}\n\nexport const HorizontalDraggableScroll = React.forwardRef<HTMLDivElement, HorizontalDraggableScrollProps>((props, forwadedRef) => {\n\n    const {\n        children,\n        onSlideEnd,\n        className,\n        containerClass,\n        scrollContainerClass,\n        chevronIconClass,\n        chevronOverlayClass,\n        decayRate = 0.95,\n        safeDisplacement = 20,\n        applyRubberBandEffect = true,\n        scrollAmount = 500,\n        ...rest\n    } = props\n\n    const ref = React.useRef<HTMLDivElement>(null) as React.MutableRefObject<HTMLDivElement>\n    const { events } = useDraggableScroll(ref, {\n        decayRate,\n        safeDisplacement,\n        applyRubberBandEffect,\n    })\n\n    const [isScrolledToLeft, setIsScrolledToLeft] = React.useState(true)\n    const [isScrolledToRight, setIsScrolledToRight] = React.useState(false)\n    const [showChevronRight, setShowRightChevron] = React.useState(false)\n\n    const handleScroll = React.useCallback(() => {\n        const div = ref.current\n\n        if (div) {\n            const scrolledToLeft = div.scrollLeft === 0\n            const scrolledToRight = div.scrollLeft + div.clientWidth === div.scrollWidth\n\n            setIsScrolledToLeft(scrolledToLeft)\n            setIsScrolledToRight(scrolledToRight)\n        }\n    }, [])\n\n    useUpdateEffect(() => {\n        if (!isScrolledToLeft && isScrolledToRight) {\n            onSlideEnd && onSlideEnd()\n            const t = setTimeout(() => {\n                const div = ref.current\n                if (div) {\n                    div.scrollTo({\n                        left: div.scrollLeft + scrollAmount,\n                        behavior: \"smooth\",\n                    })\n                }\n            }, 1000)\n            return () => clearTimeout(t)\n        }\n    }, [isScrolledToLeft, isScrolledToRight])\n\n    const slideLeft = React.useCallback(() => {\n        const div = ref.current\n        if (div) {\n            div.scrollTo({\n                left: div.scrollLeft - scrollAmount,\n                behavior: \"smooth\",\n            })\n        }\n    }, [scrollAmount])\n\n    const slideRight = React.useCallback(() => {\n        const div = ref.current\n        if (div) {\n            div.scrollTo({\n                left: div.scrollLeft + scrollAmount,\n                behavior: \"smooth\",\n            })\n        }\n    }, [scrollAmount])\n\n    useIsomorphicLayoutEffect(() => {\n        if (ref.current.clientWidth < ref.current.scrollWidth) {\n            setShowRightChevron(true)\n        } else {\n            setShowRightChevron(false)\n        }\n    }, [])\n\n    return (\n        <div ref={forwadedRef} className={cn(HorizontalDraggableScrollAnatomy.root(), className)}>\n            <div\n                onClick={slideLeft}\n                className={cn(HorizontalDraggableScrollAnatomy.chevronOverlay({ side: \"left\" }), chevronOverlayClass)}\n                data-state={isScrolledToLeft ? \"hidden\" : \"visible\"}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(HorizontalDraggableScrollAnatomy.chevronIcon(), chevronIconClass)}\n                >\n                    <path d=\"m15 18-6-6 6-6\" />\n                </svg>\n            </div>\n            <div\n                onScroll={handleScroll}\n                className={cn(HorizontalDraggableScrollAnatomy.container(), containerClass)}\n                {...events}\n                ref={ref}\n            >\n                {children}\n            </div>\n            <div\n                onClick={slideRight}\n                className={cn(HorizontalDraggableScrollAnatomy.chevronOverlay({ side: \"right\" }), chevronOverlayClass)}\n                data-state={!isScrolledToRight && showChevronRight ? \"visible\" : \"hidden\"}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className={cn(HorizontalDraggableScrollAnatomy.chevronIcon(), chevronIconClass)}\n                >\n                    <path d=\"m9 18 6-6-6-6\" />\n                </svg>\n            </div>\n        </div>\n    )\n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "horizontal-draggable-scroll",
        "content": "export * from \"./horizontal-draggable-scroll\"\n"
      },
      {
        "name": "use-draggable-scroll.ts",
        "dir": "horizontal-draggable-scroll",
        "content": "/* -------------------------------------------------------------------------------------------------\n * @author rfmiotto\n * @link https://www.npmjs.com/package/react-use-draggable-scroll/v/0.4.7\n * -----------------------------------------------------------------------------------------------*/\nimport * as React from \"react\"\nimport { useIsomorphicLayoutEffect } from \"../core/hooks\"\n\ntype OptionsType = {\n    decayRate?: number\n    safeDisplacement?: number\n    applyRubberBandEffect?: boolean\n    activeMouseButton?: \"Left\" | \"Middle\" | \"Right\"\n    isMounted?: boolean\n}\n\ntype ReturnType = {\n    events: {\n        onMouseDown: (e: React.MouseEvent<HTMLElement>) => void\n    }\n}\n\nexport function useDraggableScroll(\n    ref: React.MutableRefObject<HTMLElement>,\n    {\n        decayRate = 0.95,\n        safeDisplacement = 10,\n        applyRubberBandEffect = true,\n        activeMouseButton = \"Left\",\n        isMounted = true,\n    }: OptionsType = {},\n): ReturnType {\n    const internalState = React.useRef({\n        isMouseDown: false,\n        isDraggingX: false,\n        isDraggingY: false,\n        initialMouseX: 0,\n        initialMouseY: 0,\n        lastMouseX: 0,\n        lastMouseY: 0,\n        scrollSpeedX: 0,\n        scrollSpeedY: 0,\n        lastScrollX: 0,\n        lastScrollY: 0,\n    })\n\n    let isScrollableAlongX = false\n    let isScrollableAlongY = false\n    let maxHorizontalScroll = 0\n    let maxVerticalScroll = 0\n    let cursorStyleOfWrapperElement: string\n    let cursorStyleOfChildElements: string[]\n    let transformStyleOfChildElements: string[]\n    let transitionStyleOfChildElements: string[]\n\n    const timing = (1 / 60) * 1000 // period of most monitors (60fps)\n\n    useIsomorphicLayoutEffect(() => {\n        if (isMounted) {\n            isScrollableAlongX =\n                window.getComputedStyle(ref.current).overflowX === \"scroll\"\n            isScrollableAlongY =\n                window.getComputedStyle(ref.current).overflowY === \"scroll\"\n\n            maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth\n            maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight\n\n            cursorStyleOfWrapperElement = window.getComputedStyle(ref.current).cursor\n\n            cursorStyleOfChildElements = []\n            transformStyleOfChildElements = []\n            transitionStyleOfChildElements = [];\n\n            (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n                (child: HTMLElement) => {\n                    cursorStyleOfChildElements.push(\n                        window.getComputedStyle(child).cursor,\n                    )\n\n                    transformStyleOfChildElements.push(\n                        window.getComputedStyle(child).transform === \"none\"\n                            ? \"\"\n                            : window.getComputedStyle(child).transform,\n                    )\n\n                    transitionStyleOfChildElements.push(\n                        window.getComputedStyle(child).transition === \"none\"\n                            ? \"\"\n                            : window.getComputedStyle(child).transition,\n                    )\n                },\n            )\n        }\n    }, [isMounted])\n\n    const runScroll = () => {\n        const dx = internalState.current.scrollSpeedX * timing\n        const dy = internalState.current.scrollSpeedY * timing\n        const offsetX = ref.current.scrollLeft + dx\n        const offsetY = ref.current.scrollTop + dy\n\n        ref.current.scrollLeft = offsetX // eslint-disable-line no-param-reassign\n        ref.current.scrollTop = offsetY // eslint-disable-line no-param-reassign\n        internalState.current.lastScrollX = offsetX\n        internalState.current.lastScrollY = offsetY\n    }\n\n    const rubberBandCallback = (e: MouseEvent) => {\n        const dx = e.clientX - internalState.current.initialMouseX\n        const dy = e.clientY - internalState.current.initialMouseY\n\n        const { clientWidth, clientHeight } = ref.current\n\n        let displacementX = 0\n        let displacementY = 0\n\n        if (isScrollableAlongX && isScrollableAlongY) {\n            displacementX =\n                0.3 *\n                clientWidth *\n                Math.sign(dx) *\n                Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth)\n            displacementY =\n                0.3 *\n                clientHeight *\n                Math.sign(dy) *\n                Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight)\n        } else if (isScrollableAlongX) {\n            displacementX =\n                0.3 *\n                clientWidth *\n                Math.sign(dx) *\n                Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth)\n        } else if (isScrollableAlongY) {\n            displacementY =\n                0.3 *\n                clientHeight *\n                Math.sign(dy) *\n                Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight)\n        }\n\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement) => {\n                child.style.transform = `translate3d(${displacementX}px, ${displacementY}px, 0px)` // eslint-disable-line no-param-reassign\n                child.style.transition = \"transform 0ms\" // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    const recoverChildStyle = () => {\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement, i) => {\n                child.style.transform = transformStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n                child.style.transition = transitionStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n            },\n        )\n    }\n\n    let rubberBandAnimationTimer: NodeJS.Timeout\n    let keepMovingX: NodeJS.Timer\n    let keepMovingY: NodeJS.Timer\n\n    const callbackMomentum = () => {\n        const minimumSpeedToTriggerMomentum = 0.05\n\n        keepMovingX = setInterval(() => {\n            const lastScrollSpeedX = internalState.current.scrollSpeedX\n            const newScrollSpeedX = lastScrollSpeedX * decayRate\n            internalState.current.scrollSpeedX = newScrollSpeedX\n\n            const isAtLeft = ref.current.scrollLeft <= 0\n            const isAtRight = ref.current.scrollLeft >= maxHorizontalScroll\n            const hasReachedHorizontalEdges = isAtLeft || isAtRight\n\n            runScroll()\n\n            if (\n                Math.abs(newScrollSpeedX) < minimumSpeedToTriggerMomentum ||\n                internalState.current.isMouseDown ||\n                hasReachedHorizontalEdges\n            ) {\n                internalState.current.scrollSpeedX = 0\n                clearInterval(keepMovingX as any)\n            }\n        }, timing)\n\n        keepMovingY = setInterval(() => {\n            const lastScrollSpeedY = internalState.current.scrollSpeedY\n            const newScrollSpeedY = lastScrollSpeedY * decayRate\n            internalState.current.scrollSpeedY = newScrollSpeedY\n\n            const isAtTop = ref.current.scrollTop <= 0\n            const isAtBottom = ref.current.scrollTop >= maxVerticalScroll\n            const hasReachedVerticalEdges = isAtTop || isAtBottom\n\n            runScroll()\n\n            if (\n                Math.abs(newScrollSpeedY) < minimumSpeedToTriggerMomentum ||\n                internalState.current.isMouseDown ||\n                hasReachedVerticalEdges\n            ) {\n                internalState.current.scrollSpeedY = 0\n                clearInterval(keepMovingY as any)\n            }\n        }, timing)\n\n        internalState.current.isDraggingX = false\n        internalState.current.isDraggingY = false\n\n        if (applyRubberBandEffect) {\n            const transitionDurationInMilliseconds = 250;\n\n            (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n                (child: HTMLElement) => {\n                    child.style.transform = `translate3d(0px, 0px, 0px)` // eslint-disable-line no-param-reassign\n                    child.style.transition = `transform ${transitionDurationInMilliseconds}ms` // eslint-disable-line no-param-reassign\n                },\n            )\n\n            rubberBandAnimationTimer = setTimeout(\n                recoverChildStyle,\n                transitionDurationInMilliseconds,\n            )\n        }\n    }\n\n    const preventClick = (e: Event) => {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n        e.stopPropagation()\n    }\n\n    const getIsMousePressActive = (buttonsCode: number) => {\n        return (\n            (activeMouseButton === \"Left\" && buttonsCode === 1) ||\n            (activeMouseButton === \"Middle\" && buttonsCode === 4) ||\n            (activeMouseButton === \"Right\" && buttonsCode === 2)\n        )\n    }\n\n    const onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n        const isMouseActive = getIsMousePressActive(e.buttons)\n        if (!isMouseActive) {\n            return\n        }\n\n        internalState.current.isMouseDown = true\n        internalState.current.lastMouseX = e.clientX\n        internalState.current.lastMouseY = e.clientY\n        internalState.current.initialMouseX = e.clientX\n        internalState.current.initialMouseY = e.clientY\n    }\n\n    const onMouseUp = (e: MouseEvent) => {\n        const isDragging =\n            internalState.current.isDraggingX || internalState.current.isDraggingY\n\n        const dx = internalState.current.initialMouseX - e.clientX\n        const dy = internalState.current.initialMouseY - e.clientY\n\n        const isMotionIntentional =\n            Math.abs(dx) > safeDisplacement || Math.abs(dy) > safeDisplacement\n\n        const isDraggingConfirmed = isDragging && isMotionIntentional\n\n        if (isDraggingConfirmed) {\n            ref.current.childNodes.forEach((child) => {\n                child.addEventListener(\"click\", preventClick)\n            })\n        } else {\n            ref.current.childNodes.forEach((child) => {\n                child.removeEventListener(\"click\", preventClick)\n            })\n        }\n\n        internalState.current.isMouseDown = false\n        internalState.current.lastMouseX = 0\n        internalState.current.lastMouseY = 0\n\n        ref.current.style.cursor = cursorStyleOfWrapperElement; // eslint-disable-line no-param-reassign\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement, i) => {\n                child.style.cursor = cursorStyleOfChildElements[i] // eslint-disable-line no-param-reassign\n            },\n        )\n\n        if (isDraggingConfirmed) {\n            callbackMomentum()\n        }\n    }\n\n    const onMouseMove = (e: MouseEvent) => {\n        if (!internalState.current.isMouseDown) {\n            return\n        }\n\n        e.preventDefault()\n\n        const dx = internalState.current.lastMouseX - e.clientX\n        internalState.current.lastMouseX = e.clientX\n\n        internalState.current.scrollSpeedX = dx / timing\n        internalState.current.isDraggingX = true\n\n        const dy = internalState.current.lastMouseY - e.clientY\n        internalState.current.lastMouseY = e.clientY\n\n        internalState.current.scrollSpeedY = dy / timing\n        internalState.current.isDraggingY = true\n\n        ref.current.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n        (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n            (child: HTMLElement) => {\n                child.style.cursor = \"grabbing\" // eslint-disable-line no-param-reassign\n            },\n        )\n\n        const isAtLeft = ref.current.scrollLeft <= 0 && isScrollableAlongX\n        const isAtRight =\n            ref.current.scrollLeft >= maxHorizontalScroll && isScrollableAlongX\n        const isAtTop = ref.current.scrollTop <= 0 && isScrollableAlongY\n        const isAtBottom =\n            ref.current.scrollTop >= maxVerticalScroll && isScrollableAlongY\n        const isAtAnEdge = isAtLeft || isAtRight || isAtTop || isAtBottom\n\n        if (isAtAnEdge && applyRubberBandEffect) {\n            rubberBandCallback(e)\n        }\n\n        runScroll()\n    }\n\n    const handleResize = () => {\n        maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth\n        maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight\n    }\n\n    React.useEffect(() => {\n        if (isMounted) {\n            window.addEventListener(\"mouseup\", onMouseUp)\n            window.addEventListener(\"mousemove\", onMouseMove)\n            window.addEventListener(\"resize\", handleResize)\n        }\n        return () => {\n            window.removeEventListener(\"mouseup\", onMouseUp)\n            window.removeEventListener(\"mousemove\", onMouseMove)\n            window.removeEventListener(\"resize\", handleResize)\n\n            clearInterval(keepMovingX as any)\n            clearInterval(keepMovingY as any)\n            clearTimeout(rubberBandAnimationTimer)\n        }\n    }, [isMounted])\n\n    return {\n        events: {\n            onMouseDown,\n        },\n    }\n}\n"
      }
    ]
  },
  {
    "component": "hover-card",
    "name": "HoverCard",
    "dependencies": [
      [
        "@radix-ui/react-hover-card",
        "^1.0.6",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "hover-card.tsx",
        "dir": "hover-card",
        "content": "\"use client\"\n\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const HoverCardAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-HoverCard__root\",\n        \"z-50 w-64 rounded-md border bg-[--paper] p-4 shadow-sm outline-none\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0\",\n        \"data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\ntype HoverCardProps = React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content> & {\n    trigger: React.ReactElement\n}\n\nexport const HoverCard = React.forwardRef<HTMLDivElement, HoverCardProps>((props, ref) => {\n    const {\n        className,\n        align = \"center\",\n        sideOffset = 8,\n        ...rest\n    } = props\n\n    return (\n        <HoverCardPrimitive.Root>\n            <HoverCardPrimitive.Trigger asChild>\n                {props.trigger}\n            </HoverCardPrimitive.Trigger>\n\n            <HoverCardPrimitive.Content\n                ref={ref}\n                align={align}\n                sideOffset={sideOffset}\n                className={cn(HoverCardAnatomy.root(), className)}\n                {...rest}\n            />\n        </HoverCardPrimitive.Root>\n    )\n})\n\nHoverCard.displayName = \"HoverCard\"\n\n"
      },
      {
        "name": "index.tsx",
        "dir": "hover-card",
        "content": "export * from \"./hover-card\"\n"
      }
    ]
  },
  {
    "component": "input",
    "name": "Input",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "input",
        "content": "export * from \"./input-parts\"\r\n"
      },
      {
        "name": "input-parts.tsx",
        "dir": "input",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const InputAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Input__root\",\r\n        \"flex items-center\",\r\n        \"w-full rounded-[--radius]\",\r\n        \"bg-[--paper] border border-[--border] placeholder-gray-400 dark:placeholder-gray-600\",\r\n        \"disabled:cursor-not-allowed\",\r\n        \"data-[disable=true]:shadow-none data-[disable=true]:opacity-50\",\r\n        \"focus:border-brand focus:ring-1 focus:ring-[--ring]\",\r\n        \"outline-0\",\r\n        \"transition duration-150\",\r\n        \"shadow-sm\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"h-8 px-2 py-1 text-sm\",\r\n                md: \"h-10 px-3\",\r\n                lg: \"h-12 px-4 py-3 text-md\",\r\n            },\r\n            intent: {\r\n                basic: \"hover:border-gray-300 dark:hover:border-gray-600\",\r\n                filled: \"bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 border-transparent focus:bg-white dark:focus:bg-gray-900 shadow-none\",\r\n                unstyled: cn(\r\n                    \"bg-transparent hover:bg-transparent border-0 shadow-none focus:ring-0 rounded-none p-0 text-base\",\r\n                    // \"focus-visible:ring-2 ring-offset-1 ring-offset-[--background]\",\r\n                ),\r\n            },\r\n            hasError: {\r\n                false: null,\r\n                true: \"border-red-500 hover:border-red-200 dark:border-red-500\",\r\n            },\r\n            isDisabled: {\r\n                false: null,\r\n                true: \"shadow-none pointer-events-none opacity-50 cursor-not-allowed bg-gray-50 dark:bg-gray-800\",\r\n            },\r\n            isReadonly: {\r\n                false: null,\r\n                true: \"pointer-events-none cursor-not-allowed shadow-sm\",\r\n            },\r\n            hasLeftAddon: { true: null, false: null },\r\n            hasRightAddon: { true: null, false: null },\r\n            hasLeftIcon: { true: null, false: null },\r\n            hasRightIcon: { true: null, false: null },\r\n        },\r\n        compoundVariants: [\r\n            { hasLeftAddon: true, className: \"border-l-transparent hover:border-l-transparent rounded-l-none\" },\r\n            /**/\r\n            { hasRightAddon: true, className: \"border-r-transparent hover:border-r-transparent rounded-r-none\" },\r\n            /**/\r\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"sm\", className: \"pl-10\" },\r\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"md\", className: \"pl-10\" },\r\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"lg\", className: \"pl-12\" },\r\n            /**/\r\n            { hasRightAddon: false, hasRightIcon: true, size: \"sm\", className: \"pr-10\" },\r\n            { hasRightAddon: false, hasRightIcon: true, size: \"md\", className: \"pr-10\" },\r\n            { hasRightAddon: false, hasRightIcon: true, size: \"lg\", className: \"pr-12\" },\r\n        ],\r\n        defaultVariants: {\r\n            size: \"md\",\r\n            intent: \"basic\",\r\n            hasError: false,\r\n            isDisabled: false,\r\n            hasLeftIcon: false,\r\n            hasRightIcon: false,\r\n            hasLeftAddon: false,\r\n            hasRightAddon: false,\r\n        },\r\n    }),\r\n})\r\n\r\nexport const hiddenInputStyles = cn(\r\n    \"appearance-none absolute bottom-0 border-0 w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap [clip:rect(0px,0px,0px,0px)] [overflow-wrap:normal]\")\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * InputContainer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const InputContainerAnatomy = defineStyleAnatomy({\r\n    inputContainer: cva([\r\n        \"UI-Input__inputContainer\",\r\n        \"flex relative\",\r\n    ]),\r\n})\r\n\r\nexport type InputContainerProps = {\r\n    className: React.HTMLAttributes<HTMLDivElement>[\"className\"],\r\n    children?: React.ReactNode\r\n}\r\n\r\nexport const InputContainer = ({ className, children }: InputContainerProps) => {\r\n\r\n    return (\r\n        <div className={cn(\"UI-Input__inputContainer flex relative\", className)}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * InputStyling\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type InputStyling = Omit<VariantProps<typeof InputAnatomy.root>,\r\n    \"isDisabled\" | \"hasError\" | \"hasLeftAddon\" | \"hasRightAddon\" | \"hasLeftIcon\" | \"hasRightIcon\"> &\r\n    ComponentAnatomy<typeof InputAddonsAnatomy> &\r\n    ComponentAnatomy<typeof InputContainerAnatomy> & {\r\n    leftAddon?: string\r\n    leftIcon?: React.ReactNode\r\n    rightAddon?: string\r\n    rightIcon?: React.ReactNode\r\n}\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Addons Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const InputAddonsAnatomy = defineStyleAnatomy({\r\n    icon: cva([\r\n        \"UI-Input__addons--icon\",\r\n        \"pointer-events-none absolute inset-y-0 grid place-content-center text-gray-500\",\r\n        \"dark:text-gray-300\",\r\n    ], {\r\n        variants: {\r\n            size: { sm: \"w-10 text-md\", md: \"w-12 text-lg\", lg: \"w-14 text-2xl\" },\r\n            isLeftIcon: { true: \"left-0\", false: null },\r\n            isRightIcon: { true: \"right-0\", false: null },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n            isLeftIcon: false, isRightIcon: false,\r\n        },\r\n    }),\r\n    addon: cva([\r\n        \"UI-Input__addons--addon\",\r\n        \"bg-gray-50 inline-flex items-center flex-none px-3 border border-gray-300 text-gray-800 shadow-sm text-sm sm:text-md\",\r\n        \"dark:bg-gray-700 dark:border-gray-700 dark:text-gray-300\",\r\n    ], {\r\n        variants: {\r\n            size: { sm: \"text-sm\", md: \"text-md\", lg: \"text-lg\" },\r\n            isLeftAddon: { true: \"rounded-l-md\", false: null },\r\n            isRightAddon: { true: \"rounded-r-md\", false: null },\r\n            hasLeftIcon: { true: null, false: null },\r\n            hasRightIcon: { true: null, false: null },\r\n        },\r\n        compoundVariants: [\r\n            { size: \"sm\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\r\n            { size: \"sm\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\r\n            { size: \"md\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\r\n            { size: \"md\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\r\n            { size: \"lg\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-12\" },\r\n            { size: \"lg\", hasRightIcon: true, isRightAddon: true, className: \"pr-12\" },\r\n        ],\r\n        defaultVariants: {\r\n            size: \"md\",\r\n            isLeftAddon: false, isRightAddon: false, hasLeftIcon: false, hasRightIcon: false,\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * InputIcon\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type InputIconProps = {\r\n    icon: InputStyling[\"leftIcon\"] | undefined,\r\n    size: InputStyling[\"size\"],\r\n    side: \"right\" | \"left\",\r\n    props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\r\n    className?: string,\r\n}\r\n\r\nexport const InputIcon = ({ icon, size = \"md\", side, props, className }: InputIconProps) => {\r\n\r\n    if (!!icon) return <span\r\n        className={cn(InputAddonsAnatomy.icon({ isRightIcon: side === \"right\", isLeftIcon: side === \"left\", size }), className)}\r\n        {...props}\r\n    >\r\n        {icon}\r\n    </span>\r\n\r\n    return null\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * InputAddon\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type InputAddonProps = {\r\n    addon: InputStyling[\"rightAddon\"] | InputStyling[\"leftAddon\"] | undefined,\r\n    rightIcon: InputStyling[\"leftIcon\"] | undefined,\r\n    leftIcon: InputStyling[\"rightIcon\"] | undefined,\r\n    size: InputStyling[\"size\"],\r\n    side: \"right\" | \"left\",\r\n    props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\r\n    className?: string,\r\n}\r\n\r\nexport const InputAddon = ({ addon, leftIcon, rightIcon, size = \"md\", side, props, className }: InputAddonProps) => {\r\n\r\n    if (!!addon) return (\r\n        <span\r\n            className={cn(InputAddonsAnatomy.addon({\r\n                isRightAddon: side === \"right\",\r\n                isLeftAddon: side === \"left\",\r\n                hasRightIcon: !!rightIcon,\r\n                hasLeftIcon: !!leftIcon,\r\n                size,\r\n            }), className)}\r\n            {...props}\r\n        >\r\n            {addon}\r\n        </span>\r\n    )\r\n\r\n    return null\r\n\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function extractInputPartProps<T extends InputStyling>(props: T) {\r\n    const {\r\n        size,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        inputContainerClass, // class\r\n        iconClass, // class\r\n        addonClass, // class\r\n        ...rest\r\n    } = props\r\n\r\n    return [{\r\n        size,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        ...rest,\r\n    }, {\r\n        inputContainerProps: {\r\n            className: inputContainerClass,\r\n        },\r\n        leftAddonProps: {\r\n            addon: leftAddon,\r\n            leftIcon,\r\n            rightIcon,\r\n            size,\r\n            side: \"left\",\r\n            className: addonClass,\r\n        },\r\n        rightAddonProps: {\r\n            addon: rightAddon,\r\n            leftIcon,\r\n            rightIcon,\r\n            size,\r\n            side: \"right\",\r\n            className: addonClass,\r\n        },\r\n        leftIconProps: {\r\n            icon: leftIcon,\r\n            size,\r\n            side: \"left\",\r\n            className: iconClass,\r\n        },\r\n        rightIconProps: {\r\n            icon: rightIcon,\r\n            size,\r\n            side: \"right\",\r\n            className: iconClass,\r\n        },\r\n    }] as [\r\n        Omit<T, \"iconClass\" | \"addonClass\" | \"inputContainerClass\">,\r\n        {\r\n            inputContainerProps: InputContainerProps,\r\n            leftAddonProps: InputAddonProps,\r\n            rightAddonProps: InputAddonProps,\r\n            leftIconProps: InputIconProps,\r\n            rightIconProps: InputIconProps\r\n        }\r\n    ]\r\n}\r\n"
      }
    ]
  },
  {
    "component": "loading-spinner",
    "name": "LoadingSpinner",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "loading-spinner",
        "content": "export * from \"./loading-spinner\"\nexport * from \"./loading-overlay\"\n"
      },
      {
        "name": "loading-overlay.tsx",
        "dir": "loading-spinner",
        "content": "import { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\r\nimport { LoadingSpinner } from \"./loading-spinner\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const LoadingOverlayAnatomy = defineStyleAnatomy({\r\n    overlay: cva([\r\n        \"UI-LoadingOverlay__overlay\",\r\n        \"absolute bg-[--background]/50 w-full h-full z-10 inset-0 pt-4 flex flex-col items-center justify-center backdrop-blur-sm\",\r\n        \"!mt-0\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LoadingOverlay\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface LoadingOverlayProps {\r\n    children?: React.ReactNode\r\n    hideSpinner?: boolean\r\n    show?: boolean\r\n}\r\n\r\nexport const LoadingOverlay: React.FC<LoadingOverlayProps & React.ComponentPropsWithoutRef<\"div\">> = (props) => {\r\n\r\n    const { children, show = true, className, hideSpinner = false, ...rest } = props\r\n\r\n    if (!show) return null\r\n\r\n    return (\r\n        <div className={cn(LoadingOverlayAnatomy.overlay(), className)} {...rest}>\r\n            {!hideSpinner && <LoadingSpinner className=\"justify-auto\" />}\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nLoadingOverlay.displayName = \"LoadingOverlay\"\r\n"
      },
      {
        "name": "loading-spinner.tsx",
        "dir": "loading-spinner",
        "content": "import { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LoadingSpinnerAnatomy = defineStyleAnatomy({\n    container: cva([\n        \"UI-LoadingSpinner__container\",\n        \"flex w-full items-center h-24 justify-center\",\n    ]),\n    icon: cva([\n        \"UI-LoadingSpinner__icon\",\n        \"inline w-10 h-10 mr-2 animate-spin\",\n        \"text-gray-200 dark:text-gray-600 fill-brand-500\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingSpinner\n * -----------------------------------------------------------------------------------------------*/\n\nexport type LoadingSpinnerProps = React.ComponentPropsWithRef<\"div\"> & ComponentAnatomy<typeof LoadingSpinnerAnatomy>\n\nexport const LoadingSpinner = React.forwardRef<HTMLDivElement, LoadingSpinnerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        containerClass,\n        iconClass,\n        ...rest\n    } = props\n\n    return (\n        <div\n            className={cn(\n                LoadingSpinnerAnatomy.container(),\n                containerClass,\n            )}\n            {...rest}\n            ref={ref}\n        >\n            <Spinner className={iconClass} />\n        </div>\n    )\n\n})\n\nLoadingSpinner.displayName = \"LoadingSpinner\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Spinner\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SpinnerProps extends React.ComponentPropsWithRef<\"svg\"> {\n    children?: React.ReactNode\n}\n\nexport const Spinner = React.forwardRef<SVGSVGElement, SpinnerProps>((props, ref) => {\n\n    const { children, className, ...rest } = props\n\n    return (\n        <svg\n            aria-hidden=\"true\"\n            className={cn(\n                LoadingSpinnerAnatomy.icon(),\n                className,\n            )}\n            viewBox=\"0 0 100 101\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            ref={ref}\n            {...rest}\n        >\n            <path\n                d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n                fill=\"currentColor\"\n            />\n            <path\n                d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n                fill=\"currentFill\"\n            />\n        </svg>\n    )\n\n})\n"
      }
    ]
  },
  {
    "component": "modal",
    "name": "Modal",
    "dependencies": [
      [
        "@radix-ui/react-dialog",
        "^1.0.4",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "modal",
        "content": "export * from \"./modal\"\n"
      },
      {
        "name": "modal.tsx",
        "dir": "modal",
        "content": "\"use client\"\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { CloseButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ModalAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-Modal__overlay\",\n        \"fixed inset-0 z-50 bg-black/80\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n    ]),\n    content: cva([\n        \"UI-Modal__content\",\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-[--background] p-6 shadow-lg duration-200\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]\",\n        \"data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n        \"sm:rounded-[--radius]\",\n    ]),\n    close: cva([\n        \"UI-Modal__close\",\n        \"absolute right-4 top-4\",\n    ]),\n    header: cva([\n        \"UI-Modal__header\",\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n    ]),\n    footer: cva([\n        \"UI-Modal__footer\",\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n    ]),\n    title: cva([\n        \"UI-Modal__title\",\n        \"text-xl font-semibold leading-none tracking-tight\",\n    ]),\n    description: cva([\n        \"UI-Modal__description\",\n        \"text-sm text-[--muted]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Modal\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ModalProps =\n    Omit<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>, \"modal\">\n    &\n    Pick<React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>, \"onOpenAutoFocus\" | \"onCloseAutoFocus\" | \"onEscapeKeyDown\" | \"onPointerDownCapture\" | \"onInteractOutside\">\n    &\n    ComponentAnatomy<typeof ModalAnatomy>\n    & {\n    /**\n     * Interaction with outside elements will be enabled and other elements will be visible to screen readers.\n     */\n    allowOutsideInteraction?: boolean\n    /**\n     * The button that opens the modal\n     */\n    trigger?: React.ReactElement\n    /**\n     * Title of the modal\n     */\n    title?: React.ReactNode\n    /**\n     * An optional accessible description to be announced when the dialog is opened.\n     */\n    description?: React.ReactNode\n    /**\n     * Footer of the modal\n     */\n    footer?: React.ReactNode\n    /**\n     * Optional replacement for the default close button\n     */\n    closeButton?: React.ReactElement\n    /**\n     * Whether to hide the close button\n     */\n    hideCloseButton?: boolean\n}\n\nexport function Modal(props: ModalProps) {\n\n    const {\n        allowOutsideInteraction = false,\n        trigger,\n        title,\n        footer,\n        description,\n        children,\n        closeButton,\n        overlayClass,\n        contentClass,\n        closeClass,\n        headerClass,\n        footerClass,\n        titleClass,\n        descriptionClass,\n        hideCloseButton,\n        // Content\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onEscapeKeyDown,\n        onPointerDownCapture,\n        onInteractOutside,\n        ...rest\n    } = props\n\n    return <DialogPrimitive.Root modal={!allowOutsideInteraction} {...rest}>\n\n        {trigger && <DialogPrimitive.Trigger asChild>{trigger}</DialogPrimitive.Trigger>}\n\n        <DialogPrimitive.Overlay className={cn(ModalAnatomy.overlay(), overlayClass)} />\n\n        <DialogPrimitive.Portal>\n\n            <DialogPrimitive.Content\n                className={cn(ModalAnatomy.content(), contentClass)}\n                onOpenAutoFocus={onOpenAutoFocus}\n                onCloseAutoFocus={onCloseAutoFocus}\n                onEscapeKeyDown={onEscapeKeyDown}\n                onPointerDownCapture={onPointerDownCapture}\n                onInteractOutside={onInteractOutside}\n            >\n\n                {(title || description) && <div className={cn(ModalAnatomy.header(), headerClass)}>\n                    {title && <DialogPrimitive.Title className={cn(ModalAnatomy.title(), titleClass)}>\n                        {title}\n                    </DialogPrimitive.Title>}\n                    {description && <DialogPrimitive.Description className={cn(ModalAnatomy.description(), descriptionClass)}>\n                        {description}\n                    </DialogPrimitive.Description>}\n                </div>}\n\n                {children}\n\n                {footer && <div className={cn(ModalAnatomy.footer(), footerClass)}>\n                    {footer}\n                </div>}\n\n                {!hideCloseButton && <DialogPrimitive.Close className={cn(ModalAnatomy.close(), closeClass)} asChild>\n                    {closeButton ? closeButton : <CloseButton />}\n                </DialogPrimitive.Close>}\n\n            </DialogPrimitive.Content>\n\n        </DialogPrimitive.Portal>\n\n    </DialogPrimitive.Root>\n}\n\nModal.displayName = \"Modal\"\n"
      }
    ]
  },
  {
    "component": "native-select",
    "name": "NativeSelect",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "native-select",
        "content": "export * from \"./native-select\"\r\n"
      },
      {
        "name": "native-select.tsx",
        "dir": "native-select",
        "content": "import * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn } from \"../core/styling\"\r\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * NativeSelect\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type NativeSelectProps = Omit<React.ComponentPropsWithRef<\"select\">, \"size\"> &\r\n    InputStyling &\r\n    BasicFieldOptions & {\r\n    /**\r\n     * The options to display\r\n     */\r\n    options: { value: string | number, label?: string }[] | undefined\r\n    /**\r\n     * The placeholder text\r\n     */\r\n    placeholder?: string\r\n}\r\n\r\nexport const NativeSelect = React.forwardRef<HTMLSelectElement, NativeSelectProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<NativeSelectProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        placeholder,\r\n        options,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<NativeSelectProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <select\r\n                    id={basicFieldProps.id}\r\n                    name={basicFieldProps.name}\r\n                    className={cn(\r\n                        \"form-select\",\r\n                        InputAnatomy.root({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            isDisabled: !!basicFieldProps.disabled,\r\n                            isReadonly: !!basicFieldProps.readonly,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        className,\r\n                    )}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                    data-readonly={basicFieldProps.readonly}\r\n                    aria-readonly={basicFieldProps.readonly}\r\n                    required={basicFieldProps.required}\r\n                    {...rest}\r\n                    ref={ref}\r\n                >\r\n                    {placeholder && <option value=\"\">{placeholder}</option>}\r\n                    {options?.map(opt => (\r\n                        <option key={opt.value} value={opt.value}>{opt.label ?? opt.value}</option>\r\n                    ))}\r\n                </select>\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon\r\n                    {...rightIconProps}\r\n                    className={cn(\r\n                        rightIconProps.className,\r\n                        !rightAddon ? \"mr-8\" : null,\r\n                    )}\r\n                />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nNativeSelect.displayName = \"NativeSelect\"\r\n"
      }
    ]
  },
  {
    "component": "navigation-menu",
    "name": "NavigationMenu",
    "dependencies": [
      [
        "@radix-ui/react-navigation-menu",
        "^1.1.3",
        ""
      ]
    ],
    "family": [
      "drawer",
      "vertical-menu"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "navigation-menu",
        "content": "export * from \"./navigation-menu\"\r\n"
      },
      {
        "name": "navigation-menu.tsx",
        "dir": "navigation-menu",
        "content": "\"use client\"\r\n\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport Link from \"next/link\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { Drawer } from \"../drawer\"\r\nimport { VerticalMenu, VerticalMenuItem } from \"../vertical-menu\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const NavigationMenuAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-NavigationMenu__root\",\r\n        \"relative inline-block z-10 max-w-full\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-NavigationMenu__item\",\r\n        \"relative group/navigationMenu_item inline-flex items-center h-full select-none rounded-[--radius] leading-none no-underline outline-none transition-colors\",\r\n        \"text-[--muted] hover:bg-[--subtle] hover:text-[--text-color] focus:bg-[--subtle]\",\r\n        \"data-[current=true]:text-[--brand]\", // Selected\r\n        \"font-[600] leading-none\",\r\n        \"focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-[--ring]\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"px-3 h-8 text-sm\",\r\n                md: \"px-3 h-10 text-sm\",\r\n                lg: \"px-3 h-12 text-base\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    icon: cva([\r\n        \"UI-VerticalNav__icon\",\r\n        \"flex-shrink-0 mr-3\",\r\n        \"text-[--muted] group-hover/navigationMenu_item:text-[--text-color] data-[current=true]:text-[--brand] data-[current=true]:group-hover/navigationMenu_item:text-[--brand]\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"size-4\",\r\n                md: \"size-5\",\r\n                lg: \"size-6\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    itemChevron: cva([\r\n        \"UI-VerticalNav__itemChevron\",\r\n        \"ml-2 w-4 h-4 transition-transform duration-200 group-hover/navigationMenu_item:rotate-180\",\r\n    ]),\r\n    desktopList: cva([\r\n        \"UI-VerticalNav__desktopList\",\r\n        \"inline-block space-x-1\",\r\n    ], {\r\n        variants: {\r\n            switchToDrawerBelow: {\r\n                sm: \"hidden sm:flex\",\r\n                md: \"hidden md:flex\",\r\n                lg: \"hidden lg:flex\",\r\n                never: \"flex\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            switchToDrawerBelow: \"md\",\r\n        },\r\n    }),\r\n    mobileTrigger: cva([\r\n        \"UI-VerticalNav__mobileTrigger\",\r\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--subtle] hover:text-[--text-color]\",\r\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\",\r\n    ], {\r\n        variants: {\r\n            switchToDrawerBelow: {\r\n                sm: \"inline-flex sm:hidden\",\r\n                md: \"inline-flex md:hidden\",\r\n                lg: \"inline-flex lg:hidden\",\r\n                never: \"hidden\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            switchToDrawerBelow: \"md\",\r\n        },\r\n    }),\r\n    menuContainer: cva([\r\n        \"UI-NavigationMenu__menuContainer\",\r\n        \"absolute left-0 top-0 overflow-hidden p-1 data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out\",\r\n        \"data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52\",\r\n        \"data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52\",\r\n        \"data-[motion=to-start]:slide-out-to-left-52 w-full sm:min-w-full\",\r\n    ]),\r\n    viewport: cva([\r\n        \"UI-NavigationMenu__viewport\",\r\n        \"relative mt-1.5 duration-300 h-[var(--radix-navigation-menu-viewport-height)]\",\r\n        \"w-full min-w-96 overflow-hidden rounded-[--radius] shadow-sm border bg-[--paper] text-[--text-color]\",\r\n        \"data-[state=open]:animate-in data-[state=open]:zoom-in-90 data-[state=open]:fade-in-25\",\r\n        \"data-[state=closed]:animate-out data-[state=closed]:zoom-out-100 data-[state=closed]:fade-out-0\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * NavigationMenu\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type NavigationMenuProps = ComponentAnatomy<typeof NavigationMenuAnatomy> &\r\n    React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root> &\r\n    VariantProps<typeof NavigationMenuAnatomy.desktopList> &\r\n    VariantProps<typeof NavigationMenuAnatomy.item> & {\r\n    children?: React.ReactNode\r\n    items: VerticalMenuItem[],\r\n    /**\r\n     * Add content to the mobile drawer. The content is appended above the menu\r\n     */\r\n    mobileDrawerHeader?: React.ReactNode\r\n    /**\r\n     * Add content to the mobile drawer. The content is appended below the menu\r\n     */\r\n    mobileDrawerContent?: React.ReactNode\r\n    /**\r\n     * Additional props passed to the mobile drawer\r\n     */\r\n    mobileDrawerProps?: React.ComponentPropsWithoutRef<typeof Drawer>\r\n}\r\n\r\nexport const NavigationMenu = React.forwardRef<HTMLDivElement, NavigationMenuProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        iconClass,\r\n        itemClass,\r\n        desktopListClass,\r\n        itemChevronClass,\r\n        mobileTriggerClass,\r\n        menuContainerClass,\r\n        viewportClass,\r\n        className,\r\n        switchToDrawerBelow,\r\n        mobileDrawerHeader,\r\n        mobileDrawerContent,\r\n        mobileDrawerProps,\r\n        items,\r\n        size,\r\n        ...rest\r\n    } = props\r\n\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const Icon = React.useCallback(({ item }: { item: NavigationMenuProps[\"items\"][number] }) => item.iconType ? <item.iconType\r\n        className={cn(\r\n            NavigationMenuAnatomy.icon({ size }),\r\n            iconClass,\r\n        )}\r\n        aria-hidden=\"true\"\r\n        data-current={item.isCurrent}\r\n    /> : null, [iconClass, size])\r\n\r\n    return (\r\n        <NavigationMenuPrimitive.Root\r\n            ref={ref}\r\n            className={cn(\r\n                NavigationMenuAnatomy.root(),\r\n                className,\r\n            )}\r\n            {...rest}\r\n        >\r\n            {/*Mobile*/}\r\n            <button\r\n                className={cn(\r\n                    NavigationMenuAnatomy.mobileTrigger({\r\n                        switchToDrawerBelow,\r\n                    }),\r\n                    mobileTriggerClass,\r\n                )}\r\n                onClick={() => setMobileOpen(s => !s)}\r\n            >\r\n                <span className=\"sr-only\">Open main menu</span>\r\n                {mobileOpen ? (\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\r\n                    >\r\n                        <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\r\n                        <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\r\n                    </svg>\r\n                ) : (\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\"\r\n                    >\r\n                        <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\r\n                        <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\r\n                    </svg>\r\n                )}\r\n            </button>\r\n            <Drawer\r\n                open={mobileOpen}\r\n                onOpenChange={open => setMobileOpen(open)}\r\n                side=\"left\"\r\n                {...mobileDrawerProps}\r\n            >\r\n                {mobileDrawerHeader}\r\n                <VerticalMenu\r\n                    items={items}\r\n                    className=\"mt-2\"\r\n                    onLinkItemClick={() => setMobileOpen(false)} // Close the drawer when a link item is clicked\r\n                />\r\n                {mobileDrawerContent}\r\n            </Drawer>\r\n\r\n            {/*Desktop*/}\r\n            <NavigationMenuPrimitive.List\r\n                className={cn(\r\n                    NavigationMenuAnatomy.desktopList({\r\n                        switchToDrawerBelow,\r\n                    }),\r\n                    desktopListClass,\r\n                )}\r\n            >\r\n                {items.map(item => {\r\n\r\n                    if (item.subContent) {\r\n                        return (\r\n                            <NavigationMenuPrimitive.Item key={item.name}>\r\n                                <NavigationMenuPrimitive.Trigger\r\n                                    className={cn(\r\n                                        NavigationMenuAnatomy.item({ size }),\r\n                                        itemClass,\r\n                                    )}\r\n                                    data-current={item.isCurrent}\r\n                                >\r\n                                    <Icon item={item} />\r\n                                    <span className=\"flex-none\">{item.name}</span>\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                        fill=\"none\"\r\n                                        stroke=\"currentColor\"\r\n                                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                        className={cn(NavigationMenuAnatomy.itemChevron(), itemChevronClass)}\r\n                                        data-open={`${open}`}\r\n                                    >\r\n                                        <polyline points=\"6 9 12 15 18 9\" />\r\n                                    </svg>\r\n                                </NavigationMenuPrimitive.Trigger>\r\n                                <NavigationMenuPrimitive.Content\r\n                                    ref={ref}\r\n                                    className={cn(\r\n                                        NavigationMenuAnatomy.menuContainer(),\r\n                                        menuContainerClass,\r\n                                    )}\r\n                                >\r\n                                    <div className=\"w-full\">\r\n                                        {item.subContent && item.subContent}\r\n                                    </div>\r\n                                </NavigationMenuPrimitive.Content>\r\n                            </NavigationMenuPrimitive.Item>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <NavigationMenuPrimitive.Item key={item.name}>\r\n                                <NavigationMenuPrimitive.NavigationMenuLink asChild>\r\n                                    {item.href ? (\r\n                                        <Link\r\n                                            href={item.href}\r\n                                            className={cn(\r\n                                                NavigationMenuAnatomy.item({ size }),\r\n                                                itemClass,\r\n                                            )}\r\n                                            data-current={item.isCurrent}\r\n                                        >\r\n                                            <Icon item={item} />\r\n                                            <span className=\"flex-none\">{item.name}</span>\r\n                                            {item.addon}\r\n                                        </Link>\r\n                                    ) : (\r\n                                        <button\r\n                                            className={cn(\r\n                                                NavigationMenuAnatomy.item({ size }),\r\n                                                itemClass,\r\n                                            )}\r\n                                            data-current={item.isCurrent}\r\n                                        >\r\n                                            <Icon item={item} />\r\n                                            <span className=\"flex-none\">{item.name}</span>\r\n                                            {item.addon}\r\n                                        </button>\r\n                                    )}\r\n                                </NavigationMenuPrimitive.NavigationMenuLink>\r\n                            </NavigationMenuPrimitive.Item>\r\n                        )\r\n                    }\r\n\r\n                })}\r\n            </NavigationMenuPrimitive.List>\r\n            <div className={cn(\"perspective-[2000px] absolute left-0 top-full w-full flex justify-center\")}>\r\n                <NavigationMenuPrimitive.Viewport\r\n                    className={cn(\r\n                        NavigationMenuAnatomy.viewport(),\r\n                        viewportClass,\r\n                    )}\r\n                />\r\n            </div>\r\n        </NavigationMenuPrimitive.Root>\r\n    )\r\n\r\n})\r\n\r\nNavigationMenu.displayName = \"NavigationMenu\"\r\n"
      }
    ]
  },
  {
    "component": "number-input",
    "name": "NumberInput",
    "dependencies": [
      [
        "@zag-js/number-input",
        "^0.32.0",
        ""
      ],
      [
        "@zag-js/react",
        "^0.32.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "number-input",
        "content": "export * from \"./number-input\"\n"
      },
      {
        "name": "number-input.tsx",
        "dir": "number-input",
        "content": "\"use client\"\n\nimport type { IntlTranslations } from \"@zag-js/number-input\"\nimport * as numberInput from \"@zag-js/number-input\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { IconButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const NumberInputAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-NumberInput__root\",\n        \"z-[2]\",\n    ], {\n        variants: {\n            hideControls: {\n                true: false,\n                false: \"border-r border-r-transparent hover:border-r-[--border]\",\n            },\n            size: {\n                sm: null,\n                md: null,\n                lg: null,\n            },\n            intent: {\n                basic: null,\n                filled: null,\n                unstyled: \"border-r-0 hover:border-r-transparent\",\n            },\n        },\n        defaultVariants: {\n            hideControls: false,\n        },\n    }),\n    control: cva([\n        \"UI-NumberInput__control\",\n        \"rounded-none h-[50%] ring-inset\",\n    ]),\n    controlsContainer: cva([\n        \"UI-NumberInput__controlsContainer\",\n        \"form-input w-auto p-0 flex flex-col items-stretch justify-center overflow-hidden max-h-full\",\n        \"border-l-0 relative z-[1]\",\n        \"shadow-xs\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-8\",\n                md: \"h-10\",\n                lg: \"h-12\",\n            },\n            intent: {\n                basic: null,\n                filled: \"hover:bg-gray-100\",\n                unstyled: null,\n            },\n            hasRightAddon: {\n                true: \"border-r-0\",\n                false: null,\n            },\n        },\n    }),\n    chevronIcon: cva([\n        \"UI-Combobox__chevronIcon\",\n        \"h-4 w-4 shrink-0\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * NumberInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport type NumberInputProps = Omit<React.ComponentPropsWithoutRef<\"input\">, \"value\" | \"size\" | \"defaultValue\"> &\n    ComponentAnatomy<typeof NumberInputAnatomy> &\n    Omit<VariantProps<typeof NumberInputAnatomy.root>, \"size\" | \"intent\"> &\n    BasicFieldOptions &\n    InputStyling & {\n    /**\n     * The value of the input\n     */\n    value?: number | string\n    /**\n     * The callback to handle value changes\n     */\n    onValueChange?: (value: number, valueAsString: string) => void\n    /**\n     * Default value when uncontrolled\n     */\n    defaultValue?: number | string\n    /**\n     * The minimum value of the input\n     */\n    min?: number\n    /**\n     * The maximum value of the input\n     */\n    max?: number\n    /**\n     * The amount to increment or decrement the value by\n     */\n    step?: number\n    /**\n     * Whether to allow mouse wheel to change the value\n     */\n    allowMouseWheel?: boolean\n    /**\n     * Whether to allow the value overflow the min/max range\n     */\n    allowOverflow?: boolean\n    /**\n     * Whether to hide the controls\n     */\n    hideControls?: boolean\n    /**\n     * The format options for the value\n     */\n    formatOptions?: Intl.NumberFormatOptions\n    /**\n     * Whether to clamp the value when the input loses focus (blur)\n     */\n    clampValueOnBlur?: boolean\n    /**\n     * Accessibility\n     *\n     * Specifies the localized strings that identifies the accessibility elements and their states\n     */\n    translations?: IntlTranslations,\n    /**\n     * The current locale. Based on the BCP 47 definition.\n     */\n    locale?: string\n    /**\n     * The document's text/writing direction.\n     */\n    dir?: \"ltr\" | \"rtl\"\n}\n\nexport const NumberInput = React.forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n\n    const [props1, basicFieldProps] = extractBasicFieldProps<NumberInputProps>(props, React.useId())\n\n    const [{\n        controlClass,\n        controlsContainerClass,\n        chevronIconClass,\n        className,\n        children,\n        /**/\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        placeholder,\n        onValueChange,\n        hideControls,\n        value: controlledValue,\n        min = 0,\n        max,\n        step,\n        allowMouseWheel = true,\n        formatOptions = { maximumFractionDigits: 2 },\n        clampValueOnBlur = true,\n        translations,\n        locale,\n        dir,\n        defaultValue,\n        ...rest\n    }, {\n        inputContainerProps,\n        leftAddonProps,\n        leftIconProps,\n        rightAddonProps,\n        rightIconProps,\n    }] = extractInputPartProps<NumberInputProps>({\n        ...props1,\n        size: props1.size ?? \"md\",\n        intent: props1.intent ?? \"basic\",\n        leftAddon: props1.leftAddon,\n        leftIcon: props1.leftIcon,\n        rightAddon: props1.rightAddon,\n        rightIcon: props1.rightIcon,\n    })\n\n    const [state, send] = useMachine(numberInput.machine({\n        id: basicFieldProps.id,\n        name: basicFieldProps.name,\n        disabled: basicFieldProps.disabled,\n        readOnly: basicFieldProps.readonly,\n        value: controlledValue ? String(controlledValue) : (defaultValue ? String(defaultValue) : undefined),\n        min,\n        max,\n        step,\n        allowMouseWheel,\n        formatOptions,\n        clampValueOnBlur,\n        translations,\n        locale,\n        dir,\n        onValueChange: (details) => {\n            onValueChange?.(details.valueAsNumber, details.value)\n        },\n    }))\n\n    const isFirst = React.useRef(true)\n\n    React.useEffect(() => {\n        if (!isFirst.current) {\n            if (typeof controlledValue === \"string\" && !isNaN(Number(controlledValue))) {\n                api.setValue(Number(controlledValue))\n            } else if (typeof controlledValue === \"number\") {\n                api.setValue(controlledValue)\n            } else if (controlledValue === undefined) {\n                api.setValue(min)\n            }\n        }\n        isFirst.current = false\n    }, [controlledValue])\n\n    const api = numberInput.connect(state, send, normalizeProps)\n\n    return (\n        <BasicField\n            {...basicFieldProps}\n            id={api.inputProps.id}\n        >\n            <InputContainer {...inputContainerProps}>\n                <InputAddon {...leftAddonProps} />\n                <InputIcon {...leftIconProps} />\n\n                <input\n                    ref={ref}\n                    type=\"number\"\n                    name={basicFieldProps.name}\n                    className={cn(\n                        \"form-input\",\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            hasRightAddon: !!rightAddon || !hideControls,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: !!leftAddon,\n                            hasLeftIcon: !!leftIcon,\n                        }),\n                        NumberInputAnatomy.root({ hideControls, intent, size }),\n                        className,\n                    )}\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\n                    data-disabled={basicFieldProps.disabled}\n                    data-readonly={basicFieldProps.readonly}\n                    aria-readonly={basicFieldProps.readonly}\n                    required={basicFieldProps.required}\n                    {...api.inputProps}\n                    {...rest}\n                />\n\n                {!hideControls && (<div\n                    className={cn(\n                        InputAnatomy.root({\n                            size,\n                            intent,\n                            hasError: !!basicFieldProps.error,\n                            isDisabled: !!basicFieldProps.disabled,\n                            hasRightAddon: !!rightAddon,\n                            hasRightIcon: !!rightIcon,\n                            hasLeftAddon: true,\n                        }),\n                        NumberInputAnatomy.controlsContainer({\n                            size,\n                            intent,\n                            hasRightAddon: !!rightAddon,\n                        }),\n                        controlsContainerClass,\n                    )}\n                >\n                    <IconButton\n                        intent=\"gray-basic\"\n                        size=\"sm\"\n                        className={cn(\n                            NumberInputAnatomy.control(),\n                            controlClass,\n                        )}\n                        {...api.incrementTriggerProps}\n                        data-readonly={basicFieldProps.readonly}\n                        data-disabled={basicFieldProps.disabled || api.incrementTriggerProps.disabled}\n                        disabled={basicFieldProps.disabled || basicFieldProps.readonly || api.incrementTriggerProps.disabled}\n                        tabIndex={0}\n                        icon={<svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={cn(NumberInputAnatomy.chevronIcon(), \"rotate-180\", chevronIconClass)}\n                        >\n                            <path d=\"m6 9 6 6 6-6\" />\n                        </svg>}\n                    />\n                    <IconButton\n                        intent=\"gray-basic\"\n                        size=\"sm\"\n                        className={cn(\n                            NumberInputAnatomy.control(),\n                            controlClass,\n                        )}\n                        {...api.decrementTriggerProps}\n                        data-readonly={basicFieldProps.readonly}\n                        data-disabled={basicFieldProps.disabled || api.decrementTriggerProps.disabled}\n                        disabled={basicFieldProps.disabled || basicFieldProps.readonly || api.decrementTriggerProps.disabled}\n                        tabIndex={0}\n                        icon={<svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className={cn(NumberInputAnatomy.chevronIcon(), chevronIconClass)}\n                        >\n                            <path d=\"m6 9 6 6 6-6\" />\n                        </svg>}\n                    />\n                </div>)}\n\n                <InputAddon {...rightAddonProps} />\n                <InputIcon\n                    {...rightIconProps}\n                    className={cn(\n                        \"z-[3]\",\n                        rightIconProps.className,\n                        !rightAddon ? \"mr-6\" : null,\n                    )}\n                />\n            </InputContainer>\n        </BasicField>\n    )\n\n})\n\nNumberInput.displayName = \"NumberInput\"\n"
      }
    ]
  },
  {
    "component": "page-header",
    "name": "PageHeader",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "page-header",
        "content": "export * from \"./page-header\"\n"
      },
      {
        "name": "page-header.tsx",
        "dir": "page-header",
        "content": "import { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PageHeaderAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-PageHeader__root\",\n        \"md:flex md:items-center md:justify-between space-y-2 md:space-y-0 md:space-x-5\",\n    ]),\n    title: cva([\n        \"UI-PageHeader__title\",\n        \"font-bold text-gray-900 dark:text-gray-200\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-lg sm:text-xl\",\n                md: \"text-2xl sm:text-3xl\",\n                lg: \"text-3xl sm:text-4xl\",\n                xl: \"text-4xl sm:text-5xl\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    actionContainer: cva([\n        \"UI-PageHeader__actionContainer\",\n        \"justify-stretch flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end\",\n        \"sm:space-y-0 sm:space-x-3 sm:space-x-reverse md:mt-0 md:flex-row md:space-x-3\",\n    ]),\n    description: cva([\n        \"UI-PageHeader__description\",\n        \"text-sm font-medium text-gray-500 dark:text-gray-400\",\n    ]),\n    detailsContainer: cva([\n        \"UI-PageHeader__detailsContainer\",\n        \"block sm:flex items-start sm:space-x-5\",\n    ], {\n        variants: {\n            withImage: {\n                true: \"flex-col gap-2 sm:flex-row sm:gap-6\",\n                false: null,\n            },\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * PageHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PageHeaderProps = React.ComponentPropsWithRef<\"header\"> &\n    ComponentAnatomy<typeof PageHeaderAnatomy> &\n    VariantProps<typeof PageHeaderAnatomy.title> & {\n    /**\n     * Page title.\n     */\n    title?: string\n    /**\n     * Page description.\n     */\n    description?: string\n    /**\n     * Elements rendered in the action container.\n     */\n    action?: React.ReactNode\n    /**\n     * Image elements rendered next to the title and description.\n     */\n    image?: React.ReactNode\n}\n\nexport const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size = \"md\",\n        title,\n        description,\n        action,\n        image,\n        titleClass,\n        actionContainerClass,\n        descriptionClass,\n        detailsContainerClass,\n        ...rest\n    } = props\n\n    return (\n        <header\n            ref={ref}\n            aria-label={title}\n            className={cn(\n                PageHeaderAnatomy.root(),\n                className,\n            )}\n            {...rest}\n        >\n            <div className={cn(PageHeaderAnatomy.detailsContainer(), detailsContainerClass)}>\n                {image && <div className=\"flex-shrink-0\">\n                    <div className=\"relative\">\n                        {image}\n                    </div>\n                </div>}\n                <div className=\"\">\n                    <h1 className={cn(PageHeaderAnatomy.title({ size }), titleClass)}>{title}</h1>\n                    {description && <p className={cn(PageHeaderAnatomy.description(), descriptionClass)}>\n                        {description}\n                    </p>}\n                </div>\n            </div>\n            {!!action && <div className={cn(PageHeaderAnatomy.actionContainer(), actionContainerClass)}>\n                {action}\n            </div>}\n        </header>\n    )\n\n})\n\nPageHeader.displayName = \"PageHeader\"\n"
      }
    ]
  },
  {
    "component": "pagination",
    "name": "Pagination",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "pagination",
        "content": "export * from \"./pagination\"\n"
      },
      {
        "name": "pagination.tsx",
        "dir": "pagination",
        "content": "\"use client\"\n\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PaginationAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Pagination__root\",\n        \"flex gap-1 text-xs font-medium\",\n    ]),\n    item: cva([\n        \"UI-Pagination__item\",\n        \"bg-transparent dark:bg-transparent text-sm text-[--muted] inline-flex h-8 w-8 items-center justify-center rounded border cursor-pointer\",\n        \"hover:bg-[--subtle] dark:hover:bg-[--subtle] hover:border-[--subtle] select-none\",\n        \"data-[selected=true]:bg-brand-500 data-[selected=true]:border-transparent data-[selected=true]:text-white data-[selected=true]:hover:bg-brand data-[selected=true]:pointer-events-none\", // Selected\n        \"data-[disabled=true]:opacity-50 data-[disabled=true]:pointer-events-none data-[disabled=true]:cursor-not-allowed\", // Disabled\n        \"outline-none ring-[--ring] focus-visible:ring-2\",\n    ]),\n    ellipsis: cva([\n        \"UI-Pagination__ellipsis\",\n        \"flex p-2 items-center text-[1.05rem]\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Pagination\n * -----------------------------------------------------------------------------------------------*/\n\nconst __PaginationAnatomyContext = React.createContext<ComponentAnatomy<typeof PaginationAnatomy>>({})\n\nexport type PaginationProps = React.ComponentPropsWithRef<\"ul\"> & ComponentAnatomy<typeof PaginationAnatomy>\n\nexport const Pagination = React.forwardRef<HTMLUListElement, PaginationProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        className,\n        ellipsisClass,\n        ...rest\n    } = props\n\n    return (\n        <__PaginationAnatomyContext.Provider\n            value={{\n                itemClass,\n                ellipsisClass,\n            }}\n        >\n            <ul\n                ref={ref}\n                className={cn(PaginationAnatomy.root(), className)}\n                role=\"navigation\"\n                {...rest}\n            >\n                {children}\n            </ul>\n        </__PaginationAnatomyContext.Provider>\n    )\n\n})\n\nPagination.displayName = \"Pagination\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationItem\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationItemProps = Omit<React.ComponentPropsWithRef<\"button\">, \"children\"> & {\n    value: string | number\n}\n\nexport const PaginationItem = React.forwardRef<HTMLButtonElement, PaginationItemProps>((props, ref) => {\n\n    const {\n        value,\n        className,\n        ...rest\n    } = props\n\n    const { itemClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li>\n            <button\n                className={cn(PaginationAnatomy.item(), itemClass, className)}\n                {...rest}\n                ref={ref}\n            >\n                {value}\n            </button>\n        </li>\n    )\n\n})\n\nPaginationItem.displayName = \"PaginationItem\"\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationTriggerProps = Omit<React.ComponentPropsWithRef<\"button\">, \"children\"> & {\n    direction: \"previous\" | \"next\"\n    isChevrons?: boolean\n    isDisabled?: boolean\n}\n\nexport const PaginationTrigger = React.forwardRef<HTMLButtonElement, PaginationTriggerProps>((props, ref) => {\n\n    const {\n        isChevrons = false,\n        isDisabled = false,\n        direction,\n        className,\n        ...rest\n    } = props\n\n    const { itemClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li>\n            <button\n                className={cn(PaginationAnatomy.item(), itemClass, className)}\n                data-disabled={isDisabled}\n                tabIndex={isDisabled ? -1 : undefined}\n                {...rest}\n                ref={ref}\n            >\n                {direction === \"previous\" ? (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                        className=\"h-4 w-4\"\n                    >\n                        {!isChevrons ? <polyline points=\"15 18 9 12 15 6\"></polyline> : <>\n                            <polyline points=\"11 17 6 12 11 7\" />\n                            <polyline points=\"18 17 13 12 18 7\" />\n                        </>}\n                    </svg>\n                ) : (\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                        className=\"h-4 w-4\"\n                    >\n                        {!isChevrons ? <polyline points=\"9 18 15 12 9 6\"></polyline> : <>\n                            <polyline points=\"13 17 18 12 13 7\" />\n                            <polyline points=\"6 17 11 12 6 7\" />\n                        </>}\n                    </svg>\n\n                )}\n            </button>\n        </li>\n    )\n\n})\n\nPaginationTrigger.displayName = \"PaginationTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * PaginationEllipsis\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PaginationEllipsisProps = Omit<React.ComponentPropsWithRef<\"span\">, \"children\">\n\nexport const PaginationEllipsis = React.forwardRef<HTMLSpanElement, PaginationEllipsisProps>((props, ref) => {\n\n    const {\n        className,\n        ...rest\n    } = props\n\n    const { ellipsisClass } = React.useContext(__PaginationAnatomyContext)\n\n    return (\n        <li className={cn(PaginationAnatomy.ellipsis(), ellipsisClass, className)}>\n            <span\n                {...rest}\n                ref={ref}\n            >\n                &#8230;\n            </span>\n        </li>\n    )\n\n})\n\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\n"
      }
    ]
  },
  {
    "component": "phone-input",
    "name": "PhoneInput",
    "dependencies": [
      [
        "libphonenumber-js",
        "^1.10.53",
        ""
      ],
      [
        "react-phone-number-input",
        "^3.3.8",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "phone-input",
        "content": "export * from \"./phone-input\"\r\n"
      },
      {
        "name": "phone-input.tsx",
        "dir": "phone-input",
        "content": "\"use client\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport { CountryCode, E164Number, parsePhoneNumber } from \"libphonenumber-js\"\r\nimport * as React from \"react\"\r\nimport PhoneInputPrimitive, { Country } from \"react-phone-number-input\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PhoneInputAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-PhoneInput__root\",\r\n        \"rounded-l-none z-[2]\",\r\n    ]),\r\n    container: cva([\r\n        \"UI-PhoneInput__container\",\r\n        \"relative flex items-center w-full\",\r\n    ]),\r\n    countrySelect: cva([\r\n        \"UI-PhoneInput__countrySelect\",\r\n        \"w-[3rem] z-[3] relative flex-none cursor-pointer truncate rounded-r-none border-r-transparent opacity-0\",\r\n        \"focus-visible:opacity-100 transition duration-200 ease-in-out\",\r\n    ], {\r\n        variants: {\r\n            hasLeftAddon: {\r\n                true: \"rounded-l-none\",\r\n                false: null,\r\n            },\r\n        },\r\n    }),\r\n    flagSelect: cva([\r\n        \"UI-PhoneInput__flagSelect\",\r\n        \"absolute top-0 left-0 w-[3rem] z-[0] flex-none cursor-pointer truncate rounded-r-none border-r-0\",\r\n    ], {\r\n        variants: {\r\n            hasLeftAddon: {\r\n                true: \"rounded-l-none border-l-0\",\r\n                false: null,\r\n            },\r\n        },\r\n    }),\r\n    flagImage: cva([\r\n        \"UI-PhoneInput__flagImage\",\r\n        \"w-6 absolute h-full inset-y-0 z-[0]\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * PhoneInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type PhoneInputProps = Omit<React.ComponentPropsWithoutRef<\"input\">, \"value\" | \"size\"> &\r\n    ComponentAnatomy<typeof PhoneInputAnatomy> &\r\n    InputStyling &\r\n    BasicFieldOptions & {\r\n    /**\r\n     * The phone number value.\r\n     */\r\n    value?: string\r\n    /**\r\n     * Default phone number when uncontrolled.\r\n     */\r\n    defaultValue?: string\r\n    /**\r\n     * The default country to select if the value is empty.\r\n     */\r\n    defaultCountry?: CountryCode\r\n    /**\r\n     * Callback fired when the phone number value changes.\r\n     */\r\n    onValueChange?: (value: E164Number | undefined) => void\r\n    /**\r\n     * Callback fired when the country changes.\r\n     */\r\n    onCountryChange?: (country: Country) => void\r\n    /**\r\n     * The countries to display in the dropdown.\r\n     */\r\n    countries?: CountryCode[]\r\n}\r\n\r\nexport type { CountryCode, E164Number, Country }\r\n\r\nexport const PhoneInput = React.forwardRef<HTMLInputElement, PhoneInputProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<PhoneInputProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        rightAddon,\r\n        rightIcon,\r\n        leftAddon,\r\n        leftIcon,\r\n        className,\r\n        value: controlledValue,\r\n        onValueChange,\r\n        defaultCountry,\r\n        onCountryChange,\r\n        countries,\r\n        defaultValue,\r\n        /**/\r\n        countrySelectClass,\r\n        flagSelectClass,\r\n        flagImageClass,\r\n        containerClass,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n        leftIconProps,\r\n        leftAddonProps,\r\n    }] = extractInputPartProps<PhoneInputProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const isFirst = React.useRef(true)\r\n\r\n    const _defaults = React.useMemo(() => {\r\n        try {\r\n            return {\r\n                phoneNumber: controlledValue ?? defaultValue,\r\n                parsedNumber: parsePhoneNumber((controlledValue ?? defaultValue) || \"\", defaultCountry),\r\n            }\r\n        }\r\n        catch (e) {\r\n            return {\r\n                phoneNumber: controlledValue ?? defaultValue,\r\n                parsedNumber: undefined,\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const [_value, _setValue] = React.useState<E164Number | undefined>(_defaults.phoneNumber)\r\n\r\n    const handleOnValueChange = React.useCallback((value: E164Number | undefined) => {\r\n        _setValue(value)\r\n        onValueChange?.(value)\r\n    }, [])\r\n\r\n    const handleOnCountryChange = React.useCallback((country: Country) => {\r\n        onCountryChange?.(country)\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (!defaultValue || !isFirst.current) {\r\n            _setValue(controlledValue)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n\r\n    return (\r\n        <BasicField {...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                {leftAddon && <InputIcon {...leftIconProps} />}\r\n\r\n                <PhoneInputPrimitive\r\n                    ref={ref as any}\r\n                    id={basicFieldProps.id}\r\n                    // name={basicFieldProps.name}\r\n                    className={cn(\r\n                        PhoneInputAnatomy.container(),\r\n                        containerClass,\r\n                    )}\r\n                    countries={countries}\r\n                    defaultCountry={defaultCountry || _defaults.parsedNumber?.country}\r\n                    onCountryChange={handleOnCountryChange}\r\n                    addInternationalOption={false}\r\n                    international={false}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    countrySelectProps={{\r\n                        name: basicFieldProps.name + \"_country\",\r\n                        className: cn(\r\n                            \"form-select\",\r\n                            InputAnatomy.root({\r\n                                size,\r\n                                intent,\r\n                                hasError: !!basicFieldProps.error,\r\n                                isDisabled: !!basicFieldProps.disabled,\r\n                                hasLeftAddon: !!leftAddon,\r\n                                hasLeftIcon: !!leftIcon,\r\n                            }),\r\n                            PhoneInputAnatomy.countrySelect({\r\n                                hasLeftAddon: !!leftAddon,\r\n                            }),\r\n                        ),\r\n                        disabled: basicFieldProps.disabled || basicFieldProps.readonly,\r\n                        \"data-disabled\": basicFieldProps.disabled,\r\n                        \"data-readonly\": basicFieldProps.readonly,\r\n                        \"aria-readonly\": basicFieldProps.readonly,\r\n                    }}\r\n                    numberInputProps={{\r\n                        className: cn(\r\n                            \"form-input\",\r\n                            InputAnatomy.root({\r\n                                size,\r\n                                intent,\r\n                                hasError: !!basicFieldProps.error,\r\n                                isDisabled: !!basicFieldProps.disabled,\r\n                                hasRightAddon: !!rightAddon,\r\n                                hasRightIcon: !!rightIcon,\r\n                            }),\r\n                            PhoneInputAnatomy.root(),\r\n                            className,\r\n                        ),\r\n                        disabled: basicFieldProps.disabled || basicFieldProps.readonly,\r\n                        required: basicFieldProps.required,\r\n                        \"data-disabled\": basicFieldProps.disabled,\r\n                        \"data-readonly\": basicFieldProps.readonly,\r\n                        \"aria-readonly\": basicFieldProps.readonly,\r\n                        ...rest,\r\n                    }}\r\n                    flagComponent={flag => (\r\n                        <button\r\n                            className={cn(\r\n                                InputAnatomy.root({\r\n                                    size,\r\n                                    intent,\r\n                                    hasError: !!basicFieldProps.error,\r\n                                    isDisabled: !!basicFieldProps.disabled,\r\n                                }),\r\n                                PhoneInputAnatomy.flagSelect({\r\n                                    hasLeftAddon: !!leftAddon,\r\n                                }),\r\n                                flagSelectClass,\r\n                            )}\r\n                            disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                            data-disabled={basicFieldProps.disabled}\r\n                            tabIndex={-1}\r\n                        >\r\n                            <img\r\n                                aria-hidden=\"true\"\r\n                                className={cn(PhoneInputAnatomy.flagImage(), flagImageClass)}\r\n                                src={flag.flagUrl?.replace(\"{XX}\", flag.country)}\r\n                                alt={flag.country}\r\n                            />\r\n                        </button>\r\n                    )}\r\n                    value={_value}\r\n                    onChange={handleOnValueChange}\r\n                />\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={_value || \"\"}\r\n                    name={basicFieldProps.name}\r\n                    aria-hidden=\"true\"\r\n                    hidden\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nPhoneInput.displayName = \"PhoneInput\"\r\n"
      }
    ]
  },
  {
    "component": "popover",
    "name": "Popover",
    "dependencies": [
      [
        "@radix-ui/react-popover",
        "^1.0.6",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "popover",
        "content": "export * from \"./popover\"\r\n"
      },
      {
        "name": "popover.tsx",
        "dir": "popover",
        "content": "\"use client\"\r\n\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const PopoverAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Popover__root\",\r\n        \"z-50 w-72 rounded-md border bg-[--paper] p-4 text-base shadow-sm outline-none\",\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0\",\r\n        \"data-[state=open]:fade-in-50 data-[state=closed]:zoom-out-100 data-[state=open]:zoom-in-95\",\r\n        \"data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2\",\r\n        \"data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Popover\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type PopoverProps =\r\n    React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Root> &\r\n    Omit<React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>, \"asChild\"> &\r\n    {\r\n        /**\r\n         * The trigger element that opens the popover\r\n         */\r\n        trigger: React.ReactElement,\r\n        /**\r\n         * Additional props for the trigger element\r\n         */\r\n        triggerProps?: React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Trigger>\r\n    }\r\n\r\nexport const Popover = React.forwardRef<HTMLDivElement, PopoverProps>((props, ref) => {\r\n    const {\r\n        trigger,\r\n        triggerProps,\r\n        // Root\r\n        defaultOpen,\r\n        open,\r\n        onOpenChange,\r\n        modal,\r\n        // Content\r\n        className,\r\n        align = \"center\",\r\n        sideOffset = 8,\r\n        ...contentProps\r\n    } = props\r\n\r\n    return (\r\n        <PopoverPrimitive.Root\r\n            defaultOpen={defaultOpen}\r\n            open={open}\r\n            onOpenChange={onOpenChange}\r\n            modal={modal}\r\n        >\r\n            <PopoverPrimitive.Trigger\r\n                asChild\r\n                {...triggerProps}\r\n            >\r\n                {trigger}\r\n            </PopoverPrimitive.Trigger>\r\n            <PopoverPrimitive.Portal>\r\n                <PopoverPrimitive.Content\r\n                    ref={ref}\r\n                    align={align}\r\n                    sideOffset={sideOffset}\r\n                    className={cn(PopoverAnatomy.root(), className)}\r\n                    {...contentProps}\r\n                />\r\n            </PopoverPrimitive.Portal>\r\n        </PopoverPrimitive.Root>\r\n    )\r\n})\r\n\r\nPopover.displayName = \"Popover\"\r\n\r\n"
      }
    ]
  },
  {
    "component": "progress-bar",
    "name": "ProgressBar",
    "dependencies": [
      [
        "@radix-ui/react-progress",
        "^1.0.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "progress-bar",
        "content": "export * from \"./progress-bar\"\n"
      },
      {
        "name": "progress-bar.tsx",
        "dir": "progress-bar",
        "content": "\"use client\"\n\nimport { cn, ComponentAnatomy } from \"../core/styling\"\nimport * as ProgressBarPrimitive from \"@radix-ui/react-progress\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ProgressBarAnatomy = {\n    root: cva([\n        \"UI-ProgressBar__root\",\n        \"relative w-full overflow-hidden rounded-full bg-[--subtle] translate-z-0\",\n    ], {\n        variants: {\n            size: {\n                sm: \"h-2\",\n                md: \"h-3\",\n                lg: \"h-4\",\n                xl: \"h-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    indicator: cva([\n        \"UI-ProgressBar__indicator\",\n        \"h-full w-full flex-1 bg-brand transition-all flex items-center justify-center relative\",\n    ], {\n        variants: {\n            isIndeterminate: {\n                true: \"animate-indeterminate-progress origin-left-right\",\n                false: null,\n            },\n        },\n        defaultVariants: {\n            isIndeterminate: false,\n        },\n    }),\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressBar\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ProgressBarProps = React.ComponentPropsWithoutRef<typeof ProgressBarPrimitive.Root>\n    & ComponentAnatomy<typeof ProgressBarAnatomy>\n    & VariantProps<typeof ProgressBarAnatomy.root>\n    & VariantProps<typeof ProgressBarAnatomy.indicator>\n\nexport const ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>((props, ref) => {\n    const {\n        className,\n        value,\n        indicatorClass,\n        size,\n        isIndeterminate,\n        ...rest\n    } = props\n\n    return (\n        <ProgressBarPrimitive.Root\n            ref={ref}\n            className={cn(ProgressBarAnatomy.root({ size }), className)}\n            {...rest}\n        >\n            <ProgressBarPrimitive.Indicator\n                className={cn(ProgressBarAnatomy.indicator({ isIndeterminate }), indicatorClass)}\n                style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n            />\n        </ProgressBarPrimitive.Root>\n    )\n})\nProgressBar.displayName = \"ProgressBar\"\n"
      }
    ]
  },
  {
    "component": "radio-group",
    "name": "RadioGroup",
    "dependencies": [
      [
        "@radix-ui/react-radio-group",
        "^1.1.3",
        ""
      ]
    ],
    "family": [
      "input",
      "basic-field"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "radio-group",
        "content": "export * from \"./radio-group\"\r\n"
      },
      {
        "name": "radio-group.tsx",
        "dir": "radio-group",
        "content": "import { mergeRefs } from \"../core/utils\"\r\nimport { hiddenInputStyles } from \"../input\"\r\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const RadioGroupAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-RadioGroup__root\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-RadioGroup__item\",\r\n        \"block aspect-square rounded-full border text-brand ring-offset-1 ring-offset-[--background]\",\r\n        \"focus:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-2\",\r\n        \"disabled:cursor-not-allowed data-[disabled=true]:opacity-50 data-[readonly=true]:cursor-not-allowed\",\r\n        \"data-[state=unchecked]:bg-white dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\r\n        \"data-[state=unchecked]:hover:bg-gray-100 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\r\n        \"data-[state=checked]:bg-brand data-[state=checked]:border-transparent\", // Checked\r\n        \"data-[error=true]:border-red-500 data-[error=true]:dark:border-red-500 data-[error=true]:data-[state=checked]:border-red-500 data-[error=true]:dark:data-[state=checked]:border-red-500\", // Error\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                md: \"h-5 w-5\",\r\n                lg: \"h-6 w-6\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    itemIndicator: cva([\r\n        \"UI-RadioGroup__itemIndicator\",\r\n        \"flex items-center justify-center\",\r\n    ]),\r\n    itemLabel: cva([\r\n        \"UI-Checkbox_itemLabel\",\r\n        \"font-normal block\",\r\n        \"data-[disabled=true]:opacity-50\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                md: \"text-md\",\r\n                lg: \"text-lg\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    itemContainer: cva([\r\n        \"UI-RadioGroup__itemContainer\",\r\n        \"flex gap-2 items-center relative\",\r\n    ]),\r\n    itemCheckIcon: cva([\r\n        \"UI-RadioGroup__itemCheckIcon\",\r\n        \"text-white\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                md: \"h-4 w-4\",\r\n                lg: \"h-5 w-5\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RadioGroup\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type RadioGroupProps = BasicFieldOptions &\r\n    ComponentAnatomy<typeof RadioGroupAnatomy> &\r\n    VariantProps<typeof RadioGroupAnatomy.item> & {\r\n    /**\r\n     * Stack div class\r\n     */\r\n    stackClass?: string\r\n    /**\r\n     * Item div class\r\n     */\r\n    className?: string\r\n    /**\r\n     * Selected value\r\n     */\r\n    value?: string | undefined\r\n    /**\r\n     * Default value when uncontrolled\r\n     */\r\n    defaultValue?: string | undefined\r\n    /**\r\n     * Callback fired when the selected value changes\r\n     */\r\n    onValueChange?: (value: string) => void\r\n    /**\r\n     * Radio options\r\n     */\r\n    options: { value: string, label?: React.ReactNode, disabled?: boolean, readonly?: boolean }[]\r\n    /**\r\n     * Replaces the default check icon\r\n     */\r\n    itemCheckIcon?: React.ReactNode\r\n    /**\r\n     * Ref to the input element\r\n     */\r\n    inputRef?: React.Ref<HTMLInputElement>\r\n}\r\n\r\nexport const RadioGroup = React.forwardRef<HTMLButtonElement, RadioGroupProps>((props, ref) => {\r\n\r\n    const [{\r\n        size,\r\n        className,\r\n        stackClass,\r\n        value: controlledValue,\r\n        onValueChange,\r\n        options,\r\n        inputRef,\r\n        defaultValue,\r\n        /**/\r\n        itemClass,\r\n        itemIndicatorClass,\r\n        itemLabelClass,\r\n        itemContainerClass,\r\n        itemCheckIcon,\r\n        itemCheckIconClass,\r\n    }, basicFieldProps] = extractBasicFieldProps<RadioGroupProps>(props, React.useId())\r\n\r\n    const isFirst = React.useRef(true)\r\n\r\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\r\n\r\n    const [_value, _setValue] = React.useState<string | undefined>(controlledValue ?? defaultValue)\r\n\r\n    const handleOnValueChange = React.useCallback((value: string) => {\r\n        _setValue(value)\r\n        onValueChange?.(value)\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (!defaultValue || !isFirst.current) {\r\n            _setValue(controlledValue)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <RadioGroupPrimitive.Root\r\n                value={_value}\r\n                onValueChange={handleOnValueChange}\r\n                defaultValue={defaultValue}\r\n                className={cn(RadioGroupAnatomy.root(), className)}\r\n                disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                data-error={!!basicFieldProps.error}\r\n                data-disabled={basicFieldProps.disabled}\r\n                data-readonly={basicFieldProps.readonly}\r\n                aria-readonly={basicFieldProps.readonly}\r\n                loop\r\n            >\r\n                <div className={cn(\"UI-RadioGroup__stack space-y-1\", stackClass)}>\r\n\r\n                    {options.map(option => {\r\n                        return (\r\n                            <label\r\n                                key={option.value}\r\n                                className={cn(RadioGroupAnatomy.itemContainer(), itemContainerClass)}\r\n                                htmlFor={option.value}\r\n                                data-error={!!basicFieldProps.error}\r\n                                data-disabled={basicFieldProps.disabled || option.disabled}\r\n                                data-readonly={basicFieldProps.readonly || option.readonly}\r\n                                data-state={_value === option.value ? \"checked\" : \"unchecked\"}\r\n                            >\r\n                                <RadioGroupPrimitive.Item\r\n                                    ref={mergeRefs([buttonRef, ref])}\r\n                                    id={option.value}\r\n                                    key={option.value}\r\n                                    value={option.value}\r\n                                    disabled={basicFieldProps.disabled || basicFieldProps.readonly || option.disabled || option.readonly}\r\n                                    data-error={!!basicFieldProps.error}\r\n                                    data-disabled={basicFieldProps.disabled || option.disabled}\r\n                                    data-readonly={basicFieldProps.readonly || option.readonly}\r\n                                    className={cn(RadioGroupAnatomy.item({ size }), itemClass)}\r\n                                >\r\n                                    <RadioGroupPrimitive.Indicator\r\n                                        className={cn(\r\n                                            RadioGroupAnatomy.itemIndicator(),\r\n                                            itemIndicatorClass,\r\n                                        )}\r\n                                        data-error={!!basicFieldProps.error}\r\n                                        data-disabled={basicFieldProps.disabled || option.disabled}\r\n                                        data-readonly={basicFieldProps.readonly || option.readonly}\r\n                                    >\r\n                                        {itemCheckIcon ? itemCheckIcon : <svg\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            viewBox=\"0 0 16 16\"\r\n                                            width=\"16\"\r\n                                            height=\"16\"\r\n                                            stroke=\"currentColor\"\r\n                                            fill=\"currentColor\"\r\n                                            className={cn(RadioGroupAnatomy.itemCheckIcon({ size }), itemCheckIconClass)}\r\n                                        >\r\n                                            <path d=\"M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z\"></path>\r\n                                        </svg>}\r\n                                    </RadioGroupPrimitive.Indicator>\r\n                                </RadioGroupPrimitive.Item>\r\n                                <label\r\n                                    className={cn(RadioGroupAnatomy.itemLabel(), itemLabelClass)}\r\n                                    htmlFor={option.value}\r\n                                    aria-disabled={option.disabled}\r\n                                    data-error={!!basicFieldProps.error}\r\n                                    data-disabled={basicFieldProps.disabled || option.disabled || option.disabled}\r\n                                    data-readonly={basicFieldProps.readonly || option.readonly}\r\n                                    data-state={_value === option.value ? \"checked\" : \"unchecked\"}\r\n                                >\r\n                                    {option.label ?? option.value}\r\n                                </label>\r\n                            </label>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </RadioGroupPrimitive.Root>\r\n\r\n            <input\r\n                ref={inputRef}\r\n                type=\"radio\"\r\n                name={basicFieldProps.name}\r\n                className={hiddenInputStyles}\r\n                value={_value ?? \"\"}\r\n                checked={!!_value}\r\n                aria-hidden=\"true\"\r\n                required={basicFieldProps.required}\r\n                tabIndex={-1}\r\n                onChange={() => {}}\r\n                onFocusCapture={() => buttonRef.current?.focus()}\r\n            />\r\n        </BasicField>\r\n    )\r\n})\r\n\r\nRadioGroup.displayName = \"RadioGroup\"\r\n"
      }
    ]
  },
  {
    "component": "scroll-area",
    "name": "ScrollArea",
    "dependencies": [
      [
        "@radix-ui/react-scroll-area",
        "^1.0.4",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "scroll-area",
        "content": "export * from \"./scroll-area\"\r\n"
      },
      {
        "name": "scroll-area.tsx",
        "dir": "scroll-area",
        "content": "\"use client\"\r\n\r\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ScrollAreaAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-ScrollArea__root\",\r\n        \"relative overflow-hidden\",\r\n    ]),\r\n    viewport: cva([\r\n        \"UI-ScrollArea__viewport\",\r\n        \"h-full w-full rounded-[inherit]\",\r\n    ]),\r\n    scrollbar:\r\n        cva([\r\n            \"UI-ScrollArea__scrollbar\",\r\n            \"flex touch-none select-none transition-colors\",\r\n        ], {\r\n            variants: {\r\n                orientation: {\r\n                    vertical: \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\r\n                    horizontal: \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\r\n                },\r\n            },\r\n            defaultVariants: {\r\n                orientation: \"vertical\",\r\n            },\r\n        }),\r\n    thumb: cva([\r\n        \"UI-ScrollArea__thumb\",\r\n        \"relative flex-1 rounded-full bg-[--border]\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ScrollArea\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ScrollAreaProps =\r\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n    & ComponentAnatomy<typeof ScrollAreaAnatomy>\r\n\r\nexport const ScrollArea = React.forwardRef<HTMLDivElement, ScrollAreaProps>((props, ref) => {\r\n    const {\r\n        className,\r\n        scrollbarClass,\r\n        thumbClass,\r\n        viewportClass,\r\n        children,\r\n        ...rest\r\n    } = props\r\n    return (\r\n        <ScrollAreaPrimitive.Root\r\n            ref={ref}\r\n            className={cn(ScrollAreaAnatomy.root(), className)}\r\n            {...rest}\r\n        >\r\n            <ScrollAreaPrimitive.Viewport className={cn(ScrollAreaAnatomy.viewport(), viewportClass)}>\r\n                {children}\r\n            </ScrollAreaPrimitive.Viewport>\r\n            <ScrollBar\r\n                className={scrollbarClass}\r\n                thumbClass={thumbClass}\r\n            />\r\n            <ScrollAreaPrimitive.Corner />\r\n        </ScrollAreaPrimitive.Root>\r\n    )\r\n\r\n})\r\nScrollArea.displayName = \"ScrollArea\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ScrollBar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type ScrollBarProps =\r\n    React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar> &\r\n    Pick<ComponentAnatomy<typeof ScrollAreaAnatomy>, \"thumbClass\">\r\n\r\nexport const ScrollBar = React.forwardRef<HTMLDivElement, ScrollBarProps>((props, ref) => {\r\n    const {\r\n        className,\r\n        thumbClass,\r\n        orientation = \"vertical\",\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n            ref={ref}\r\n            orientation={orientation}\r\n            className={cn(ScrollAreaAnatomy.scrollbar({ orientation }), className)}\r\n            {...rest}\r\n        >\r\n            <ScrollAreaPrimitive.ScrollAreaThumb className={cn(ScrollAreaAnatomy.thumb(), thumbClass)} />\r\n        </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n    )\r\n})\r\nScrollBar.displayName = \"ScrollBar\"\r\n"
      }
    ]
  },
  {
    "component": "select",
    "name": "Select",
    "dependencies": [
      [
        "@radix-ui/react-select",
        "^2.0.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "select",
        "content": "export * from \"./select\"\r\n"
      },
      {
        "name": "select.tsx",
        "dir": "select",
        "content": "\"use client\"\r\n\r\nimport { mergeRefs } from \"../core/utils\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { extractInputPartProps, hiddenInputStyles, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const SelectAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Select__root\",\r\n        \"inline-flex items-center justify-between relative\",\r\n    ]),\r\n    chevronIcon: cva([\r\n        \"UI-Combobox__chevronIcon\",\r\n        \"ml-2 h-4 w-4 shrink-0 opacity-50\",\r\n    ]),\r\n    scrollButton: cva([\r\n        \"UI-Select__scrollButton\",\r\n        \"flex items-center justify-center h-[25px] bg-[--paper] text-base cursor-default\",\r\n    ]),\r\n    content: cva([\r\n        \"UI-Select__content\",\r\n        \"w-full overflow-hidden rounded-[--radius] shadow-md bg-[--paper] border leading-none z-50\",\r\n    ]),\r\n    viewport: cva([\r\n        \"UI-Select__viewport\",\r\n        \"p-1 z-10\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Select__item\",\r\n        \"text-base leading-none rounded-[--radius] flex items-center h-8 pr-2 pl-8 relative\",\r\n        \"select-none disabled:opacity-50 disabled:pointer-events-none\",\r\n        \"data-highlighted:outline-none data-highlighted:bg-[--subtle]\",\r\n    ]),\r\n    checkIcon: cva([\r\n        \"UI-Select__checkIcon\",\r\n        \"absolute left-2 w-4 inline-flex items-center justify-center\",\r\n    ]),\r\n})\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Select\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type SelectProps = InputStyling &\r\n    BasicFieldOptions &\r\n    Omit<React.ComponentPropsWithoutRef<\"button\">, \"value\" | \"defaultValue\"> &\r\n    ComponentAnatomy<typeof SelectAnatomy> & {\r\n    /**\r\n     * The options to display in the dropdown\r\n     */\r\n    options: { value: string, label?: string, disabled?: boolean }[] | undefined\r\n    /**\r\n     * The placeholder text\r\n     */\r\n    placeholder?: string\r\n    /**\r\n     * Direction of the text\r\n     */\r\n    dir?: \"ltr\" | \"rtl\"\r\n    /**\r\n     * The selected value\r\n     */\r\n    value?: string | undefined\r\n    /**\r\n     * Callback fired when the selected value changes\r\n     */\r\n    onValueChange?: (value: string) => void\r\n    /**\r\n     * Callback fired when the dropdown opens or closes\r\n     */\r\n    onOpenChange?: (open: boolean) => void\r\n    /**\r\n     * Default selected value when uncontrolled\r\n     */\r\n    defaultValue?: string\r\n    /**\r\n     * Ref to the input element\r\n     */\r\n    inputRef?: React.Ref<HTMLInputElement>\r\n}\r\n\r\nexport const Select = React.forwardRef<HTMLButtonElement, SelectProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<SelectProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        /**/\r\n        className,\r\n        placeholder,\r\n        options,\r\n        chevronIconClass,\r\n        scrollButtonClass,\r\n        contentClass,\r\n        viewportClass,\r\n        checkIconClass,\r\n        itemClass,\r\n        /**/\r\n        dir,\r\n        value: controlledValue,\r\n        onValueChange,\r\n        onOpenChange,\r\n        defaultValue,\r\n        inputRef,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<SelectProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const isFirst = React.useRef(true)\r\n\r\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\r\n\r\n    const [_value, _setValue] = React.useState<string | undefined>(controlledValue ?? defaultValue)\r\n\r\n    const handleOnValueChange = React.useCallback((value: string) => {\r\n        if (value === \"__placeholder__\") {\r\n            _setValue(\"\")\r\n            onValueChange?.(\"\")\r\n            return\r\n        }\r\n        _setValue(value)\r\n        onValueChange?.(value)\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (!defaultValue || !isFirst.current) {\r\n            _setValue(controlledValue)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <SelectPrimitive.Root\r\n                    dir={dir}\r\n                    value={_value}\r\n                    onValueChange={handleOnValueChange}\r\n                    onOpenChange={onOpenChange}\r\n                    defaultValue={defaultValue}\r\n                >\r\n\r\n                    <SelectPrimitive.Trigger\r\n                        ref={mergeRefs([buttonRef, ref])}\r\n                        id={basicFieldProps.id}\r\n                        className={cn(\r\n                            InputAnatomy.root({\r\n                                size,\r\n                                intent,\r\n                                hasError: !!basicFieldProps.error,\r\n                                isDisabled: !!basicFieldProps.disabled,\r\n                                isReadonly: !!basicFieldProps.readonly,\r\n                                hasRightAddon: !!rightAddon,\r\n                                hasRightIcon: !!rightIcon,\r\n                                hasLeftAddon: !!leftAddon,\r\n                                hasLeftIcon: !!leftIcon,\r\n                            }),\r\n                            SelectAnatomy.root(),\r\n                            className,\r\n                        )}\r\n                        aria-label={basicFieldProps.name || \"Select\"}\r\n                        {...rest}\r\n                    >\r\n                        <SelectPrimitive.Value placeholder={placeholder} />\r\n\r\n                        <SelectPrimitive.Icon className={cn(!!rightIcon && \"hidden\")}>\r\n                            <svg\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                viewBox=\"0 0 24 24\"\r\n                                fill=\"none\"\r\n                                stroke=\"currentColor\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                className={cn(SelectAnatomy.chevronIcon(), chevronIconClass)}\r\n                            >\r\n                                <path d=\"m6 9 6 6 6-6\" />\r\n                            </svg>\r\n                        </SelectPrimitive.Icon>\r\n\r\n                    </SelectPrimitive.Trigger>\r\n\r\n                    <SelectPrimitive.Portal>\r\n                        <SelectPrimitive.Content className={cn(SelectAnatomy.content(), contentClass)}>\r\n\r\n                            <SelectPrimitive.ScrollUpButton className={cn(SelectAnatomy.scrollButton(), scrollButtonClass)}>\r\n                                <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\"\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    className={cn(SelectAnatomy.chevronIcon(), \"rotate-180\", chevronIconClass)}\r\n                                >\r\n                                    <path d=\"m6 9 6 6 6-6\" />\r\n                                </svg>\r\n                            </SelectPrimitive.ScrollUpButton>\r\n\r\n                            <SelectPrimitive.Viewport className={cn(SelectAnatomy.viewport(), viewportClass)}>\r\n\r\n                                {(!!placeholder && !basicFieldProps.required) && (\r\n                                    <SelectPrimitive.Item\r\n                                        className={cn(\r\n                                            SelectAnatomy.item(),\r\n                                            itemClass,\r\n                                        )}\r\n                                        value={\"__placeholder__\"}\r\n                                    >\r\n                                        <SelectPrimitive.ItemText>{placeholder}</SelectPrimitive.ItemText>\r\n                                    </SelectPrimitive.Item>\r\n                                )}\r\n\r\n                                {options?.map(option => (\r\n                                    <SelectPrimitive.Item\r\n                                        key={option.value}\r\n                                        className={cn(\r\n                                            SelectAnatomy.item(),\r\n                                            itemClass,\r\n                                        )}\r\n                                        value={option.value}\r\n                                        disabled={option.disabled}\r\n                                    >\r\n                                        <SelectPrimitive.ItemText>{option.label}</SelectPrimitive.ItemText>\r\n                                        <SelectPrimitive.ItemIndicator asChild>\r\n                                            <svg\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                viewBox=\"0 0 24 24\"\r\n                                                fill=\"none\"\r\n                                                stroke=\"currentColor\"\r\n                                                strokeWidth=\"2\"\r\n                                                strokeLinecap=\"round\"\r\n                                                strokeLinejoin=\"round\"\r\n                                                className={cn(\r\n                                                    SelectAnatomy.checkIcon(),\r\n                                                    checkIconClass,\r\n                                                )}\r\n                                            >\r\n                                                <path d=\"M20 6 9 17l-5-5\" />\r\n                                            </svg>\r\n                                        </SelectPrimitive.ItemIndicator>\r\n                                    </SelectPrimitive.Item>\r\n                                ))}\r\n\r\n                            </SelectPrimitive.Viewport>\r\n\r\n                            <SelectPrimitive.ScrollDownButton className={cn(SelectAnatomy.scrollButton(), scrollButtonClass)}>\r\n                                <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\"\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    className={cn(SelectAnatomy.chevronIcon(), chevronIconClass)}\r\n                                >\r\n                                    <path d=\"m6 9 6 6 6-6\" />\r\n                                </svg>\r\n                            </SelectPrimitive.ScrollDownButton>\r\n\r\n                        </SelectPrimitive.Content>\r\n                    </SelectPrimitive.Portal>\r\n\r\n                </SelectPrimitive.Root>\r\n\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"radio\"\r\n                    name={basicFieldProps.name}\r\n                    className={hiddenInputStyles}\r\n                    value={_value ?? \"\"}\r\n                    checked={!!_value}\r\n                    aria-hidden=\"true\"\r\n                    required={basicFieldProps.required}\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                    onFocusCapture={() => buttonRef.current?.focus()}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nSelect.displayName = \"Select\"\r\n"
      }
    ]
  },
  {
    "component": "separator",
    "name": "Separator",
    "dependencies": [
      [
        "@radix-ui/react-separator",
        "^1.0.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "separator",
        "content": "export * from \"./separator\"\n"
      },
      {
        "name": "separator.tsx",
        "dir": "separator",
        "content": "\"use client\"\n\nimport { cn } from \"../core/styling\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SeparatorAnatomy = {\n    root: cva([\n        \"UI-Separator__root\",\n        \"shrink-0 bg-[--border]\",\n    ], {\n        variants: {\n            orientation: {\n                horizontal: \"w-full h-[1px]\",\n                vertical: \"h-full w-[1px]\",\n            },\n        },\n    }),\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Separator\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SeparatorProps = React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n\nexport const Separator = React.forwardRef<HTMLDivElement, SeparatorProps>((props, ref) => {\n    const {\n        className,\n        orientation = \"horizontal\",\n        decorative = true,\n        ...rest\n    } = props\n\n    return (\n        <SeparatorPrimitive.Root\n            ref={ref}\n            decorative={decorative}\n            orientation={orientation}\n            className={cn(\n                SeparatorAnatomy.root({ orientation }),\n                className,\n            )}\n            {...rest}\n        />\n    )\n})\n\nSeparator.displayName = \"Separator\"\n"
      }
    ]
  },
  {
    "component": "simple-dropzone",
    "name": "SimpleDropzone",
    "dependencies": [
      [
        "react-dropzone",
        "^14.2.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "simple-dropzone",
        "content": "export * from \"./simple-dropzone\"\n"
      },
      {
        "name": "simple-dropzone.tsx",
        "dir": "simple-dropzone",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Accept, FileError, useDropzone } from \"react-dropzone\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { CloseButton, IconButton } from \"../button\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\nimport { hiddenInputStyles } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SimpleDropzoneAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-SimpleDropzone__root\",\n        \"appearance-none w-full mb-2 cursor-pointer hover:text-[--text-color] flex items-center justify-center p-4 border rounded-[--radius] border-dashed\",\n        \"gap-3 text-sm sm:text-base\",\n        \"outline-none ring-[--ring] focus-visible:ring-2\",\n        \"text-[--muted] transition ease-in-out hover:border-[--foreground]\",\n        \"data-[drag-active=true]:border-brand-500\",\n        \"data-[drag-reject=true]:border-[--red]\",\n    ]),\n    list: cva([\n        \"UI-SimpleDropzone__list\",\n        \"flex rounded-md flex-wrap divide-y divide-[--border]\",\n    ]),\n    listItem: cva([\n        \"UI-SimpleDropzone__listItem\",\n        \"flex items-center justify-space-between relative p-1 hover:bg-[--subtle] w-full overflow-hidden\",\n    ]),\n    listItemDetailsContainer: cva([\n        \"UI-SimpleDropzone__listItemDetailsContainer\",\n        \"flex items-center gap-2 truncate w-full\",\n    ]),\n    listItemTitle: cva([\n        \"UI-SimpleDropzone__listItemTitle\",\n        \"truncate max-w-[180px] text-[.9rem]\",\n    ]),\n    listItemSize: cva([\n        \"UI-SimpleDropzone__listItemSize\",\n        \"text-xs uppercase text-center font-semibold align-center text-[--muted]\",\n    ]),\n    listItemRemoveButton: cva([\n        \"UI-SimpleDropzone__listItemRemoveButton\",\n        \"ml-2 rounded-full\",\n    ]),\n    imagePreviewGrid: cva([\n        \"UI-SimpleDropzone__imagePreviewGrid\",\n        \"flex gap-2 flex-wrap place-content-center pt-4\",\n        // \"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-5 xl:grid-cols-8 2xl:grid-cols-10 h-full gap-x-2 gap-y-2\",\n    ]),\n    imagePreviewContainer: cva([\n        \"UI-SimpleDropzone__imagePreviewContainer\",\n        \"col-span-1 row-span-1 aspect-square w-36 h-auto\",\n    ]),\n    imagePreview: cva([\n        \"UI-SimpleDropzone__imagePreview\",\n        \"relative bg-transparent border h-full bg-center bg-no-repeat bg-contain rounded-md overflow-hidden\",\n        \"col-span-1 row-span-1\",\n    ]),\n    imagePreviewRemoveButton: cva([\n        \"UI-SimpleDropzone__imagePreviewRemoveButton\",\n        \"absolute top-1 right-1\",\n    ]),\n    fileIcon: cva([\n        \"UI-SimpleDropzone__fileIcon\",\n        \"w-5 h-5 flex-none\",\n    ]),\n    maxSizeText: cva([\n        \"UI-SimpleDropzone__maxSizeText\",\n        \"text-sm text-[--muted] font-medium\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * SimpleDropzone\n * -----------------------------------------------------------------------------------------------*/\n\nexport type SimpleDropzoneProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\" | \"accept\" | \"type\" | \"onError\" | \"onDrop\"> &\n    ComponentAnatomy<typeof SimpleDropzoneAnatomy> &\n    BasicFieldOptions & {\n    /**\n     * Callback fired when files are selected\n     */\n    onValueChange?: (files: File[]) => void,\n    /**\n     * Whether to show a preview of the image(s) under the dropzone\n     */\n    withImagePreview?: boolean\n    /**\n     * Whether to allow multiple files\n     */\n    multiple?: boolean\n    /**\n     * The accepted file types\n     */\n    accept?: Accept\n    /**\n     * The minimum file size\n     */\n    minSize?: number\n    /**\n     * The maximum file size\n     */\n    maxSize?: number\n    /**\n     * The maximum number of files\n     */\n    maxFiles?: number\n    /**\n     * If false, allow dropped items to take over the current browser window\n     */\n    preventDropOnDocument?: boolean\n    /**\n     * Whether to prevent click to open file dialog\n     */\n    noClick?: boolean\n    /**\n     * Whether to prevent drag and drop\n     */\n    noDrag?: boolean\n    /**\n     * Callback fired when an error occurs\n     */\n    onError?: (err: Error) => void\n    /**\n     * Custom file validator function\n     */\n    validator?: <T extends File>(file: T) => FileError | FileError[] | null\n    /**\n     * The dropzoneText text displayed in the dropzone\n     */\n    dropzoneText?: string\n}\n\nexport const SimpleDropzone = React.forwardRef<HTMLInputElement, SimpleDropzoneProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        listClass,\n        listItemClass,\n        listItemDetailsContainerClass,\n        listItemRemoveButtonClass,\n        listItemSizeClass,\n        listItemTitleClass,\n        imagePreviewGridClass,\n        imagePreviewContainerClass,\n        imagePreviewRemoveButtonClass,\n        imagePreviewClass,\n        maxSizeTextClass,\n        fileIconClass,\n        onValueChange,\n        withImagePreview,\n        dropzoneText,\n        /**/\n        accept,\n        minSize,\n        maxSize,\n        maxFiles,\n        preventDropOnDocument,\n        noClick,\n        noDrag,\n        onError,\n        validator,\n        multiple,\n        value, // ignored\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps(props, React.useId())\n\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    const [files, setFiles] = React.useState<File[]>([])\n\n    const onDrop = React.useCallback((acceptedFiles: File[]) => {\n        // Update files - add the preview\n        onValueChange?.(acceptedFiles)\n        setFiles(acceptedFiles.map(file => Object.assign(file, { preview: URL.createObjectURL(file) })))\n    }, [])\n\n    const handleRemoveFile = React.useCallback((file: number) => {\n        setFiles(p => {\n            const newFiles = p.toSpliced(file, 1)\n            onValueChange?.(newFiles)\n            return newFiles\n        })\n    }, [])\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragReject,\n    } = useDropzone({\n        onDrop,\n        multiple,\n        minSize,\n        maxSize,\n        maxFiles,\n        preventDropOnDocument,\n        noClick,\n        noDrag,\n        validator,\n        accept,\n        onError: (e) => {\n            onError?.(e)\n        },\n    })\n\n    return (\n        <BasicField {...basicFieldProps}>\n            <button\n                ref={buttonRef}\n                className={cn(\n                    SimpleDropzoneAnatomy.root(),\n                    className,\n                )}\n                data-drag-active={isDragActive}\n                data-drag-reject={isDragReject}\n                {...getRootProps()}\n                tabIndex={0}\n            >\n                <input\n                    ref={ref}\n                    id={basicFieldProps.id}\n                    name={basicFieldProps.name ?? \"files\"}\n                    value=\"\"\n                    onFocusCapture={() => buttonRef.current?.focus()}\n                    aria-hidden=\"true\"\n                    {...getInputProps()}\n                    {...rest}\n                    className={cn(\"block\", hiddenInputStyles)}\n                    style={{ display: \"block\" }}\n                />\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\"\n                >\n                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n                    <polyline points=\"7 10 12 15 17 10\" />\n                    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n                </svg>\n                <span>\n                    {dropzoneText ?? \"Click or drag file to this area to upload\"}\n                </span>\n            </button>\n\n            {maxSize && <div className={cn(SimpleDropzoneAnatomy.maxSizeText(), maxSizeTextClass)}>{`â¤`} {humanFileSize(maxSize, 0)}</div>}\n\n            {!withImagePreview && <div className={cn(SimpleDropzoneAnatomy.list(), listClass)}>\n                {files?.map((file: any, index) => {\n\n                    let Icon: React.ReactElement\n\n                    if ([\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/webm\"].includes(file.type)) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <circle cx=\"10\" cy=\"13\" r=\"2\" />\n                            <path d=\"m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22\" />\n                        </svg>\n                    } else if (file.type.includes(\"video\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <path d=\"m10 11 5 3-5 3v-6Z\" />\n                        </svg>\n                    } else if (file.type.includes(\"audio\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path\n                                d=\"M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3\"\n                            />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <path d=\"M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z\" />\n                            <path d=\"M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z\" />\n                            <path d=\"M2 19v-3a6 6 0 0 1 12 0v3\" />\n                        </svg>\n                    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\") || file.type.includes(\"txt\") || file.type.includes(\"text\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                            <line x1=\"16\" x2=\"8\" y1=\"13\" y2=\"13\" />\n                            <line x1=\"16\" x2=\"8\" y1=\"17\" y2=\"17\" />\n                            <line x1=\"10\" x2=\"8\" y1=\"9\" y2=\"9\" />\n                        </svg>\n                    } else if (file.type.includes(\"compressed\") || file.type.includes(\"zip\") || file.type.includes(\"archive\")) {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path\n                                d=\"M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6\"\n                            />\n                            <circle cx=\"16\" cy=\"19\" r=\"2\" />\n                            <path d=\"M16 11v-1\" />\n                            <path d=\"M16 17v-2\" />\n                        </svg>\n                    } else {\n                        Icon = <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                            fill=\"none\" stroke=\"currentColor\"\n                            strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                            className={cn(SimpleDropzoneAnatomy.fileIcon(), fileIconClass)}\n                        >\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n                            <polyline points=\"14 2 14 8 20 8\" />\n                        </svg>\n                    }\n\n                    return (\n\n                        <div\n                            key={file.name}\n                            className={cn(SimpleDropzoneAnatomy.listItem(), listItemClass)}\n                        >\n                            <div\n                                className={cn(SimpleDropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClass)}\n                            >\n                                {Icon}\n                                <p className={cn(SimpleDropzoneAnatomy.listItemTitle(), listItemTitleClass)}>{file.name}</p>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemSize(), listItemSizeClass)}>{humanFileSize(file.size)}</p>\n                            </div>\n                            <IconButton\n                                size=\"xs\"\n                                intent=\"gray-basic\"\n                                icon={\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        className=\"w-4 h-4\"\n                                    >\n                                        <path d=\"M3 6h18\" />\n                                        <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\" />\n                                        <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\" />\n                                        <line x1=\"10\" x2=\"10\" y1=\"11\" y2=\"17\" />\n                                        <line x1=\"14\" x2=\"14\" y1=\"11\" y2=\"17\" />\n                                    </svg>\n                                }\n                                className={cn(SimpleDropzoneAnatomy.listItemRemoveButton(), listItemRemoveButtonClass)}\n                                onClick={() => handleRemoveFile(index)}\n                            />\n                        </div>\n                    )\n                })}\n            </div>}\n\n            {withImagePreview && <div className={cn(SimpleDropzoneAnatomy.imagePreviewGrid(), imagePreviewGridClass)}>\n                {files?.map((file, index) => {\n                    return (\n                        <div\n                            key={file.name}\n                            className={cn(SimpleDropzoneAnatomy.imagePreviewContainer(), imagePreviewContainerClass)}\n                        >\n                            <div\n                                className={cn(SimpleDropzoneAnatomy.imagePreview(), imagePreviewClass)}\n                                style={{ backgroundImage: file ? `url(${(file as File & { preview: string }).preview})` : undefined }}\n                            >\n                                <CloseButton\n                                    intent=\"alert\"\n                                    size=\"xs\"\n                                    className={cn(SimpleDropzoneAnatomy.imagePreviewRemoveButton(), imagePreviewRemoveButtonClass)}\n                                    onClick={() => handleRemoveFile(index)}\n                                />\n                            </div>\n                            <div className={cn(SimpleDropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClass)}>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemTitle(), listItemTitleClass)}>{file.name}</p>\n                                <p className={cn(SimpleDropzoneAnatomy.listItemSize(), listItemSizeClass)}>{humanFileSize(file.size)}</p>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>}\n\n        </BasicField>\n    )\n\n})\n\nSimpleDropzone.displayName = \"SimpleDropzone\"\n\nfunction humanFileSize(size: number, precision = 2): string {\n    const i = Math.floor(Math.log(size) / Math.log(1024))\n    return (size / Math.pow(1024, i)).toFixed(precision).toString() + [\"bytes\", \"Kb\", \"Mb\", \"Gb\", \"Tb\"][i]\n}\n"
      }
    ]
  },
  {
    "component": "skeleton",
    "name": "Skeleton",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "skeleton",
        "content": "export * from \"./skeleton\"\n"
      },
      {
        "name": "skeleton.tsx",
        "dir": "skeleton",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SkeletonAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Skeleton__root\",\n        \"animate-pulse rounded-md bg-[--subtle] w-full\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Skeleton\n * -----------------------------------------------------------------------------------------------*/\n\ntype SkeletonProps = React.ComponentPropsWithoutRef<\"div\">\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {\n    const { className, ...rest } = props\n    return (\n        <div\n            ref={ref}\n            className={cn(SkeletonAnatomy.root(), className)}\n            {...rest}\n        />\n    )\n})\n\nSkeleton.displayName = \"Skeleton\"\n"
      }
    ]
  },
  {
    "component": "stats",
    "name": "Stats",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "stats",
        "content": "export * from \"./stats\"\n"
      },
      {
        "name": "stats.tsx",
        "dir": "stats",
        "content": "import { cva, VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const StatsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Stats__root\",\n        \"grid grid-cols-1 divide-y divide-[--border] overflow-hidden md:grid-cols-3 md:divide-y-0 md:divide-x\",\n    ], {\n        variants: {\n            size: {\n                sm: null, md: null, lg: null,\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    item: cva([\n        \"UI-Stats__item\",\n        \"relative\",\n    ], {\n        variants: {\n            size: {\n                sm: \"p-3 sm:p-4\",\n                md: \"p-4 sm:p-6\",\n                lg: \"p-4 sm:p-7\",\n            },\n        },\n    }),\n    name: cva([\n        \"UI-Stats__name\",\n        \"text-sm font-normal text-[--muted]\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xs\",\n                md: \"text-sm\",\n                lg: \"text-base\",\n            },\n        },\n    }),\n    value: cva([\n        \"UI-Stats__value\",\n        \"mt-1 flex items-baseline md:block lg:flex font-semibold\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xl md:text-2xl\",\n                md: \"text-2xl md:text-3xl\",\n                lg: \"text-3xl md:text-4xl\",\n            },\n        },\n    }),\n    unit: cva([\n        \"UI-Stats__unit\",\n        \"ml-2 text-sm font-medium text-[--muted]\",\n    ]),\n    trend: cva([\n        \"UI-Stats__trend\",\n        \"inline-flex items-baseline text-sm font-medium\",\n        \"data-[trend=up]:text-[--green] data-[trend=down]:text-[--red]\",\n    ]),\n    icon: cva([\n        \"UI-Stats__icon\",\n        \"absolute top-5 right-5 opacity-30\",\n    ], {\n        variants: {\n            size: {\n                sm: \"text-xl sm:text-2xl\",\n                md: \"text-2xl sm:text-3xl\",\n                lg: \"text-3xl sm:text-4xl\",\n            },\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Stats\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StatsItem = {\n    name: string,\n    value: string | number,\n    unit?: string | number,\n    change?: string | number,\n    trend?: \"up\" | \"down\",\n    icon?: React.ReactElement\n}\n\nexport type StatsProps = React.ComponentPropsWithRef<\"dl\"> &\n    ComponentAnatomy<typeof StatsAnatomy> &\n    VariantProps<typeof StatsAnatomy.root> & {\n    children?: React.ReactNode,\n    items: StatsItem[]\n}\n\nexport const Stats = React.forwardRef<HTMLDListElement, StatsProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        nameClass,\n        valueClass,\n        unitClass,\n        trendClass,\n        iconClass,\n        className,\n        items,\n        size = \"md\",\n        ...rest\n    } = props\n\n    return (\n        <dl\n            ref={ref}\n            className={cn(StatsAnatomy.root({ size }), className)}\n            {...rest}\n        >\n            {items.map((item) => (\n                <div key={item.name} className={cn(StatsAnatomy.item({ size }), itemClass)}>\n\n                    <dt className={cn(StatsAnatomy.name({ size }), nameClass)}>{item.name}</dt>\n\n                    <dd className={cn(StatsAnatomy.value({ size }), valueClass)}>\n                        {item.value}\n                        <span className={cn(StatsAnatomy.unit(), unitClass)}>{item.unit}</span>\n                    </dd>\n\n                    {(!!item.change || !!item.trend) &&\n                        <div\n                            className={cn(StatsAnatomy.trend(), trendClass)}\n                            data-trend={item.trend}\n                        >\n                            {item.trend && <span> {item.trend === \"up\" ? \"+\" : \"-\"}</span>}\n                            {item.change}\n                        </div>\n                    }\n\n                    <div className={cn(StatsAnatomy.icon({ size }), iconClass)}>\n                        {item.icon}\n                    </div>\n\n                </div>\n            ))}\n        </dl>\n    )\n\n})\n\nStats.displayName = \"Stats\"\n"
      }
    ]
  },
  {
    "component": "switch",
    "name": "Switch",
    "dependencies": [
      [
        "@radix-ui/react-switch",
        "^1.0.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "switch",
        "content": "export * from \"./switch\"\r\n"
      },
      {
        "name": "switch.tsx",
        "dir": "switch",
        "content": "\"use client\"\r\n\r\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { mergeRefs } from \"../core/utils\"\r\nimport { hiddenInputStyles } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\nexport const SwitchAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Switch__root\",\r\n        \"peer inline-flex shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-colors\",\r\n        \"disabled:cursor-not-allowed data-[disabled=true]:opacity-50\",\r\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-1\",\r\n        \"data-[state=unchecked]:bg-gray-200 dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\r\n        \"data-[state=unchecked]:hover:bg-gray-300 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\r\n        \"data-[state=checked]:bg-brand\", // Checked\r\n        \"data-[error=true]:border-red-500\", // Checked\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"h-5 w-9\",\r\n                md: \"h-6 w-11\",\r\n                lg: \"h-7 w-14\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    container: cva([\r\n        \"UI-Checkbox__container\",\r\n        \"inline-flex gap-2 items-center\",\r\n    ]),\r\n    thumb: cva([\r\n        \"UI-Switch__thumb\",\r\n        \"pointer-events-none block rounded-full bg-white shadow-lg ring-0 transition-transform\",\r\n        \"data-[state=unchecked]:translate-x-1\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"h-3 w-3 data-[state=checked]:translate-x-[1.1rem]\",\r\n                md: \"h-4 w-4 data-[state=checked]:translate-x-[1.4rem]\",\r\n                lg: \"h-5 w-5 data-[state=checked]:translate-x-[1.9rem]\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    label: cva([\r\n        \"UI-Switch__label\",\r\n        \"relative font-normal\",\r\n        \"data-[disabled=true]:text-gray-300\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Switch\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type SwitchProps = BasicFieldOptions &\r\n    ComponentAnatomy<typeof SwitchAnatomy> &\r\n    VariantProps<typeof SwitchAnatomy.root> &\r\n    Omit<React.ComponentPropsWithoutRef<typeof SwitchPrimitive.Root>,\r\n        \"value\" | \"checked\" | \"disabled\" | \"required\" | \"defaultValue\" | \"defaultChecked\" | \"onCheckedChange\"> & {\r\n    /**\r\n     * Whether the switch is checked\r\n     */\r\n    value: boolean\r\n    /**\r\n     * Callback fired when the value changes\r\n     */\r\n    onValueChange: (value: boolean) => void\r\n    /**\r\n     * Default value when uncontrolled\r\n     */\r\n    defaultValue?: boolean\r\n    /**\r\n     * Ref to the input element\r\n     */\r\n    inputRef?: React.Ref<HTMLInputElement>\r\n    className?: string\r\n}\r\n\r\nexport const Switch = React.forwardRef<HTMLButtonElement, SwitchProps>((props, ref) => {\r\n\r\n    const [{\r\n        size,\r\n        value: controlledValue,\r\n        className,\r\n        onValueChange,\r\n        labelClass,\r\n        containerClass,\r\n        thumbClass,\r\n        defaultValue,\r\n        inputRef,\r\n        ...rest\r\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps(props, React.useId())\r\n\r\n    const isFirst = React.useRef(true)\r\n\r\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\r\n\r\n    const [_value, _setValue] = React.useState<boolean | undefined>(controlledValue ?? defaultValue ?? false)\r\n\r\n    const handleOnValueChange = React.useCallback((value: boolean) => {\r\n        _setValue(value)\r\n        onValueChange?.(value)\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (!defaultValue || !isFirst.current) {\r\n            _setValue(controlledValue)\r\n        }\r\n        isFirst.current = false\r\n    }, [controlledValue])\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps} id={basicFieldProps.id}>\r\n            <div className={cn(SwitchAnatomy.container(), containerClass)}>\r\n                <SwitchPrimitive.Root\r\n                    ref={mergeRefs([buttonRef, ref])}\r\n                    id={basicFieldProps.id}\r\n                    className={cn(SwitchAnatomy.root({ size }), className)}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                    data-readonly={basicFieldProps.readonly}\r\n                    data-error={!!basicFieldProps.error}\r\n                    checked={_value}\r\n                    onCheckedChange={handleOnValueChange}\r\n                    defaultChecked={defaultValue}\r\n                    {...rest}\r\n                >\r\n                    <SwitchPrimitive.Thumb className={cn(SwitchAnatomy.thumb({ size }), thumbClass)} />\r\n                </SwitchPrimitive.Root>\r\n                {!!label && <label\r\n                    className={cn(SwitchAnatomy.label(), labelClass)}\r\n                    htmlFor={basicFieldProps.id}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                >\r\n                    {label}\r\n                </label>}\r\n\r\n                <input\r\n                    ref={inputRef}\r\n                    type=\"checkbox\"\r\n                    name={basicFieldProps.name}\r\n                    className={hiddenInputStyles}\r\n                    value={_value ? \"on\" : \"off\"}\r\n                    checked={basicFieldProps.required ? _value : true}\r\n                    aria-hidden=\"true\"\r\n                    required={basicFieldProps.required}\r\n                    tabIndex={-1}\r\n                    onChange={() => {}}\r\n                    onFocusCapture={() => buttonRef.current?.focus()}\r\n                />\r\n            </div>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nSwitch.displayName = \"Switch\"\r\n"
      }
    ]
  },
  {
    "component": "table",
    "name": "Table",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "table",
        "content": "export * from \"./table\"\n"
      },
      {
        "name": "table.tsx",
        "dir": "table",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TableAnatomy = defineStyleAnatomy({\n    table: cva([\n        \"UI-Table__table\",\n        \"w-full caption-bottom text-sm\",\n    ]),\n    tableHeader: cva([\n        \"UI-Table__tableHeader\",\n        \"[&_tr]:border-b\",\n    ]),\n    tableBody: cva([\n        \"UI-Table__tableBody\",\n        \"[&_tr:last-child]:border-0\",\n    ]),\n    tableFooter: cva([\n        \"UI-Table__tableFooter\",\n        \"border-t bg-gray-100 dark:bg-gray-900 bg-opacity-40 font-medium [&>tr]:last:border-b-0\",\n    ]),\n    tableRow: cva([\n        \"UI-Table__tableRow\",\n        \"border-b transition-colors hover:bg-[--subtle] data-[state=selected]:bg-[--subtle]\",\n    ]),\n    tableHead: cva([\n        \"UI-Table__tableHead\",\n        \"h-12 px-4 text-left align-middle font-medium\",\n        \"[&:has([role=checkbox])]:pr-0\",\n    ]),\n    tableCell: cva([\n        \"UI-Table__tableCell\",\n        \"p-4 align-middle [&:has([role=checkbox])]:pr-0\",\n    ]),\n    tableCaption: cva([\n        \"UI-Table__tableCaption\",\n        \"mt-4 text-sm\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableProps = React.ComponentPropsWithoutRef<\"table\">\n\nexport const Table = React.forwardRef<HTMLTableElement, TableProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return (\n        <div className=\"relative w-full overflow-auto\">\n            <table\n                ref={ref}\n                className={cn(TableAnatomy.table(), className)}\n                {...rest}\n            />\n        </div>\n    )\n})\nTable.displayName = \"Table\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableHeader\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableHeaderProps = React.ComponentPropsWithoutRef<\"thead\">\n\nexport const TableHeader = React.forwardRef<HTMLTableSectionElement, TableHeaderProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <thead ref={ref} className={cn(TableAnatomy.tableHeader(), className)} {...rest} />\n})\nTableHeader.displayName = \"TableHeader\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableBody\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableBodyProps = React.ComponentPropsWithoutRef<\"tbody\">\n\nexport const TableBody = React.forwardRef<HTMLTableSectionElement, TableBodyProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tbody ref={ref} className={cn(TableAnatomy.tableBody(), className)} {...rest} />\n})\nTableBody.displayName = \"TableBody\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableFooter\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableFooterProps = React.ComponentPropsWithoutRef<\"tfoot\">\n\nexport const TableFooter = React.forwardRef<HTMLTableSectionElement, TableFooterProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tfoot ref={ref} className={cn(TableAnatomy.tableFooter(), className)} {...rest} />\n})\nTableFooter.displayName = \"TableFooter\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableRow\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableRowProps = React.ComponentPropsWithoutRef<\"tr\">\n\nexport const TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <tr ref={ref} className={cn(TableAnatomy.tableRow(), className)} {...rest} />\n})\nTableRow.displayName = \"TableRow\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableHead\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableHeadProps = React.ComponentPropsWithoutRef<\"th\">\n\nexport const TableHead = React.forwardRef<HTMLTableCellElement, TableHeadProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <th ref={ref} className={cn(TableAnatomy.tableHead(), className)} {...rest} />\n})\nTableHead.displayName = \"TableHead\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableCell\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableCellProps = React.ComponentPropsWithoutRef<\"td\">\n\nexport const TableCell = React.forwardRef<HTMLTableCellElement, TableCellProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <td ref={ref} className={cn(TableAnatomy.tableCell(), className)} {...rest} />\n})\nTableCell.displayName = \"TableCell\"\n\n/* -------------------------------------------------------------------------------------------------\n * TableCaption\n * -----------------------------------------------------------------------------------------------*/\n\ntype TableCaptionProps = React.ComponentPropsWithoutRef<\"caption\">\n\nexport const TableCaption = React.forwardRef<HTMLTableCaptionElement, TableCaptionProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    return <caption ref={ref} className={cn(TableAnatomy.tableCaption(), className)} {...rest} />\n})\nTableCaption.displayName = \"TableCaption\"\n"
      }
    ]
  },
  {
    "component": "tabs",
    "name": "Tabs",
    "dependencies": [
      [
        "@radix-ui/react-tabs",
        "^1.0.4",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tabs",
        "content": "export * from \"./tabs\"\nexport * from \"./static-tabs\"\n"
      },
      {
        "name": "static-tabs.tsx",
        "dir": "tabs",
        "content": "import { cva } from \"class-variance-authority\"\nimport Link from \"next/link\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const StaticTabsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-StaticTabs__root\",\n        \"flex w-full overflow-hidden overflow-x-auto\",\n    ]),\n    trigger: cva([\n        \"UI-StaticTabs__trigger\",\n        \"group/staticTabs__trigger inline-flex flex-none shrink-0 basis-auto items-center font-medium text-sm transition outline-none min-w-0 justify-center\",\n        \"text-[--muted] hover:text-[--text-color]\",\n        \"h-10 px-4 rounded-full\",\n        \"data-[current=true]:bg-[--subtle] data-[current=true]:font-semibold data-[current=true]:text-[--foreground]\",\n        \"focus-visible:bg-[--subtle]\",\n    ]),\n    icon: cva([\n        \"UI-StaticTabs__icon\",\n        \"-ml-0.5 mr-2 h-4 w-4\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * StaticTabs\n * -----------------------------------------------------------------------------------------------*/\n\nexport type StaticTabsItem = {\n    name: string,\n    href: string | null | undefined,\n    iconType?: React.ElementType,\n    isCurrent: boolean\n}\n\nexport type StaticTabsProps = React.ComponentPropsWithRef<\"nav\"> &\n    ComponentAnatomy<typeof StaticTabsAnatomy> & {\n    items: StaticTabsItem[]\n}\n\nexport const StaticTabs = React.forwardRef<HTMLElement, StaticTabsProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        triggerClass,\n        iconClass,\n        items,\n        ...rest\n    } = props\n\n    return (\n        <nav\n            ref={ref}\n            className={cn(StaticTabsAnatomy.root(), className)}\n            role=\"navigation\"\n            {...rest}\n        >\n            {items.map((tab) => (\n                <Link\n                    key={tab.name}\n                    href={tab.href ?? \"#\"}\n                    className={cn(\n                        StaticTabsAnatomy.trigger(),\n                        triggerClass,\n                    )}\n                    aria-current={tab.isCurrent ? \"page\" : undefined}\n                    data-current={tab.isCurrent}\n                >\n                    {tab.iconType && <tab.iconType\n                        className={cn(\n                            StaticTabsAnatomy.icon(),\n                            iconClass,\n                        )}\n                        aria-hidden=\"true\"\n                        data-current={tab.isCurrent}\n                    />}\n                    <span>{tab.name}</span>\n                </Link>\n            ))}\n        </nav>\n    )\n\n})\n\nStaticTabs.displayName = \"StaticTabs\"\n"
      },
      {
        "name": "tabs.tsx",
        "dir": "tabs",
        "content": "\"use client\"\n\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TabsAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Tabs__root\",\n    ]),\n    list: cva([\n        \"UI-Tabs__list\",\n        \"inline-flex h-12 items-center justify-center w-full\",\n    ]),\n    trigger: cva([\n        \"UI-Tabs__trigger appearance-none shadow-none\",\n        \"inline-flex h-full items-center justify-center whitespace-nowrap px-3 py-1.5 text-sm text-[--muted] font-medium ring-offset-[--background]\",\n        \"transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        \"border-transparent border-b-2 -mb-px\",\n        \"data-[state=active]:border-[--brand] data-[state=active]:text-[--foreground]\",\n    ]),\n    content: cva([\n        \"UI-Tabs__content\",\n        \"ring-offset-[--background]\",\n        \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-2\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/\n\nconst __TabsAnatomyContext = React.createContext<ComponentAnatomy<typeof TabsAnatomy>>({})\n\nexport type TabsProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root> & ComponentAnatomy<typeof TabsAnatomy>\n\nexport const Tabs = React.forwardRef<HTMLDivElement, TabsProps>((props, ref) => {\n    const {\n        className,\n        listClass,\n        triggerClass,\n        contentClass,\n        ...rest\n    } = props\n\n    return (\n        <__TabsAnatomyContext.Provider\n            value={{\n                listClass,\n                triggerClass,\n                contentClass,\n            }}\n        >\n            <TabsPrimitive.Root\n                ref={ref}\n                className={cn(TabsAnatomy.root(), className)}\n                {...rest}\n            />\n        </__TabsAnatomyContext.Provider>\n    )\n})\n\nTabs.displayName = \"Tabs\"\n\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsListProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n\nexport const TabsList = React.forwardRef<HTMLDivElement, TabsListProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { listClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.List\n            ref={ref}\n            className={cn(TabsAnatomy.list(), listClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsList.displayName = \"TabsList\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * TabsTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsTriggerProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n\nexport const TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { triggerClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.Trigger\n            ref={ref}\n            className={cn(TabsAnatomy.trigger(), triggerClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\n/* -------------------------------------------------------------------------------------------------\n * TabsContent\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TabsContentProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n\nexport const TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>((props, ref) => {\n    const { className, ...rest } = props\n\n    const { contentClass } = React.useContext(__TabsAnatomyContext)\n\n    return (\n        <TabsPrimitive.Content\n            ref={ref}\n            className={cn(TabsAnatomy.content(), contentClass, className)}\n            {...rest}\n        />\n    )\n})\n\nTabsContent.displayName = \"TabsContent\"\n\n"
      }
    ]
  },
  {
    "component": "text-input",
    "name": "TextInput",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "text-input",
        "content": "export * from \"./text-input\"\r\n"
      },
      {
        "name": "text-input.tsx",
        "dir": "text-input",
        "content": "import { cn } from \"../core/styling\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TextInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type TextInputProps = Omit<React.ComponentPropsWithRef<\"input\">, \"size\"> &\r\n    InputStyling &\r\n    BasicFieldOptions & {\r\n    /**\r\n     * Callback invoked when the value changes. Returns the string value.\r\n     */\r\n    onValueChange?: (value: string) => void\r\n}\r\n\r\nexport const TextInput = React.forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<TextInputProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        onValueChange,\r\n        onChange,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<TextInputProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const handleOnChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        onValueChange?.(e.target.value)\r\n        onChange?.(e)\r\n    }, [])\r\n\r\n    return (\r\n        <BasicField{...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <input\r\n                    id={basicFieldProps.id}\r\n                    name={basicFieldProps.name}\r\n                    className={cn(\r\n                        \"form-input\",\r\n                        InputAnatomy.root({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            isDisabled: !!basicFieldProps.disabled,\r\n                            isReadonly: !!basicFieldProps.readonly,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        className,\r\n                    )}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                    data-readonly={basicFieldProps.readonly}\r\n                    aria-readonly={basicFieldProps.readonly}\r\n                    required={basicFieldProps.required}\r\n                    onChange={handleOnChange}\r\n                    {...rest}\r\n                    ref={ref}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nTextInput.displayName = \"TextInput\"\r\n"
      }
    ]
  },
  {
    "component": "textarea",
    "name": "Textarea",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "textarea",
        "content": "export * from \"./textarea\"\r\n"
      },
      {
        "name": "textarea.tsx",
        "dir": "textarea",
        "content": "import { cva } from \"class-variance-authority\"\r\nimport * as React from \"react\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\r\nimport { extractInputPartProps, InputAddon, InputAnatomy, InputContainer, InputIcon, InputStyling } from \"../input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TextareaAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Textarea__root\",\r\n        \"w-full p-2\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"h-20\",\r\n                md: \"h-32\",\r\n                lg: \"h-64\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Textarea\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type TextareaProps = Omit<React.ComponentPropsWithRef<\"textarea\">, \"size\"> &\r\n    InputStyling &\r\n    BasicFieldOptions & {\r\n    /**\r\n     * Callback invoked when the value changes. Returns the string value.\r\n     */\r\n    onValueChange?: (value: string) => void\r\n}\r\n\r\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\r\n\r\n    const [props1, basicFieldProps] = extractBasicFieldProps<TextareaProps>(props, React.useId())\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightAddon,\r\n        rightIcon,\r\n        className,\r\n        onValueChange,\r\n        onChange,\r\n        ...rest\r\n    }, {\r\n        inputContainerProps,\r\n        leftAddonProps,\r\n        leftIconProps,\r\n        rightAddonProps,\r\n        rightIconProps,\r\n    }] = extractInputPartProps<TextareaProps>({\r\n        ...props1,\r\n        size: props1.size ?? \"md\",\r\n        intent: props1.intent ?? \"basic\",\r\n        leftAddon: props1.leftAddon,\r\n        leftIcon: props1.leftIcon,\r\n        rightAddon: props1.rightAddon,\r\n        rightIcon: props1.rightIcon,\r\n    })\r\n\r\n    const handleOnChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        onValueChange?.(e.target.value)\r\n        onChange?.(e)\r\n    }, [])\r\n\r\n    return (\r\n        <BasicField {...basicFieldProps}>\r\n            <InputContainer {...inputContainerProps}>\r\n                <InputAddon {...leftAddonProps} />\r\n                <InputIcon {...leftIconProps} />\r\n\r\n                <textarea\r\n                    id={basicFieldProps.id}\r\n                    name={basicFieldProps.name}\r\n                    className={cn(\r\n                        \"form-textarea\",\r\n                        InputAnatomy.root({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            isDisabled: !!basicFieldProps.disabled,\r\n                            isReadonly: !!basicFieldProps.readonly,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        TextareaAnatomy.root({ size }),\r\n                        className,\r\n                    )}\r\n                    disabled={basicFieldProps.disabled || basicFieldProps.readonly}\r\n                    data-disabled={basicFieldProps.disabled}\r\n                    onChange={handleOnChange}\r\n                    {...rest}\r\n                    ref={ref}\r\n                />\r\n\r\n                <InputAddon {...rightAddonProps} />\r\n                <InputIcon {...rightIconProps} />\r\n            </InputContainer>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nTextarea.displayName = \"Textarea\"\r\n"
      }
    ]
  },
  {
    "component": "timeline",
    "name": "Timeline",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "timeline",
        "content": "export * from \"./timeline\"\n"
      },
      {
        "name": "timeline.tsx",
        "dir": "timeline",
        "content": "import { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TimelineAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Timeline__root\",\n    ]),\n    item: cva([\n        \"UI-Timeline__item\",\n        \"flex text-md\",\n    ]),\n    leftSection: cva([\n        \"UI-Timeline__leftSection\",\n        \"flex flex-col items-center mr-4\",\n    ]),\n    icon: cva([\n        \"UI-Timeline__icon\",\n        \"flex items-center justify-center w-8 h-8 border rounded-full flex-none\",\n    ]),\n    line: cva([\n        \"UI-Timeline__line\",\n        \"w-px h-full bg-[--border]\",\n    ]),\n    detailsSection: cva([\n        \"UI-Timeline__detailsSection\",\n        \"pb-8\",\n    ]),\n    title: cva([\n        \"UI-Timeline__title\",\n        \"text-md font-semibold\",\n    ]),\n    description: cva([\n        \"UI-Timeline__description\",\n        \"text-[--muted] text-sm\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Timeline\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TimelineItem = {\n    title: React.ReactNode\n    description?: React.ReactNode\n    content?: React.ReactNode\n    icon: React.ReactNode\n    unstyledTitle?: boolean\n    unstyledDescription?: boolean\n    unstyledIcon?: boolean\n    titleClass?: string\n    descriptionClass?: string\n    iconClass?: string\n    lineClass?: string\n}\n\nexport type TimelineProps = React.ComponentPropsWithoutRef<\"div\"> & ComponentAnatomy<typeof TimelineAnatomy> & {\n    children?: React.ReactNode\n    items: TimelineItem[]\n}\n\nexport const Timeline = React.forwardRef<HTMLDivElement, TimelineProps>((props, ref) => {\n\n    const {\n        children,\n        itemClass,\n        leftSectionClass,\n        descriptionClass,\n        detailsSectionClass,\n        titleClass,\n        lineClass,\n        iconClass,\n        className,\n        items,\n        ...rest\n    } = props\n\n    return (\n        <div\n            ref={ref}\n            className={cn(TimelineAnatomy.root(), className)}\n            {...rest}\n        >\n            {items.map((item, idx) => (\n                <div\n                    key={`${idx}`}\n                    className={cn(TimelineAnatomy.item(), itemClass)}\n                >\n                    {/*Left section*/}\n                    <div className={cn(TimelineAnatomy.leftSection(), leftSectionClass)}>\n                        <div\n                            className={cn(\n                                item.unstyledIcon ?\n                                    null :\n                                    TimelineAnatomy.icon(),\n                                iconClass,\n                                item.iconClass,\n                            )}\n                        >\n                            {item.icon}\n                        </div>\n                        {(idx < items.length - 1) && <div className={cn(TimelineAnatomy.line(), lineClass, item.lineClass)} />}\n                    </div>\n\n                    {/*Details section*/}\n                    <div className={cn(TimelineAnatomy.detailsSection(), detailsSectionClass)}>\n\n                        <div\n                            className={cn(\n                                item.unstyledTitle ?\n                                    null :\n                                    TimelineAnatomy.title(),\n                                titleClass,\n                                item.titleClass,\n                            )}\n                        >\n                            {item.title}\n                        </div>\n\n                        {item.description && <div\n                            className={cn(\n                                item.unstyledDescription ?\n                                    null :\n                                    TimelineAnatomy.description(),\n                                descriptionClass,\n                                item.descriptionClass,\n                            )}\n                        >\n                            {item.description}\n                        </div>}\n\n                        {item.content}\n\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n\n})\n\nTimeline.displayName = \"Timeline\"\n"
      }
    ]
  },
  {
    "component": "toaster",
    "name": "Toaster",
    "dependencies": [
      [
        "sonner",
        "^1.2.3",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "toaster",
        "content": "export * from \"./toaster\"\n"
      },
      {
        "name": "toaster.tsx",
        "dir": "toaster",
        "content": "\"use client\"\n\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { Toaster as Sonner } from \"sonner\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ToasterAnatomy = defineStyleAnatomy({\n    toaster: cva([\"group toaster\"]),\n    toast: cva([\n        \"group/toast\",\n        \"group-[.toaster]:py-3\",\n        \"group-[.toaster]:text-base group-[.toaster]:bg-[--paper] group-[.toaster]:text-[--foreground] group-[.toaster]:border-[--border] group-[.toaster]:shadow-lg\",\n        // Success\n        // \"group-[.toaster]:data-[type=success]:bg-green-50 group-[.toaster]:data-[type=success]:text-green-500\",\n        // \"group-[.toaster]:data-[type=success]:border-green-100\", // Subtle\n        \"group-[.toaster]:data-[type=success]:bg-green-500 group-[.toaster]:data-[type=success]:text-white group-[.toaster]:data-[type=success]:border-[--green]\",\n        // Warning\n        // \"group-[.toaster]:data-[type=warning]:bg-orange-50 group-[.toaster]:data-[type=warning]:text-orange-500\",\n        // \"group-[.toaster]:data-[type=warning]:border-orange-200\", // Subtle\n        \"group-[.toaster]:data-[type=warning]:bg-yellow-600 dark:group-[.toaster]:data-[type=warning]:bg-yellow-700 group-[.toaster]:data-[type=warning]:text-white group-[.toaster]:data-[type=warning]:border-[--yellow] dark:group-[.toaster]:data-[type=warning]:border-yellow-600\",\n        // Error\n        // \"group-[.toaster]:data-[type=error]:bg-red-50 group-[.toaster]:data-[type=error]:text-red-500\",\n        // \"group-[.toaster]:data-[type=error]:border-red-200\", // Subtle\n        \"group-[.toaster]:data-[type=error]:bg-red-500 group-[.toaster]:data-[type=error]:text-white group-[.toaster]:data-[type=error]:border-[--red]\",\n        // Info\n        // \"group-[.toaster]:data-[type=info]:bg-blue-50 group-[.toaster]:data-[type=info]:text-blue-500\",\n        // \"group-[.toaster]:data-[type=info]:border-blue-200\", // Subtle\n        \"group-[.toaster]:data-[type=info]:bg-blue-500 group-[.toaster]:data-[type=info]:text-white group-[.toaster]:data-[type=info]:border-[--blue]\",\n    ]),\n    description: cva([\n        \"group/toast:text-sm group/toast:text-[--muted]\",\n        \"group-data-[type=success]/toast:text-green-100\",\n        \"group-data-[type=warning]/toast:text-yellow-100\",\n        \"group-data-[type=error]/toast:text-red-100\",\n        \"group-data-[type=info]/toast:text-blue-100\",\n    ]),\n    actionButton: cva([\"group/toast:bg-[--subtle] group/toast:text-[--foreground]\"]),\n    cancelButton: cva([\"group/toast:bg-[--subtle] group/toast:text-[--muted]\"]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Toaster\n * -----------------------------------------------------------------------------------------------*/\n\nexport type ToasterProps = React.ComponentProps<typeof Sonner>\n\nexport const Toaster = ({ position = \"top-center\", ...props }: ToasterProps) => {\n\n    return (\n        <Sonner\n            position={position}\n            className={cn(ToasterAnatomy.toaster())}\n            toastOptions={{\n                classNames: {\n                    toast: cn(ToasterAnatomy.toast()),\n                    description: cn(ToasterAnatomy.description()),\n                    actionButton: cn(ToasterAnatomy.actionButton()),\n                    cancelButton: cn(ToasterAnatomy.cancelButton()),\n                },\n            }}\n            {...props}\n        />\n    )\n}\n\nToaster.displayName = \"Toaster\"\n"
      }
    ]
  },
  {
    "component": "tooltip",
    "name": "Tooltip",
    "dependencies": [
      [
        "@radix-ui/react-tooltip",
        "^1.0.6",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tooltip",
        "content": "export * from \"./tooltip\"\n"
      },
      {
        "name": "tooltip.tsx",
        "dir": "tooltip",
        "content": "\"use client\"\n\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cva } from \"class-variance-authority\"\nimport * as React from \"react\"\nimport { cn, defineStyleAnatomy } from \"../core/styling\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const TooltipAnatomy = defineStyleAnatomy({\n    root: cva([\n        \"UI-Tooltip__root\",\n        \"z-50 overflow-hidden rounded-[--radius] px-3 py-1.5 text-sm shadow-md animate-in fade-in-50\",\n        \"bg-gray-800 text-white\",\n        \"data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1\",\n        \"data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nexport type TooltipProps = React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> &\n    React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root> & {\n    /**\n     * The trigger that toggles the tooltip.\n     * - Passed props: `data-state`\t(\"closed\" | \"delayed-open\" | \"instant-open\")\n     */\n    trigger: React.ReactElement\n}\n\nexport const Tooltip = React.forwardRef<HTMLDivElement, TooltipProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        trigger,\n        // Root\n        delayDuration = 50,\n        disableHoverableContent,\n        defaultOpen,\n        open,\n        onOpenChange,\n        ...rest\n    } = props\n\n    return (\n        <TooltipProvider>\n            <TooltipPrimitive.Root\n                delayDuration={delayDuration}\n                disableHoverableContent={disableHoverableContent}\n                defaultOpen={defaultOpen}\n                open={open}\n                onOpenChange={onOpenChange}\n            >\n                <TooltipPrimitive.Trigger asChild>\n                    {trigger}\n                </TooltipPrimitive.Trigger>\n                <TooltipPrimitive.Content\n                    ref={ref}\n                    className={cn(TooltipAnatomy.root(), className)}\n                    {...rest}\n                >\n                    {children}\n                </TooltipPrimitive.Content>\n            </TooltipPrimitive.Root>\n        </TooltipProvider>\n    )\n\n})\n\nTooltip.displayName = \"Tooltip\"\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps your app to provide global functionality to your tooltips.\n */\nexport const TooltipProvider = TooltipPrimitive.Provider\n"
      }
    ]
  },
  {
    "component": "vertical-menu",
    "name": "VerticalMenu",
    "dependencies": [],
    "family": [
      "disclosure"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "vertical-menu",
        "content": "export * from \"./vertical-menu\"\r\n"
      },
      {
        "name": "vertical-menu.tsx",
        "dir": "vertical-menu",
        "content": "\"use client\"\r\n\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport Link from \"next/link\"\r\nimport * as React from \"react\"\r\nimport { useContext } from \"react\"\r\nimport { cn, ComponentAnatomy, defineStyleAnatomy } from \"../core/styling\"\r\nimport { Disclosure, DisclosureContent, DisclosureItem, DisclosureTrigger } from \"../disclosure\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const VerticalMenuAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-VerticalMenu__root\",\r\n        \"block space-y-1\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-VerticalMenu__item\",\r\n        \"group/verticalMenu_item relative flex flex-none truncate items-center w-full font-medium rounded-[--radius] transition cursor-pointer\",\r\n        \"hover:bg-[--subtle] hover:text-[--text-color]\",\r\n        \"focus-visible:bg-[--subtle] outline-none text-[--muted]\",\r\n        \"data-[current=true]:bg-[--subtle] data-[current=true]:text-[--foreground]\",\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"px-3 h-8 text-sm\",\r\n                md: \"px-3 h-10 text-sm\",\r\n                lg: \"px-3 h-12 text-base\",\r\n            },\r\n            center: {\r\n                true: \"justify-center\",\r\n                false: null,\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n            center: false,\r\n        },\r\n    }),\r\n    itemContent: cva([\r\n        \"UI-VerticalMenu__itemContent\",\r\n        \"w-full flex items-center\",\r\n    ], {\r\n        variants: {\r\n            center: {\r\n                true: \"justify-center\",\r\n                false: null,\r\n            },\r\n        },\r\n    }),\r\n    parentItem: cva([\r\n        \"UI-VerticalMenu__parentItem\",\r\n        \"group/verticalMenu_parentItem\",\r\n        \"cursor-pointer w-full\",\r\n    ]),\r\n    itemChevron: cva([\r\n        \"UI-VerticalMenu__itemChevron\",\r\n        \"size-4 transition-transform group-data-[state=open]/verticalMenu_parentItem:rotate-90\",\r\n    ]),\r\n    icon: cva([\r\n        \"UI-VerticalMenu__icon\",\r\n        \"flex-shrink-0 mr-3\",\r\n        \"text-[--muted]\",\r\n        \"group-hover/verticalMenu_item:text-[--foreground]\", // Item Hover\r\n        \"group-data-[current=true]/verticalMenu_item:text-[--foreground]\", // Item Current\r\n    ], {\r\n        variants: {\r\n            size: {\r\n                sm: \"size-4\",\r\n                md: \"size-5\",\r\n                lg: \"size-6\",\r\n            },\r\n            center: {\r\n                true: \"mr-0\",\r\n                false: null,\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            size: \"md\",\r\n        },\r\n    }),\r\n    subContent: cva([\r\n        \"UI-VerticalMenu__subContent\",\r\n        \"border-b py-1\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * VerticalMenu\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst __VerticalMenuContext = React.createContext<Pick<VerticalMenuProps, \"onAnyItemClick\" | \"onLinkItemClick\">>({})\r\n\r\nexport type VerticalMenuItem = {\r\n    name: string\r\n    href?: string | null | undefined\r\n    iconType?: React.ElementType\r\n    isCurrent?: boolean\r\n    onClick?: React.MouseEventHandler<HTMLElement>\r\n    addon?: React.ReactNode\r\n    subContent?: React.ReactNode\r\n}\r\n\r\nexport type VerticalMenuProps = React.ComponentPropsWithRef<\"div\"> &\r\n    ComponentAnatomy<typeof VerticalMenuAnatomy> &\r\n    VariantProps<typeof VerticalMenuAnatomy.item> & {\r\n    /**\r\n     * If true, the nav will be rendered as a line of icons.\r\n     */\r\n    iconsOnly?: boolean\r\n    items: VerticalMenuItem[]\r\n    /**\r\n     * Callback when any item is clicked.\r\n     */\r\n    onAnyItemClick?: React.MouseEventHandler<HTMLElement>\r\n    /**\r\n     * Callback when a link item is clicked.\r\n     */\r\n    onLinkItemClick?: React.MouseEventHandler<HTMLElement>\r\n}\r\n\r\nexport const VerticalMenu = React.forwardRef<HTMLDivElement, VerticalMenuProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        size,\r\n        iconsOnly,\r\n        onAnyItemClick,\r\n        onLinkItemClick,\r\n        /**/\r\n        itemClass,\r\n        iconClass,\r\n        parentItemClass,\r\n        subContentClass,\r\n        itemChevronClass,\r\n        itemContentClass,\r\n        className,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    const {\r\n        onLinkItemClick: _onLinkItemClick,\r\n        onAnyItemClick: _onAnyItemClick,\r\n    } = useContext(__VerticalMenuContext)\r\n\r\n    const itemProps = (item: VerticalMenuItem) => ({\r\n        className: cn(\r\n            VerticalMenuAnatomy.item({ size, center: iconsOnly }),\r\n            itemClass,\r\n        ),\r\n        \"data-current\": item.isCurrent,\r\n        onClick: (e: React.MouseEvent<HTMLElement>) => {\r\n            if (item.href) {\r\n                onLinkItemClick?.(e)\r\n                _onLinkItemClick?.(e)\r\n            }\r\n            onAnyItemClick?.(e)\r\n            _onAnyItemClick?.(e)\r\n            item.onClick?.(e)\r\n        },\r\n    })\r\n\r\n    const ItemContent = React.useCallback((item: VerticalMenuItem) => (\r\n        <div\r\n            className={cn(\r\n                VerticalMenuAnatomy.itemContent({ center: iconsOnly }),\r\n                itemContentClass,\r\n            )}\r\n        >\r\n            {item.iconType && <item.iconType\r\n                className={cn(\r\n                    VerticalMenuAnatomy.icon({ size, center: iconsOnly }),\r\n                    iconClass,\r\n                )}\r\n                aria-hidden=\"true\"\r\n                data-current={item.isCurrent}\r\n            />}\r\n            {!iconsOnly && <span>{item.name}</span>}\r\n            {item.addon}\r\n        </div>\r\n    ), [iconsOnly, size, itemContentClass, iconClass])\r\n\r\n    return (\r\n        <nav\r\n            ref={ref}\r\n            className={cn(VerticalMenuAnatomy.root(), className)}\r\n            role=\"navigation\"\r\n            {...rest}\r\n        >\r\n            <__VerticalMenuContext.Provider\r\n                value={{\r\n                    onAnyItemClick,\r\n                    onLinkItemClick,\r\n                }}\r\n            >\r\n                {items.map((item, idx) => {\r\n                    return (\r\n                        <React.Fragment key={item.name + idx}>\r\n                            {!item.subContent ?\r\n                                item.href ? (\r\n                                    <Link href={item.href} {...itemProps(item)}>\r\n                                        <ItemContent {...item} />\r\n                                    </Link>\r\n                                ) : (\r\n                                    <button {...itemProps(item)}>\r\n                                        <ItemContent {...item} />\r\n                                    </button>\r\n                                ) : (\r\n                                    <Disclosure type=\"multiple\">\r\n                                        <DisclosureItem value={item.name}>\r\n                                            <DisclosureTrigger>\r\n                                                <button\r\n                                                    className={cn(\r\n                                                        VerticalMenuAnatomy.item({ size, center: iconsOnly }),\r\n                                                        itemClass,\r\n                                                        VerticalMenuAnatomy.parentItem(),\r\n                                                        parentItemClass,\r\n                                                    )}\r\n                                                    aria-current={item.isCurrent ? \"page\" : undefined}\r\n                                                    data-current={item.isCurrent}\r\n                                                    onClick={item.onClick}\r\n                                                >\r\n                                                    <ItemContent {...item} />\r\n                                                    {!iconsOnly && <svg\r\n                                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                        width=\"24\"\r\n                                                        height=\"24\"\r\n                                                        viewBox=\"0 0 24 24\"\r\n                                                        fill=\"none\"\r\n                                                        stroke=\"currentColor\"\r\n                                                        strokeWidth=\"2\"\r\n                                                        strokeLinecap=\"round\"\r\n                                                        strokeLinejoin=\"round\"\r\n                                                        className={cn(VerticalMenuAnatomy.itemChevron(), itemChevronClass)}\r\n                                                        data-open={`${open}`}\r\n                                                    >\r\n                                                        <polyline points=\"9 18 15 12 9 6\"></polyline>\r\n                                                    </svg>}\r\n                                                </button>\r\n                                            </DisclosureTrigger>\r\n\r\n                                            <DisclosureContent className={cn(VerticalMenuAnatomy.subContent(), subContentClass)}>\r\n                                                {item.subContent && item.subContent}\r\n                                            </DisclosureContent>\r\n                                        </DisclosureItem>\r\n\r\n                                    </Disclosure>\r\n                                )}\r\n                        </React.Fragment>\r\n                    )\r\n                })}\r\n            </__VerticalMenuContext.Provider>\r\n        </nav>\r\n    )\r\n\r\n})\r\n\r\nVerticalMenu.displayName = \"VerticalMenu\"\r\n"
      }
    ]
  }
]