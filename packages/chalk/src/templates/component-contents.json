[
  {
    "component": "accordion",
    "files": [
      {
        "name": "accordion.tsx",
        "dir": "accordion",
        "content": "/**\n * Chalk UI - accordion/accordion.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n'use client'\r\n\r\nimport React from 'react'\r\nimport {Disclosure, Transition} from '@headlessui/react'\r\nimport {ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy} from \"@/components/ui/core\";\r\nimport {cva} from \"class-variance-authority\";\r\nimport {cn} from \"@rahimstack/tailwind-utils\";\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AccordionAnatomy = defineStyleAnatomy({\r\n    container: cva(\"UI-Accordion__container space-y-2\"),\r\n    trigger: cva([\"UI-Accordion__trigger\",\r\n        /** Light **/\r\n        \"bg-gray-50 hover:bg-gray-100\",\r\n        /** Dark **/\r\n        \"dark:bg-gray-800 dark:hover:bg-gray-700\",\r\n        \"flex w-full justify-between rounded-lg px-4 py-3 text-left font-medium transition\",\r\n        \"focus:outline-none focus-visible:ring focus-visible:ring-purple-500 focus-visible:ring-opacity-75\",\r\n    ]),\r\n    panel: cva(\"UI-Accordion__panel py-2\"),\r\n    item: cva(\"UI-Accordion__item\"),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Accordion\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface AccordionProps extends ComponentWithAnatomy<typeof AccordionAnatomy> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst _Accordion = (props: AccordionProps) => {\r\n\r\n    const {\r\n        children,\r\n        triggerClassName,\r\n        containerClassName,\r\n        panelClassName,\r\n        itemClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    const itemsWithProps = React.Children.map(children, (child) => {\r\n        // Checking isValidElement is the safe way and avoids a typescript error too.\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child, {triggerClassName, panelClassName, itemClassName} as any);\r\n        }\r\n        return child;\r\n    });\r\n\r\n    return (\r\n        <div className={cn(AccordionAnatomy.container(), containerClassName)}>\r\n            {itemsWithProps}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Accordion.Item\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ItemProps extends ComponentWithAnatomy<typeof AccordionAnatomy> {\r\n    title: string,\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst Item: React.FC<ItemProps> = (\r\n    {\r\n        children,\r\n        title,\r\n        triggerClassName,\r\n        panelClassName,\r\n        itemClassName,\r\n        ...rest\r\n    }) => {\r\n\r\n    return (\r\n        <Disclosure>\r\n            {({open}) => (\r\n                <div className={cn(AccordionAnatomy.item(), itemClassName)}>\r\n                    <Disclosure.Button className={cn(AccordionAnatomy.trigger(), triggerClassName)}>\r\n                        Is team pricing available?\r\n                        <svg\r\n                            className={cn(\r\n                                \"ml-1.5 h-5 w-5 flex-shrink-0 transition duration-300\",\r\n                                {\r\n                                    \"-rotate-180\": open\r\n                                }\r\n                            )}\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"\r\n                            />\r\n                        </svg>\r\n                    </Disclosure.Button>\r\n                    <Transition\r\n                        show={open}\r\n                        enter=\"transition duration-300 ease-out\"\r\n                        enterFrom=\"transform h-0 opacity-0\"\r\n                        enterTo=\"transform h-10 opacity-100\"\r\n                        leave=\"transition duration-75 ease-out\"\r\n                        leaveFrom=\"transform h-10 opacity-100\"\r\n                        leaveTo=\"transform h-0 opacity-0\"\r\n                    >\r\n                        <Disclosure.Panel static className={cn(AccordionAnatomy.panel(), panelClassName)}>\r\n                            Yes! You can purchase a license that you can share with your\r\n                            entire team.\r\n                        </Disclosure.Panel>\r\n                    </Transition>\r\n                </div>\r\n            )}\r\n        </Disclosure>\r\n    )\r\n}\r\n\r\n_Accordion.Item = Item\r\n_Accordion.Item.displayName = \"AccordionItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const Accordion = createPolymorphicComponent<'div', AccordionProps, {\r\n    Item: typeof Item\r\n}>(_Accordion)\r\n\r\nAccordion.displayName = \"Accordion\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "accordion",
        "content": "/**\n * Chalk UI - accordion/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from './accordion'\r\n"
      }
    ]
  },
  {
    "component": "address-input",
    "files": [
      {
        "name": "address-input.tsx",
        "dir": "address-input",
        "content": "/**\n * Chalk UI - address-input/address-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport _isEmpty from \"lodash/isEmpty\"\nimport React, { useId } from \"react\"\nimport { extractBasicFieldProps } from \"../basic-field\"\nimport { Combobox, ComboboxProps } from \"../combobox\"\nimport { useUILocaleConfig } from \"../core\"\nimport locales from \"./locales.json\"\nimport { GoogleMapsAutocompletionRequest, useGoogleMapsAutocomplete } from \"./use-address-autocomplete\"\n\nexport interface AddressInputProps extends Omit<ComboboxProps, \"options\" | \"onInputChange\" | \"onChange\"> {\n   autocompletionRequest?: GoogleMapsAutocompletionRequest\n   apiOptions?: Partial<LoaderOptions>\n   allowedCountries?: string | string[] | null\n   onChange?: (value: string | undefined) => void\n   noOptionsMessage?: string\n   placeholder?: string\n   apiKey: string // Optionally, you could remove this parameter and get the key from environment variables\n}\n\nexport const AddressInput = React.forwardRef<HTMLInputElement, AddressInputProps>((props, ref) => {\n   \n   const { locale: lng } = useUILocaleConfig()\n   \n   const [{\n      children,\n      className,\n      autocompletionRequest,\n      apiOptions,\n      defaultValue,\n      allowedCountries = null,\n      onChange,\n      apiKey,\n      placeholder = locales[\"placeholder\"][lng],\n      noOptionsMessage = locales[\"no-address-found\"][lng],\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps<AddressInputProps>(props, useId())\n   \n   const { suggestions, fetchSuggestions } = useGoogleMapsAutocomplete({\n      apiKey: apiKey,\n      minLengthAutocomplete: 0,\n      withSessionToken: false,\n      debounce: 300,\n      autocompletionRequest: {\n         componentRestrictions: { country: allowedCountries },\n      },\n   })\n   \n   return (\n      <>\n         <Combobox\n            returnValueOrLabel=\"label\" // We only return the address' text format\n            allowCustomValue={false}\n            withFiltering={false} // We deactivate filtering because the options are automatically filtered by the API\n            options={_isEmpty(suggestions) && defaultValue ? [{ value: defaultValue, label: defaultValue }] : suggestions}\n            onInputChange={fetchSuggestions}\n            defaultValue={defaultValue}\n            onChange={onChange}\n            placeholder={placeholder}\n            noOptionsMessage={noOptionsMessage}\n            {...basicFieldProps}\n            {...rest}\n            ref={ref}\n         />\n      </>\n   )\n   \n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "address-input",
        "content": "/**\n * Chalk UI - address-input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./address-input\"\nexport * from \"./use-address-autocomplete\"\n"
      },
      {
        "name": "locales.json",
        "dir": "address-input",
        "content": "{\n  \"placeholder\": {\n    \"fr\": \"Entrez l'addresse\",\n    \"en\": \"Enter your address\"\n  },\n  \"no-address-found\": {\n    \"fr\": \"Aucune addresse trouv√©e\",\n    \"en\": \"No address found\"\n  }\n}\n"
      },
      {
        "name": "use-address-autocomplete.ts",
        "dir": "address-input",
        "content": "/**\n * Chalk UI - address-input/use-address-autocomplete.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { Loader, LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { useDebouncedCallback } from \"use-debounce\"\n\nexport type GoogleMapsAutocompletionRequest = Omit<google.maps.places.AutocompletionRequest, \"input\">\n\nexport interface GoogleMapsAutocompleteProps {\n   apiKey: string,\n   minLengthAutocomplete?: number,\n   withSessionToken?: boolean\n   debounce?: number\n   autocompletionRequest?: GoogleMapsAutocompletionRequest\n   loaderApiOptions?: Partial<LoaderOptions>\n}\n\nexport const useGoogleMapsAutocomplete = ({\n   apiKey,\n   minLengthAutocomplete = 0,\n   withSessionToken = false,\n   debounce = 300,\n   autocompletionRequest,\n   loaderApiOptions = {},\n}:\n   GoogleMapsAutocompleteProps) => {\n   \n   const [autocompleteService, setAutocompleteService] = useState<google.maps.places.AutocompleteService | undefined>(undefined)\n   const [sessionToken, setSessionToken] = useState<google.maps.places.AutocompleteSessionToken | undefined>(undefined)\n   \n   const initializeService = useCallback(() => {\n      if (!window.google) throw new Error(\"[AddressInput]: Google script not loaded\")\n      if (!window.google.maps) throw new Error(\"[AddressInput]: Google maps script not loaded\")\n      if (!window.google.maps.places) throw new Error(\"[AddressInput]: Google maps places script not loaded\")\n      \n      setAutocompleteService(new window.google.maps.places.AutocompleteService())\n      setSessionToken(new google.maps.places.AutocompleteSessionToken())\n   }, [window])\n   \n   /**\n    * Initialize\n    */\n   useEffect(() => {\n      const init = async () => {\n         try {\n            if (!window.google || !window.google.maps || !window.google.maps.places) {\n               await new Loader({ apiKey: apiKey, ...{ libraries: [\"places\"], ...loaderApiOptions } }).load()\n            }\n            initializeService()\n         }\n         catch (error) {\n            console.log(error)\n         }\n      }\n      \n      if (apiKey) init()\n      else initializeService()\n   }, [])\n   \n   \n   /**\n    * Fetch suggestions\n    */\n   const [suggestions, setSuggestions] = useState<{ label: string, value: string }[]>([])\n   \n   const fetchSuggestions = useDebouncedCallback((value: string): void => {\n      if (!autocompleteService) return setSuggestions([])\n      if (value.length < minLengthAutocomplete) return setSuggestions([])\n      \n      const autocompletionReq: GoogleMapsAutocompletionRequest = { ...autocompletionRequest }\n      \n      autocompleteService.getPlacePredictions(\n         requestBuilder(\n            autocompletionReq,\n            value,\n            withSessionToken && sessionToken,\n         ), (suggestions) => {\n            setSuggestions((suggestions || []).map(suggestion => ({ label: suggestion.description, value: suggestion.place_id })))\n         },\n      )\n   }, debounce)\n   \n   return {\n      suggestions,\n      fetchSuggestions,\n   }\n   \n}\n\nconst requestBuilder = (\n   autocompletionRequest: GoogleMapsAutocompletionRequest,\n   input: string,\n   sessionToken?: google.maps.places.AutocompleteSessionToken,\n): google.maps.places.AutocompletionRequest => {\n   const { location, ...rest } = autocompletionRequest\n   \n   const res: google.maps.places.AutocompletionRequest = {\n      input,\n      ...rest,\n   }\n   \n   if (sessionToken) {\n      res.sessionToken = sessionToken\n   }\n   \n   if (location) {\n      res.location = new google.maps.LatLng(location)\n   }\n   \n   return res\n}\n"
      }
    ]
  },
  {
    "component": "alert",
    "files": [
      {
        "name": "alert.tsx",
        "dir": "alert",
        "content": "/**\n * Chalk UI - alert/alert.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const AlertAnatomy = defineStyleAnatomy({\n   container: cva(\"UI-Alert__container py-3 px-4 flex justify-between rounded-md\", {\n      variants: {\n         intent: {\n            info: \"bg-blue-50 text-blue-500 __UI__DARK__ dark:bg-opacity-10 dark:text-blue-200\",\n            success: \"bg-green-50 text-green-500 __UI__DARK__ dark:bg-opacity-10 dark:text-green-200\",\n            warning: \"bg-orange-50 text-orange-500 __UI__DARK__ dark:bg-opacity-10 dark:text-orange-200\",\n            alert: \"bg-red-50 text-red-500 __UI__DARK__ dark:bg-opacity-10 dark:text-red-200\",\n            \"info-basic\": \"bg-white text-gray-800 border __UI__DARK__ dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200\",\n            \"success-basic\": \"bg-white text-gray-800 border __UI__DARK__ dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200\",\n            \"warning-basic\": \"bg-white text-gray-800 border __UI__DARK__ dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200\",\n            \"alert-basic\": \"bg-white text-gray-800 border __UI__DARK__ dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200\",\n         },\n      },\n      defaultVariants: {\n         intent: \"info\",\n      },\n   }),\n   detailsContainer: cva(\"UI-Alert__detailsContainer flex\"),\n   textContainer: cva(\"UI-Alert__textContainer flex flex-col self-center ml-3 gap-.5\"),\n   title: cva(\"UI-Alert__title font-bold\"),\n   description: cva(\"UI-Alert__description\"),\n   icon: cva(\"UI-Alert__icon text-2xl mt-1\", {\n      variants: {\n         intent: {\n            \"info-basic\": \"text-blue-500\",\n            \"success-basic\": \"text-green-500\",\n            \"warning-basic\": \"text-orange-500\",\n            \"alert-basic\": \"text-red-500\",\n            \"info\": \"text-blue-500\",\n            \"success\": \"text-green-500\",\n            \"warning\": \"text-orange-500\",\n            \"alert\": \"text-red-500\",\n         },\n      },\n      defaultVariants: {\n         intent: \"info-basic\",\n      },\n   }),\n   closeButton: cva(\"UI-Alert__closeButton self-start text-2xl hover:opacity-50 transition ease-in cursor-pointer h-5 w-5\"),\n})\n\n\nexport interface AlertProps extends React.ComponentPropsWithRef<\"div\">,\n   VariantProps<typeof AlertAnatomy.container>,\n   ComponentWithAnatomy<typeof AlertAnatomy> {\n   title?: string,\n   description?: string,\n   isClosable?: boolean,\n   onClose?: () => void\n}\n\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n\n   const {\n      children,\n      className,\n      title,\n      description,\n      isClosable,\n      onClose,\n      intent = \"info-basic\",\n      containerClassName,\n      iconClassName,\n      detailsContainerClassName,\n      textContainerClassName,\n      titleClassName,\n      descriptionClassName,\n      closeButtonClassName,\n      ...rest\n   } = props\n\n   let Icon: any = null\n\n   if (intent === \"info-basic\" || intent === \"info\") {\n      Icon = <svg\n         xmlns=\"http://www.w3.org/2000/svg\"\n         width=\"24\"\n         height=\"24\"\n         viewBox=\"0 0 24 24\"\n         fill=\"none\"\n         stroke=\"currentColor\"\n         strokeWidth=\"2\"\n         strokeLinecap=\"round\"\n         strokeLinejoin=\"round\"\n      >\n         <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n         <path d=\"M12 16v-4\"></path>\n         <path d=\"M12 8h.01\"></path>\n      </svg>\n   } else if (intent === \"alert-basic\" || intent === \"alert\") {\n      Icon = <svg\n         xmlns=\"http://www.w3.org/2000/svg\"\n         width=\"24\"\n         height=\"24\"\n         viewBox=\"0 0 24 24\"\n         fill=\"none\"\n         stroke=\"currentColor\"\n         strokeWidth=\"2\"\n         strokeLinecap=\"round\"\n         strokeLinejoin=\"round\"\n      >\n         <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n         <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\"></line>\n         <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\"></line>\n      </svg>\n   } else if (intent === \"warning-basic\" || intent === \"warning\") {\n      Icon = <svg\n         xmlns=\"http://www.w3.org/2000/svg\"\n         width=\"24\"\n         height=\"24\"\n         viewBox=\"0 0 24 24\"\n         fill=\"none\"\n         stroke=\"currentColor\"\n         strokeWidth=\"2\"\n         strokeLinecap=\"round\"\n         strokeLinejoin=\"round\"\n      >\n         <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path>\n         <line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"13\"></line>\n         <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\"></line>\n      </svg>\n   } else if (intent === \"success-basic\" || intent === \"success\") {\n      Icon = <svg\n         xmlns=\"http://www.w3.org/2000/svg\"\n         width=\"24\"\n         height=\"24\"\n         viewBox=\"0 0 24 24\"\n         fill=\"none\"\n         stroke=\"currentColor\"\n         strokeWidth=\"2\"\n         strokeLinecap=\"round\"\n         strokeLinejoin=\"round\"\n      >\n         <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path>\n         <path d=\"m9 12 2 2 4-4\"></path>\n      </svg>\n   }\n\n   return (\n      <>\n         <div\n            className={cn(\n               AlertAnatomy.container({ intent }),\n               containerClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            <div className={cn(AlertAnatomy.detailsContainer(), detailsContainerClassName)}>\n               <div className={cn(AlertAnatomy.icon({ intent: intent }), iconClassName)}>\n                  {Icon && Icon}\n               </div>\n               <div className={cn(AlertAnatomy.textContainer(), textContainerClassName)}>\n                  <span className={cn(AlertAnatomy.title(), titleClassName)}>\n                     {title}\n                  </span>\n                  {!!description && <span className={cn(AlertAnatomy.description(), descriptionClassName)}>\n                     {description}\n                  </span>}\n               </div>\n            </div>\n            {onClose && <button className={cn(AlertAnatomy.closeButton(), closeButtonClassName)} onClick={onClose}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                >\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                </svg>\n            </button>}\n         </div>\n      </>\n   )\n\n})\n\nAlert.displayName = \"Alert\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "alert",
        "content": "/**\n * Chalk UI - alert/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./alert\"\n"
      }
    ]
  },
  {
    "component": "avatar",
    "files": [
      {
        "name": "avatar-showcase.tsx",
        "dir": "avatar",
        "content": "/**\n * Chalk UI - avatar/avatar-showcase.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { AvatarProps } from \".\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const AvatarShowcaseAnatomy = defineStyleAnatomy({\n   container: cva(\"UI-AvatarShowcase__container flex items-center\"),\n   name: cva(\"UI-AvatarShowcase__name font-semibold text-gray-900 dark:text-gray-200\"),\n   description: cva(\"UI-AvatarShowcase__description block text-sm text-gray-500 dark:text-gray-400\"),\n   detailsContainer: cva(\"UI-AvatarShowcase__detailsContainer ml-3\"),\n})\n\nexport interface AvatarShowcaseProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof AvatarShowcaseAnatomy> {\n   avatar: React.ReactElement<AvatarProps, string | React.JSXElementConstructor<AvatarProps>> | undefined,\n   name: string\n   description?: string\n}\n\nexport const AvatarShowcase = React.forwardRef<HTMLDivElement, AvatarShowcaseProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      avatar,\n      name,\n      description,\n      nameClassName,\n      descriptionClassName,\n      detailsContainerClassName,\n      containerClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <div\n            className={cn(\n               AvatarShowcaseAnatomy.container(),\n               containerClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            {avatar}\n            <div className={cn(AvatarShowcaseAnatomy.detailsContainer(), detailsContainerClassName)}>\n               <h1 className={cn(AvatarShowcaseAnatomy.name(), nameClassName)}>{name}</h1>\n               {!!description && <span className={cn(AvatarShowcaseAnatomy.description(), descriptionClassName)}>{description}</span>}\n            </div>\n         </div>\n      </>\n   )\n   \n})\n"
      },
      {
        "name": "avatar.tsx",
        "dir": "avatar",
        "content": "/**\n * Chalk UI - avatar/avatar.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useRef, useState } from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\n\nexport const AvatarAnatomy = defineStyleAnatomy({\n   body: cva(\"UI-Avatar__body inline-flex rounded-full justify-center align-center flex-shrink-0 bg-gray-400\", {\n      variants: {\n         size: {\n            sm: \"w-8 h-8\",\n            md: \"w-12 h-12\",\n            lg: \"w-16 h-16\",\n            xl: \"w-24 h-24\",\n            \"2xl\": \"w-32 h-32\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   fallbackIcon: cva(\"UI-Avatar__fallback-icon fill-gray-500\"),\n   image: cva(\"UI-Avatar__image w-full h-full object-cover rounded-full\"),\n   placeholder: cva(\"UI-Avatar__placeholder uppercase flex w-full h-full items-center justify-center bg-gray-600 text-gray-50 font-semibold rounded-full\", {\n      variants: {\n         size: {\n            sm: \"text-sm\",\n            md: \"text-md\",\n            lg: \"text-lg\",\n            xl: \"text-xl\",\n            \"2xl\": \"text-2xl\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n})\n\n\nexport interface AvatarProps extends React.ComponentPropsWithRef<\"div\">,\n   ComponentWithAnatomy<typeof AvatarAnatomy>,\n   VariantProps<typeof AvatarAnatomy.body> {\n   src?: string | null\n   placeholder?: string\n}\n\nexport const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      size,\n      src,\n      placeholder,\n      bodyClassName,\n      fallbackIconClassName,\n      imageClassName,\n      placeholderClassName,\n      ...rest\n   } = props\n   \n   const [displayImage, setDisplayImage] = useState(!!src && src?.length > 0)\n   \n   const imgRef = useRef<HTMLImageElement>(null)\n   \n   return (\n      <>\n         <div\n            className={cn(\n               AvatarAnatomy.body({ size }),\n               bodyClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            {(!displayImage && !placeholder) &&\n                <svg viewBox=\"0 0 128 128\" className={cn(AvatarAnatomy.fallbackIcon(), fallbackIconClassName)} role=\"img\" aria-label=\"avatar\">\n                    <path\n                        className=\"fill-gray-200\"\n                        d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n                    ></path>\n                    <path\n                        className=\"fill-gray-200\"\n                        d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n                    ></path>\n                </svg>}\n            {(!displayImage && placeholder) &&\n                <span className={cn(AvatarAnatomy.placeholder({ size }), placeholderClassName)}>{placeholder}</span>}\n            {displayImage && <img\n                ref={imgRef}\n                src={src ?? \"\"}\n                className={cn(AvatarAnatomy.image(), imageClassName)}\n                onError={e => {\n                   e.currentTarget.style.display = \"none\"\n                   setDisplayImage(false)\n                }}\n                onLoad={e => {\n                   e.currentTarget.style.display = \"block\"\n                   setDisplayImage(true)\n                }}\n            />}\n         </div>\n      </>\n   )\n   \n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "avatar",
        "content": "/**\n * Chalk UI - avatar/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./avatar\"\nexport * from \"./avatar-showcase\"\n"
      }
    ]
  },
  {
    "component": "badge",
    "files": [
      {
        "name": "badge.tsx",
        "dir": "badge",
        "content": "/**\n * Chalk UI - badge/badge.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { CSSProperties } from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const BadgeAnatomy = defineStyleAnatomy({\n   badge: cva(\"UI-Badge__badge inline-flex text-base w-[fit-content] overflow-hidden justify-center items-center gap-2\", {\n      variants: {\n         intent: {\n            gray: \"text-gray-800 bg-gray-100 __UI_DARK__ dark:text-gray-300 dark:bg-opacity-10\",\n            primary: \"text-brand-500 bg-brand-50 __UI_DARK__ dark:text-brand-300 dark:bg-opacity-10\",\n            success: \"text-green-500 bg-green-50 __UI_DARK__ dark:text-green-300 dark:bg-opacity-10\",\n            warning: \"text-orange-500 bg-orange-50 __UI_DARK__ dark:text-orange-300 dark:bg-opacity-10\",\n            alert: \"text-red-500 bg-red-50 __UI_DARK__ dark:text-red-300 dark:bg-opacity-10\",\n            blue: \"text-blue-500 bg-blue-50 __UI_DARK__ dark:text-blue-300 dark:bg-opacity-10\",\n            white: \"text-white bg-gray-800 __UI_DARK__ dark:text-white dark:bg-opacity-10\",\n            \"basic\": \"text-gray-900 bg-transparent\",\n            \"primary-solid\": \"text-white bg-brand-500\",\n            \"success-solid\": \"text-white bg-green-500\",\n            \"warning-solid\": \"text-white bg-orange-500\",\n            \"alert-solid\": \"text-white bg-red-500\",\n            \"blue-solid\": \"text-white bg-blue-500\",\n            \"gray-solid\": \"text-white bg-gray-500\",\n            \"white-solid\": \"text-gray-900 bg-white\",\n         },\n         size: {\n            sm: \"h-4 px-2  text-xs\",\n            md: \"h-6 px-3 text-xs\",\n            lg: \"h-7 px-3 text-md\",\n            xl: \"h-8 px-4 text-lg\",\n         },\n         tag: {\n            false: \"font-bold tracking-wide rounded-full uppercase\",\n            true: \"font-semibold rounded-md\",\n         },\n      },\n      defaultVariants: {\n         intent: \"primary\",\n         size: \"md\",\n      },\n   }),\n   closeButton: cva(\"UI-Badge__close-button text-lg -mr-1 cursor-pointer transition ease-in hover:opacity-60\"),\n   icon: cva(\"UI-Badge__icon inline-flex self-center flex-shrink-0\"),\n})\n\nexport interface BadgeProps extends React.ComponentPropsWithRef<\"span\">, VariantProps<typeof BadgeAnatomy.badge>,\n   ComponentWithAnatomy<typeof BadgeAnatomy> {\n   tag?: boolean,\n   isClosable?: boolean,\n   onClose?: () => void,\n   leftIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n   rightIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n   iconSpacing?: CSSProperties[\"marginRight\"]\n}\n\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      size,\n      intent,\n      tag = false,\n      isClosable,\n      onClose,\n      leftIcon,\n      rightIcon,\n      iconSpacing = \"0\",\n      badgeClassName,\n      closeButtonClassName,\n      iconClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <span\n            className={cn(\n               BadgeAnatomy.badge({ size, intent, tag }),\n               badgeClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            {leftIcon && <span className={cn(BadgeAnatomy.icon(), iconClassName)} style={{ marginRight: iconSpacing }}>{leftIcon}</span>}\n            \n            {children}\n            \n            {rightIcon && <span className={cn(BadgeAnatomy.icon(), iconClassName)} style={{ marginLeft: iconSpacing }}>{rightIcon}</span>}\n            \n            {isClosable && <span className={cn(BadgeAnatomy.closeButton(), closeButtonClassName)} onClick={onClose}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\">\n                    <path d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"></path>\n                </svg>\n            </span>}\n         </span>\n      </>\n   )\n   \n})\n\nBadge.displayName = \"Badge\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "badge",
        "content": "/**\n * Chalk UI - badge/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./badge\"\n"
      }
    ]
  },
  {
    "component": "basic-field",
    "files": [
      {
        "name": "basic-field-types.ts",
        "dir": "basic-field",
        "content": "/**\n * Chalk UI - basic-field/basic-field-types.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { BasicFieldOptions } from \".\"\n\nexport type ComponentWithBasicField<T> = T & BasicFieldOptions\n"
      },
      {
        "name": "basic-field.tsx",
        "dir": "basic-field",
        "content": "/**\n * Chalk UI - basic-field/basic-field.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { ShowOnly } from \"../show-only\"\n\nexport const BasicFieldAnatomy = defineStyleAnatomy({\n   fieldLabel: cva(\"UI-BasicField__fieldLabel block text-md sm:text-lg font-semibold self-start\", {\n      variants: {\n         hasError: {\n            true: \"text-red-500\",\n            false: null,\n         },\n      },\n   }),\n   fieldAsterisk: cva(\"UI-BasicField__fieldAsterisk ml-1 text-red-500 text-sm\"),\n   fieldDetails: cva(\"UI-BasicField__fieldDetails\"),\n   field: cva(\"UI-BasicField__field w-full space-y-1\"),\n   fieldHelpText: cva(\"UI-BasicField__fieldHelpText text-sm text-gray-500\"),\n   fieldErrorText: cva(\"UI-BasicField__fieldErrorText text-sm text-red-500\"),\n})\n\nexport interface BasicFieldOptions extends ComponentWithAnatomy<typeof BasicFieldAnatomy> {\n   id?: string | undefined\n   name?: string\n   label?: React.ReactNode\n   labelProps?: object\n   help?: React.ReactNode\n   error?: string\n   isRequired?: boolean\n   isDisabled?: boolean\n   isReadOnly?: boolean\n}\n\nexport function extractBasicFieldProps<Props extends BasicFieldOptions>(props: Props, id: string) {\n   const {\n      name,\n      label,\n      labelProps,\n      help,\n      error,\n      isRequired,\n      isDisabled = false,\n      isReadOnly = false,\n      fieldDetailsClassName,\n      fieldLabelClassName,\n      fieldClassName,\n      fieldErrorTextClassName,\n      fieldHelpTextClassName,\n      id: _id,\n      ...rest\n   } = props\n   return [\n      rest,\n      {\n         id: _id ?? id,\n         name,\n         label,\n         help,\n         error,\n         isDisabled,\n         isRequired,\n         isReadOnly,\n         fieldErrorTextClassName,\n         fieldHelpTextClassName,\n         fieldDetailsClassName,\n         fieldLabelClassName,\n         fieldClassName,\n         labelProps,\n      },\n   ] as [\n      Omit<Props,\n         \"label\" | \"name\" | \"help\" | \"error\" |\n         \"isDisabled\" | \"isRequired\" | \"isReadOnly\" |\n         \"fieldDetailsClassName\" | \"fieldLabelClassName\" | \"fieldClassName\" | \"fieldHelpTextClassName\" |\n         \"fieldErrorTextClassName\" | \"id\" | \"labelProps\"\n      >,\n         Omit<BasicFieldOptions, \"id\"> & {\n         id: string\n      }\n   ]\n}\n\nexport interface BasicFieldProps extends React.ComponentPropsWithRef<\"div\">, BasicFieldOptions {\n}\n\nexport const BasicField: React.FC<BasicFieldProps> = React.memo(React.forwardRef<HTMLDivElement, BasicFieldProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      labelProps,\n      id,\n      label,\n      error,\n      help,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n      fieldClassName,\n      fieldDetailsClassName,\n      fieldLabelClassName,\n      fieldAsteriskClassName,\n      fieldErrorTextClassName,\n      fieldHelpTextClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <div\n            className={cn(\n               BasicFieldAnatomy.field(),\n               className,\n               fieldClassName,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            <ShowOnly when={!!label}>\n               <label\n                  htmlFor={isDisabled ? undefined : id}\n                  className={cn(BasicFieldAnatomy.fieldLabel({ hasError: !!error }), fieldLabelClassName)}\n                  {...labelProps}\n               >\n                  {label}\n                  <ShowOnly when={isRequired}>\n                     <span className={cn(BasicFieldAnatomy.fieldAsterisk(), fieldAsteriskClassName)}>*</span>\n                  </ShowOnly>\n               </label>\n            </ShowOnly>\n            \n            {children}\n            \n            <ShowOnly when={!!help || !!error}>\n               <div className={cn(BasicFieldAnatomy.fieldDetails(), fieldDetailsClassName)}>\n                  {!!help && <p className={cn(BasicFieldAnatomy.fieldHelpText(), fieldHelpTextClassName)}>{help}</p>}\n                  {!!error && <p className={cn(BasicFieldAnatomy.fieldErrorText(), fieldErrorTextClassName)}>{error}</p>}\n               </div>\n            </ShowOnly>\n         </div>\n      </>\n   )\n   \n}))\n\nBasicField.displayName = \"BasicField\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "basic-field",
        "content": "/**\n * Chalk UI - basic-field/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./basic-field\"\nexport * from \"./basic-field-types\"\n"
      }
    ]
  },
  {
    "component": "button",
    "files": [
      {
        "name": "button.tsx",
        "dir": "button",
        "content": "/**\n * Chalk UI - button/button.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport React, { CSSProperties } from \"react\"\r\nimport { defineStyleAnatomy } from \"../core\"\r\n\r\nexport const ButtonAnatomy = defineStyleAnatomy({\r\n   button: cva([\r\n      \"UI-Button__button\",\r\n      \"shadow-sm whitespace-nowrap font-semibold rounded-md\",\r\n      \"inline-flex items-center text-white transition ease-in duration-100 text-center text-base justify-center\",\r\n   ], {\r\n      variants: {\r\n         intent: {\r\n            \"primary\": \"!bg-brand-500 hover:!bg-brand-600 active:!bg-brand-700 border border-transparent\",\r\n            \"primary-outline\": \"text-brand-500 border border-brand-200 !bg-transparent hover:border-brand-500 hover:!bg-brand-500 active:!bg-brand-600 hover:text-white __UI__Dark__ dark:text-brand-300 dark:hover:border-brand-500 dark:hover:text-white\",\r\n            \"primary-subtle\": \"text-brand-600 border border-brand-500 !bg-brand-50 border-transparent hover:!bg-brand-100 active:!bg-brand-50 __UI__Dark__ dark:text-brand-300 dark:!bg-opacity-10\",\r\n            \"primary-link\": \"shadow-none text-brand-500 border border-transparent !bg-transparent hover:underline active:text-brand-700 __UI__Dark__ dark:text-brand-300\",\r\n            \"primary-basic\": \"shadow-none text-brand-500 border border-transparent !bg-transparent hover:text-brand-600 active:text-brand-700 __UI__Dark__ dark:text-brand-300 dark:active:text-brand-200\",\r\n            \r\n            \"warning\": \"!bg-orange-500 hover:!bg-orange-600 active:!bg-orange-700 border border-transparent\",\r\n            \"warning-outline\": \"text-orange-500 border border-orange-200 !bg-transparent hover:!bg-orange-500 active:!bg-orange-600 hover:text-white __UI__Dark__ dark:text-orange-300 dark:hover:border-orange-500 dark:hover:text-white\",\r\n            \"warning-subtle\": \"text-orange-600 border border-orange-500 !bg-orange-50 border-transparent hover:!bg-orange-100 active:!bg-orange-50 __UI__Dark__ dark:text-orange-300 dark:!bg-opacity-10\",\r\n            \"warning-link\": \"shadow-none text-orange-500 border border-transparent !bg-transparent hover:underline active:text-orange-700 __UI__Dark__ dark:text-orange-300\",\r\n            \"warning-basic\": \"shadow-none text-orange-500 border border-transparent !bg-transparent hover:text-orange-600 active:text-orange-700 __UI__Dark__ dark:text-orange-300 dark:active:text-orange-200\",\r\n            \r\n            \"success\": \"!bg-green-500 hover:!bg-green-600 active:!bg-green-700 border border-transparent\",\r\n            \"success-outline\": \"text-green-500 border border-green-200 !bg-transparent hover:!bg-green-500 active:!bg-green-600 hover:text-white __UI__Dark__ dark:text-green-300 dark:hover:border-green-500 dark:hover:text-white\",\r\n            \"success-subtle\": \"text-green-600 border border-green-500 !bg-green-50 border-transparent hover:!bg-green-100 active:!bg-green-50 __UI__Dark__ dark:text-green-300 dark:!bg-opacity-10\",\r\n            \"success-link\": \"shadow-none text-green-500 border border-transparent !bg-transparent hover:underline active:text-green-700 __UI__Dark__ dark:text-green-300\",\r\n            \"success-basic\": \"shadow-none text-green-500 border border-transparent !bg-transparent hover:text-green-600 active:text-green-700 __UI__Dark__ dark:text-green-300 dark:active:text-green-200\",\r\n            \r\n            \"alert\": \"!bg-red-500 hover:!bg-red-600 active:!bg-red-700 border border-transparent\",\r\n            \"alert-outline\": \"text-red-500 border border-red-200 !bg-transparent hover:!bg-red-500 active:!bg-red-600 hover:text-white __UI__Dark__ dark:text-red-300 dark:hover:border-red-500 dark:hover:text-white\",\r\n            \"alert-subtle\": \"text-red-600 border border-red-500 !bg-red-50 border-transparent hover:!bg-red-100 active:!bg-red-50 __UI__Dark__ dark:text-red-300 dark:!bg-opacity-10\",\r\n            \"alert-link\": \"shadow-none text-red-500 border border-transparent !bg-transparent hover:underline active:text-red-700 __UI__Dark__ dark:text-red-300\",\r\n            \"alert-basic\": \"shadow-none text-red-500 border border-transparent !bg-transparent hover:text-red-600 active:text-red-700 __UI__Dark__ dark:text-red-300 dark:active:text-red-200\",\r\n            \r\n            \"gray\": \"!bg-gray-500 hover:!bg-gray-600 active:!bg-gray-700 border border-transparent\",\r\n            \"gray-outline\": \"text-gray-600 border border-gray-200 !bg-transparent hover:!bg-gray-100 active:!bg-gray-200 __UI__DARK__ dark:text-gray-300 dark:border-gray-500 dark:hover:!bg-gray-500 dark:active:!bg-gray-500 dark:hover:text-gray-100\",\r\n            \"gray-subtle\": \"text-gray-600 border border-gray-500 !bg-gray-50 border-transparent hover:!bg-gray-100 active:!bg-gray-50 __UI__Dark__ dark:text-gray-300 dark:!bg-opacity-10\",\r\n            \"gray-link\": \"shadow-none text-gray-500 border border-transparent !bg-transparent hover:underline active:text-gray-700 __UI__Dark__ dark:text-gray-300\",\r\n            \"gray-basic\": \"shadow-none text-gray-500 border border-transparent !bg-transparent hover:text-gray-600 active:text-gray-700 __UI__Dark__ dark:text-gray-300 dark:active:text-gray-200\",\r\n            \r\n            \"white\": \"text-black !bg-white hover:!bg-gray-100 active:!bg-!bg-gray-200 border border-transparent\",\r\n            \"white-outline\": \"text-white border border-gray-200 !bg-transparent hover:!bg-white hover:text-black active:!bg-gray-100 active:text-black\",\r\n            \"white-subtle\": \"text-white !bg-black !bg-opacity-20 hover:!bg-opacity-25 active:!bg-!bg-opacity-30 border border-transparent\",\r\n            \"white-link\": \"shadow-none text-white border border-transparent !bg-transparent hover:underline active:text-gray-200\",\r\n            \"white-basic\": \"shadow-none text-white border border-transparent !bg-transparent hover:text-white-200 active:text-white-300\",\r\n         },\r\n         rounded: {\r\n            true: \"rounded-[999px]\",\r\n            false: null,\r\n         },\r\n         isUppercase: {\r\n            true: \"uppercase\",\r\n            false: null,\r\n         },\r\n         isDisabled: {\r\n            true: \"opacity-50 pointer-events-none\",\r\n            false: null,\r\n         },\r\n         contentWidth: {\r\n            true: \"w-[fit-content]\",\r\n            false: null,\r\n         },\r\n         size: {\r\n            xs: \"text-sm h-6 px-2\",\r\n            sm: \"text-sm h-8 px-3\",\r\n            md: \"h-10 px-4\",\r\n            lg: \"h-12 px-6\",\r\n            xl: \"text-xl h-14 px-8\",\r\n         },\r\n      },\r\n      defaultVariants: {\r\n         intent: \"primary\",\r\n         size: \"md\",\r\n      },\r\n   }),\r\n})\r\n\r\n\r\nexport interface ButtonProps extends React.ComponentPropsWithRef<\"button\">, VariantProps<typeof ButtonAnatomy.button> {\r\n   isLoading?: boolean,\r\n   isDisabled?: boolean,\r\n   isUppercase?: boolean,\r\n   leftIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\r\n   rightIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\r\n   iconSpacing?: CSSProperties[\"marginInline\"],\r\n   iconClassName?: string\r\n}\r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\r\n   \r\n   const {\r\n      children,\r\n      size,\r\n      className,\r\n      rounded = false,\r\n      contentWidth = false,\r\n      intent,\r\n      leftIcon,\r\n      rightIcon,\r\n      iconSpacing = \"0.5rem\",\r\n      isUppercase,\r\n      isLoading,\r\n      isDisabled,\r\n      iconClassName,\r\n      ...rest\r\n   } = props\r\n   \r\n   const ButtonContent = <>\r\n      {leftIcon &&\r\n          <span className={cn(\"inline-flex self-center flex-shrink-0\", iconClassName)} style={{ marginInlineEnd: iconSpacing }}>{leftIcon}</span>}\r\n      {children}\r\n      {rightIcon &&\r\n          <span className={cn(\"inline-flex self-center flex-shrink-0\", iconClassName)} style={{ marginInlineStart: iconSpacing }}>{rightIcon}</span>}\r\n   </>\r\n   \r\n   return (\r\n      <>\r\n         \r\n         <button\r\n            type=\"button\"\r\n            className={cn(\r\n               ButtonAnatomy.button({\r\n                  size,\r\n                  intent,\r\n                  contentWidth,\r\n                  isUppercase,\r\n                  isDisabled: isDisabled || isLoading,\r\n               }),\r\n               className,\r\n            )}\r\n            {...rest}\r\n            ref={ref}\r\n         >\r\n            {isLoading ? (\r\n               <svg\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  fill=\"currentColor\"\r\n                  className=\"animate-spin\"\r\n                  viewBox=\"0 0 1792 1792\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n               >\r\n                  <path d=\"M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z\">\r\n                  </path>\r\n               </svg>\r\n            ) : ButtonContent}\r\n         </button>\r\n      </>\r\n   )\r\n   \r\n})\r\n\r\nButton.displayName = \"Button\"\r\n"
      },
      {
        "name": "close-button.tsx",
        "dir": "button",
        "content": "/**\n * Chalk UI - button/close-button.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport React from \"react\"\nimport { IconButton, IconButtonProps } from \".\"\n\nexport interface CloseButtonProps extends IconButtonProps {\n   icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n}\n\nexport const CloseButton = React.forwardRef<HTMLButtonElement, CloseButtonProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      icon = undefined,\n      size = \"sm\",\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <IconButton\n            type=\"button\"\n            intent=\"gray-outline\"\n            size={size}\n            className={cn(\n               \"rounded-full text-2xl\",\n               className,\n            )}\n            icon={<span>\n               <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\">\n                  <path d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"></path>\n               </svg>\n            </span>}\n            {...rest}\n            ref={ref}\n         />\n      </>\n   )\n   \n})\n\nCloseButton.displayName = \"CloseButton\"\n"
      },
      {
        "name": "icon-button.tsx",
        "dir": "button",
        "content": "/**\n * Chalk UI - button/icon-button.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { Button, ButtonProps } from \".\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const IconButtonAnatomy = defineStyleAnatomy({\n   iconButton: cva(\"UI-IconButton__icon-button p-0\", {\n      variants: {\n         size: {\n            xs: \"text-xl h-6 w-6\",\n            sm: \"text-xl h-8 w-8\",\n            md: \"text-2xl h-10 w-10\",\n            lg: \"text-3xl h-12 w-12\",\n            xl: \"text-4xl h-14 w-14\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n})\n\n\nexport interface IconButtonProps extends Omit<ButtonProps, \"leftIcon\" | \"rightIcon\" | \"iconSpacing\" | \"isUppercase\">,\n   VariantProps<typeof IconButtonAnatomy.iconButton>, ComponentWithAnatomy<typeof IconButtonAnatomy> {\n   icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      icon,\n      size,\n      iconButtonClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <Button\n            className={cn(\n               IconButtonAnatomy.iconButton({ size }),\n               iconButtonClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            {icon}\n         </Button>\n      </>\n   )\n   \n})\n\nIconButton.displayName = \"IconButton\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "button",
        "content": "/**\n * Chalk UI - button/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./button\"\nexport * from \"./icon-button\"\nexport * from \"./close-button\"\n"
      }
    ]
  },
  {
    "component": "calendar",
    "files": [
      {
        "name": "calendar-cell.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/calendar-cell.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { CalendarDate, DateValue, getDayOfWeek, isSameDay, isSameMonth } from \"@internationalized/date\"\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { useRef } from \"react\"\r\nimport { mergeProps, useCalendarCell, useFocusRing } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\nimport { defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\n\r\nexport const CalendarCellAnatomy = defineStyleAnatomy({\r\n   cell: cva(\"UI-CalendarCell__cell relative\", {\r\n      variants: {\r\n         isFocusVisible: { true: \"z-10\", false: \"z-0\" },\r\n      },\r\n   }),\r\n   date: cva(\"UI-CalendarCell__date w-full h-full rounded-full flex items-center justify-center text-gray-600 dark:text-gray-300 font-medium\", {\r\n      variants: {\r\n         isDisabled: { true: \"text-gray-400 cursor-default\", false: null },\r\n         isUnavailable: { true: \"text-red-300 cursor-default\", false: null },\r\n         isSelectionStart: { true: \"bg-brand-600 text-white hover:bg-brand-700\", false: null },\r\n         isSelectionEnd: { true: \"bg-brand-600 text-white hover:bg-brand-700\", false: null },\r\n         isSelected: { true: null, false: null },\r\n         isFocusVisible: { true: \"ring-2 group-focus:z-2 ring-brand-600 ring-offset-2\", false: null },\r\n      },\r\n      compoundVariants: [\r\n         { isDisabled: false, isUnavailable: false, className: \"cursor-pointer\" },\r\n         { isSelected: true, isSelectionStart: false, isSelectionEnd: false, className: \"hover:bg-brand-400\" },\r\n         { isSelected: false, isDisabled: false, isUnavailable: false, className: \"hover:bg-brand-100\" },\r\n      ],\r\n   }),\r\n   button: cva(\"UI-CalendarCell__button w-10 h-10 outline-none group\", {\r\n      variants: {\r\n         isRoundedLeft: { true: \"rounded-l-full\", false: null },\r\n         isRoundedRight: { true: \"rounded-r-full\", false: null },\r\n         isSelected: { true: \"bg-brand-100 dark:bg-opacity-10\", false: null },\r\n         isDisabled: { true: \"disabled\", false: null },\r\n         isUnavailable: { true: \"disabled\", false: null },\r\n      },\r\n   }),\r\n})\r\n\r\ninterface CalendarCellProps {\r\n   state: CalendarState | RangeCalendarState\r\n   date: CalendarDate\r\n   currentMonth: DateValue\r\n}\r\n\r\nexport function CalendarCell({ state, date, currentMonth }: CalendarCellProps) {\r\n   \r\n   let ref = useRef<HTMLDivElement>(null)\r\n   let {\r\n      cellProps,\r\n      buttonProps,\r\n      isSelected,\r\n      isDisabled,\r\n      isUnavailable,\r\n      formattedDate,\r\n   } = useCalendarCell({ date }, state, ref)\r\n   \r\n   let isOutsideMonth = !isSameMonth(currentMonth, date)\r\n   \r\n   // The start and end date of the selected range will have\r\n   // an emphasized appearance.\r\n   let isSelectionStart = (state as RangeCalendarState).highlightedRange\r\n      ? isSameDay(date, (state as RangeCalendarState).highlightedRange.start)\r\n      : isSelected\r\n   let isSelectionEnd = (state as RangeCalendarState).highlightedRange\r\n      ? isSameDay(date, (state as RangeCalendarState).highlightedRange.end)\r\n      : isSelected\r\n   \r\n   // We add rounded corners on the left for the first day of the month,\r\n   // the first day of each week, and the start date of the selection.\r\n   // We add rounded corners on the right for the last day of the month,\r\n   // the last day of each week, and the end date of the selection.\r\n   let { countryLocale } = useUILocaleConfig()\r\n   let dayOfWeek = getDayOfWeek(date, countryLocale)\r\n   let isRoundedLeft =\r\n      isSelected && (isSelectionStart)\r\n   let isRoundedRight =\r\n      isSelected &&\r\n      (isSelectionEnd)\r\n   \r\n   let { focusProps, isFocusVisible } = useFocusRing()\r\n   \r\n   return (\r\n      <td\r\n         {...cellProps}\r\n         className={cn(CalendarCellAnatomy.cell({ isFocusVisible }))}\r\n      >\r\n         <div\r\n            {...mergeProps(buttonProps, focusProps)}\r\n            ref={ref}\r\n            hidden={isOutsideMonth}\r\n            className={cn(CalendarCellAnatomy.button({ isDisabled, isSelected, isUnavailable, isRoundedLeft, isRoundedRight }))}\r\n         >\r\n            <div\r\n               className={cn(CalendarCellAnatomy.date({\r\n                  isSelected, isSelectionEnd, isSelectionStart, isUnavailable, isDisabled, isFocusVisible,\r\n               }))}\r\n            >\r\n               {formattedDate}\r\n            </div>\r\n         </div>\r\n      </td>\r\n   )\r\n}\r\n\r\nCalendarCell.displayName = \"CalendarCell\"\r\n"
      },
      {
        "name": "calendar-grid.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/calendar-grid.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { DateDuration, endOfMonth } from \"@internationalized/date\"\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport getWeeksInMonth from \"date-fns/getWeeksInMonth\"\r\nimport { useMemo } from \"react\"\r\nimport { useCalendarGrid } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\nimport { defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { CalendarCell } from \"./calendar-cell\"\r\nimport { getDateLocaleLibrary } from \"./locale\"\r\n\r\nexport const CalendarGridAnatomy = defineStyleAnatomy({\r\n   table: cva(\"UI-CalendarGrid__table flex-1\"),\r\n   head: cva(\"UI-CalendarGrid__head text-gray-600 text-center\"),\r\n})\r\n\r\ninterface CalendarGridProps {\r\n   state: CalendarState | RangeCalendarState\r\n   offset: DateDuration\r\n   locale?: string\r\n}\r\n\r\nexport function CalendarGrid({ locale, state, offset = {} }: CalendarGridProps) {\r\n   let { countryLocale } = useUILocaleConfig()\r\n   let startDate = state.visibleRange.start.add(offset)\r\n   let endDate = endOfMonth(startDate)\r\n   let { gridProps, headerProps, weekDays } = useCalendarGrid(\r\n      {\r\n         startDate,\r\n         endDate,\r\n      },\r\n      state,\r\n   )\r\n   \r\n   const _locale = locale ?? countryLocale\r\n   \r\n   // Get the number of weeks in the month so we can render the proper number of rows.\r\n   let weeksInMonth = useMemo(() => getWeeksInMonth(startDate.toDate(state.timeZone), { locale: getDateLocaleLibrary(_locale) }), [_locale])\r\n   \r\n   const frWeekdays = useMemo(() => [\"L\", \"M\", \"M\", \"J\", \"V\", \"S\", \"D\"], [])\r\n   \r\n   weekDays = useMemo(() => {\r\n      const [first, ...r] = weekDays\r\n      const arr = [...r!, first!]\r\n      if (_locale.includes(\"fr\")) {\r\n         return frWeekdays\r\n      }\r\n      return arr\r\n   }, [_locale])\r\n   \r\n   return (\r\n      <table {...gridProps} cellPadding=\"0\" className={cn(CalendarGridAnatomy.table())}>\r\n         <thead {...headerProps} className={cn(CalendarGridAnatomy.head())}>\r\n         <tr>\r\n            {weekDays.map((day, index) => (\r\n               <th key={index}>{day}</th>\r\n            ))}\r\n         </tr>\r\n         </thead>\r\n         <tbody>\r\n         {[...new Array(weeksInMonth).keys()].map((weekIndex) => (\r\n            <tr key={weekIndex}>\r\n               {state\r\n                  .getDatesInWeek(weekIndex, startDate)\r\n                  .map((date, i) =>\r\n                     date ? (\r\n                        <CalendarCell\r\n                           key={i}\r\n                           state={state}\r\n                           date={date}\r\n                           currentMonth={startDate}\r\n                        />\r\n                     ) : (\r\n                        <td key={i} />\r\n                     ),\r\n                  )}\r\n            </tr>\r\n         ))}\r\n         </tbody>\r\n      </table>\r\n   )\r\n}\r\n\r\nCalendarGrid.displayName = \"CalendarGrid\"\r\n"
      },
      {
        "name": "calendar-header.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/calendar-header.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport _capitalize from \"lodash/capitalize\"\r\nimport React from \"react\"\r\nimport { AriaButtonProps, useDateFormatter, VisuallyHidden } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\nimport { IconButton } from \"../button\"\r\nimport { useUILocaleConfig } from \"../core\"\r\n\r\ninterface CalendarHeaderProps {\r\n   state: CalendarState | RangeCalendarState\r\n   calendarProps: any\r\n   prevButtonProps: AriaButtonProps\r\n   nextButtonProps: AriaButtonProps\r\n   locale?: string\r\n}\r\n\r\nexport function CalendarHeader({\r\n   state,\r\n   calendarProps,\r\n   prevButtonProps,\r\n   nextButtonProps,\r\n   locale,\r\n}: CalendarHeaderProps) {\r\n   const { countryLocale } = useUILocaleConfig()\r\n   let monthDateFormatter = useDateFormatter({\r\n      month: \"long\",\r\n      year: \"numeric\",\r\n      timeZone: state.timeZone,\r\n   })\r\n   \r\n   const { onPress: prevButtonOnPress, ...prevButtonRest } = prevButtonProps\r\n   const { onPress: nextButtonOnPress, ...nextButtonRest } = nextButtonProps\r\n   \r\n   return (\r\n      <div className=\"flex items-center py-4 text-center\">\r\n         {/* Add a screen reader only description of the entire visible range rather than\r\n          * a separate heading above each month grid. This is placed first in the DOM order\r\n          * so that it is the first thing a touch screen reader user encounters.\r\n          * In addition, VoiceOver on iOS does not announce the aria-label of the grid\r\n          * elements, so the aria-label of the Calendar is included here as well. */}\r\n         <VisuallyHidden>\r\n            <h2>{calendarProps[\"aria-label\"]}</h2>\r\n         </VisuallyHidden>\r\n         <IconButton\r\n            size=\"sm\"\r\n            intent=\"primary-subtle\"\r\n            icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n               <path d=\"M9.78 12.78a.75.75 0 0 1-1.06 0L4.47 8.53a.75.75 0 0 1 0-1.06l4.25-4.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L6.06 8l3.72 3.72a.75.75 0 0 1 0 1.06Z\"></path>\r\n            </svg>)}\r\n            rounded {...prevButtonRest} onClick={e => {\r\n            e.preventDefault()\r\n            prevButtonOnPress && prevButtonOnPress(e as any)\r\n         }}\r\n         />\r\n         <h2\r\n            // We have a visually hidden heading describing the entire visible range,\r\n            // and the calendar itself describes the individual month\r\n            // so we don't need to repeat that here for screen reader users.\r\n            aria-hidden\r\n            className=\"flex-1 align-center font-bold text-md text-center\"\r\n         >\r\n            {/*{monthDateFormatter.format(*/}\r\n            {/*   state.visibleRange.start.toDate(state.timeZone),*/}\r\n            {/*)}*/}\r\n            {_capitalize(Intl.DateTimeFormat((locale ?? countryLocale), {\r\n               month: \"long\", year: \"numeric\",\r\n            }).format(state.visibleRange.start.toDate(state.timeZone)))}\r\n         </h2>\r\n         <h2\r\n            aria-hidden\r\n            className=\"flex-1 align-center font-bold text-md text-center\"\r\n         >\r\n            {/*{monthDateFormatter.format(*/}\r\n            {/*   state.visibleRange.start.add({ months: 1 }).toDate(state.timeZone),*/}\r\n            {/*)}*/}\r\n            {_capitalize(Intl.DateTimeFormat((locale ?? countryLocale), {\r\n               month: \"long\", year: \"numeric\",\r\n            }).format(state.visibleRange.start.add({ months: 1 }).toDate(state.timeZone)))}\r\n         </h2>\r\n         <IconButton\r\n            size=\"sm\"\r\n            intent=\"primary-subtle\"\r\n            icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n               <path d=\"M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z\"></path>\r\n            </svg>)}\r\n            rounded {...nextButtonRest} onClick={e => {\r\n            e.preventDefault()\r\n            nextButtonOnPress && nextButtonOnPress(e as any)\r\n         }}\r\n         />\r\n      </div>\r\n   )\r\n}\r\n\r\nCalendarHeader.displayName = \"CalendarHeader\"\r\n"
      },
      {
        "name": "calendar.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/calendar.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport _capitalize from \"lodash/capitalize\"\r\nimport { useRef } from \"react\"\r\nimport { useCalendar } from \"react-aria\"\r\nimport { CalendarStateOptions, useCalendarState } from \"react-stately\"\r\nimport { IconButton } from \"../button\"\r\nimport { defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { CalendarGrid } from \"./calendar-grid\"\r\n\r\nexport const CalendarAnatomy = defineStyleAnatomy({\r\n   container: cva(\"UI-Calendar__container inline-block text-gray-800 dark:text-gray-200\"),\r\n   header: cva(\"UI-Calendar__header flex items-center gap-2 pb-4 w-full justify-between\"),\r\n   title: cva(\"UI-Calendar__title flex-none font-bold text-lg ml-2 w-[fit-content]\"),\r\n})\r\n\r\nexport function Calendar({ locale, ...props }: Omit<CalendarStateOptions, \"createCalendar\" | \"locale\"> & { locale?: string }) {\r\n   \r\n   let { countryLocale } = useUILocaleConfig()\r\n   let state = useCalendarState({\r\n      ...props,\r\n      locale: locale ?? countryLocale,\r\n      createCalendar,\r\n   })\r\n   \r\n   \r\n   let ref = useRef<HTMLDivElement>(null)\r\n   let {\r\n      calendarProps,\r\n      prevButtonProps: { onPress: prevButtonOnPress, ...prevButtonProps },\r\n      nextButtonProps: { onPress: nextButtonOnPress, ...nextButtonProps },\r\n      title,\r\n   } = useCalendar(\r\n      props,\r\n      state,\r\n   )\r\n   \r\n   return (\r\n      <div {...calendarProps} ref={ref} className={cn(CalendarAnatomy.container())}>\r\n         <div className={cn(CalendarAnatomy.header())}>\r\n            <IconButton\r\n               size=\"sm\"\r\n               intent=\"primary-subtle\"\r\n               icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                  <path d=\"M9.78 12.78a.75.75 0 0 1-1.06 0L4.47 8.53a.75.75 0 0 1 0-1.06l4.25-4.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L6.06 8l3.72 3.72a.75.75 0 0 1 0 1.06Z\"></path>\r\n               </svg>)}\r\n               rounded\r\n               {...prevButtonProps}\r\n               onClick={e => {\r\n                  e.preventDefault()\r\n                  prevButtonOnPress && prevButtonOnPress(e as any)\r\n               }}\r\n            />\r\n            <h2 className={cn(CalendarAnatomy.title())}>{_capitalize(Intl.DateTimeFormat(countryLocale, {\r\n               month: \"long\", year: \"numeric\",\r\n            }).format(state.visibleRange.start.toDate(state.timeZone)))}</h2>\r\n            <IconButton\r\n               size=\"sm\"\r\n               intent=\"primary-subtle\"\r\n               icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                  <path d=\"M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z\"></path>\r\n               </svg>)}\r\n               rounded\r\n               {...nextButtonProps}\r\n               onClick={e => {\r\n                  e.preventDefault()\r\n                  nextButtonOnPress && nextButtonOnPress(e as any)\r\n               }}\r\n            />\r\n         </div>\r\n         <CalendarGrid state={state} offset={{}} />\r\n      </div>\r\n   )\r\n}\r\n\r\nCalendar.displayName = \"Calendar\"\r\n\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./calendar\"\nexport * from \"./calendar-cell\"\nexport * from \"./calendar-header\"\nexport * from \"./calendar-grid\"\nexport * from \"./range-calendar\"\nexport { getDateLocaleLibrary } from \"./locale\"\n"
      },
      {
        "name": "locale.ts",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/locale.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport enUS from \"date-fns/locale/en-US\"\nimport fr from \"date-fns/locale/fr\"\n\nexport const getDateLocaleLibrary = (locale: string) => locale.includes(\"fr\") ? fr : enUS\n"
      },
      {
        "name": "range-calendar.tsx",
        "dir": "calendar",
        "content": "/**\n * Chalk UI - calendar/range-calendar.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { useRef } from \"react\"\r\nimport { useRangeCalendar } from \"react-aria\"\r\nimport { RangeCalendarStateOptions, useRangeCalendarState } from \"react-stately\"\r\nimport { useUILocaleConfig } from \"../core\"\r\nimport { CalendarGrid } from \"./calendar-grid\"\r\nimport { CalendarHeader } from \"./calendar-header\"\r\n\r\n\r\nexport function RangeCalendar({ locale, ...props }: Omit<RangeCalendarStateOptions, \"createCalendar\" | \"locale\"> & { locale?: string }) {\r\n   let { countryLocale } = useUILocaleConfig()\r\n   let state = useRangeCalendarState({\r\n      ...props,\r\n      visibleDuration: { months: 2 },\r\n      locale: locale ?? countryLocale,\r\n      createCalendar,\r\n   })\r\n   \r\n   let ref = useRef<HTMLDivElement>(null)\r\n   let {\r\n      calendarProps,\r\n      prevButtonProps,\r\n      nextButtonProps,\r\n   } = useRangeCalendar(\r\n      props,\r\n      state,\r\n      ref,\r\n   )\r\n   \r\n   return (\r\n      <div {...calendarProps} ref={ref} className=\"inline-block\">\r\n         <CalendarHeader\r\n            state={state}\r\n            calendarProps={calendarProps}\r\n            prevButtonProps={prevButtonProps}\r\n            nextButtonProps={nextButtonProps}\r\n         />\r\n         <div className=\"flex items-center gap-2 pb-4 w-[fit-content]\">\r\n            <div className=\"flex flex-col md:flex-row gap-8\">\r\n               <CalendarGrid state={state} offset={{}} />\r\n               <CalendarGrid state={state} offset={{ months: 1 }} />\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nRangeCalendar.displayName = \"RangeCalendar\"\r\n"
      }
    ]
  },
  {
    "component": "checkbox",
    "files": [
      {
        "name": "checkbox-group.tsx",
        "dir": "checkbox",
        "content": "/**\n * Chalk UI - checkbox/checkbox-group.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport React, { createContext, useCallback, useContext, useEffect, useId, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Checkbox, CheckboxProps } from \"./checkbox\"\n\ninterface CheckboxGroupContextValue {\n   group_selectedValues: string[]\n   group_size: CheckboxProps[\"size\"]\n   \n   group_handleValueChange(value: string, isChecked: boolean | \"indeterminate\"): void\n}\n\nconst CheckboxGroupContext = createContext<CheckboxGroupContextValue | null>(null)\nexport const CheckboxGroupProvider = CheckboxGroupContext.Provider\nexport const useCheckboxGroupContext = () => useContext(CheckboxGroupContext)\n\nexport interface CheckboxGroupProps extends BasicFieldOptions {\n   defaultValues?: string[]\n   onChange?: (values: string[]) => void\n   size?: CheckboxProps[\"size\"]\n   stackClassName?: string\n   checkboxRootLabelClassName?: string\n   checkboxLabelClassName?: string\n   checkboxControlClassName?: string\n   checkboxIconClassName?: string\n   options: { value: string, label?: string }[]\n}\n\nexport const CheckboxGroup = React.forwardRef<HTMLDivElement, CheckboxGroupProps>((props, ref) => {\n   \n   const [{\n      defaultValues = [],\n      onChange,\n      stackClassName,\n      checkboxLabelClassName,\n      checkboxControlClassName,\n      checkboxRootLabelClassName,\n      checkboxIconClassName,\n      options,\n      size = undefined,\n   }, basicFieldProps] = extractBasicFieldProps<CheckboxGroupProps>(props, useId())\n   \n   const [selectedValues, setSelectedValues] = useState<string[]>(defaultValues)\n   \n   useEffect(() => {\n      if (defaultValues !== selectedValues) {\n         onChange && onChange(selectedValues)\n      }\n   }, [selectedValues])\n   \n   const handleValueChange = useCallback((value: string, isChecked: boolean | \"indeterminate\") => {\n      setSelectedValues(p => {\n         let newArr = [...p]\n         if (isChecked === true) {\n            if (p.indexOf(value) === -1) newArr.push(value)\n         } else if (isChecked === false) {\n            newArr = newArr.filter(v => v !== value)\n         }\n         return newArr\n      })\n   }, [selectedValues])\n   \n   return (\n      <>\n         <CheckboxGroupProvider value={{ group_selectedValues: selectedValues, group_handleValueChange: handleValueChange, group_size: size }}>\n            <BasicField\n               {...basicFieldProps}\n               ref={ref}\n            >\n               <div className={cn(\"gap-1\", stackClassName)}>\n                  {options.map((opt) => (\n                     <Checkbox\n                        key={opt.value}\n                        label={opt.label}\n                        value={opt.value}\n                        error={basicFieldProps.error}\n                        noErrorMessage\n                        labelClassName={checkboxLabelClassName}\n                        controlClassName={checkboxControlClassName}\n                        rootLabelClassName={checkboxRootLabelClassName}\n                        iconClassName={checkboxIconClassName}\n                        isDisabled={basicFieldProps.isDisabled}\n                        isReadOnly={basicFieldProps.isReadOnly}\n                     />\n                  ))}\n               </div>\n            </BasicField>\n         </CheckboxGroupProvider>\n      </>\n   )\n   \n})\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"
      },
      {
        "name": "checkbox.tsx",
        "dir": "checkbox",
        "content": "/**\n * Chalk UI - checkbox/checkbox.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport * as checkbox from \"@zag-js/checkbox\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useId, useMemo, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\n\nexport const CheckboxAnatomy = defineStyleAnatomy({\n   control: cva([\n      \"UI-Checkbox__control\",\n      \"inline-flex justify-center items-center border rounded cursor-pointer transition duration-10\",\n      // Light\n      \"bg-white border-gray-300 hover:bg-brand-100 hover:text-brand-100\",\n      \"data-checked:bg-brand-500 data-checked:border-brand-500\",\n      \"data-disabled:bg-gray-100 data-disabled:border-gray-200 data-disabled:cursor-default\",\n      \"data-disabled:data-checked:bg-brand-100  data-disabled:data-checked:border-brand-100\",\n      // Dark\n      \"dark:bg-gray-700 dark:border-gray-700 dark:hover:bg-gray-700\",\n      \"dark:data-checked:bg-brand-500 dark:data-disabled:bg-gray-800 dark:data-disabled:border-gray-800\",\n   ], {\n      variants: {\n         size: {\n            md: \"h-5 w-5 text-xs\",\n            lg: \"h-6 w-6 text-sm\",\n         },\n         hasError: {\n            true: \"border-red-500 dark:border-red-500\",\n            false: null,\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   label: cva([\n      \"UI-Checkbox_label\",\n      \"font-normal\",\n      \"data-disabled:text-gray-300\",\n   ], {\n      variants: {\n         size: {\n            md: \"text-md\",\n            lg: \"text-lg\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   rootLabel: cva(\"UI-Checkbox__rootLabel inline-flex gap-2 items-center\"),\n   icon: cva(\"UI-Checkbox__icon text-white\", {\n      variants: {\n         untouchable: {\n            true: null,\n            false: null,\n         },\n         isChecked: {\n            true: null,\n            false: null,\n         },\n      },\n      compoundVariants: [\n         { untouchable: true, isChecked: false, className: \"text-gray-100 dark:text-gray-800 dark:opacity-0\" },\n         { untouchable: true, isChecked: true, className: \"text-gray-100 dark:text-gray-800\" },\n         { untouchable: false, isChecked: false, className: \"dark:opacity-0\" },\n      ],\n   }),\n})\n\nexport interface CheckboxProps extends ComponentWithAnatomy<typeof CheckboxAnatomy>, VariantProps<typeof CheckboxAnatomy.label>,\n   BasicFieldOptions {\n   defaultChecked?: boolean\n   onChange?: (value: boolean | \"indeterminate\") => void\n   value?: string\n   controlClassName?: string\n   labelClassName?: string\n   rootLabelClassName?: string\n   noErrorMessage?: boolean\n}\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => {\n   \n   const [{\n      size = \"md\",\n      value,\n      defaultChecked = false,\n      noErrorMessage = false,\n      onChange,\n      controlClassName,\n      labelClassName,\n      rootLabelClassName,\n      iconClassName,\n   }, { id, error, label, ...basicFieldProps }] = extractBasicFieldProps<CheckboxProps>(props, useId())\n   \n   const groupContext = useCheckboxGroupContext()\n   \n   const _default = useMemo(() => {\n      let _checked: boolean\n      if (!!value && !!groupContext?.group_selectedValues.length)\n         _checked = groupContext?.group_selectedValues.includes(value)\n      else\n         _checked = defaultChecked\n      \n      return _checked\n   }, [])\n   \n   const [control, setControl] = useState<boolean>(_default)\n   \n   \n   const [state, send] = useMachine(checkbox.machine({\n      id: id,\n      name: basicFieldProps.name,\n      disabled: basicFieldProps.isDisabled,\n      readOnly: basicFieldProps.isReadOnly,\n      checked: control,\n      onChange({ checked: UNUSED_checked }) {\n         /**\n          * /!\\ Use React to control that state of the component\n          * since the value provided by the machine's `onChange` is duplicated\n          */\n         \n         setControl(s => {\n            if (groupContext?.group_handleValueChange && value) {\n               groupContext.group_handleValueChange(value, !s)\n            }\n            onChange && onChange(!s)\n            return !s\n         })\n         \n         // if (groupContext?.group_handleValueChange && value) {\n         //    groupContext.group_handleValueChange(value, checked)\n         // }\n         // onChange && onChange(checked)\n      },\n   }))\n   \n   const api = checkbox.connect(state, send, normalizeProps)\n   \n   const _size = groupContext?.group_size ?? size\n   \n   return (\n      <>\n         <BasicField\n            id={api.inputProps.id}\n            error={noErrorMessage ? undefined : error}\n            {...basicFieldProps} // We do not include basic id, label and error\n         >\n            <label className={cn(CheckboxAnatomy.rootLabel(), rootLabelClassName)} {...api.rootProps}>\n               <input type=\"checkbox\" {...api.inputProps} ref={ref} />\n               <div\n                  className={cn(\n                     CheckboxAnatomy.control({ size: _size, hasError: !!error }),\n                     controlClassName,\n                  )} {...api.controlProps}>\n                  <span>\n                     <svg\n                        className={cn(CheckboxAnatomy.icon({\n                           untouchable: !!basicFieldProps.isDisabled, isChecked: api.isChecked,\n                        }), iconClassName)}\n                        xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" stroke=\"currentColor\"\n                        fill=\"currentColor\"\n                     >\n                        <path\n                           fill=\"#fff\"\n                           d=\"M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z\"\n                        ></path>\n                     </svg>\n                  </span>\n               </div>\n               {(!!label || !!value) && <span\n                   className={cn(\n                      CheckboxAnatomy.label({ size: _size }),\n                      labelClassName,\n                   )}\n                   {...api.labelProps}\n               >\n                  {label ?? value}\n               </span>}\n            </label>\n         </BasicField>\n      </>\n   )\n   \n})\n\nCheckbox.displayName = \"Checkbox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "checkbox",
        "content": "/**\n * Chalk UI - checkbox/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./checkbox-group\"\nexport * from \"./checkbox\"\n"
      }
    ]
  },
  {
    "component": "combobox",
    "files": [
      {
        "name": "combobox.tsx",
        "dir": "combobox",
        "content": "/**\n * Chalk UI - combobox/combobox.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport * as combobox from \"@zag-js/combobox\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva } from \"class-variance-authority\"\nimport _find from \"lodash/find\"\nimport _isEmpty from \"lodash/isEmpty\"\nimport React, { useEffect, useId, useMemo, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\n\nexport const ComboboxAnatomy = defineStyleAnatomy({\n   menuContainer: cva([\n      \"UI-Combobox__menuContainer\",\n      \"absolute z-20 -bottom-0.5\",\n      \"left-0 translate-y-full max-h-56 w-full overflow-auto rounded-md p-2 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\",\n      // Light\n      \"bg-white\",\n      // Dark\n      \"dark:bg-gray-800\",\n   ]),\n   menuItem: cva([\n      \"UI-Combobox__menuItem\",\n      \"relative cursor-pointer py-2 pl-3 pr-9 rounded-md data-highlighted:bg-gray-100 dark:data-highlighted:bg-gray-700 text-base\",\n   ]),\n   menuNoOptionText: cva([\n      \"UI-Combobox__menuNoOptionText\",\n      \"text-base text-center py-1 text-gray-500 dark:text-gray-700\",\n   ]),\n})\n\nexport interface ComboboxProps extends Omit<React.ComponentPropsWithRef<\"input\">, \"onChange\" | \"size\" | \"defaultChecked\">,\n   BasicFieldOptions,\n   InputStyling,\n   ComponentWithAnatomy<typeof ComboboxAnatomy> {\n   options: { value: string, label?: string }[]\n   /* Filter the specified options as the user is typing */\n   withFiltering?: boolean\n   /* Get the value on of the input as the user is typing */\n   onInputChange?: (value: string) => void\n   /* Get the selected value */\n   onChange?: (value: string | undefined) => void\n   placeholder?: string\n   /* Message to display when there is no option */\n   noOptionsMessage?: string\n   /* Allow the user to enter custom values that are not specified in the options */\n   allowCustomValue?: boolean\n   /* Either value or label */\n   defaultValue?: string\n   valueInputRef?: React.Ref<HTMLInputElement>\n   /**\n    * We can either return the value or label of the options.\n    * Returning the label is useful when you allow users to put custom values or if the selection doesn't depend on IDs but the visible text.\n    */\n   returnValueOrLabel?: \"value\" | \"label\"\n}\n\nexport const Combobox = React.forwardRef<HTMLInputElement, ComboboxProps>((props, ref) => {\n   \n   const [{\n      size,\n      intent,\n      leftIcon,\n      leftAddon,\n      rightIcon,\n      rightAddon,\n      children,\n      className,\n      options,\n      withFiltering = true,\n      placeholder,\n      noOptionsMessage,\n      allowCustomValue = false,\n      onInputChange,\n      valueInputRef,\n      defaultValue,\n      onChange,\n      value, // /!\\ Unused\n      returnValueOrLabel = \"value\",\n      menuContainerClassName,\n      menuItemClassName,\n      menuNoOptionTextClassName,\n      ...rest\n   }, { id, ...basicFieldProps }] = extractBasicFieldProps<ComboboxProps>(props, useId())\n   \n   const [data, setData] = useState(options)\n   \n   const [selectedValue, setSelectedValue] = useState<string | undefined>(undefined)\n   \n   const [state, send] = useMachine(\n      combobox.machine({\n         id: useId(),\n         allowCustomValue: allowCustomValue,\n         inputBehavior: \"autohighlight\",\n         openOnClick: true,\n         loop: true,\n         blurOnSelect: true,\n         placeholder: placeholder,\n         onOpen() {\n            setData(options)\n         },\n         onSelect: (details) => {\n            if (returnValueOrLabel === \"value\") {\n               setSelectedValue(details.value)\n               onChange && onChange(details.value)\n               \n            } else if (returnValueOrLabel === \"label\") {\n               setSelectedValue(details.label)\n               onChange && onChange(details.label)\n            }\n         },\n         onInputChange({ value }) {\n            if (withFiltering) {\n               const filtered = options.filter((item) => {\n                     if (item.label) {\n                        return item.label.toLowerCase().includes(value.toLowerCase())\n                     } else {\n                        return item.value.toLowerCase().includes(value.toLowerCase())\n                     }\n                  },\n               )\n               setData(filtered.length > 0 ? filtered : noOptionsMessage ? [] : data) // Do not empty options if there is no 'noOptionsMessage'\n            }\n            onInputChange && onInputChange(value)\n         },\n      }),\n   )\n   \n   const api = combobox.connect(state, send, normalizeProps)\n   \n   useEffect(() => {\n      if (returnValueOrLabel === \"value\") {\n         if (defaultValue) {\n            setSelectedValue(defaultValue)\n            api.setInputValue(_find(options, [\"value\", defaultValue])?.label ?? \"\")\n            api.setValue(_find(options, [\"value\", defaultValue])?.value ?? \"\")\n         }\n      }\n      if (returnValueOrLabel === \"label\") {\n         if (defaultValue) {\n            setSelectedValue(_find(options, [\"label\", defaultValue])?.value ?? defaultValue)\n            api.setInputValue(_find(options, [\"label\", defaultValue])?.label ?? defaultValue)\n            api.setValue(_find(options, [\"label\", defaultValue])?.value ?? defaultValue)\n         }\n      }\n   }, [defaultValue])\n   \n   const list = useMemo(() => {\n      return withFiltering ? data : options\n   }, [options, withFiltering, data])\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps}\n            id={api.inputProps.id}\n            ref={ref}\n         >\n            <input type=\"text\" hidden value={selectedValue ?? \"\"} onChange={() => {}} ref={valueInputRef} />\n            \n            <div {...api.rootProps}>\n               <div {...api.controlProps} className={cn(inputContainerStyle())}>\n                  \n                  <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n                  <InputIcon icon={leftIcon} size={size} side={\"left\"} props={api.triggerProps} />\n                  \n                  <input\n                     className={cn(\n                        \"unstyled\",\n                        InputAnatomy.input({\n                           size,\n                           intent,\n                           hasError: !!basicFieldProps.error,\n                           untouchable: !!basicFieldProps.isDisabled,\n                           hasRightAddon: !!rightAddon,\n                           hasRightIcon: !!rightIcon,\n                           hasLeftAddon: !!leftAddon,\n                           hasLeftIcon: !!leftIcon,\n                        }),\n                     )}\n                     onBlur={() => {\n                        /* If we do not allow custom values and the user blurs the input, we reset the input */\n                        if (!allowCustomValue) {\n                           if (options.length === 0 && !api.selectedValue || (api.selectedValue && api.selectedValue.length === 0)) {\n                              api.setInputValue(\"\")\n                           }\n                           \n                           if (\n                              options.length > 0 &&\n                              (!_isEmpty(_find(options, [\"value\", api.selectedValue])?.label)\n                                 || !_isEmpty(_find(options, [\"value\", api.selectedValue])?.value)\n                              )\n                           ) {\n                              api.selectedValue && api.setValue(api.selectedValue)\n                           }\n                        }\n                     }}\n                     {...rest}\n                     ref={ref}\n                     {...api.inputProps}\n                  />\n                  \n                  <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n                  <InputIcon icon={rightIcon} size={size} side={\"right\"} props={api.triggerProps} />\n               \n               </div>\n            </div>\n            \n            {/* Menu */}\n            <div {...api.positionerProps} className=\"z-10\">\n               {(!!noOptionsMessage || list.length > 0) && (\n                  <ul\n                     className={cn(ComboboxAnatomy.menuContainer(), menuContainerClassName)}\n                     {...api.contentProps}\n                  >\n                     {(list.length === 0 && !!noOptionsMessage) &&\n                         <div className={cn(ComboboxAnatomy.menuNoOptionText(), menuNoOptionTextClassName)}>{noOptionsMessage}</div>}\n                     {list.map((item, index) => (\n                        <li\n                           className={cn(\n                              ComboboxAnatomy.menuItem(),\n                              menuItemClassName,\n                           )}\n                           key={`${item.value}:${index}`}\n                           {...api.getOptionProps({\n                              label: item.label ?? item.value,\n                              value: item.value,\n                              index,\n                              disabled: basicFieldProps.isDisabled,\n                           })}\n                        >\n                           {item.label}\n                        </li>\n                     ))}\n                  </ul>\n               )}\n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nCombobox.displayName = \"Combobox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "combobox",
        "content": "/**\n * Chalk UI - combobox/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./combobox\"\n"
      }
    ]
  },
  {
    "component": "core",
    "files": [
      {
        "name": "index.ts",
        "dir": "core",
        "content": "/**\n * Chalk UI - core/index.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./style-provider\"\nexport * from \"./style-anatomy\"\nexport * from \"./ui-helpers\"\n"
      },
      {
        "name": "style-anatomy.ts",
        "dir": "core",
        "content": "/**\n * Chalk UI - core/style-anatomy.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cva } from \"class-variance-authority\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal UI Folder scope\n */\nexport type Anatomy = { [key: string]: ReturnType<typeof cva> }\n/**\n * @internal\n */\nexport type AnatomyClassNames<T extends Anatomy> = {\n   [K in keyof T as `${string & K}ClassName`]?: string\n}\n\n/**\n * @internal UI Folder scope\n * @example\n * const ComponentAnatomy = defineStyleAnatomy({\n *    label: cva(null, {\n *       variants: {\n *          intent: {\n *             \"success\": \"\",\n *             \"alert\": \"\",\n *          },\n *       },\n *    }),\n *    ...\n * })\n *\n * type ComponentProps = ComponentWithAnatomy<typeof ComponentAnatomy>\n *\n * // const { controlClassName, ...rest }: ComponentProps = props\n * <div className={cn(ComponentAnatomy.control({ intent: \"success\" }, controlClassName))} />\n * @param config\n */\nexport function defineStyleAnatomy<A extends Anatomy = Anatomy>(config: A) {\n   return config\n}\n\n/**\n * @internal UI Folder scope\n */\nexport type ComponentWithAnatomy<T extends Anatomy> = AnatomyClassNames<T>\n"
      },
      {
        "name": "style-provider.tsx",
        "dir": "core",
        "content": "/**\n * Chalk UI - core/style-provider.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\nimport React from \"react\"\nimport { SSRProvider } from \"react-aria\"\n\n/* -------------------------------------------------------------------------------------------------\n * Locale\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal UI Folder scope\n */\ntype Lng = \"fr\" | \"en\" // DEVNOTE Add new lang keywords to maintain type safety\ntype UILocaleConfig = {\n   locale: Lng,\n   countryLocale: string,\n   country: string\n}\nconst __LocaleConfigDefaultValue: UILocaleConfig = { locale: \"en\", countryLocale: \"en-US\", country: \"us\" }\nconst __LocaleConfigContext = React.createContext<UILocaleConfig>(__LocaleConfigDefaultValue)\n\n/**\n * @internal UI Folder scope\n */\nexport const useUILocaleConfig = (): UILocaleConfig => {\n   return React.useContext(__LocaleConfigContext)\n}\n\nuseUILocaleConfig.displayName = \"useUILocaleConfig\"\n\n/* -------------------------------------------------------------------------------------------------\n * UI Provider\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UIProviderProps {\n   children?: React.ReactNode\n   config?: {\n      locale?: Lng,\n      countryLocale?: string,\n      country?: string\n   },\n}\n\n/**\n * @example\n * <UIProvider config={{ locale: 'en', countryLocale: 'en-US', country: 'us' }}>\n *    <App/>\n * </UIProvider>\n * @param children\n * @param config\n * @constructor\n */\nexport const UIProvider: React.FC<UIProviderProps> = ({ children, config }) => {\n\n   let localeConfig: UILocaleConfig = {\n      ...__LocaleConfigDefaultValue,\n      ...config,\n   }\n\n   return (\n      <__LocaleConfigContext.Provider value={localeConfig}>\n         <SSRProvider>\n            {children}\n         </SSRProvider>\n      </__LocaleConfigContext.Provider>\n   )\n}\n\nUIProvider.displayName = \"UIProvider\"\n"
      },
      {
        "name": "ui-helpers.ts",
        "dir": "core",
        "content": "/**\n * Chalk UI - core/ui-helpers.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n/* -------------------------------------------------------------------------------------------------\r\n * Polymorphic component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype ExtendedProps<Props = {}, OverrideProps = {}> = OverrideProps &\r\n    Omit<Props, keyof OverrideProps>;\r\ntype ElementType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\r\ntype PropsOf<C extends ElementType> = JSX.LibraryManagedAttributes<C,\r\n    React.ComponentPropsWithoutRef<C>>;\r\ntype ComponentProp<C> = {\r\n    component?: C;\r\n};\r\ntype InheritedProps<C extends ElementType, Props = {}> = ExtendedProps<PropsOf<C>, Props>;\r\nexport type PolymorphicRef<C> = C extends React.ElementType\r\n    ? React.ComponentPropsWithRef<C>['ref']\r\n    : never;\r\nexport type PolymorphicComponentProps<C, Props = {}> = C extends React.ElementType\r\n    ? InheritedProps<C, Props & ComponentProp<C>> & { ref?: PolymorphicRef<C> }\r\n    : Props & { component: React.ElementType };\r\n\r\n/**\r\n * @example\r\n * const _Accordion = React.forwardRef<HTMLDivElement, AccordionProps>((props, ref) => {})\r\n * _Accordion.Item = AccordionItem\r\n *\r\n * export const Accordion = createPolymorphicComponent<'div', AccordionProps, {\r\n *    Item: typeof AccordionItem,\r\n * }>(_Accordion)\r\n * @param component\r\n */\r\nexport function createPolymorphicComponent<ComponentDefaultType,\r\n    Props,\r\n    StaticComponents = Record<string, never>>(component: any) {\r\n    type ComponentProps<C> = PolymorphicComponentProps<C, Props>;\r\n\r\n    type _PolymorphicComponent = <C = ComponentDefaultType>(\r\n        props: ComponentProps<C>,\r\n    ) => React.ReactElement;\r\n\r\n    type ComponentProperties = Omit<React.FunctionComponent<ComponentProps<any>>, never>;\r\n\r\n    type PolymorphicComponent = _PolymorphicComponent & ComponentProperties & StaticComponents;\r\n\r\n    return component as PolymorphicComponent\r\n}\r\n"
      }
    ]
  },
  {
    "component": "date-time",
    "files": [
      {
        "name": "date-field.tsx",
        "dir": "date-time",
        "content": "/**\n * Chalk UI - date-time/date-field.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { useRef } from \"react\"\r\nimport { useDateField, useDateSegment } from \"react-aria\"\r\nimport { DateFieldState, DateFieldStateOptions, DateSegment, useDateFieldState } from \"react-stately\"\r\nimport { defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\n\r\nexport function DateField({ locale, ...props }: Omit<DateFieldStateOptions, \"locale\" | \"createCalendar\"> & { locale?: string }) {\r\n   let { countryLocale } = useUILocaleConfig()\r\n   \r\n   let state = useDateFieldState({\r\n      ...props,\r\n      locale: locale ?? countryLocale,\r\n      createCalendar,\r\n   })\r\n   \r\n   let ref = useRef<HTMLDivElement>(null)\r\n   let { fieldProps } = useDateField(props, state, ref)\r\n   \r\n   return (\r\n      <div {...fieldProps} ref={ref} className=\"flex\">\r\n         {state.segments.map((segment, i) => (\r\n            <DateSegmentComponent key={i} segment={segment} state={state} />\r\n         ))}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport const DateSegmentAnatomy = defineStyleAnatomy({\r\n   segment: cva(\"UI-DateSegment__segment px-0.5 box-content tabular-nums text-right outline-none rounded-sm focus:bg-brand-50 dark:focus:bg-transparent focus:text-brand-500 dark:focus:text-white focus:font-semibold group shadow-none\", {\r\n      variants: {\r\n         isEditable: {\r\n            false: \"text-gray-500\",\r\n            true: \"text-gray-800 dark:text-gray-200\",\r\n         },\r\n      },\r\n   }),\r\n   input: cva(\"UI-DateSegment__input block w-full text-center italic text-gray-500 group-focus:text-brand-500 dark:group-focus:text-white group-focus:font-semibold\"),\r\n})\r\n\r\nDateField.displayName = \"DateField\"\r\n\r\nexport function DateSegmentComponent({ segment, state }: { segment: DateSegment, state: DateFieldState }) {\r\n   let ref = useRef<HTMLDivElement>(null)\r\n   let { segmentProps } = useDateSegment(segment, state, ref)\r\n   \r\n   return (\r\n      <div\r\n         {...segmentProps}\r\n         ref={ref}\r\n         style={{\r\n            ...segmentProps.style,\r\n         }}\r\n         className={cn(DateSegmentAnatomy.segment({ isEditable: segment.isEditable }))}\r\n         suppressHydrationWarning\r\n      >\r\n         <span\r\n            aria-hidden=\"true\" className={cn(DateSegmentAnatomy.input())} style={{\r\n            display: segment.isPlaceholder ? undefined : \"none\", height: segment.isPlaceholder ? undefined : 0,\r\n            pointerEvents: \"none\",\r\n         }}\r\n         >\r\n            {segment.placeholder}\r\n         </span>\r\n         {segment.isPlaceholder ? null : segment.text}\r\n      </div>\r\n   )\r\n}\r\n\r\nDateSegmentComponent.displayName = \"DateSegmentComponent\"\r\n"
      },
      {
        "name": "date-picker.tsx",
        "dir": "date-time",
        "content": "/**\n * Chalk UI - date-time/date-picker.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { DateValue } from \"@internationalized/date\"\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useDatePicker } from \"react-aria\"\r\nimport { DatePickerStateOptions, useDatePickerState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { IconButton } from \"../button\"\r\nimport { Calendar } from \"../calendar\"\r\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { Modal } from \"../modal\"\r\nimport { DateField } from \"./date-field\"\r\n\r\nexport const DatePickerAnatomy = defineStyleAnatomy({\r\n   input: cva([\r\n      \"UI-DateSegment__input\",\r\n      \"relative flex flex-wrap items-center gap-2 cursor-text\",\r\n      \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-brand-500\",\r\n      \"justify-between\",\r\n   ]),\r\n   iconButton: cva([\r\n      \"UI-DateSegment__iconButton\",\r\n      \"w-5 h-5 group-focus-within:text-brand-700\",\r\n   ]),\r\n})\r\n\r\nexport interface DatePickerProps extends Omit<DatePickerStateOptions<DateValue>, \"label\">,\r\n   ComponentWithAnatomy<typeof DatePickerAnatomy>,\r\n   BasicFieldOptions,\r\n   InputStyling {\r\n   locale?: string\r\n}\r\n\r\nexport const DatePicker = React.forwardRef<HTMLDivElement, DatePickerProps>((props, ref) => {\r\n   \r\n   const [{\r\n      size,\r\n      intent,\r\n      leftAddon,\r\n      leftIcon,\r\n      rightIcon,\r\n      rightAddon,\r\n      locale,\r\n      inputClassName,\r\n      iconButtonClassName,\r\n      ...datePickerProps\r\n   }, basicFieldProps] = extractBasicFieldProps<DatePickerProps>(props, useId())\r\n   \r\n   let state = useDatePickerState(datePickerProps)\r\n   \r\n   let _ref = useRef<HTMLDivElement>(null)\r\n   let {\r\n      groupProps,\r\n      labelProps,\r\n      fieldProps,\r\n      buttonProps,\r\n      dialogProps,\r\n      calendarProps,\r\n   } = useDatePicker(datePickerProps, state, _ref)\r\n   \r\n   const { onPress, ...restButtonProps } = buttonProps\r\n   \r\n   return (\r\n      <BasicField\r\n         {...basicFieldProps}\r\n         labelProps={labelProps}\r\n      >\r\n         <div {...groupProps} ref={_ref} className={cn(\"group\", inputContainerStyle())}>\r\n            \r\n            <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\r\n            <InputIcon icon={leftIcon} size={size} side={\"left\"} />\r\n            \r\n            <div\r\n               className={cn(\r\n                  \"form-input\",\r\n                  InputAnatomy.input({\r\n                     size,\r\n                     intent,\r\n                     hasError: !!basicFieldProps.error,\r\n                     untouchable: !!basicFieldProps.isDisabled,\r\n                     hasRightAddon: !!rightAddon,\r\n                     hasRightIcon: !!rightIcon,\r\n                     hasLeftAddon: !!leftAddon,\r\n                     hasLeftIcon: !!leftIcon,\r\n                  }),\r\n                  DatePickerAnatomy.input(),\r\n                  inputClassName,\r\n               )}\r\n            >\r\n               <div className=\"flex\">\r\n                  <DateField {...fieldProps} />\r\n               </div>\r\n               \r\n               <IconButton\r\n                  intent=\"gray-basic\"\r\n                  size=\"xs\"\r\n                  {...restButtonProps}\r\n                  icon={<svg\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     fill=\"currentColor\"\r\n                     viewBox=\"0 0 24 24\"\r\n                     className={cn(DatePickerAnatomy.iconButton(), iconButtonClassName)}\r\n                  >\r\n                     <path d=\"M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-2V2h-2v2H9V2H7v2H5a2 2 0 0 0-2 2zm16 14H5V8h14z\"></path>\r\n                  </svg>}\r\n                  onClick={e => onPress && onPress(e as any)}\r\n               />\r\n            </div>\r\n            \r\n            <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\r\n            <InputIcon icon={rightIcon} size={size} side={\"right\"} />\r\n         \r\n         </div>\r\n         \r\n         <Modal\r\n            size=\"sm\"\r\n            isOpen={state.isOpen} onClose={state.close} withCloseButton\r\n            {...dialogProps}\r\n         >\r\n            <div className=\"flex justify-center\">\r\n               <Calendar {...calendarProps} />\r\n            </div>\r\n         </Modal>\r\n      \r\n      </BasicField>)\r\n})\r\n\r\nDatePicker.displayName = \"DatePicker\"\r\n"
      },
      {
        "name": "date-range-picker.tsx",
        "dir": "date-time",
        "content": "/**\n * Chalk UI - date-time/date-range-picker.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useDateRangePicker } from \"react-aria\"\r\nimport { DateRangePickerStateOptions, useDateRangePickerState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { IconButton } from \"../button\"\r\nimport { RangeCalendar } from \"../calendar\"\r\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { Modal } from \"../modal\"\r\nimport { DateField } from \"./date-field\"\r\n\r\nexport const DateRangePickerAnatomy = defineStyleAnatomy({\r\n   input: cva([\r\n      \"UI-DateRangePicker__input\",\r\n      \"relative flex flex-wrap items-center gap-1 cursor-text\",\r\n      \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-brand-500\",\r\n      \"justify-between text-sm sm:text-base\",\r\n   ]),\r\n   iconButton: cva([\r\n      \"UI-DateRangePicker__iconButton\",\r\n      \"w-5 h-5 group-focus-within:text-brand-700\",\r\n   ]),\r\n})\r\n\r\nexport interface DateRangePickerProps extends Omit<DateRangePickerStateOptions, \"label\">,\r\n   ComponentWithAnatomy<typeof DateRangePickerAnatomy>,\r\n   BasicFieldOptions,\r\n   InputStyling {\r\n}\r\n\r\nexport const DateRangePicker = React.forwardRef<HTMLDivElement, DateRangePickerProps>((props, ref) => {\r\n   \r\n   const [{\r\n      size,\r\n      intent,\r\n      leftAddon,\r\n      leftIcon,\r\n      rightIcon,\r\n      rightAddon,\r\n      inputClassName,\r\n      iconButtonClassName,\r\n      ...datePickerProps\r\n   }, basicFieldProps] = extractBasicFieldProps<DateRangePickerProps>(props, useId())\r\n   \r\n   let state = useDateRangePickerState(datePickerProps)\r\n   let _ref = useRef<HTMLDivElement>(null)\r\n   let {\r\n      groupProps,\r\n      labelProps,\r\n      startFieldProps,\r\n      endFieldProps,\r\n      buttonProps,\r\n      dialogProps,\r\n      calendarProps,\r\n   } = useDateRangePicker(datePickerProps, state, _ref)\r\n   \r\n   let { onPress, ...restButtonProps } = buttonProps\r\n   \r\n   return (\r\n      <BasicField\r\n         {...basicFieldProps}\r\n         labelProps={labelProps}\r\n      >\r\n         <div {...groupProps} ref={_ref} className={cn(\"flex group\", inputContainerStyle())}>\r\n            \r\n            <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\r\n            <InputIcon icon={leftIcon} size={size} side={\"left\"} />\r\n            \r\n            <div\r\n               className={cn(\r\n                  \"form-input\",\r\n                  InputAnatomy.input({\r\n                     size,\r\n                     intent,\r\n                     hasError: !!basicFieldProps.error,\r\n                     untouchable: !!basicFieldProps.isDisabled,\r\n                     hasRightAddon: !!rightAddon,\r\n                     hasRightIcon: !!rightIcon,\r\n                     hasLeftAddon: !!leftAddon,\r\n                     hasLeftIcon: !!leftIcon,\r\n                  }),\r\n                  DateRangePickerAnatomy.input(),\r\n                  inputClassName,\r\n               )}\r\n            >\r\n               <div className=\"flex\">\r\n                  <DateField {...startFieldProps} /> <span aria-hidden=\"true\" className=\"px-1\"> ‚Äì </span> <DateField {...endFieldProps} />\r\n               </div>\r\n               <IconButton\r\n                  intent=\"gray-basic\"\r\n                  size=\"xs\"\r\n                  {...restButtonProps}\r\n                  icon={<svg\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     fill=\"currentColor\"\r\n                     viewBox=\"0 0 24 24\"\r\n                     className={cn(DateRangePickerAnatomy.iconButton(), iconButtonClassName)}\r\n                  >\r\n                     <path d=\"M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-2V2h-2v2H9V2H7v2H5a2 2 0 0 0-2 2zm16 14H5V8h14z\"></path>\r\n                  </svg>}\r\n                  onClick={e => onPress && onPress(e as any)}\r\n               />\r\n            \r\n            \r\n            </div>\r\n            \r\n            <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\r\n            <InputIcon icon={rightIcon} size={size} side={\"right\"} />\r\n            \r\n            <Modal\r\n               size=\"xl\" isOpen={state.isOpen} onClose={state.close} withCloseButton\r\n               {...dialogProps}\r\n            >\r\n               <div className=\"flex justify-center\"><RangeCalendar {...calendarProps} /></div>\r\n            </Modal>\r\n         \r\n         </div>\r\n      </BasicField>)\r\n})\r\n\r\nDateRangePicker.displayName = \"DateRangePicker\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "date-time",
        "content": "/**\n * Chalk UI - date-time/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./date-field\"\nexport * from \"./date-picker\"\nexport * from \"./date-range-picker\"\nexport * from \"./time-input\"\n"
      },
      {
        "name": "time-input.tsx",
        "dir": "date-time",
        "content": "/**\n * Chalk UI - date-time/time-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\r\n\r\nimport { cn } from \"@rahimstack/tailwind-utils\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useTimeField } from \"react-aria\"\r\nimport { TimeFieldStateOptions, useTimeFieldState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { ComponentWithAnatomy, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { DateSegmentComponent } from \"./date-field\"\r\n\r\nexport const TimeInputAnatomy = defineStyleAnatomy({\r\n   input: cva([\r\n      \"UI-TimeInput__input\",\r\n      \"relative flex flex-wrap items-center gap-1 cursor-text\",\r\n      \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-brand-500\",\r\n      \"!w-[fit-content]\",\r\n   ]),\r\n})\r\n\r\nexport interface TimeInputProps extends Omit<TimeFieldStateOptions, \"locale\">,\r\n   ComponentWithAnatomy<typeof TimeInputAnatomy>,\r\n   BasicFieldOptions,\r\n   InputStyling {\r\n   locale?: string\r\n}\r\n\r\nexport const TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>((props, ref) => {\r\n   \r\n   const [{\r\n      size,\r\n      intent,\r\n      leftAddon,\r\n      leftIcon = <span>\r\n         <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"w-4 h-4\">\r\n            <path d=\"M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7-3.25v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5a.75.75 0 0 1 1.5 0Z\"></path>\r\n         </svg>\r\n      </span>,\r\n      rightIcon,\r\n      rightAddon,\r\n      inputClassName,\r\n      locale,\r\n      ...datePickerProps\r\n   }, basicFieldProps] = extractBasicFieldProps<TimeInputProps>(props, useId())\r\n   \r\n   const { countryLocale } = useUILocaleConfig()\r\n   let state = useTimeFieldState({\r\n      ...datePickerProps,\r\n      locale: locale ?? countryLocale,\r\n   })\r\n   \r\n   let _ref = useRef<HTMLDivElement>(null)\r\n   let { labelProps, fieldProps } = useTimeField(datePickerProps, state, _ref)\r\n   \r\n   return (\r\n      <BasicField\r\n         {...basicFieldProps}\r\n         labelProps={labelProps}\r\n      >\r\n         <div className={cn(inputContainerStyle(), \"!w-[fit-content]\")}>\r\n            \r\n            <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\r\n            <InputIcon icon={leftIcon} size={size} side={\"left\"} />\r\n            \r\n            <div\r\n               className={cn(\r\n                  \"form-input\",\r\n                  InputAnatomy.input({\r\n                     size,\r\n                     intent,\r\n                     hasError: !!basicFieldProps.error,\r\n                     untouchable: !!basicFieldProps.isDisabled,\r\n                     hasRightAddon: !!rightAddon,\r\n                     hasRightIcon: !!rightIcon,\r\n                     hasLeftAddon: !!leftAddon,\r\n                     hasLeftIcon: !!leftIcon,\r\n                  }),\r\n                  TimeInputAnatomy.input(),\r\n                  inputClassName,\r\n               )}\r\n               {...fieldProps}\r\n               ref={_ref}\r\n            >\r\n               {state.segments.map((segment, i) => (\r\n                  <DateSegmentComponent key={i} segment={segment} state={state} />\r\n               ))}\r\n            </div>\r\n            \r\n            <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\r\n            <InputIcon icon={rightIcon} size={size} side={\"right\"} />\r\n         \r\n         </div>\r\n      </BasicField>\r\n   )\r\n   \r\n})\r\n\r\nTimeInput.displayName = \"TimeInput\"\r\n"
      }
    ]
  },
  {
    "component": "input",
    "files": [
      {
        "name": "index.tsx",
        "dir": "input",
        "content": "/**\n * Chalk UI - input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./input-styles\"\n"
      },
      {
        "name": "input-styles.tsx",
        "dir": "input",
        "content": "/**\n * Chalk UI - input/input-styles.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { defineStyleAnatomy } from \"../core\"\n\nexport const InputAnatomy = defineStyleAnatomy({\n   input: cva([\n      \"UI-Input__input\",\n      \"w-full rounded-md\",\n      // Light\n      \"bg-white border-gray-300 placeholder-gray-400\",\n      \"disabled:bg-gray-50 disabled:border-gray-200 disabled:text-gray-500\",\n      // Dark\n      \"dark:bg-gray-900 dark:border-gray-700 dark:placeholder-gray-600\",\n      \"dark:disabled:bg-gray-800 dark:disabled:border-gray-800\",\n      \n      \"disabled:shadow-none disabled:pointer-events-none\",\n      \"focus:border-brand-500 focus:ring-1 focus:ring-brand-500\",\n      \"outline-none focus:outline-none\",\n      \"transition duration-150\",\n      \"shadow-sm\",\n   ], {\n      variants: {\n         size: {\n            sm: \"px-2 py-1.5 text-sm\",\n            md: \"\",\n            lg: \"px-4 py-3 text-md\",\n         },\n         intent: {\n            basic: \"hover:border-gray-300\",\n            filled: \"bg-gray-100 border-gray-100 focus:bg-white\",\n         },\n         hasError: {\n            false: null,\n            true: \"border-red-500 hover:border-red-200 dark:border-red-500\",\n         },\n         untouchable: {\n            false: null,\n            true: \"bg-gray-50 border-gray-200 text-gray-500 shadow-none pointer-events-none dark:bg-gray-800 dark:border-gray-800\",\n         },\n         hasLeftAddon: { true: null, false: null },\n         hasRightAddon: { true: null, false: null },\n         hasLeftIcon: { true: null, false: null },\n         hasRightIcon: { true: null, false: null },\n      },\n      compoundVariants: [\n         { hasLeftAddon: true, className: \"border-l-transparent hover:border-l-transparent rounded-l-none\" },\n         /**/\n         { hasRightAddon: true, className: \"border-r-transparent hover:border-r-transparent rounded-r-none\" },\n         /**/\n         { hasLeftAddon: false, hasLeftIcon: true, size: \"sm\", className: \"pl-10\" },\n         { hasLeftAddon: false, hasLeftIcon: true, size: \"md\", className: \"pl-10\" },\n         { hasLeftAddon: false, hasLeftIcon: true, size: \"lg\", className: \"pl-12\" },\n         /**/\n         { hasRightAddon: false, hasRightIcon: true, size: \"sm\", className: \"pr-10\" },\n         { hasRightAddon: false, hasRightIcon: true, size: \"md\", className: \"pr-10\" },\n         { hasRightAddon: false, hasRightIcon: true, size: \"lg\", className: \"pr-12\" },\n      ],\n      defaultVariants: {\n         size: \"md\",\n         intent: \"basic\",\n         hasError: false,\n         untouchable: false,\n         hasLeftIcon: false,\n         hasRightIcon: false,\n         hasLeftAddon: false,\n         hasRightAddon: false,\n      },\n   }),\n})\n\n\nexport interface InputStyling extends Omit<VariantProps<typeof InputAnatomy.input>, \"untouchable\" | \"hasError\" | \"hasLeftAddon\" | \"hasRightAddon\" | \"hasLeftIcon\" | \"hasRightIcon\"> {\n   leftAddon?: string\n   leftIcon?: React.ReactNode\n   rightAddon?: string\n   rightIcon?: React.ReactNode\n}\n\n/**\n * @description \"flex relative\"\n */\nexport const inputContainerStyle = () => cn(\"UI-Input__inputContainer flex relative\")\n\n\n// -------------------------------------------------------------------------------------------------------------------------------- //\n\nexport const InputAddonsAnatomy = defineStyleAnatomy({\n   icon: cva([\n      \"UI-Input__addons--icon pointer-events-none absolute inset-y-0 grid place-content-center text-gray-500 z-[1]\",\n      \"dark:text-gray-300\",\n   ], {\n      variants: {\n         size: { sm: \"w-10 text-md\", md: \"w-12 text-lg\", lg: \"w-14 text-2xl\" },\n         isLeftIcon: { true: \"left-0\", false: null },\n         isRightIcon: { true: \"right-0\", false: null },\n      },\n      defaultVariants: {\n         size: \"md\",\n         isLeftIcon: false, isRightIcon: false,\n      },\n   }),\n   addon: cva([\n      \"UI-Input__addons--addon bg-gray-50 inline-flex items-center flex-none px-3 border border-gray-300 text-gray-800 shadow-sm text-sm sm:text-md\",\n      \"dark:bg-gray-700 dark:border-gray-700 dark:text-gray-300\",\n   ], {\n      variants: {\n         size: { sm: \"text-sm\", md: \"text-md\", lg: \"text-lg\" },\n         isLeftAddon: { true: \"rounded-l-md\", false: null },\n         isRightAddon: { true: \"rounded-r-md\", false: null },\n         hasLeftIcon: { true: null, false: null },\n         hasRightIcon: { true: null, false: null },\n      },\n      compoundVariants: [\n         { size: \"sm\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n         { size: \"sm\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n         { size: \"md\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n         { size: \"md\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n         { size: \"lg\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-12\" },\n         { size: \"lg\", hasRightIcon: true, isRightAddon: true, className: \"pr-12\" },\n      ],\n      defaultVariants: {\n         size: \"md\",\n         isLeftAddon: false, isRightAddon: false, hasLeftIcon: false, hasRightIcon: false,\n      },\n   }),\n})\n\n\nexport const InputIcon = ({ icon, size = \"md\", side, props }: {\n      icon: InputStyling[\"rightIcon\"] | undefined,\n      size: InputStyling[\"size\"],\n      side: \"right\" | \"left\",\n      props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n   },\n) => {\n   \n   if (!!icon) return <span\n      className={cn(InputAddonsAnatomy.icon({ isRightIcon: side === \"right\", isLeftIcon: side === \"left\", size }))}\n      {...props}\n   >\n      {icon}\n   </span>\n   \n   return null\n}\n\nexport const InputAddon = ({ addon, leftIcon, rightIcon, size = \"md\", side, props }: {\n      addon: InputStyling[\"rightAddon\"] | InputStyling[\"leftAddon\"] | undefined,\n      rightIcon: InputStyling[\"leftIcon\"] | undefined,\n      leftIcon: InputStyling[\"rightIcon\"] | undefined,\n      size: InputStyling[\"size\"],\n      side: \"right\" | \"left\",\n      props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n   },\n) => {\n   \n   if (!!addon) return (\n      <span\n         className={cn(InputAddonsAnatomy.addon({\n            isRightAddon: side === \"right\",\n            isLeftAddon: side === \"left\",\n            hasRightIcon: !!rightIcon,\n            hasLeftIcon: !!leftIcon,\n            size,\n         }))}\n         {...props}\n      >\n         {addon}\n      </span>\n   )\n   \n   return null\n   \n}\n"
      }
    ]
  },
  {
    "component": "loading-spinner",
    "files": [
      {
        "name": "index.tsx",
        "dir": "loading-spinner",
        "content": "/**\n * Chalk UI - loading-spinner/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./loading-spinner\"\nexport * from \"./loading-overlay\"\n"
      },
      {
        "name": "loading-overlay.tsx",
        "dir": "loading-spinner",
        "content": "/**\n * Chalk UI - loading-spinner/loading-overlay.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { defineStyleAnatomy } from \"../core\"\nimport { LoadingSpinner } from \"./loading-spinner\"\n\nexport const LoadingOverlayAnatomy = defineStyleAnatomy({\n   overlay: cva(\"UI-LoadingOverlay__overlay absolute bg-white dark:bg-gray-900 bg-opacity-70 w-full h-full z-10 inset-0 pt-4 flex items-center justify-center backdrop-blur-sm\"),\n})\n\ninterface LoadingOverlayProps {\n   children?: React.ReactNode\n   show?: boolean\n}\n\nexport const LoadingOverlay: React.FC<LoadingOverlayProps & React.ComponentPropsWithoutRef<\"div\">> = (props) => {\n   \n   const { children, show = true, className, ...rest } = props\n   \n   if (!show) return null\n   \n   return (\n      <>\n         <div className={cn(LoadingOverlayAnatomy.overlay(), className)} {...rest}>\n            <LoadingSpinner className=\"justify-auto\" />\n         </div>\n      </>\n   )\n   \n}\n\nLoadingOverlay.displayName = \"LoadingOverlay\"\n"
      },
      {
        "name": "loading-spinner.tsx",
        "dir": "loading-spinner",
        "content": "/**\n * Chalk UI - loading-spinner/loading-spinner.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva } from \"class-variance-authority\"\nimport { ComponentPropsWithRef, forwardRef } from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const LoadingSpinnerAnatomy = defineStyleAnatomy({\n   container: cva(\"UI-LoadingSpinner__container flex w-full items-center h-24 justify-center\"),\n   icon: cva(\"UI-LoadingSpinner__icon inline w-10 h-10 mr-2 text-gray-200 dark:text-gray-600 animate-spin fill-brand-500\"),\n})\n\nexport interface LoadingSpinnerProps extends ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof LoadingSpinnerAnatomy> {\n}\n\nexport const LoadingSpinner = forwardRef<HTMLDivElement, LoadingSpinnerProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      containerClassName,\n      iconClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <div\n            className={cn(\n               LoadingSpinnerAnatomy.container(),\n               containerClassName,\n            )}\n            {...rest}\n            ref={ref}\n         >\n            <svg\n               aria-hidden=\"true\"\n               className={cn(\n                  LoadingSpinnerAnatomy.icon(),\n                  iconClassName,\n                  className,\n               )}\n               viewBox=\"0 0 100 101\"\n               fill=\"none\"\n               xmlns=\"http://www.w3.org/2000/svg\"\n            >\n               <path\n                  d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n                  fill=\"currentColor\"\n               />\n               <path\n                  d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n                  fill=\"currentFill\"\n               />\n            </svg>\n         </div>\n      </>\n   )\n   \n})\n\nLoadingSpinner.displayName = \"LoadingSpinner\"\n"
      }
    ]
  },
  {
    "component": "modal",
    "files": [
      {
        "name": "drawer.tsx",
        "dir": "modal",
        "content": "/**\n * Chalk UI - modal/drawer.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { Dialog, Transition } from \"@headlessui/react\"\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { Fragment } from \"react\"\nimport { CloseButton } from \"../button\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const DrawerAnatomy = defineStyleAnatomy({\n   panel: cva(\"UI-Drawer__panel\", {\n      variants: {\n         size: { md: \"\", lg: \"\", xl: \"\", full: \"\" },\n         placement: { top: \"\", right: \"\", left: \"\", bottom: \"\" },\n      },\n      defaultVariants: {\n         size: \"md\",\n         placement: \"right\",\n      },\n   }),\n   container: cva(\"UI-Drawer__container flex h-full flex-col overflow-y-auto bg-white dark:bg-gray-900 shadow-xl\"),\n   body: cva(\"UI-Drawer__body relative flex-1 pl-4 pr-4 pb-4 sm:pl-6 sm:pr-6 sm:pb-6\"),\n   header: cva(\"UI-Drawer__header flex w-full justify-between items-center p-4 sm:p-6 pb-0\"),\n   title: cva(\"UI-Drawer__title text-lg font-semibold\"),\n   closeButton: cva(\"UI-Drawer__closeButton\"),\n})\n\nexport interface DrawerProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof DrawerAnatomy>,\n   VariantProps<typeof DrawerAnatomy.panel> {\n   isOpen: boolean\n   withCloseButton?: boolean\n   onClose: () => void\n}\n\nexport const Drawer = React.forwardRef<HTMLDivElement, DrawerProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      size = \"md\",\n      placement = \"right\",\n      withCloseButton = false,\n      isOpen,\n      onClose,\n      title,\n      closeButtonClassName,\n      panelClassName,\n      titleClassName,\n      headerClassName,\n      bodyClassName,\n      containerClassName,\n      ...rest\n   } = props\n   \n   let animation = {\n      enter: \"transform transition ease-in-out duration-500 sm:duration-500\",\n      enterFrom: \"translate-x-full\",\n      enterTo: \"translate-x-0\",\n      leave: \"transform transition ease-in-out duration-500 sm:duration-500\",\n      leaveFrom: \"translate-x-0\",\n      leaveTo: \"translate-x-full\",\n   }\n   \n   if (placement == \"bottom\") {\n      animation = {\n         ...animation,\n         enterFrom: \"translate-y-full\",\n         enterTo: \"translate-y-0\",\n         leaveFrom: \"translate-y-0\",\n         leaveTo: \"translate-y-full\",\n      }\n   } else if (placement == \"top\") {\n      animation = {\n         ...animation,\n         enterFrom: \"-translate-y-full\",\n         enterTo: \"translate-y-0\",\n         leaveFrom: \"translate-y-0\",\n         leaveTo: \"-translate-y-full\",\n      }\n   } else if (placement == \"left\") {\n      animation = {\n         ...animation,\n         enterFrom: \"-translate-x-full\",\n         enterTo: \"translate-x-0\",\n         leaveFrom: \"translate-x-0\",\n         leaveTo: \"-translate-x-full\",\n      }\n   }\n   \n   return (\n      <>\n         <Transition.Root show={isOpen} as={Fragment}>\n            <Dialog\n               as=\"div\"\n               className={cn(\n                  \"relative z-50\",\n                  // elementStyles({ }),\n                  className,\n               )}\n               onClose={onClose}\n               {...rest}\n               ref={ref}\n            >\n               \n               {/*Overlay*/}\n               <Transition.Child\n                  as={Fragment}\n                  enter=\"ease-in-out duration-500\"\n                  enterFrom=\"opacity-0\"\n                  enterTo=\"opacity-100\"\n                  leave=\"ease-in-out duration-500\"\n                  leaveFrom=\"opacity-100\"\n                  leaveTo=\"opacity-0\"\n               >\n                  <div className=\"fixed inset-0 bg-black bg-opacity-70 transition-opacity\" />\n               </Transition.Child>\n               \n               <div className=\"fixed inset-0 overflow-hidden\">\n                  <div className=\"absolute inset-0 overflow-hidden\">\n                     <div\n                        className={cn(\n                           \"pointer-events-none fixed flex\",\n                           {\n                              \"inset-y-0 max-w-full\": (placement == \"right\" || placement == \"left\"),\n                              \"inset-x-0\": (placement == \"top\" || placement == \"bottom\"),\n                              //\n                              \"pl-0\": placement == \"right\",\n                              //\n                              \"right-0\": placement == \"right\",\n                              \"left-0\": placement == \"left\",\n                              \"top-0\": placement == \"top\",\n                              \"bottom-0\": placement == \"bottom\",\n                           },\n                        )}\n                     >\n                        <Transition.Child\n                           as={Fragment}\n                           {...animation}\n                        >\n                           <Dialog.Panel\n                              className={cn(\n                                 \"pointer-events-auto relative\",\n                                 {\n                                    \"w-screen\": (placement == \"right\" || placement == \"left\" || placement == \"top\" || placement == \"bottom\"),\n                                    // Right or Left\n                                    \"max-w-md\": size == \"md\" && (placement == \"right\" || placement == \"left\"),\n                                    \"max-w-2xl\": size == \"lg\" && (placement == \"right\" || placement == \"left\"),\n                                    \"max-w-5xl\": size == \"xl\" && (placement == \"right\" || placement == \"left\"),\n                                    \"max-w-full\": size == \"full\" && (placement == \"right\" || placement == \"left\"),\n                                    // Top or Bottom\n                                    \"h-[100vh] max-h-[50vh]\": size == \"md\" && (placement == \"bottom\" || placement == \"top\"),\n                                    \"h-[100vh] max-h-[70vh]\": size == \"lg\" && (placement == \"bottom\" || placement == \"top\"),\n                                    \"h-[100vh] max-h-[80vh]\": size == \"xl\" && (placement == \"bottom\" || placement == \"top\"),\n                                    \"h-[100vh] min-h-screen\": size == \"full\" && (placement == \"bottom\" || placement == \"top\"),\n                                 },\n                              )}\n                           >\n                              \n                              {/*Container*/}\n                              <div className={cn(DrawerAnatomy.container(), containerClassName)}>\n                                 <div\n                                    className={cn(DrawerAnatomy.header(), headerClassName)}\n                                 >\n                                    <Dialog.Title className={cn(DrawerAnatomy.title(), titleClassName)}>{title}</Dialog.Title>\n                                    \n                                    {withCloseButton && (\n                                       <CloseButton\n                                          onClick={() => onClose()}\n                                          className={cn(closeButtonClassName)}\n                                       />\n                                    )}\n                                 \n                                 </div>\n                                 <div className={cn(DrawerAnatomy.body(), bodyClassName)}>\n                                    {children}\n                                 </div>\n                              </div>\n                           </Dialog.Panel>\n                        \n                        </Transition.Child>\n                     </div>\n                  </div>\n               </div>\n            </Dialog>\n         </Transition.Root>\n      </>\n   )\n   \n})\n\nDrawer.displayName = \"Drawer\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "modal",
        "content": "/**\n * Chalk UI - modal/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./modal\"\nexport * from \"./drawer\"\n"
      },
      {
        "name": "modal.tsx",
        "dir": "modal",
        "content": "/**\n * Chalk UI - modal/modal.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { Dialog, Transition } from \"@headlessui/react\"\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { Fragment } from \"react\"\nimport { CloseButton } from \"../button\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const ModalAnatomy = defineStyleAnatomy({\n   title: cva(\"UI-Modal__title text-lg font-medium leading-6\"),\n   panel: cva(\"UI-Modal__panel w-full transform overflow-hidden rounded-none sm:rounded-md bg-white dark:bg-gray-900 p-6 text-left align-middle shadow-xl transition-all relative\", {\n      variants: {\n         size: {\n            sm: \"sm:max-w-md\",\n            md: \"sm:max-w-lg\",\n            lg: \"sm:max-w-xl\",\n            xl: \"sm:max-w-2xl\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   body: cva(\"UI-Modal__body mt-2\"),\n   closeButton: cva(\"UI-Modal__closeButton absolute right-2 top-2\"),\n})\n\nexport interface ModalProps extends React.ComponentPropsWithRef<\"div\">,\n   ComponentWithAnatomy<typeof ModalAnatomy>,\n   VariantProps<typeof ModalAnatomy.panel> {\n   isOpen: boolean,\n   onClose: () => void\n   title?: string\n   withCloseButton?: boolean\n}\n\nexport const Modal = React.forwardRef<HTMLDivElement, ModalProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      isOpen,\n      onClose,\n      title,\n      size,\n      panelClassName,\n      titleClassName,\n      closeButtonClassName,\n      bodyClassName,\n      withCloseButton,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <Transition appear show={isOpen} as={Fragment}>\n            <Dialog as=\"div\" className=\"relative z-50\" onClose={onClose}>\n               <Transition.Child\n                  as={Fragment}\n                  enter=\"ease-out duration-300\"\n                  enterFrom=\"opacity-0\"\n                  enterTo=\"opacity-100\"\n                  leave=\"ease-in duration-200\"\n                  leaveFrom=\"opacity-100\"\n                  leaveTo=\"opacity-0\"\n               >\n                  <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n               </Transition.Child>\n               \n               <div className=\"fixed inset-0 overflow-y-auto\">\n                  <div className=\"flex min-h-full items-end sm:items-center justify-center p-0 sm:p-4 text-center\">\n                     <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0 scale-95\"\n                        enterTo=\"opacity-100 scale-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100 scale-100\"\n                        leaveTo=\"opacity-0 scale-95\"\n                     >\n                        <Dialog.Panel\n                           className={cn(\n                              ModalAnatomy.panel({ size }),\n                              panelClassName,\n                           )}\n                           {...rest}\n                        >\n                           {title && <Dialog.Title\n                               as=\"h3\"\n                               className={cn(ModalAnatomy.title(), titleClassName)}\n                           >\n                              {title}\n                           </Dialog.Title>}\n                           \n                           {withCloseButton &&\n                               <CloseButton onClick={onClose} className={cn(ModalAnatomy.closeButton(), closeButtonClassName)} />}\n                           \n                           <div className={cn(ModalAnatomy.body(), bodyClassName)}>\n                              {children}\n                           </div>\n                        \n                        </Dialog.Panel>\n                     </Transition.Child>\n                  </div>\n               </div>\n            </Dialog>\n         </Transition>\n      </>\n   )\n   \n})\n\nModal.displayName = \"Modal\"\n"
      }
    ]
  },
  {
    "component": "multi-select",
    "files": [
      {
        "name": "index.tsx",
        "dir": "multi-select",
        "content": "/**\n * Chalk UI - multi-select/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./multi-select\"\n"
      },
      {
        "name": "multi-select.tsx",
        "dir": "multi-select",
        "content": "/**\n * Chalk UI - multi-select/multi-select.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { Transition } from \"@headlessui/react\"\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva } from \"class-variance-authority\"\nimport _filter from \"lodash/filter\"\nimport _find from \"lodash/find\"\nimport React, { Fragment, useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { Badge } from \"../badge\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\nexport const MultiSelectAnatomy = defineStyleAnatomy({\n   input: cva(\"UI-MultiSelect__input relative flex flex-wrap gap-2 cursor-text p-2\", {\n      variants: {\n         isOpen: {\n            true: \"border-brand-500 hover:border-brand-500 ring-1 ring-brand-500\",\n            false: null,\n         },\n      },\n   }),\n   menuContainer: cva([\n      \"UI-MultiSelect__menuContainer absolute z-10 -bottom-2\",\n      \"left-0 translate-y-full max-h-56 w-full overflow-auto rounded-md p-2 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\",\n      // Light\n      \"bg-white\",\n      // Dark\n      \"dark:bg-gray-800\",\n   ]),\n   menuItem: cva(\"UI-MultiSelect__menuItem relative cursor-pointer py-2 pl-3 pr-9 rounded-md\", {\n      variants: {\n         highlighted: {\n            true: \"bg-gray-100 hover:bg-gray-100 dark:bg-gray-700 dark:hover:bg-gray-700\",\n            false: null,\n         },\n      },\n   }),\n   menuItemImage: cva(\"UI-MultiSelect__menuItemImage flex-none justify-center w-8 h-8 mr-3 rounded-full overflow-hidden relative bg-slate-200\"),\n})\n\nexport type MultiSelectOption = { value: string, label?: string, description?: string, image?: React.ReactNode }\n\n\nexport interface MultiSelectProps extends Omit<TextInputProps, \"defaultValue\" | \"onChange\">, InputStyling,\n   ComponentWithAnatomy<typeof MultiSelectAnatomy> {\n   options: MultiSelectOption[]\n   value?: MultiSelectOption[\"value\"][]\n   defaultValue?: MultiSelectOption[\"value\"][]\n   onChange?: (values: MultiSelectOption[\"value\"][]) => void\n   isLoading?: boolean\n   discrete?: boolean\n   max?: number\n}\n\nexport const MultiSelect = React.forwardRef<HTMLInputElement, MultiSelectProps>((props, ref) => {\n   \n   const [{\n      children,\n      className,\n      size = \"md\",\n      intent = \"basic\",\n      isLoading,\n      leftAddon,\n      leftIcon,\n      rightIcon,\n      rightAddon,\n      options,\n      defaultValue,\n      placeholder,\n      value,\n      onChange,\n      max,\n      discrete = false,\n      menuContainerClassName,\n      menuItemClassName,\n      menuItemImageClassName,\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps<MultiSelectProps>(props, useId())\n   \n   const inputRef = useRef<HTMLInputElement>(null)\n   const ulRef = useRef<HTMLUListElement>(null)\n   const [values, setValues] = useState<MultiSelectOption[\"value\"][]>((value ?? defaultValue) ?? [])\n   const [tagInputValue, setTagInputValue] = useState(\"\")\n   const inputFocused = useDisclosure(false)\n   const listDisclosure = useDisclosure(false)\n   \n   const [highlightedOptionIndex, setHighlightedOptionIndex] = useState(0)\n   \n   const selectOptions = useMemo(() => {\n      // if user types an input, filter by similar labels or values\n      // else show options which are not selected\n      const filtered = _filter(options, o => !values.includes(o.value))\n      return tagInputValue.length > 0 ? _filter(filtered, o => (o.label\n         ? o.label.toLowerCase().includes(tagInputValue.toLowerCase())\n         : o.value.toLowerCase().includes(tagInputValue.toLowerCase()))) : filtered\n   }, [options, values, tagInputValue])\n   \n   useEffect(() => {\n      onChange && onChange(values)\n   }, [values])\n   \n   useEffect(() => {\n      if (value) setValues(value)\n   }, [value])\n   \n   function handleAddValue(value: string) {\n      if (!!max) {\n         if (max !== 1 && values.length < max) {\n            setValues([...values, value])\n         }\n         if (max !== 1 && values.length >= max) {\n            setValues([...values.slice(0, values.length - 1), value])\n         }\n         if (max === 1) {\n            setValues([value])\n         }\n      }\n      if (!max) {\n         setValues([...values, value])\n      }\n   }\n   \n   function handlePopValue() {\n      setValues(v => v.slice(0, v.length - 1))\n   }\n   \n   function handleRemoveValue(value: string) {\n      setValues(v => v.filter(a => a !== value))\n   }\n   \n   \n   const closeList = () => {\n      listDisclosure.close()\n   }\n   \n   /**\n    * When the user is focused on the input and hits enter,\n    * if the there's only one option and the tagInputValue is not empty, add the option to the selected values\n    * @param event\n    */\n   const handleKeyDown = useCallback((event: KeyboardEvent) => {\n      if (event.key === \"Enter\" && inputRef.current) {\n         if (selectOptions.length === 1 && selectOptions[0] && tagInputValue.length > 0) {\n            handleAddValue(selectOptions[0].value) // Add value\n            setTagInputValue(\"\") // Reset input\n            closeList() // Close list\n         }\n         if (tagInputValue.length === 0 && selectOptions[highlightedOptionIndex]) {\n            handleAddValue(selectOptions[highlightedOptionIndex]!.value)\n            setHighlightedOptionIndex(0)\n         }\n      }\n      if ((event.key === \"Backspace\" || event.key === \"Delete\") && tagInputValue.length === 0) {\n         handlePopValue()\n      }\n   }, [selectOptions, highlightedOptionIndex, tagInputValue])\n   \n   const handleKeyUp = useCallback((e: KeyboardEvent) => {\n      if (e.key === \"ArrowDown\") {\n         setHighlightedOptionIndex(i => {\n            const newI = (i + 1) <= (selectOptions.length - 1) ? (i + 1) : 0\n            scrollToHighlighted(newI)\n            return newI\n         })\n      }\n      if (e.key === \"ArrowUp\") {\n         setHighlightedOptionIndex(i => {\n            const newI = (i - 1) >= 0 ? (i - 1) : (selectOptions.length - 1)\n            scrollToHighlighted(newI)\n            return newI\n         })\n      }\n   }, [selectOptions])\n   \n   useEffect(() => {\n      \n      window.addEventListener(\"keyup\", handleKeyUp)\n      if (inputRef.current) {\n         inputRef.current.addEventListener(\"keydown\", handleKeyDown)\n      }\n      \n      return () => {\n         if (inputRef.current) {\n            inputRef.current.removeEventListener(\"keydown\", handleKeyDown)\n         }\n         window.removeEventListener(\"keyup\", handleKeyUp)\n      }\n   }, [inputRef, listDisclosure, selectOptions, highlightedOptionIndex])\n   \n   const itemsRef = useRef<any>(null)\n   \n   function getMap() {\n      if (!itemsRef.current) {\n         // Initialize the Map on first usage.\n         itemsRef.current = new Map()\n      }\n      return itemsRef.current\n   }\n   \n   function scrollToHighlighted(index: number) {\n      const map = getMap()\n      const node = map.get(index)\n      if (index === selectOptions.length - 1) {\n         ulRef.current?.scrollTo({ top: ulRef.current?.scrollHeight, behavior: \"smooth\" })\n      } else if (index === 0) {\n         ulRef.current?.scrollTo({ top: 0, behavior: \"smooth\" })\n      } else {\n         node?.scrollIntoView({\n            // behavior: 'smooth',\n            block: \"nearest\",\n            inline: \"end\",\n         })\n      }\n   }\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps}\n         >\n            <div className={cn(inputContainerStyle())}>\n               \n               <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n               <InputIcon icon={leftIcon} size={size} side={\"left\"} />\n               \n               <div\n                  className={cn(\n                     \"form-input\",\n                     InputAnatomy.input({\n                        size,\n                        intent,\n                        hasError: !!basicFieldProps.error,\n                        untouchable: !!basicFieldProps.isDisabled,\n                        hasRightAddon: !!rightAddon,\n                        hasRightIcon: !!rightIcon,\n                        hasLeftAddon: !!leftAddon,\n                        hasLeftIcon: !!leftIcon,\n                     }),\n                     MultiSelectAnatomy.input({ isOpen: inputFocused.isOpen }),\n                  )}\n                  onClick={(e) => {\n                     if (!inputFocused.isOpen && !isLoading) {\n                        inputRef.current?.focus()\n                     }\n                  }}\n               >\n                  \n                  \n                  {isLoading ? (\n                     <p>...</p>\n                  ) : <>\n                     \n                     {values.map((value, index) => (\n                        <span key={index}>\n                           <Badge\n                              tag\n                              size=\"lg\"\n                              intent={discrete ? \"basic\" : \"gray\"}\n                              isClosable={!basicFieldProps.isDisabled && !discrete}\n                              onClose={() => handleRemoveValue(value)}\n                              className={cn({ \"px-1\": discrete })}\n                           >\n                              <span>{_find(options, [\"value\", value])?.label ?? _find(options, [\"value\", value])?.value}</span>\n                           </Badge>\n                        </span>\n                     ))}\n                     \n                     <input\n                        id={basicFieldProps.id}\n                        value={tagInputValue}\n                        onChange={e => {\n                           inputFocused.open()\n                           setTagInputValue(e.target.value ?? \"\")\n                           if (selectOptions.length > 0) {\n                              listDisclosure.open()\n                           }\n                        }}\n                        onFocus={() => {\n                           inputFocused.open()\n                           listDisclosure.open()\n                        }}\n                        onClick={() => {\n                           inputFocused.open()\n                           listDisclosure.open()\n                        }}\n                        onBlur={() => {\n                           setTimeout(() => {\n                              inputFocused.close()\n                              listDisclosure.close()\n                           }, 200)\n                        }}\n                        onKeyPress={e => {\n                           e.key === \"Enter\" && e.preventDefault()\n                        }}\n                        disabled={basicFieldProps.isDisabled || isLoading}\n                        className={cn(\"outline-none focus:outline-none focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 !bg-transparent\", { \"w-1\": !inputFocused.isOpen })}\n                        ref={inputRef}\n                     />\n                     \n                     <Transition\n                        show={listDisclosure.isOpen && selectOptions.length > 0}\n                        as={Fragment}\n                        leave=\"transition ease-in duration-100\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                     >\n                        <ul\n                           className={cn(MultiSelectAnatomy.menuContainer(), menuContainerClassName)}\n                           ref={ulRef}\n                        >\n                           {selectOptions.map((o, index) => {\n                              \n                              const imageComponent = o.image ?\n                                 <div className={cn(MultiSelectAnatomy.menuItemImage(), menuItemImageClassName)}>\n                                    {o.image}\n                                 </div> : <></>\n                              \n                              return (\n                                 <li\n                                    key={o.value}\n                                    className={cn(MultiSelectAnatomy.menuItem({ highlighted: highlightedOptionIndex === index }), menuItemClassName)}\n                                    onClick={() => {\n                                       handleAddValue(o.value)\n                                       setTagInputValue(\"\")\n                                    }}\n                                    onMouseMove={() => {\n                                       setHighlightedOptionIndex(index)\n                                    }}\n                                    ref={(node) => {\n                                       const map = getMap()\n                                       if (node) {\n                                          map.set(index, node)\n                                       } else {\n                                          map.delete(index)\n                                       }\n                                    }}\n                                 >\n                                    <div className=\"flex w-full items-center\">\n                                       {imageComponent}\n                                       <div>\n                                          <div\n                                             className={cn(\"text-base block truncate\")}\n                                          >\n                                             {o.label ?? o.value}\n                                          </div>\n                                          {o.description && <div className={cn(\"text-sm opacity-70\")}>{o.description}</div>}\n                                       </div>\n                                    </div>\n                                 </li>\n                              )\n                           })}\n                        </ul>\n                     </Transition>\n                  \n                  </>}\n               </div>\n               \n               <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n               <InputIcon icon={rightIcon} size={size} side={\"right\"} />\n            \n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nMultiSelect.displayName = \"MultiSelect\"\n\nfunction useDisclosure(\n   initialState: boolean,\n   callbacks?: { onOpen?(): void; onClose?(): void },\n) {\n   const [opened, setOpened] = useState(initialState)\n   \n   const open = () => {\n      if (!opened) {\n         setOpened(true)\n         callbacks?.onOpen?.()\n      }\n   }\n   \n   const close = () => {\n      if (opened) {\n         setOpened(false)\n         callbacks?.onClose?.()\n      }\n   }\n   \n   const toggle = () => {\n      opened ? close() : open()\n   }\n   \n   return { isOpen: opened, open, close, toggle } as const\n}\n"
      }
    ]
  },
  {
    "component": "number-input",
    "files": [
      {
        "name": "index.tsx",
        "dir": "number-input",
        "content": "/**\n * Chalk UI - number-input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./number-input\"\n"
      },
      {
        "name": "number-input.tsx",
        "dir": "number-input",
        "content": "/**\n * Chalk UI - number-input/number-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport * as numberInput from \"@zag-js/number-input\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva } from \"class-variance-authority\"\nimport React, { useEffect, useId } from \"react\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\n\nexport const NumberInputAnatomy = defineStyleAnatomy({\n   input: cva(\"UI-NumberInput__input\", {\n      variants: {\n         discrete: {\n            true: false,\n            false: \"text-center rounded-none border-l-transparent border-r-transparent hover:border-l-transparent hover:border-r-transparent\",\n         },\n      },\n      defaultVariants: {\n         discrete: false,\n      },\n   }),\n   control: cva(\n      [\n         \"UI-NumberInput__control\",\n         \"flex flex-none items-center justify-center w-10 border shadow-sm text-lg font-medium\",\n         \"disabled:shadow-none disabled:pointer-events-none\",\n         \"hover:!bg-gray-100 transition\",\n         // Light\n         \"!bg-white border-gray-300 disabled:!bg-gray-50 disabled:!bg-gray-50 disabled:text-gray-300 disabled:border-gray-200\",\n         // Dark\n         \"dark:!bg-gray-900 dark:border-gray-700 dark:hover:!bg-gray-800\",\n         \"dark:disabled:!bg-gray-800 dark:disabled:border-gray-800 dark:disabled:text-gray-700\",\n      ],\n      {\n         variants: {\n            size: { sm: \"\", md: \"\", lg: \"\" },\n            position: { left: null, right: null },\n            hasLeftAddon: {\n               true: \"border-l-0\",\n               false: null,\n            },\n            hasRightAddon: {\n               true: \"border-r-0\",\n               false: null,\n            },\n         },\n         compoundVariants: [\n            { hasRightAddon: false, hasLeftAddon: false, position: \"left\", className: \"rounded-bl-md rounded-tl-md\" },\n            { hasRightAddon: false, hasLeftAddon: false, position: \"right\", className: \"rounded-br-md rounded-tr-md\" },\n         ],\n         defaultVariants: {\n            size: \"md\",\n            hasLeftAddon: false,\n            hasRightAddon: false,\n         },\n      },\n   ),\n})\n\nexport interface NumberInputProps extends Omit<TextInputProps, \"defaultValue\" | \"onChange\" | \"value\">, InputStyling,\n   ComponentWithAnatomy<typeof NumberInputAnatomy> {\n   defaultValue?: number\n   value?: number\n   onChange?: (value: number) => void\n   min?: number\n   max?: number\n   minFractionDigits?: number\n   maxFractionDigits?: number\n   precision?: number\n   step?: number\n   allowMouseWheel?: boolean\n   fullWidth?: boolean\n   discrete?: boolean\n}\n\nexport const NumberInput = React.forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n   \n   const [{\n      children,\n      className,\n      size,\n      intent,\n      leftAddon,\n      leftIcon,\n      rightAddon,\n      rightIcon,\n      defaultValue = 0,\n      placeholder,\n      onChange,\n      fullWidth,\n      discrete,\n      value,\n      controlClassName,\n      inputClassName,\n      min = 0, max, minFractionDigits, maxFractionDigits = 2, precision, step, allowMouseWheel = true,\n      ...rest\n   }, { id, ...basicFieldProps }] = extractBasicFieldProps<NumberInputProps>(props, useId())\n   \n   const [state, send] = useMachine(numberInput.machine({\n      id: useId(), // /!\\ Zag.js id prop for the NumberInput Machine doesn't work\n      name: basicFieldProps.name,\n      disabled: basicFieldProps.isDisabled,\n      readOnly: basicFieldProps.isReadOnly,\n      value: value ? String(value) : undefined,\n      min,\n      max,\n      minFractionDigits,\n      maxFractionDigits,\n      step,\n      allowMouseWheel,\n      clampValueOnBlur: true,\n      onChange: (v) => {\n         onChange && onChange(v.valueAsNumber)\n      },\n   }))\n   \n   useEffect(() => {\n      api.setValue(defaultValue)\n   }, [])\n   \n   const api = numberInput.connect(state, send, normalizeProps)\n   return (\n      <>\n         <BasicField\n            {...api.rootProps}\n            {...basicFieldProps}\n            id={api.inputProps.id}\n         >\n            <div className={cn(inputContainerStyle())}>\n               \n               <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n               <InputIcon icon={leftIcon} size={size} side={\"left\"} />\n               \n               {!discrete && (\n                  <button\n                     className={cn(NumberInputAnatomy.control({\n                        size,\n                        position: \"left\",\n                        hasLeftAddon: !!leftAddon || !!leftIcon,\n                     }), controlClassName)}\n                     {...api.decrementTriggerProps}>\n                     -\n                  </button>\n               )}\n               \n               <input\n                  type=\"number\"\n                  name={basicFieldProps.name}\n                  className={cn(\n                     \"form-input\",\n                     InputAnatomy.input({\n                        size,\n                        intent,\n                        hasError: !!basicFieldProps.error,\n                        untouchable: !!basicFieldProps.isDisabled,\n                        hasRightAddon: !!rightAddon || !discrete,\n                        hasRightIcon: !!rightIcon,\n                        hasLeftAddon: !!leftAddon || !discrete,\n                        hasLeftIcon: !!leftIcon,\n                     }),\n                     NumberInputAnatomy.input({ discrete }),\n                     inputClassName,\n                     className,\n                  )}\n                  disabled={basicFieldProps.isDisabled}\n                  {...api.inputProps}\n                  {...rest}\n                  ref={ref}\n               />\n               \n               {!discrete && (\n                  <button\n                     className={cn(NumberInputAnatomy.control({\n                        size,\n                        position: \"right\",\n                        hasRightAddon: !!rightAddon || !!rightIcon,\n                     }), controlClassName)}\n                     {...api.incrementTriggerProps}\n                  >\n                     +\n                  </button>\n               )}\n               \n               <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n               <InputIcon icon={rightIcon} size={size} side={\"right\"} />\n            \n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nNumberInput.displayName = \"NumberInput\"\n"
      }
    ]
  },
  {
    "component": "page-header",
    "files": [
      {
        "name": "index.tsx",
        "dir": "page-header",
        "content": "/**\n * Chalk UI - page-header/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./page-header\"\n"
      },
      {
        "name": "page-header.tsx",
        "dir": "page-header",
        "content": "/**\n * Chalk UI - page-header/page-header.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const PageHeaderAnatomy = defineStyleAnatomy({\n   body: cva(\"UI-PageHeader__body md:flex md:items-center md:justify-between md:space-x-5\"),\n   title: cva(\"UI-PageHeader__title font-bold text-gray-900 dark:text-gray-200\", {\n      variants: {\n         size: {\n            sm: \"text-lg sm:text-xl\",\n            md: \"text-xl sm:text-2xl\",\n            lg: \"text-2xl sm:text-3xl\",\n            xl: \"text-2xl sm:text-4xl\",\n         },\n      },\n      defaultVariants: {\n         size: \"xl\",\n      },\n   }),\n   actionContainer: cva(\"UI-PageHeader__actionContainer justify-stretch mt-6 flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end sm:space-y-0 sm:space-x-3 sm:space-x-reverse md:mt-0 md:flex-row md:space-x-3\"),\n   description: cva(\"UI-PageHeader__description text-sm font-medium text-gray-500 dark:text-gray-400\"),\n   detailsContainer: cva(\"UI-PageHeader__detailsContainer block sm:flex items-start sm:space-x-5\", {\n      variants: {\n         withImage: {\n            true: \"flex-col gap-2 sm:flex-row sm:gap-6\",\n            false: null,\n         },\n      },\n   }),\n})\n\nexport interface PageHeaderProps extends React.ComponentPropsWithRef<\"div\">,\n   ComponentWithAnatomy<typeof PageHeaderAnatomy>,\n   VariantProps<typeof PageHeaderAnatomy.title> {\n   title?: string\n   description?: string\n   action?: React.ReactNode\n   image?: React.ReactNode\n}\n\nexport const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      size = \"xl\",\n      title,\n      description,\n      action,\n      image,\n      titleClassName,\n      actionContainerClassName,\n      descriptionClassName,\n      detailsContainerClassName,\n      bodyClassName,\n      ...rest\n   } = props\n   \n   return (\n      <>\n         <header\n            aria-label={title}\n            className={cn(\n               PageHeaderAnatomy.body(),\n               bodyClassName,\n               className,\n            )}\n         >\n            <div className={cn(PageHeaderAnatomy.detailsContainer(), detailsContainerClassName)}>\n               {image && <div className=\"flex-shrink-0\">\n                   <div className=\"relative\">\n                      {image}\n                   </div>\n               </div>}\n               <div className=\"\">\n                  <h1 className={cn(PageHeaderAnatomy.title({ size }), titleClassName)}>{title}</h1>\n                  {description && <p className={cn(PageHeaderAnatomy.description(), descriptionClassName)}>\n                     {description}\n                  </p>}\n               </div>\n            </div>\n            <div className={cn(PageHeaderAnatomy.actionContainer(), actionContainerClassName)}>\n               {action}\n            </div>\n         </header>\n      </>\n   )\n   \n})\n\nPageHeader.displayName = \"PageHeader\"\n"
      }
    ]
  },
  {
    "component": "phone-number-input",
    "files": [
      {
        "name": "index.tsx",
        "dir": "phone-number-input",
        "content": "/**\n * Chalk UI - phone-number-input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./phone-number-input\"\n"
      },
      {
        "name": "phone-number-input.tsx",
        "dir": "phone-number-input",
        "content": "/**\n * Chalk UI - phone-number-input/phone-number-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { CountryCode, E164Number } from \"libphonenumber-js\"\nimport React, { useId } from \"react\"\nimport PhoneInput from \"react-phone-number-input\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\nexport interface PhoneNumberInputProps extends Omit<TextInputProps, \"value\" | \"onChange\"> {\n   value?: string | null | undefined\n   onChange?: (value: E164Number | undefined) => void\n   defaultCountry?: CountryCode\n   countrySelectRef?: React.Ref<HTMLSelectElement>\n}\n\nexport type { CountryCode, E164Number }\n\nexport const PhoneNumberInput = React.forwardRef<HTMLInputElement, PhoneNumberInputProps>((props, ref) => {\n   \n   const [{\n      className,\n      size = \"md\",\n      intent = \"basic\",\n      value,\n      onChange,\n      defaultCountry = \"US\",\n      leftIcon,\n      leftAddon,\n      rightAddon,\n      rightIcon,\n      countrySelectRef,\n   }, basicFieldProps] = extractBasicFieldProps<PhoneNumberInputProps>(props, useId())\n   \n   return (\n      <>\n         <BasicField\n            className={cn(\"w-full gap-1\")}\n            {...basicFieldProps}\n         >\n            \n            <div className={cn(inputContainerStyle())}>\n               \n               <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n               <InputIcon icon={leftIcon} size={size} side={\"left\"} />\n               \n               <PhoneInput\n                  id={basicFieldProps.id}\n                  className={cn(\n                     \"flex w-full relative\",\n                     className,\n                  )}\n                  defaultCountry={defaultCountry as CountryCode}\n                  addInternationalOption={false}\n                  control={null}\n                  style={{ display: \"flex\", position: \"relative\" }}\n                  countrySelectProps={{\n                     className: cn(\n                        \"form-select\",\n                        InputAnatomy.input({\n                           size,\n                           intent,\n                           hasError: !!basicFieldProps.error,\n                           untouchable: !!basicFieldProps.isDisabled,\n                           hasRightAddon: !!rightAddon,\n                           // hasRightIcon: !!rightIcon,\n                           hasLeftAddon: !!leftAddon,\n                           hasLeftIcon: !!leftIcon,\n                        }),\n                        \"flex-none w-[4.5rem] truncate rounded-r-none border-r-transparent\",\n                     ),\n                     disabled: basicFieldProps.isDisabled,\n                     // ref: countrySelectRef, /!\\ Bug where ref is undefined when we pass it\n                  }}\n                  numberInputProps={{\n                     className: cn(\n                        \"form-input\",\n                        InputAnatomy.input({\n                           size,\n                           intent,\n                           hasError: !!basicFieldProps.error,\n                           untouchable: !!basicFieldProps.isDisabled,\n                           hasRightAddon: !!rightAddon,\n                           hasRightIcon: !!rightIcon,\n                           hasLeftAddon: !!leftAddon,\n                           // hasLeftIcon: !!leftIcon,\n                        }),\n                        \"rounded-l-none border-l-transparent\",\n                     ),\n                     disabled: basicFieldProps.isDisabled,\n                     // ref: ref, /!\\ Bug where ref is undefined when we pass it\n                  }}\n                  flagComponent={(flag) => (\n                     <img\n                        className=\"w-6 absolute h-full inset-y-0 ml-3\"\n                        src={flag.flagUrl?.replace(\"{XX}\", flag.country)}\n                     />\n                  )}\n                  value={value as E164Number}\n                  onChange={value => {\n                     onChange && onChange(value)\n                  }}\n                  // ref={ref as any}\n               />\n               \n               <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n               <InputIcon icon={rightIcon} size={size} side={\"right\"} />\n            \n            </div>\n         \n         </BasicField>\n      </>\n   )\n   \n})\n\nPhoneNumberInput.displayName = \"PhoneNumberInput\"\n"
      }
    ]
  },
  {
    "component": "price-input",
    "files": [
      {
        "name": "currencies.ts",
        "dir": "price-input",
        "content": "/**\n * Chalk UI - price-input/currencies.ts\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { Currency } from \"dinero.js\"\n\nexport const currencies = {\n   ad: \"EUR\",\n   ae: \"AED\",\n   af: \"AFN\",\n   ag: \"XCD\",\n   ai: \"XCD\",\n   al: \"ALL\",\n   am: \"AMD\",\n   ao: \"AOA\",\n   ar: \"ARS\",\n   as: \"USD\",\n   at: \"EUR\",\n   au: \"AUD\",\n   aw: \"AWG\",\n   ax: \"EUR\",\n   az: \"AZN\",\n   ba: \"BAM\",\n   bb: \"BBD\",\n   bd: \"BDT\",\n   be: \"EUR\",\n   bf: \"XOF\",\n   bg: \"BGN\",\n   bh: \"BHD\",\n   bi: \"BIF\",\n   bj: \"XOF\",\n   bl: \"EUR\",\n   bm: \"BMD\",\n   bn: \"BND\",\n   bo: \"BOB\",\n   bq: \"USD\",\n   br: \"BRL\",\n   bs: \"BSD\",\n   bt: \"BTN\",\n   bv: \"NOK\",\n   bw: \"BWP\",\n   by: \"BYN\",\n   bz: \"BZD\",\n   ca: \"CAD\",\n   cc: \"AUD\",\n   cd: \"CDF\",\n   cf: \"XAF\",\n   cg: \"CDF\",\n   ch: \"CHF\",\n   ci: \"XOF\",\n   ck: \"NZD\",\n   cl: \"CLP\",\n   cm: \"XAF\",\n   cn: \"CNY\",\n   co: \"COP\",\n   cr: \"CRC\",\n   cu: \"CUC\",\n   cv: \"CVE\",\n   cw: \"ANG\",\n   cx: \"AUD\",\n   cy: \"EUR\",\n   cz: \"CZK\",\n   de: \"EUR\",\n   dj: \"DJF\",\n   dk: \"DKK\",\n   dm: \"DOP\",\n   do: \"DOP\",\n   dz: \"DZD\",\n   ec: \"USD\",\n   ee: \"EUR\",\n   eg: \"EGP\",\n   eh: \"MAD\",\n   er: \"ERN\",\n   es: \"EUR\",\n   et: \"ETB\",\n   fi: \"EUR\",\n   fj: \"FJD\",\n   fm: \"USD\",\n   fo: \"DKK\",\n   fr: \"EUR\",\n   ga: \"XAF\",\n   gb: \"GBP\",\n   gd: \"XCD\",\n   ge: \"GEL\",\n   gf: \"EUR\",\n   gg: \"GBP\",\n   gh: \"GHS\",\n   gi: \"GIP\",\n   gl: \"DKK\",\n   gm: \"GMD\",\n   gn: \"GNF\",\n   gp: \"EUR\",\n   gq: \"XAF\",\n   gr: \"EUR\",\n   gt: \"GTQ\",\n   gu: \"USD\",\n   gw: \"XOF\",\n   gy: \"GYD\",\n   hk: \"HKD\",\n   hn: \"HNL\",\n   hr: \"EUR\",\n   ht: \"HTG\",\n   hu: \"HUF\",\n   id: \"IDR\",\n   ie: \"EUR\",\n   il: \"ILS\",\n   im: \"GBP\",\n   in: \"INR\",\n   io: \"USD\",\n   iq: \"IQD\",\n   ir: \"IRR\",\n   is: \"ISK\",\n   it: \"EUR\",\n   je: \"GBP\",\n   jm: \"JMD\",\n   jo: \"JOD\",\n   jp: \"JPY\",\n   ke: \"KES\",\n   kg: \"KGS\",\n   kh: \"KHR\",\n   ki: \"AUD\",\n   km: \"KMF\",\n   kn: \"XCD\",\n   kp: \"KPW\",\n   kr: \"KRW\",\n   kw: \"KWD\",\n   ky: \"KYD\",\n   kz: \"KZT\",\n   lb: \"LBP\",\n   lc: \"XCD\",\n   li: \"CHF\",\n   lk: \"LKR\",\n   lr: \"LRD\",\n   ls: \"LSL\",\n   lt: \"EUR\",\n   lu: \"EUR\",\n   lv: \"EUR\",\n   ly: \"LYD\",\n   ma: \"MAD\",\n   mc: \"EUR\",\n   md: \"MDL\",\n   me: \"EUR\",\n   mf: \"EUR\",\n   mg: \"MGA\",\n   mh: \"USD\",\n   ml: \"XOF\",\n   mm: \"MMK\",\n   mn: \"MNT\",\n   mo: \"MOP\",\n   mp: \"USD\",\n   mq: \"EUR\",\n   mr: \"MRU\",\n   ms: \"XCD\",\n   mt: \"EUR\",\n   mu: \"MUR\",\n   mv: \"MVR\",\n   mw: \"MWK\",\n   mx: \"MXN\",\n   my: \"MYR\",\n   mz: \"MZN\",\n   na: \"NAD\",\n   nc: \"XPF\",\n   ne: \"NGN\",\n   nf: \"AUD\",\n   ng: \"NGN\",\n   ni: \"NIO\",\n   nl: \"EUR\",\n   no: \"NOK\",\n   np: \"NPR\",\n   nr: \"AUD\",\n   nu: \"NZD\",\n   nz: \"NZD\",\n   om: \"OMR\",\n   pa: \"PAB\",\n   pe: \"PEN\",\n   pf: \"XPF\",\n   pg: \"PGK\",\n   ph: \"PHP\",\n   pk: \"PKR\",\n   pl: \"PLN\",\n   pm: \"EUR\",\n   pn: \"NZD\",\n   pr: \"USD\",\n   pt: \"EUR\",\n   pw: \"USD\",\n   py: \"PYG\",\n   qa: \"QAR\",\n   re: \"EUR\",\n   ro: \"RON\",\n   rs: \"RSD\",\n   ru: \"RUB\",\n   rw: \"RWF\",\n   sa: \"SAR\",\n   sb: \"SBD\",\n   sc: \"SCR\",\n   sd: \"SDG\",\n   se: \"SEK\",\n   sg: \"SGD\",\n   sh: \"SHP\",\n   si: \"EUR\",\n   sj: \"NOK\",\n   sk: \"EUR\",\n   sl: \"SLL\",\n   sm: \"EUR\",\n   sn: \"XOF\",\n   so: \"SOS\",\n   sr: \"SRD\",\n   ss: \"SSP\",\n   st: \"STN\",\n   sv: \"SVC\",\n   sx: \"ANG\",\n   sy: \"SYP\",\n   sz: \"SZL\",\n   tc: \"USD\",\n   td: \"XAF\",\n   tf: \"EUR\",\n   tg: \"XOF\",\n   th: \"THB\",\n   tj: \"TJS\",\n   tk: \"NZD\",\n   tl: \"USD\",\n   tm: \"TMT\",\n   tn: \"TND\",\n   to: \"TOP\",\n   tt: \"TTD\",\n   tv: \"AUD\",\n   tw: \"TWD\",\n   tz: \"TZS\",\n   ua: \"UAH\",\n   ug: \"UGX\",\n   um: \"USD\",\n   us: \"USD\",\n   uy: \"UYU\",\n   uz: \"UZS\",\n   va: \"EUR\",\n   vc: \"XCD\",\n   ve: \"VES\",\n   vg: \"USD\",\n   vi: \"USD\",\n   vn: \"VND\",\n   vu: \"VUV\",\n   wf: \"XPF\",\n   ws: \"USD\",\n   ye: \"YER\",\n   yt: \"EUR\",\n   za: \"ZAR\",\n   zm: \"ZMW\",\n   zw: \"ZWL\",\n   hm: \"AUD\",\n   fk: \"FKP\",\n   gs: \"GEL\",\n   la: \"LAK\",\n   mk: \"MKD\",\n   aq: \"USD\",\n   ps: \"ILS\",\n   tr: \"TRY\",\n} as { [p: string]: Currency }\n"
      },
      {
        "name": "index.tsx",
        "dir": "price-input",
        "content": "/**\n * Chalk UI - price-input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./price-input\"\n"
      },
      {
        "name": "price-input.tsx",
        "dir": "price-input",
        "content": "/**\n * Chalk UI - price-input/price-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport Dinero, { Currency } from \"dinero.js\"\nimport React, { ChangeEvent, useCallback, useEffect, useId, useMemo, useState } from \"react\"\nimport { extractBasicFieldProps } from \"../basic-field\"\nimport { useUILocaleConfig } from \"../core\"\nimport { TextInput, TextInputProps } from \"../text-input\"\nimport { currencies } from \"./currencies\"\n\n\nexport interface PriceInputProps extends Omit<TextInputProps, \"value\" | \"onChange\" | \"defaultValue\"> {\n   value?: number\n   defaultValue?: number\n   onChange?: (value: number) => void\n   locale?: string\n   currency?: Currency\n}\n\nexport const PriceInput = React.forwardRef<HTMLInputElement, PriceInputProps>((props, ref) => {\n   \n   const [{\n      value,\n      defaultValue = 0,\n      locale: _locale,\n      currency: _currency,\n      onChange,\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps<PriceInputProps>(props, useId())\n   \n   const { locale: lng, country } = useUILocaleConfig()\n   \n   const locale = useMemo(() => _locale ?? lng, [_locale, lng])\n   const currency = useMemo(() => _currency ?? currencies[country], [_currency, country])\n   \n   const [amount, setAmount] = useState<number>(value ?? defaultValue)\n   const [isEditing, setIsEditing] = useState(false)\n   \n   const dineroObject = Dinero({ amount: amount, currency }).setLocale(locale)\n   \n   const formattedValue = dineroObject.toFormat()\n   \n   const [inputValue, setInputValue] = useState(formatNumber(dineroObject.toUnit().toString(), locale))\n   \n   useEffect(() => {\n      onChange && onChange((dineroObject.toUnit() * 100))\n   }, [dineroObject])\n   \n   const localizedPattern = useCallback((value: string) => {\n      let incorrectSeparator = \",\"\n      // Locale that use ',' as separator add it to the condition: if(locale.includes('fr') || locales.includes('xx'))\n      if (locale.includes(\"fr\")) incorrectSeparator = \".\"\n      return truncateAfterSecondDecimal(removeNonNumericCharacters(value)).replaceAll(incorrectSeparator, \"\")\n   }, [locale])\n   \n   const toFloat = useCallback((value: string) => {\n      return extractFloat(truncateAfterSecondDecimal(removeNonNumericCharacters(value)).replaceAll(\",\", \".\"))\n   }, [])\n   \n   function handleOnChange(event: ChangeEvent<HTMLInputElement>) {\n      \n      let _amount = 0\n      let _value = \"\"\n      try {\n         _value = localizedPattern(event.target.value)\n         _amount = _value.length > 0 ? toFloat(event.target.value) : 0\n      }\n      catch (e) {\n         setInputValue(\"0\")\n         setAmount((_amount ?? 0) * 100)\n      }\n      setAmount(_amount * 100)\n      setInputValue(_value)\n   }\n   \n   \n   return (\n      <>\n         <TextInput\n            value={isEditing ? inputValue : formattedValue}\n            onChange={handleOnChange}\n            onBlur={() => {\n               setInputValue(v => formatNumber(dineroObject.toUnit().toString(), locale))\n               setIsEditing(false)\n            }}\n            onFocus={() => {\n               setIsEditing(true)\n            }}\n            ref={ref}\n            {...basicFieldProps}\n            {...rest}\n         />\n      </>\n   )\n   \n})\n\nfunction extractFloat(input: string): number {\n   // Use a regular expression to remove any non-numeric characters\n   const floatString = input.replace(/[^\\d.-]/g, \"\")\n   \n   // Convert the extracted string to a float and return it\n   return parseFloat(floatString)\n}\n\nfunction removeNonNumericCharacters(input: string): string {\n   return input.replace(/[^0-9,.]\\s/g, \"\") ?? input\n}\n\nfunction truncateAfterSecondDecimal(input: string): string {\n   if (input.length === 0) return \"\"\n   const regex = /^([^,.]+)?([,.]\\d{0,2})?/\n   const match = regex.exec(input)\n   if (!match) {\n      return input\n   }\n   return match[1] + (match[2] || \"\")\n}\n\nfunction formatNumber(input: string | undefined, lang: string): string {\n   // Parse the input string to a number\n   let inputAsNumber = parseFloat(input ?? \"0\")\n   if (isNaN(inputAsNumber)) {\n      // If the input is not a valid number, return an empty string\n      return \"0\"\n   }\n   \n   // Multiply the input by 100 to ensure that it has 2 decimal places\n   const inputWithDecimals = inputAsNumber\n   \n   // Use the Intl object to format the number with 2 decimal places\n   const formattedNumber = new Intl.NumberFormat(lang, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n   }).format(inputWithDecimals)\n   \n   // Return the formatted number as a string\n   // return formattedNumber.replaceAll(/\\s/g, '')\n   return formattedNumber\n}\n\nPriceInput.displayName = \"PriceInput\"\n"
      }
    ]
  },
  {
    "component": "radio-group",
    "files": [
      {
        "name": "index.tsx",
        "dir": "radio-group",
        "content": "/**\n * Chalk UI - radio-group/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./radio-group\"\n"
      },
      {
        "name": "radio-group.tsx",
        "dir": "radio-group",
        "content": "/**\n * Chalk UI - radio-group/radio-group.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport * as radio from \"@zag-js/radio-group\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useEffect, useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const RadioGroupAnatomy = defineStyleAnatomy({\n   stack: cva(\"UI-RadioGroup__stack w-full space-y-1\"),\n   radioControl: cva([\n      \"UI-RadioGroup__radioControl\",\n      \"inline-flex flex-none justify-center items-center border border-gray-300 rounded-full text-white bg-white cursor-pointer transition duration-10 relative\",\n      // Light\n      \"bg-white border-gray-300 hover:bg-brand-100 hover:text-brand-100\",\n      \"data-checked:bg-brand-500 data-checked:border-brand-500\",\n      \"data-disabled:bg-gray-100 data-disabled:border-gray-200 data-disabled:cursor-default\",\n      \"data-disabled:data-checked:bg-brand-100  data-disabled:data-checked:border-brand-100\",\n      // Dark\n      \"dark:bg-gray-700 dark:border-gray-700 dark:hover:bg-gray-700\",\n      \"dark:data-checked:bg-brand-500 dark:data-disabled:bg-gray-800 dark:data-disabled:border-gray-800\",\n   ], {\n      variants: {\n         size: {\n            md: \"h-5 w-5 text-xs\",\n            lg: \"h-6 w-6 text-sm\",\n         },\n         hasError: {\n            true: \"border-red-500 dark:border-red-500\",\n            false: null,\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   radioLabel: cva(\"UI-RadioGroup__radioLabel font-normal\", {\n      variants: {\n         size: {\n            md: \"text-md\",\n            lg: \"text-lg\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   radioHelp: cva(\"UI-RadioGroup__radioHelp text-gray-500 data-disabled:text-gray-300\"),\n   radioWrapper: cva(\"UI-RadioGroup__radioWrapper inline-flex w-full gap-2 items-center relative\"),\n   radioIcon: cva(\"UI-RadioGroup__radioIcon text-white\", {\n      variants: {\n         untouchable: {\n            true: null,\n            false: null,\n         },\n         isChecked: {\n            true: null,\n            false: null,\n         },\n      },\n      compoundVariants: [\n         { untouchable: true, isChecked: false, className: \"text-gray-100 dark:text-gray-800 dark:opacity-0\" },\n         { untouchable: true, isChecked: true, className: \"text-gray-100 dark:text-gray-800\" },\n         { untouchable: false, isChecked: false, className: \"dark:opacity-0\" },\n      ],\n   }),\n})\n\n\nexport interface RadioGroupProps extends BasicFieldOptions, ComponentWithAnatomy<typeof RadioGroupAnatomy>,\n   VariantProps<typeof RadioGroupAnatomy.radioLabel> {\n   value?: string\n   defaultValue?: string\n   options: { value: string, label?: React.ReactNode, help?: React.ReactNode }[]\n   onChange?: (value: string | null) => void\n   checkedIcon?: React.ReactNode\n}\n\nexport const RadioGroup = React.forwardRef<HTMLInputElement, RadioGroupProps>((props, ref) => {\n   \n   const [{\n      size = \"md\",\n      value,\n      defaultValue,\n      onChange,\n      options,\n      stackClassName,\n      radioLabelClassName,\n      radioControlClassName,\n      radioWrapperClassName,\n      radioHelpClassName,\n      radioIconClassName,\n      checkedIcon,\n   }, basicFieldProps] = extractBasicFieldProps<RadioGroupProps>(props, useId())\n   \n   const [state, send] = useMachine(radio.machine({\n      id: basicFieldProps.id,\n      value,\n      name: basicFieldProps.name,\n      disabled: basicFieldProps.isDisabled,\n      readOnly: basicFieldProps.isReadOnly,\n      onChange(details) {\n         onChange && onChange(details.value)\n      },\n   }))\n   \n   const api = radio.connect(state, send, normalizeProps)\n   \n   useEffect(() => {\n      if (!value && defaultValue) {\n         api.setValue(defaultValue)\n      }\n   }, [])\n   \n   useEffect(() => {\n      value && api.setValue(value)\n   }, [value])\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps}\n            ref={ref}\n         >\n            <div className={cn(RadioGroupAnatomy.stack(), stackClassName)} {...api.rootProps}>\n               \n               {options.map((opt) => (\n                  \n                  <label\n                     key={opt.value}\n                     {...api.getRadioProps({ value: opt.value })}\n                     className={cn(\n                        RadioGroupAnatomy.radioWrapper(),\n                        radioWrapperClassName,\n                     )}\n                  >\n                     \n                     <div\n                        className={cn(\n                           RadioGroupAnatomy.radioControl({ size, hasError: !!basicFieldProps.error }),\n                           radioControlClassName,\n                        )}\n                        {...api.getRadioControlProps({ value: opt.value })}>\n                        {checkedIcon ? checkedIcon :\n                           <span\n                              className={cn(RadioGroupAnatomy.radioIcon({\n                                 untouchable: !!basicFieldProps.isDisabled, isChecked: api.value === opt.value,\n                              }), radioIconClassName)}\n                           >\n                              <svg\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 viewBox=\"0 0 16 16\"\n                                 width=\"16\"\n                                 height=\"16\"\n                                 stroke=\"currentColor\"\n                                 fill=\"currentColor\"\n                              >\n                                 <path d=\"M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z\"></path>\n                              </svg>\n                           </span>}\n                     </div>\n                     \n                     <div\n                        className={cn(\n                           RadioGroupAnatomy.radioLabel({ size }),\n                           radioLabelClassName,\n                        )}\n                        {...api.getRadioLabelProps({ value: opt.value })}\n                     >\n                        {opt.label ?? opt.value}\n                     </div>\n                     \n                     {!!opt.help && <div\n                         className={cn(\n                            RadioGroupAnatomy.radioLabel(),\n                            radioHelpClassName,\n                         )}\n                         {...api.getRadioLabelProps({ value: opt.value })}\n                     >\n                        {opt.help}\n                     </div>}\n                     \n                     <input {...api.getRadioInputProps({ value: opt.value })} ref={ref} />\n                  \n                  </label>\n               \n               ))}\n            \n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nRadioGroup.displayName = \"RadioGroup\"\n"
      }
    ]
  },
  {
    "component": "select",
    "files": [
      {
        "name": "index.tsx",
        "dir": "select",
        "content": "/**\n * Chalk UI - select/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./select\"\n"
      },
      {
        "name": "select.tsx",
        "dir": "select",
        "content": "/**\n * Chalk UI - select/select.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\nexport interface SelectProps extends Omit<React.ComponentPropsWithRef<\"select\">, \"size\">, InputStyling, BasicFieldOptions {\n   options?: { value: string | number, label?: string }[]\n}\n\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>((props, ref) => {\n   \n   const [{\n      children,\n      className,\n      size = \"md\",\n      intent = \"basic\",\n      leftIcon,\n      leftAddon,\n      rightAddon,\n      rightIcon,\n      defaultValue,\n      options = [],\n      placeholder,\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps<SelectProps>(props, useId())\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps}\n         >\n            <div className={cn(inputContainerStyle())}>\n               \n               <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n               <InputIcon icon={leftIcon} size={size} side={\"left\"} />\n               \n               <select\n                  // type=\"text\"\n                  id={basicFieldProps.id}\n                  name={basicFieldProps.name}\n                  className={cn(\n                     \"form-select\",\n                     InputAnatomy.input({\n                        size,\n                        intent,\n                        hasError: !!basicFieldProps.error,\n                        untouchable: !!basicFieldProps.isDisabled,\n                        hasRightAddon: !!rightAddon,\n                        hasRightIcon: !!rightIcon,\n                        hasLeftAddon: !!leftAddon,\n                        hasLeftIcon: !!leftIcon,\n                     }),\n                     className,\n                  )}\n                  disabled={basicFieldProps.isDisabled}\n                  {...rest}\n                  // defaultValue={defaultValue ? defaultValue : options[0]?.value} /!\\ Select elements must be either controlled or uncontrolled.\n                  ref={ref}\n               >\n                  {placeholder && <option value=\"\">{placeholder}</option>}\n                  {options.map(opt => (\n                     <option key={opt.value} value={opt.value}>{opt.label ?? opt.value}</option>\n                  ))}\n               </select>\n               \n               <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n               <InputIcon icon={rightIcon} size={size} side={\"right\"} />\n            \n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nSelect.displayName = \"Select\"\n"
      }
    ]
  },
  {
    "component": "show-only",
    "files": [
      {
        "name": "index.tsx",
        "dir": "show-only",
        "content": "/**\n * Chalk UI - show-only/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./show-only\"\n"
      },
      {
        "name": "show-only.tsx",
        "dir": "show-only",
        "content": "/**\n * Chalk UI - show-only/show-only.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport React from \"react\"\n\ninterface ShowOnlyProps {\n   children?: React.ReactNode\n   when: boolean | undefined\n}\n\nexport const ShowOnly: React.FC<ShowOnlyProps> = (props) => {\n   \n   const { children, when } = props\n   \n   return (\n      <>\n         {when ? children : null}\n      </>\n   )\n   \n}\n\nShowOnly.displayName = \"ShowOnly\"\n"
      }
    ]
  },
  {
    "component": "skeleton",
    "files": [
      {
        "name": "index.tsx",
        "dir": "skeleton",
        "content": "/**\n * Chalk UI - skeleton/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./skeleton\"\n"
      },
      {
        "name": "skeleton.tsx",
        "dir": "skeleton",
        "content": "/**\n * Chalk UI - skeleton/skeleton.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const SkeletonAnatomy = defineStyleAnatomy({\n   skeleton: cva(\"UI-Skeleton__skeleton\", {\n      variants: {\n         type: {\n            box: \"h-14 bg-gray-200 w-full rounded-md animate-pulse\",\n            text: \"h-2 bg-gray-100 rounded-md animate-purple\",\n         },\n      },\n      defaultVariants: {},\n   }),\n})\n\n\nexport interface SkeletonProps extends React.ComponentPropsWithRef<\"div\">, VariantProps<typeof SkeletonAnatomy.skeleton>,\n   ComponentWithAnatomy<typeof SkeletonAnatomy> {\n   type?: \"box\" | \"text\"\n}\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {\n   \n   const {\n      children,\n      className,\n      type = \"box\",\n      skeletonClassName,\n      ...rest\n   } = props\n   \n   if (type === \"text\") {\n      return (\n         <>\n            <div className=\"flex flex-col gap-3\">\n               <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n               <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n               <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n               <div className={cn(\"w-[98%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n               <div className={cn(\"w-[95%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n               <div className={cn(\"w-[90%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n            </div>\n         </>\n      )\n   }\n   \n   return (\n      <>\n         <div\n            className={cn(\n               SkeletonAnatomy.skeleton({ type }),\n               skeletonClassName,\n               className,\n            )}\n            {...rest}\n            ref={ref}\n         ></div>\n      </>\n   )\n   \n})\n\nSkeleton.displayName = \"Skeleton\"\n"
      }
    ]
  },
  {
    "component": "switch",
    "files": [
      {
        "name": "index.tsx",
        "dir": "switch",
        "content": "/**\n * Chalk UI - switch/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./switch\"\n"
      },
      {
        "name": "switch.tsx",
        "dir": "switch",
        "content": "/**\n * Chalk UI - switch/switch.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\n\"use client\"\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport * as checkbox from \"@zag-js/checkbox\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useId, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\n\nexport const SwitchAnatomy = defineStyleAnatomy({\n   controlWrapper: cva(\"UI-Switch__controlWrapper relative h-8 w-14 overflow-hidden cursor-pointer flex-none\", {\n      variants: {\n         size: {\n            sm: \"h-5 w-8\",\n            md: \"h-6 w-10\",\n            lg: \"h-7 w-12\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   rootLabel: cva(\"UI-Switch__rootLabel relative inline-flex gap-2 items-center flex-none\"),\n   control: cva([\n         \"UI-Switch__control border\",\n         // Light\n         \"absolute inset-0 rounded-full bg-gray-300 border-gray-300 transition\",\n         \"data-checked:bg-brand-500 data-checked:border-brand-500\",\n         \"hover:bg-gray-400 hover:border-gray-400\",\n         \"data-disabled:bg-gray-200 data-disabled:text-gray-200 data-disabled:cursor-default\",\n         // Dark\n         \"dark:bg-gray-700 dark:hover:bg-gray-600\",\n         \"dark:border-gray-700 dark:hover:border-gray-600\",\n         \"dark:data-disabled:bg-gray-800 dark:data-disabled:border-gray-800 dark:data-disabled:hover:bg-gray-800 dark:data-disabled:hover:border-gray-800\",\n         \n         \"dark:data-checked:bg-brand-500 dark:data-checked:border-brand-500\",\n      ],\n      {\n         variants: {\n            hasError: {\n               true: \"border-red-500 dark:border-red-500\",\n               false: null,\n            },\n         },\n         defaultVariants: {\n            hasError: true,\n         },\n      }),\n   controlKnob: cva(\"UI-Switch__controlKnob absolute inset-0 rounded-full bg-white transition dark:data-disabled:bg-gray-500\", {\n      variants: {\n         size: {\n            sm: \"m-1 h-3 w-3 data-checked:translate-x-3\",\n            md: \"m-1 h-4 w-4 data-checked:translate-x-4\",\n            lg: \"m-1 h-5 w-5 data-checked:translate-x-5\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n   label: cva([\n      \"UI-Switch__label\",\n      \"relative font-normal\",\n      \"data-disabled:text-gray-300\",\n   ], {\n      variants: {\n         size: {\n            sm: \"text-sm\",\n            md: \"text-md\",\n            lg: \"text-lg\",\n         },\n      },\n      defaultVariants: {\n         size: \"md\",\n      },\n   }),\n})\n\nexport interface SwitchProps\n   extends ComponentWithAnatomy<typeof SwitchAnatomy>,\n      VariantProps<typeof SwitchAnatomy.controlWrapper>,\n      BasicFieldOptions {\n   defaultChecked?: boolean\n   value?: string\n   onChange?: (value: boolean) => void\n}\n\nexport const Switch = React.forwardRef<HTMLInputElement, SwitchProps>((props, ref) => {\n   \n   const [{\n      size = \"md\",\n      defaultChecked = false,\n      value,\n      onChange,\n      controlClassName,\n      labelClassName,\n      rootLabelClassName,\n      controlWrapperClassName,\n      controlKnobClassName,\n   }, { label, ...basicFieldProps }] = extractBasicFieldProps(props, useId())\n   \n   const [control, setControl] = useState<boolean>(defaultChecked)\n   \n   const [state, send] = useMachine(checkbox.machine({\n      id: basicFieldProps.id,\n      name: basicFieldProps.name,\n      disabled: basicFieldProps.isDisabled,\n      readOnly: basicFieldProps.isReadOnly,\n      checked: control,\n      onChange({ checked: UNUSED_checked }) {\n         /**\n          * /!\\ Use React to control that state of the component\n          * since the value provided by the machine's `onChange` is duplicated\n          */\n         \n         setControl(s => {\n            onChange && onChange(!s)\n            return !s\n         })\n         \n         // if(typeof checked === 'boolean') {\n         //    onChange && onChange(checked)\n         // }\n      },\n   }))\n   \n   const api = checkbox.connect(state, send, normalizeProps)\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps} // We do not include the label\n            id={api.inputProps.id}\n         >\n            <label className={cn(SwitchAnatomy.rootLabel(), rootLabelClassName)} {...api.rootProps}>\n               <input type=\"checkbox\" {...api.inputProps} ref={ref} />\n               \n               <div\n                  className={cn(\n                     SwitchAnatomy.controlWrapper({ size }),\n                     controlWrapperClassName,\n                  )}\n               >\n                  \n                  <span\n                     className={cn(\n                        SwitchAnatomy.control({ hasError: !!basicFieldProps.error }),\n                        controlClassName,\n                     )} {...api.controlProps} />\n                  <span\n                     className={cn(\n                        SwitchAnatomy.controlKnob({ size }),\n                        controlKnobClassName,\n                     )}\n                     {...api.controlProps}\n                  />\n               </div>\n               \n               \n               {(!!label || !!value) && <span\n                   className={cn(\n                      SwitchAnatomy.label({ size }),\n                      labelClassName,\n                   )}\n                   {...api.labelProps}\n               >\n                  {label ?? value}\n               </span>}\n            </label>\n         </BasicField>\n      </>\n   )\n   \n})\n\nSwitch.displayName = \"Switch\"\n"
      }
    ]
  },
  {
    "component": "text-input",
    "files": [
      {
        "name": "index.tsx",
        "dir": "text-input",
        "content": "/**\n * Chalk UI - text-input/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./text-input\"\n"
      },
      {
        "name": "text-input.tsx",
        "dir": "text-input",
        "content": "/**\n * Chalk UI - text-input/text-input.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\nexport interface TextInputProps extends Omit<React.ComponentPropsWithRef<\"input\">, \"size\">,\n   Omit<InputStyling, \"hasError\" | \"isDisabled\">,\n   BasicFieldOptions {\n}\n\nexport const TextInput = React.forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n   \n   const [{\n      className,\n      size = \"md\",\n      intent = \"basic\",\n      leftAddon = undefined,\n      leftIcon = undefined,\n      rightAddon = undefined,\n      rightIcon = undefined,\n      disabled,\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps<TextInputProps>(props, useId())\n   \n   return (\n      <>\n         <BasicField\n            {...basicFieldProps}\n         >\n            <div className={cn(inputContainerStyle())}>\n               \n               <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"} />\n               <InputIcon icon={leftIcon} size={size} side={\"left\"} />\n               \n               <input\n                  // type=\"\" /!\\ We do not put the type since it can be multiple\n                  id={basicFieldProps.id}\n                  name={basicFieldProps.name}\n                  className={cn(\n                     \"form-input\",\n                     InputAnatomy.input({\n                        size,\n                        intent,\n                        hasError: !!basicFieldProps.error,\n                        untouchable: !!basicFieldProps.isDisabled,\n                        hasRightAddon: !!rightAddon,\n                        hasRightIcon: !!rightIcon,\n                        hasLeftAddon: !!leftAddon,\n                        hasLeftIcon: !!leftIcon,\n                     }),\n                     className,\n                  )}\n                  disabled={basicFieldProps.isDisabled || disabled}\n                  {...rest}\n                  ref={ref}\n               />\n               \n               <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"} />\n               <InputIcon icon={rightIcon} size={size} side={\"right\"} />\n            \n            </div>\n         </BasicField>\n      </>\n   )\n   \n})\n\nTextInput.displayName = \"TextInput\"\n"
      }
    ]
  },
  {
    "component": "textarea",
    "files": [
      {
        "name": "index.tsx",
        "dir": "textarea",
        "content": "/**\n * Chalk UI - textarea/index.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nexport * from \"./textarea\"\n"
      },
      {
        "name": "textarea.tsx",
        "dir": "textarea",
        "content": "/**\n * Chalk UI - textarea/textarea.tsx\n *\n * @author 5rahim, https://github.com/5rahim/\n * @updated Mon May 22 2023\n *\n */\n\nimport { cn } from \"@rahimstack/tailwind-utils\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAnatomy, InputStyling } from \"../input\"\n\nexport interface TextareaProps extends React.ComponentPropsWithRef<\"textarea\">, InputStyling, BasicFieldOptions {\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\n   \n   const [{\n      children,\n      className,\n      intent = \"basic\",\n      ...rest\n   }, basicFieldProps] = extractBasicFieldProps(props, useId())\n   \n   return (\n      <>\n         <BasicField\n            className={cn(\"w-full gap-1\")}\n            {...basicFieldProps}\n         >\n            <textarea\n               // type=\"text\"\n               id={basicFieldProps.id}\n               className={cn(\n                  \"form-textarea\",\n                  InputAnatomy.input({\n                     intent,\n                     hasError: !!basicFieldProps.error,\n                     untouchable: !!basicFieldProps.isDisabled,\n                  }),\n                  className,\n               )}\n               {...rest}\n               ref={ref}\n            />\n         </BasicField>\n      </>\n   )\n   \n})\n\nTextarea.displayName = \"Textarea\"\n"
      }
    ]
  },
  {
    "component": "",
    "files": []
  }
]
