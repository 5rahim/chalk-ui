[
  {
    "component": "accordion",
    "name": "Accordion",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "accordion.tsx",
        "dir": "accordion",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { Disclosure, Transition } from \"@headlessui/react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AccordionAnatomy = defineStyleAnatomy({\r\n    container: cva([\r\n        \"UI-Accordion__container\",\r\n        \"space-y-2\"\r\n    ]),\r\n    trigger: cva([\r\n        \"UI-Accordion__trigger\",\r\n        \"bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700\",\r\n        \"flex w-full justify-between rounded-lg px-4 py-3 text-left font-medium transition\",\r\n        \"focus:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] ring-offset-1\",\r\n    ]),\r\n    panel: cva([\r\n        \"UI-Accordion__panel\",\r\n        \"py-2\"\r\n    ]),\r\n    item: cva([\"UI-Accordion__item\"]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Accordion\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AccordionProps extends ComponentWithAnatomy<typeof AccordionAnatomy> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst _Accordion = (props: AccordionProps) => {\r\n\r\n    const {\r\n        children,\r\n        triggerClassName,\r\n        containerClassName,\r\n        panelClassName,\r\n        itemClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    const itemsWithProps = React.Children.map(children, (child) => {\r\n        // Checking isValidElement is the safe way and avoids a typescript error too.\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child, { triggerClassName, panelClassName, itemClassName } as any)\r\n        }\r\n        return child\r\n    })\r\n\r\n    return (\r\n        <div className={cn(AccordionAnatomy.container(), containerClassName)}>\r\n            {itemsWithProps}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Accordion.Item\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface AccordionItemProps extends React.ComponentPropsWithoutRef<\"div\">,\r\n    Omit<ComponentWithAnatomy<typeof AccordionAnatomy>, \"containerClassName\"> {\r\n    title: string,\r\n}\r\n\r\nconst AccordionItem: React.FC<AccordionItemProps> = (\r\n    {\r\n        children,\r\n        title,\r\n        triggerClassName,\r\n        panelClassName,\r\n        itemClassName,\r\n        ...rest\r\n    }) => {\r\n\r\n    return (\r\n        <Disclosure>\r\n            {({ open }) => (\r\n                <div className={cn(AccordionAnatomy.item(), itemClassName)} {...rest}>\r\n                    <Disclosure.Button className={cn(AccordionAnatomy.trigger(), triggerClassName)}>\r\n                        {title}\r\n                        <svg\r\n                            className={cn(\r\n                                \"ml-1.5 h-5 w-5 flex-shrink-0 transition duration-300\",\r\n                                {\r\n                                    \"-rotate-180\": open\r\n                                }\r\n                            )}\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            stroke=\"currentColor\"\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M19 9l-7 7-7-7\"\r\n                            />\r\n                        </svg>\r\n                    </Disclosure.Button>\r\n                    <Transition\r\n                        show={open}\r\n                        enter=\"transition duration-300 ease-out\"\r\n                        enterFrom=\"transform h-0 opacity-0\"\r\n                        enterTo=\"transform h-full opacity-100\"\r\n                        leave=\"transition duration-75 ease-out\"\r\n                        leaveFrom=\"transform h-full opacity-100\"\r\n                        leaveTo=\"transform h-0 opacity-0\"\r\n                    >\r\n                        <Disclosure.Panel static className={cn(AccordionAnatomy.panel(), panelClassName)}>\r\n                            {children}\r\n                        </Disclosure.Panel>\r\n                    </Transition>\r\n                </div>\r\n            )}\r\n        </Disclosure>\r\n    )\r\n}\r\n\r\nAccordionItem.displayName = \"AccordionItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_Accordion.Item = AccordionItem\r\n\r\nexport const Accordion = createPolymorphicComponent<\"div\", AccordionProps, {\r\n    Item: typeof AccordionItem\r\n}>(_Accordion)\r\n\r\nAccordion.displayName = \"Accordion\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "accordion",
        "content": "export * from \"./accordion\"\r\n"
      }
    ]
  },
  {
    "component": "address-input",
    "name": "AddressInput",
    "dependencies": [
      [
        "@googlemaps/js-api-loader",
        "^1.16.2",
        ""
      ],
      [
        "use-debounce",
        "^9.0.4",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "combobox"
    ],
    "files": [
      {
        "name": "address-input.tsx",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport _isEmpty from \"lodash/isEmpty\"\nimport React, { useId } from \"react\"\nimport { extractBasicFieldProps } from \"../basic-field\"\nimport { Combobox, ComboboxProps } from \"../combobox\"\nimport { useUILocaleConfig } from \"../core\"\nimport locales from \"./locales.json\"\nimport { GoogleMapsAutocompletionRequest, useGoogleMapsAutocomplete } from \"./use-address-autocomplete\"\n\n/* -------------------------------------------------------------------------------------------------\n * AddressInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AddressInputProps extends Omit<ComboboxProps, \"options\" | \"onInputChange\" | \"onChange\"> {\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    apiOptions?: Partial<LoaderOptions>\n    allowedCountries?: string | string[] | null\n    onChange?: (value: string | undefined) => void\n    noOptionsMessage?: string\n    placeholder?: string\n    apiKey: string // Optionally, you could remove this parameter and get the key from environment variables\n}\n\nexport const AddressInput = React.forwardRef<HTMLInputElement, AddressInputProps>((props, ref) => {\n\n    const { locale: lng } = useUILocaleConfig()\n\n    const [{\n        children,\n        className,\n        autocompletionRequest,\n        apiOptions,\n        defaultValue,\n        allowedCountries = null,\n        onChange,\n        apiKey,\n        placeholder = locales[\"placeholder\"][lng],\n        noOptionsMessage = locales[\"no-address-found\"][lng],\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<AddressInputProps>(props, useId())\n\n    const { suggestions, fetchSuggestions } = useGoogleMapsAutocomplete({\n        apiKey: apiKey,\n        minLengthAutocomplete: 0,\n        withSessionToken: false,\n        debounce: 300,\n        autocompletionRequest: {\n            componentRestrictions: { country: allowedCountries },\n        },\n    })\n\n    return (\n        <>\n            <Combobox\n                returnValueOrLabel=\"label\" // We only return the address' text format\n                allowCustomValue={false}\n                withFiltering={false} // We deactivate filtering because the options are automatically filtered by the API\n                options={_isEmpty(suggestions) && defaultValue ? [{ value: defaultValue, label: defaultValue }] : suggestions}\n                onInputChange={fetchSuggestions}\n                defaultValue={defaultValue}\n                onChange={onChange}\n                placeholder={placeholder}\n                noOptionsMessage={noOptionsMessage}\n                {...basicFieldProps}\n                {...rest}\n                ref={ref}\n            />\n        </>\n    )\n\n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "address-input",
        "content": "export * from \"./address-input\"\nexport * from \"./use-address-autocomplete\"\n"
      },
      {
        "name": "locales.json",
        "dir": "address-input",
        "content": "{\n  \"placeholder\": {\n    \"fr\": \"Entrez l'addresse\",\n    \"en\": \"Enter your address\"\n  },\n  \"no-address-found\": {\n    \"fr\": \"Aucune addresse trouv√©e\",\n    \"en\": \"No address found\"\n  }\n}\n"
      },
      {
        "name": "use-address-autocomplete.ts",
        "dir": "address-input",
        "content": "\"use client\"\n\nimport { Loader, LoaderOptions } from \"@googlemaps/js-api-loader\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { useDebouncedCallback } from \"use-debounce\"\n\nexport type GoogleMapsAutocompletionRequest = Omit<google.maps.places.AutocompletionRequest, \"input\">\n\nexport interface GoogleMapsAutocompleteProps {\n    apiKey: string,\n    minLengthAutocomplete?: number,\n    withSessionToken?: boolean\n    debounce?: number\n    autocompletionRequest?: GoogleMapsAutocompletionRequest\n    loaderApiOptions?: Partial<LoaderOptions>\n}\n\nexport const useGoogleMapsAutocomplete = ({\n                                              apiKey,\n                                              minLengthAutocomplete = 0,\n                                              withSessionToken = false,\n                                              debounce = 300,\n                                              autocompletionRequest,\n                                              loaderApiOptions = {},\n                                          }:\n                                              GoogleMapsAutocompleteProps) => {\n\n    const [autocompleteService, setAutocompleteService] = useState<google.maps.places.AutocompleteService | undefined>(undefined)\n    const [sessionToken, setSessionToken] = useState<google.maps.places.AutocompleteSessionToken | undefined>(undefined)\n\n    const initializeService = useCallback(() => {\n        if (!window.google) throw new Error(\"[AddressInput]: Google script not loaded\")\n        if (!window.google.maps) throw new Error(\"[AddressInput]: Google maps script not loaded\")\n        if (!window.google.maps.places) throw new Error(\"[AddressInput]: Google maps places script not loaded\")\n\n        setAutocompleteService(new window.google.maps.places.AutocompleteService())\n        setSessionToken(new google.maps.places.AutocompleteSessionToken())\n    }, [window])\n\n    /**\n     * Initialize\n     */\n    useEffect(() => {\n        const init = async () => {\n            try {\n                if (!window.google || !window.google.maps || !window.google.maps.places) {\n                    await new Loader({ apiKey: apiKey, ...{ libraries: [\"places\"], ...loaderApiOptions } }).load()\n                }\n                initializeService()\n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n        if (apiKey) init()\n        else initializeService()\n    }, [])\n\n\n    /**\n     * Fetch suggestions\n     */\n    const [suggestions, setSuggestions] = useState<{ label: string, value: string }[]>([])\n\n    const fetchSuggestions = useDebouncedCallback((value: string): void => {\n        if (!autocompleteService) return setSuggestions([])\n        if (value.length < minLengthAutocomplete) return setSuggestions([])\n\n        const autocompletionReq: GoogleMapsAutocompletionRequest = { ...autocompletionRequest }\n\n        autocompleteService.getPlacePredictions(\n            requestBuilder(\n                autocompletionReq,\n                value,\n                withSessionToken && sessionToken,\n            ), (suggestions) => {\n                setSuggestions((suggestions || []).map(suggestion => ({ label: suggestion.description, value: suggestion.place_id })))\n            },\n        )\n    }, debounce)\n\n    return {\n        suggestions,\n        fetchSuggestions,\n    }\n\n}\n\nconst requestBuilder = (\n    autocompletionRequest: GoogleMapsAutocompletionRequest,\n    input: string,\n    sessionToken?: google.maps.places.AutocompleteSessionToken,\n): google.maps.places.AutocompletionRequest => {\n    const { location, ...rest } = autocompletionRequest\n\n    const res: google.maps.places.AutocompletionRequest = {\n        input,\n        ...rest,\n    }\n\n    if (sessionToken) {\n        res.sessionToken = sessionToken\n    }\n\n    if (location) {\n        res.location = new google.maps.LatLng(location)\n    }\n\n    return res\n}\n"
      }
    ]
  },
  {
    "component": "alert",
    "name": "Alert",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "alert.tsx",
        "dir": "alert",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AlertAnatomy = defineStyleAnatomy({\n    container: cva([\n        \"UI-Alert__container\",\n        \"py-3 px-4 flex justify-between rounded-[--radius]\"\n    ], {\n        variants: {\n            intent: {\n                \"info\": \"bg-blue-50 text-blue-500 __UI__DARK__ dark:bg-opacity-10 dark:text-blue-200\",\n                \"success\": \"bg-green-50 text-green-500 __UI__DARK__ dark:bg-opacity-10 dark:text-green-200\",\n                \"warning\": \"bg-orange-50 text-orange-500 __UI__DARK__ dark:bg-opacity-10 dark:text-orange-200\",\n                \"alert\": \"bg-red-50 text-red-500 __UI__DARK__ dark:bg-opacity-10 dark:text-red-200\",\n                \"info-basic\": \"bg-white text-gray-800 border border-[--border] __UI__DARK__ dark:bg-gray-800 dark:text-gray-200\",\n                \"success-basic\": \"bg-white text-gray-800 border border-[--border] __UI__DARK__ dark:bg-gray-800 dark:text-gray-200\",\n                \"warning-basic\": \"bg-white text-gray-800 border border-[--border] __UI__DARK__ dark:bg-gray-800 dark:text-gray-200\",\n                \"alert-basic\": \"bg-white text-gray-800 border border-[--border] __UI__DARK__ dark:bg-gray-800 dark:text-gray-200\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info\",\n        },\n    }),\n    detailsContainer: cva([\n        \"UI-Alert__detailsContainer\",\n        \"flex\"\n    ]),\n    textContainer: cva([\n        \"UI-Alert__textContainer\",\n        \"flex flex-col self-center ml-3 gap-.5\"\n    ]),\n    title: cva([\n        \"UI-Alert__title\",\n        \"font-bold\"\n    ]),\n    description: cva([\n        \"UI-Alert__description\"\n    ]),\n    icon: cva([\n        \"UI-Alert__icon\",\n        \"text-2xl mt-1\"\n    ], {\n        variants: {\n            intent: {\n                \"info-basic\": \"text-blue-500\",\n                \"success-basic\": \"text-green-500\",\n                \"warning-basic\": \"text-orange-500\",\n                \"alert-basic\": \"text-red-500\",\n                \"info\": \"text-blue-500\",\n                \"success\": \"text-green-500\",\n                \"warning\": \"text-orange-500\",\n                \"alert\": \"text-red-500\",\n            },\n        },\n        defaultVariants: {\n            intent: \"info-basic\",\n        },\n    }),\n    closeButton: cva([\n        \"UI-Alert__closeButton\",\n        \"self-start text-2xl hover:opacity-50 transition ease-in cursor-pointer h-5 w-5\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Alert\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AlertProps extends React.ComponentPropsWithRef<\"div\">,\n    VariantProps<typeof AlertAnatomy.container>,\n    ComponentWithAnatomy<typeof AlertAnatomy> {\n    title?: string,\n    description?: string,\n    isClosable?: boolean,\n    onClose?: () => void\n}\n\nexport const Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        title,\n        description,\n        isClosable,\n        onClose,\n        intent = \"info-basic\",\n        containerClassName,\n        iconClassName,\n        detailsContainerClassName,\n        textContainerClassName,\n        titleClassName,\n        descriptionClassName,\n        closeButtonClassName,\n        ...rest\n    } = props\n\n    let Icon: any = null\n\n    if (intent === \"info-basic\" || intent === \"info\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <path d=\"M12 16v-4\"></path>\n            <path d=\"M12 8h.01\"></path>\n        </svg>\n    } else if (intent === \"alert-basic\" || intent === \"alert\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\"></line>\n        </svg>\n    } else if (intent === \"warning-basic\" || intent === \"warning\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"></path>\n            <line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"13\"></line>\n            <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\"></line>\n        </svg>\n    } else if (intent === \"success-basic\" || intent === \"success\") {\n        Icon = <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n        >\n            <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path>\n            <path d=\"m9 12 2 2 4-4\"></path>\n        </svg>\n    }\n\n    return (\n        <>\n            <div\n                className={cn(\n                    AlertAnatomy.container({ intent }),\n                    containerClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                <div className={cn(AlertAnatomy.detailsContainer(), detailsContainerClassName)}>\n                    <div className={cn(AlertAnatomy.icon({ intent: intent }), iconClassName)}>\n                        {Icon && Icon}\n                    </div>\n                    <div className={cn(AlertAnatomy.textContainer(), textContainerClassName)}>\n                        <span className={cn(AlertAnatomy.title(), titleClassName)}>\n                            {title}\n                        </span>\n                        {!!description && <span className={cn(AlertAnatomy.description(), descriptionClassName)}>\n                            {description}\n                        </span>}\n                    </div>\n                </div>\n                {onClose && <button className={cn(AlertAnatomy.closeButton(), closeButtonClassName)} onClick={onClose}>\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    >\n                        <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\n                        <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\n                    </svg>\n                </button>}\n            </div>\n        </>\n    )\n\n})\n\nAlert.displayName = \"Alert\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "alert",
        "content": "export * from \"./alert\"\n"
      }
    ]
  },
  {
    "component": "app-layout",
    "name": "AppLayout",
    "dependencies": [],
    "family": [
      "modal"
    ],
    "files": [
      {
        "name": "app-layout.tsx",
        "dir": "app-layout",
        "content": "import React from \"react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy } from \"../core\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AppLayoutAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayout__root\",\r\n        \"flex w-full min-h-screen group\",\r\n        \"group-[.with-sidebar]:group-[.sidebar-slim]:md:pl-20\",\r\n        \"group-[.with-sidebar]:group-[.sidebar-sm]:md:pl-48\",\r\n        \"group-[.with-sidebar]:group-[.sidebar-md]:md:pl-64\",\r\n        \"group-[.with-sidebar]:group-[.sidebar-lg]:md:pl-[20rem]\",\r\n        \"group-[.with-sidebar]:group-[.sidebar-xl]:md:pl-[25rem]\",\r\n    ], {\r\n        variants: {\r\n            withSidebar: {\r\n                true: \"flex-row with-sidebar\",\r\n                false: \"flex-col\"\r\n            },\r\n            sidebarSize: {\r\n                slim: \"sidebar-slim\",\r\n                sm: \"sidebar-sm\",\r\n                md: \"sidebar-md\",\r\n                lg: \"sidebar-lg\",\r\n                xl: \"sidebar-xl\",\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            withSidebar: false,\r\n            sidebarSize: \"md\"\r\n        }\r\n    })\r\n})\r\n\r\nexport const AppLayoutHeaderAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutHeader__root\",\r\n        \"block w-full\"\r\n    ])\r\n})\r\n\r\nexport const AppLayoutSidebarAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutSidebar__root\",\r\n        \"hidden md:fixed md:inset-y-0 md:flex md:flex-col grow-0 shrink-0 basis-0\",\r\n        \"group-[.sidebar-slim]:md:w-20\",\r\n        \"group-[.sidebar-sm]:md:w-48\",\r\n        \"group-[.sidebar-md]:md:w-64\",\r\n        \"group-[.sidebar-lg]:md:w-[20rem]\",\r\n        \"group-[.sidebar-xl]:md:w-[25rem]\",\r\n    ])\r\n})\r\n\r\nexport const AppLayoutContentAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutContent__root\",\r\n    ])\r\n})\r\n\r\nexport const AppLayoutFooterAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutFooter__root\",\r\n    ])\r\n})\r\n\r\nexport const AppLayoutStackAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutStack__root\",\r\n    ], {\r\n        variants: {\r\n            spacing: {\r\n                sm: \"space-y-2\",\r\n                md: \"space-y-4\",\r\n                lg: \"space-y-8\",\r\n                xl: \"space-y-10\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            spacing: \"md\",\r\n        }\r\n    })\r\n})\r\n\r\nexport const AppLayoutGridAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AppLayoutGrid__root\",\r\n        \"block\"\r\n    ], {\r\n        variants: {\r\n            breakBelow: {\r\n                sm: \"sm:grid sm:space-y-0\",\r\n                md: \"md:grid md:space-y-0\",\r\n                lg: \"lg:grid lg:space-y-0\",\r\n                xl: \"xl:grid xl:space-y-0\",\r\n            },\r\n            spacing: {\r\n                sm: \"space-y-2 gap-2\",\r\n                md: \"space-y-4 gap-4\",\r\n                lg: \"space-y-8 gap-8\",\r\n                xl: \"space-y-10 gap-10\",\r\n            },\r\n            cols: {\r\n                1: \"grid-cols-1\",\r\n                2: \"grid-cols-2\",\r\n                3: \"grid-cols-3\",\r\n                4: \"grid-cols-4\",\r\n                5: \"grid-cols-5\",\r\n                6: \"grid-cols-6\",\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            breakBelow: \"xl\",\r\n            spacing: \"md\",\r\n            cols: 3\r\n        }\r\n    })\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof AppLayoutAnatomy>,\r\n    VariantProps<typeof AppLayoutAnatomy.root> {\r\n}\r\n\r\nconst _AppLayout = (props: AppLayoutProps) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        ref,\r\n        withSidebar,\r\n        sidebarSize,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(AppLayoutAnatomy.root({ withSidebar, sidebarSize }), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n_AppLayout.displayName = \"AppLayout\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Header\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutHeaderProps extends React.ComponentPropsWithRef<\"header\">, ComponentWithAnatomy<typeof AppLayoutHeaderAnatomy> {\r\n}\r\n\r\nconst AppLayoutHeader: React.FC<AppLayoutHeaderProps> = React.forwardRef<HTMLElement, AppLayoutHeaderProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <header\r\n            className={cn(AppLayoutHeaderAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </header>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutHeader.displayName = \"AppLayoutHeader\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Sidebar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutSidebarProps extends React.ComponentPropsWithRef<\"aside\">, ComponentWithAnatomy<typeof AppLayoutSidebarAnatomy> {\r\n}\r\n\r\nconst AppLayoutSidebar: React.FC<AppLayoutSidebarProps> = React.forwardRef<HTMLElement, AppLayoutSidebarProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <aside\r\n            className={cn(AppLayoutSidebarAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </aside>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutSidebar.displayName = \"AppLayoutSidebar\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Content\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutContentProps extends React.ComponentPropsWithRef<\"main\">, ComponentWithAnatomy<typeof AppLayoutContentAnatomy> {\r\n}\r\n\r\nconst AppLayoutContent: React.FC<AppLayoutContentProps> = React.forwardRef<HTMLElement, AppLayoutContentProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <main\r\n            className={cn(AppLayoutContentAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </main>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutContent.displayName = \"AppLayoutContent\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Grid\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutGridProps extends React.ComponentPropsWithRef<\"section\">,\r\n    ComponentWithAnatomy<typeof AppLayoutGridAnatomy>,\r\n    VariantProps<typeof AppLayoutGridAnatomy.root> {\r\n}\r\n\r\nconst AppLayoutGrid: React.FC<AppLayoutGridProps> = React.forwardRef<HTMLElement, AppLayoutGridProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        breakBelow,\r\n        cols,\r\n        spacing,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <section\r\n            className={cn(AppLayoutGridAnatomy.root({ breakBelow, cols, spacing }), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </section>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutGrid.displayName = \"AppLayoutGrid\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Footer\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutFooterProps extends React.ComponentPropsWithRef<\"footer\">, ComponentWithAnatomy<typeof AppLayoutFooterAnatomy> {\r\n}\r\n\r\nconst AppLayoutFooter: React.FC<AppLayoutFooterProps> = React.forwardRef<HTMLElement, AppLayoutFooterProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <footer\r\n            className={cn(AppLayoutFooterAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </footer>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutFooter.displayName = \"AppLayoutFooter\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppLayout.Stack\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppLayoutStackProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof AppLayoutStackAnatomy>,\r\n    VariantProps<typeof AppLayoutStackAnatomy.root> {\r\n}\r\n\r\nconst AppLayoutStack: React.FC<AppLayoutStackProps> = React.forwardRef<HTMLDivElement, AppLayoutStackProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        spacing,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(AppLayoutStackAnatomy.root({ spacing }), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nAppLayoutStack.displayName = \"AppLayoutStack\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_AppLayout.Header = AppLayoutHeader\r\n_AppLayout.Sidebar = AppLayoutSidebar\r\n_AppLayout.Content = AppLayoutContent\r\n_AppLayout.Footer = AppLayoutFooter\r\n_AppLayout.Grid = AppLayoutGrid\r\n_AppLayout.Stack = AppLayoutStack\r\n\r\nexport const AppLayout = createPolymorphicComponent<\"div\", AppLayoutProps, {\r\n    Header: typeof AppLayoutHeader\r\n    Sidebar: typeof AppLayoutSidebar\r\n    Content: typeof AppLayoutContent\r\n    Footer: typeof AppLayoutFooter\r\n    Grid: typeof AppLayoutGrid\r\n    Stack: typeof AppLayoutStack\r\n}>(_AppLayout)\r\n\r\nAppLayout.displayName = \"AppLayout\"\r\n"
      },
      {
        "name": "app-sidebar.tsx",
        "dir": "app-layout",
        "content": "\"use client\"\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Drawer } from \"../modal\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Context\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst __AppSidebarContext = React.createContext<{ open: boolean, setOpen: React.Dispatch<React.SetStateAction<boolean>> }>({\r\n    open: false,\r\n    setOpen: () => {\r\n    }\r\n})\r\n\r\nconst useAppSidebarContext = () => {\r\n    return React.useContext(__AppSidebarContext)\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AppSidebarAnatomy = defineStyleAnatomy({\r\n    sidebar: cva([\r\n        \"UI-AppSidebar__sidebar\",\r\n        \"flex flex-grow flex-col overflow-y-auto border-r border-[--border] bg-[--paper]\"\r\n    ])\r\n})\r\n\r\nexport const AppSidebarTriggerAnatomy = defineStyleAnatomy({\r\n    trigger: cva([\r\n        \"UI-AppSidebarTrigger__trigger\",\r\n        \"block md:hidden\",\r\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--highlight] hover:text-[--text-color]\",\r\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppSidebar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppSidebarProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof AppSidebarAnatomy> {\r\n}\r\n\r\nexport const AppSidebar: React.FC<AppSidebarProps> = React.forwardRef<HTMLDivElement, AppSidebarProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        sidebarClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    const ctx = useAppSidebarContext()\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={cn(AppSidebarAnatomy.sidebar(), sidebarClassName)}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                <div className={cn(className)}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n            <Drawer\r\n                isOpen={ctx.open}\r\n                onClose={() => ctx.setOpen(false)}\r\n                placement=\"left\"\r\n                isClosable\r\n                className=\"md:hidden\"\r\n                containerClassName=\"w-[85%]\"\r\n                bodyClassName={cn(\"p-0 md:p-0\", className)}\r\n                headerClassName=\"absolute p-2 sm:p-2 md:p-2 lg:p-2 right-0\"\r\n                closeButtonIntent=\"white-outline\"\r\n            >\r\n                {children}\r\n            </Drawer>\r\n        </>\r\n    )\r\n\r\n})\r\n\r\nAppSidebar.displayName = \"AppSidebar\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AppSidebarTrigger\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AppSidebarTriggerProps extends React.ComponentPropsWithRef<\"button\">, ComponentWithAnatomy<typeof AppSidebarTriggerAnatomy> {\r\n}\r\n\r\nexport const AppSidebarTrigger: React.FC<AppSidebarTriggerProps> = React.forwardRef<HTMLButtonElement, AppSidebarTriggerProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        triggerClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    const ctx = useAppSidebarContext()\r\n\r\n    return (\r\n        <button\r\n            className={cn(AppSidebarTriggerAnatomy.trigger(), triggerClassName, className)}\r\n            onClick={() => ctx.setOpen(s => !s)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <span className=\"sr-only\">Open main menu</span>\r\n            {ctx.open ? (\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                     strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\">\r\n                    <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\r\n                    <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\r\n                </svg>\r\n            ) : (\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                     strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\">\r\n                    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\r\n                    <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\r\n                    <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\r\n                </svg>\r\n            )}\r\n        </button>\r\n    )\r\n\r\n})\r\n\r\nAppSidebarTrigger.displayName = \"AppSidebarTrigger\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Provider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AppSidebarProvider: React.FC<{ children?: React.ReactNode, open?: boolean }> = ({ children, open: _open }) => {\r\n\r\n    const [open, setOpen] = useState(_open ?? false)\r\n\r\n    useEffect(() => {\r\n        if (_open !== undefined)\r\n            setOpen(_open)\r\n    }, [_open])\r\n\r\n    return (\r\n        <__AppSidebarContext.Provider value={{ open, setOpen }}>\r\n            {children}\r\n        </__AppSidebarContext.Provider>\r\n    )\r\n}\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "app-layout",
        "content": "export * from \"./app-layout\"\r\nexport * from \"./app-sidebar\"\r\n"
      }
    ]
  },
  {
    "component": "avatar",
    "name": "Avatar",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "avatar-showcase.tsx",
        "dir": "avatar",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { AvatarProps } from \".\"\n\nexport const AvatarShowcaseAnatomy = defineStyleAnatomy({\n    container: cva(\"UI-AvatarShowcase__container group/container flex items-center\"),\n    name: cva(\"UI-AvatarShowcase__name font-medium text-base text-[--text-color] tracking-tight\"),\n    description: cva(\"UI-AvatarShowcase__description block text-sm text-[--muted]\"),\n    detailsContainer: cva(\"UI-AvatarShowcase__detailsContainer ml-3\"),\n})\n\nexport interface AvatarShowcaseProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof AvatarShowcaseAnatomy> {\n    avatar: React.ReactElement<AvatarProps, string | React.JSXElementConstructor<AvatarProps>> | undefined,\n    name: string\n    description?: string\n}\n\nexport const AvatarShowcase = React.forwardRef<HTMLDivElement, AvatarShowcaseProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        avatar,\n        name,\n        description,\n        nameClassName,\n        descriptionClassName,\n        detailsContainerClassName,\n        containerClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <div\n                className={cn(\n                    AvatarShowcaseAnatomy.container(),\n                    containerClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                {avatar}\n                <div className={cn(AvatarShowcaseAnatomy.detailsContainer(), detailsContainerClassName)}>\n                    <p className={cn(AvatarShowcaseAnatomy.name(), nameClassName)}>{name}</p>\n                    {!!description && <span className={cn(AvatarShowcaseAnatomy.description(), descriptionClassName)}>{description}</span>}\n                    {children}\n                </div>\n            </div>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "avatar.tsx",
        "dir": "avatar",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useRef, useState } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const AvatarAnatomy = defineStyleAnatomy({\n    body: cva([\n        \"UI-Avatar__body\",\n        \"inline-flex rounded-full justify-center align-center flex-shrink-0 bg-gray-400\"\n    ], {\n        variants: {\n            size: {\n                xs: \"w-6 h-6\",\n                sm: \"w-8 h-8\",\n                md: \"w-12 h-12\",\n                lg: \"w-16 h-16\",\n                xl: \"w-24 h-24\",\n                \"2xl\": \"w-32 h-32\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    fallbackIcon: cva([\"UI-Avatar__fallback-icon fill-gray-500\"]),\n    image: cva([\n        \"UI-Avatar__image\",\n        \"w-full h-full object-cover rounded-full\"\n    ]),\n    placeholder: cva([\n        \"UI-Avatar__placeholder\",\n        \"uppercase flex w-full h-full items-center justify-center\",\n        \"bg-gray-600 text-gray-50 font-semibold rounded-full\"\n    ], {\n        variants: {\n            size: {\n                xs: \"text-xs\",\n                sm: \"text-sm\",\n                md: \"text-md\",\n                lg: \"text-lg\",\n                xl: \"text-xl\",\n                \"2xl\": \"text-2xl\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AvatarProps extends React.ComponentPropsWithRef<\"div\">,\n    ComponentWithAnatomy<typeof AvatarAnatomy>,\n    VariantProps<typeof AvatarAnatomy.body> {\n    src?: string | null\n    placeholder?: string\n}\n\nexport const Avatar = React.forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size,\n        src,\n        placeholder,\n        bodyClassName,\n        fallbackIconClassName,\n        imageClassName,\n        placeholderClassName,\n        ...rest\n    } = props\n\n    const [displayImage, setDisplayImage] = useState(!!src && src?.length > 0)\n\n    const imgRef = useRef<HTMLImageElement>(null)\n\n    return (\n        <>\n            <div\n                className={cn(\n                    AvatarAnatomy.body({ size }),\n                    bodyClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                {(!displayImage && !placeholder) &&\n                    <svg viewBox=\"0 0 128 128\" className={cn(AvatarAnatomy.fallbackIcon(), fallbackIconClassName)} role=\"img\" aria-label=\"avatar\">\n                        <path\n                            className=\"fill-gray-200\"\n                            d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n                        ></path>\n                        <path\n                            className=\"fill-gray-200\"\n                            d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n                        ></path>\n                    </svg>}\n                {(!displayImage && placeholder) &&\n                    <span className={cn(AvatarAnatomy.placeholder({ size }), placeholderClassName)}>{placeholder}</span>}\n                {displayImage && <img\n                    ref={imgRef}\n                    src={src ?? \"\"}\n                    className={cn(AvatarAnatomy.image(), imageClassName)}\n                    onError={e => {\n                        e.currentTarget.style.display = \"none\"\n                        setDisplayImage(false)\n                    }}\n                    onLoad={e => {\n                        e.currentTarget.style.display = \"block\"\n                        setDisplayImage(true)\n                    }}\n                />}\n            </div>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "index.tsx",
        "dir": "avatar",
        "content": "export * from \"./avatar\"\nexport * from \"./avatar-showcase\"\n"
      }
    ]
  },
  {
    "component": "badge",
    "name": "Badge",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "badge.tsx",
        "dir": "badge",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { CSSProperties } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BadgeAnatomy = defineStyleAnatomy({\n    badge: cva([\n        \"UI-Badge__badge\",\n        \"inline-flex flex-none text-base w-fit overflow-hidden justify-center items-center gap-2\"\n    ], {\n        variants: {\n            intent: {\n                \"gray\": \"text-gray-800 bg-gray-100 border border-gray-500 border-opacity-40 __UI_DARK__ dark:text-gray-300 dark:bg-opacity-10\",\n                \"primary\": \"text-brand-500 bg-brand-50 border border-brand-500 border-opacity-40 __UI_DARK__ dark:text-brand-300 dark:bg-opacity-10\",\n                \"success\": \"text-green-500 bg-green-50 border border-green-500 border-opacity-40 __UI_DARK__ dark:text-green-300 dark:bg-opacity-10\",\n                \"warning\": \"text-orange-500 bg-orange-50 border border-orange-500 border-opacity-40 __UI_DARK__ dark:text-orange-300 dark:bg-opacity-10\",\n                \"alert\": \"text-red-500 bg-red-50 border border-red-500 border-opacity-40 __UI_DARK__ dark:text-red-300 dark:bg-opacity-10\",\n                \"blue\": \"text-blue-500 bg-blue-50 border border-blue-500 border-opacity-40 __UI_DARK__ dark:text-blue-300 dark:bg-opacity-10\",\n                \"white\": \"text-white bg-gray-800 border border-gray-500 border-opacity-40 __UI_DARK__ dark:text-white dark:bg-opacity-10\",\n                \"basic\": \"text-gray-900 bg-transparent\",\n                \"primary-solid\": \"text-white bg-brand-500\",\n                \"success-solid\": \"text-white bg-green-500\",\n                \"warning-solid\": \"text-white bg-orange-500\",\n                \"alert-solid\": \"text-white bg-red-500\",\n                \"blue-solid\": \"text-white bg-blue-500\",\n                \"gray-solid\": \"text-white bg-gray-500\",\n                \"white-solid\": \"text-gray-900 bg-white\",\n            },\n            size: {\n                sm: \"h-[1.2rem] px-2 text-xs\",\n                md: \"h-6 px-2 text-xs\",\n                lg: \"h-7 px-3 text-md\",\n                xl: \"h-8 px-4 text-lg\",\n            },\n            tag: {\n                false: \"font-semibold tracking-wide rounded-full\",\n                true: \"font-semibold rounded-[--radius]\",\n            },\n        },\n        defaultVariants: {\n            intent: \"gray\",\n            size: \"md\",\n            tag: false,\n        },\n        compoundVariants: [\n            { tag: true, className: \"border-none\" }\n        ]\n    }),\n    closeButton: cva([\n        \"UI-Badge__close-button\",\n        \"text-lg -mr-1 cursor-pointer transition ease-in hover:opacity-60\"\n    ]),\n    icon: cva([\n        \"UI-Badge__icon\",\n        \"inline-flex self-center flex-shrink-0\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Badge\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface BadgeProps extends React.ComponentPropsWithRef<\"span\">, VariantProps<typeof BadgeAnatomy.badge>,\n    ComponentWithAnatomy<typeof BadgeAnatomy> {\n    tag?: boolean,\n    isClosable?: boolean,\n    onClose?: () => void,\n    leftIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n    rightIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n    iconSpacing?: CSSProperties[\"marginRight\"]\n}\n\nexport const Badge = React.forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size,\n        intent,\n        tag = false,\n        isClosable,\n        onClose,\n        leftIcon,\n        rightIcon,\n        iconSpacing = \"0\",\n        badgeClassName,\n        closeButtonClassName,\n        iconClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <span\n                className={cn(\n                    BadgeAnatomy.badge({ size, intent, tag }),\n                    badgeClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                {leftIcon && <span className={cn(BadgeAnatomy.icon(), iconClassName)} style={{ marginRight: iconSpacing }}>{leftIcon}</span>}\n\n                {children}\n\n                {rightIcon && <span className={cn(BadgeAnatomy.icon(), iconClassName)} style={{ marginLeft: iconSpacing }}>{rightIcon}</span>}\n\n                {isClosable && <span className={cn(BadgeAnatomy.closeButton(), closeButtonClassName)} onClick={onClose}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\">\n                        <path\n                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"></path>\n                    </svg>\n                </span>}\n            </span>\n        </>\n    )\n\n})\n\nBadge.displayName = \"Badge\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "badge",
        "content": "export * from \"./badge\"\n"
      }
    ]
  },
  {
    "component": "banner",
    "name": "Banner",
    "dependencies": [],
    "family": [
      "show-only",
      "button"
    ],
    "files": [
      {
        "name": "banner.tsx",
        "dir": "banner",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ShowOnly } from \"../show-only\"\r\nimport { CloseButton, CloseButtonProps } from \"../button\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const BannerAnatomy = defineStyleAnatomy({\r\n    banner: cva([\r\n        \"UI-Banner__banner\",\r\n        \"bg-brand\",\r\n        \"h-14\"\r\n    ]),\r\n    container: cva([\r\n        \"UI-Banner__container\",\r\n        \"container max-w-4xl h-full px-4 flex items-center justify-between text-white md:px-8 text-sm sm:text-base\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Banner\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface BannerProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof BannerAnatomy> {\r\n    isClosable?: boolean\r\n    onClose?: () => void\r\n    /**\r\n     * @default {intent: \"white-outline\"}\r\n     */\r\n    closeButtonProps?: CloseButtonProps\r\n}\r\n\r\nexport const Banner = React.forwardRef<HTMLDivElement, BannerProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        bannerClassName,\r\n        containerClassName,\r\n        className,\r\n        isClosable = true,\r\n        onClose,\r\n        closeButtonProps,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(BannerAnatomy.banner(), bannerClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <div className={cn(BannerAnatomy.container(), containerClassName)}>\r\n                {children}\r\n                <ShowOnly when={isClosable}>\r\n                    <CloseButton\r\n                        intent=\"white-outline\"\r\n                        onClick={onClose}\r\n                        {...closeButtonProps}\r\n                    />\r\n                </ShowOnly>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nBanner.displayName = \"Banner\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "banner",
        "content": "export * from \"./banner\"\r\n"
      }
    ]
  },
  {
    "component": "basic-field",
    "name": "BasicField",
    "dependencies": [],
    "family": [
      "show-only"
    ],
    "files": [
      {
        "name": "basic-field-types.ts",
        "dir": "basic-field",
        "content": "import { BasicFieldOptions } from \".\"\n\nexport type ComponentWithBasicField<T> = T & BasicFieldOptions\n"
      },
      {
        "name": "basic-field.tsx",
        "dir": "basic-field",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { ShowOnly } from \"../show-only\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const BasicFieldAnatomy = defineStyleAnatomy({\n    fieldLabel: cva([\n        \"UI-BasicField__fieldLabel\",\n        \"block text-md sm:text-lg font-semibold self-start\"\n    ], {\n        variants: {\n            hasError: {\n                true: \"text-red-500\",\n                false: null,\n            },\n        },\n    }),\n    fieldAsterisk: cva(\"UI-BasicField__fieldAsterisk ml-1 text-red-500 text-sm\"),\n    fieldDetails: cva(\"UI-BasicField__fieldDetails\"),\n    field: cva(\"UI-BasicField__field w-full space-y-1\"),\n    fieldHelpText: cva(\"UI-BasicField__fieldHelpText text-sm text-gray-500\"),\n    fieldErrorText: cva(\"UI-BasicField__fieldErrorText text-sm text-red-500\"),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * BasicFieldOptions\n * - Field components inherit these props\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface BasicFieldOptions extends ComponentWithAnatomy<typeof BasicFieldAnatomy> {\n    id?: string | undefined\n    name?: string\n    label?: React.ReactNode\n    labelProps?: object\n    help?: React.ReactNode\n    error?: string\n    isRequired?: boolean\n    isDisabled?: boolean\n    isReadOnly?: boolean\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Extract BasicFieldProps\n * -----------------------------------------------------------------------------------------------*/\n\nexport function extractBasicFieldProps<Props extends BasicFieldOptions>(props: Props, id: string) {\n    const {\n        name,\n        label,\n        labelProps,\n        help,\n        error,\n        isRequired,\n        isDisabled = false,\n        isReadOnly = false,\n        fieldDetailsClassName,\n        fieldLabelClassName,\n        fieldClassName,\n        fieldErrorTextClassName,\n        fieldHelpTextClassName,\n        id: _id,\n        ...rest\n    } = props\n    return [\n        rest,\n        {\n            id: _id || id,\n            name,\n            label,\n            help,\n            error,\n            isDisabled,\n            isRequired,\n            isReadOnly,\n            fieldErrorTextClassName,\n            fieldHelpTextClassName,\n            fieldDetailsClassName,\n            fieldLabelClassName,\n            fieldClassName,\n            labelProps,\n        },\n    ] as [\n        Omit<Props,\n            \"label\" | \"name\" | \"help\" | \"error\" |\n            \"isDisabled\" | \"isRequired\" | \"isReadOnly\" |\n            \"fieldDetailsClassName\" | \"fieldLabelClassName\" | \"fieldClassName\" | \"fieldHelpTextClassName\" |\n            \"fieldErrorTextClassName\" | \"id\" | \"labelProps\"\n        >,\n            Omit<BasicFieldOptions, \"id\"> & {\n            id: string\n        }\n    ]\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BasicField\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface BasicFieldProps extends React.ComponentPropsWithRef<\"div\">, BasicFieldOptions {\n}\n\nexport const BasicField: React.FC<BasicFieldProps> = React.memo(React.forwardRef<HTMLDivElement, BasicFieldProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        labelProps,\n        id,\n        label,\n        error,\n        help,\n        isDisabled,\n        isReadOnly,\n        isRequired,\n        fieldClassName,\n        fieldDetailsClassName,\n        fieldLabelClassName,\n        fieldAsteriskClassName,\n        fieldErrorTextClassName,\n        fieldHelpTextClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <div\n                className={cn(\n                    BasicFieldAnatomy.field(),\n                    className,\n                    fieldClassName,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                <ShowOnly when={!!label}>\n                    <label\n                        htmlFor={isDisabled ? undefined : id}\n                        className={cn(BasicFieldAnatomy.fieldLabel({ hasError: !!error }), fieldLabelClassName)}\n                        {...labelProps}\n                    >\n                        {label}\n                        <ShowOnly when={isRequired}>\n                            <span className={cn(BasicFieldAnatomy.fieldAsterisk(), fieldAsteriskClassName)}>*</span>\n                        </ShowOnly>\n                    </label>\n                </ShowOnly>\n\n                {children}\n\n                <ShowOnly when={!!help || !!error}>\n                    <div className={cn(BasicFieldAnatomy.fieldDetails(), fieldDetailsClassName)}>\n                        {!!help && <p className={cn(BasicFieldAnatomy.fieldHelpText(), fieldHelpTextClassName)}>{help}</p>}\n                        {!!error && <p className={cn(BasicFieldAnatomy.fieldErrorText(), fieldErrorTextClassName)}>{error}</p>}\n                    </div>\n                </ShowOnly>\n            </div>\n        </>\n    )\n\n}))\n\nBasicField.displayName = \"BasicField\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "basic-field",
        "content": "export * from \"./basic-field\"\nexport * from \"./basic-field-types\"\n"
      }
    ]
  },
  {
    "component": "breadcrumbs",
    "name": "Breadcrumbs",
    "dependencies": [],
    "family": [
      "show-only"
    ],
    "files": [
      {
        "name": "breadcrumbs.tsx",
        "dir": "breadcrumbs",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ShowOnly } from \"../show-only\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const BreadcrumbsAnatomy = defineStyleAnatomy({\r\n    container: cva([\r\n        \"UI-Breadcrumbs__container\",\r\n        \"flex\"\r\n    ]),\r\n    list: cva([\r\n        \"UI-Breadcrumbs__list\",\r\n        \"flex items-center space-x-2\"\r\n    ]),\r\n    chevronIcon: cva([\r\n        \"UI-Breadcrumbs__chevronIcon\",\r\n        \"h-5 w-5 flex-shrink-0 text-gray-400 mr-4\"\r\n    ]),\r\n    item: cva([\r\n        \"UI-Breadcrumbs__item\",\r\n        \"flex items-center\",\r\n    ]),\r\n    itemLink: cva([\r\n        \"UI-Breadcrumbs__itemLink\",\r\n        \"text-sm font-medium text-[--muted] hover:text-[--text-color]\",\r\n        \"data-[current=true]:pointer-events-none data-[current=true]:font-semibold data-[current=true]:text-[--text-color]\"\r\n    ]),\r\n    homeItem: cva([\r\n        \"UI-Breadcrumbs__homeItem\",\r\n        \"text-[--muted] hover:text-[--text-color]\"\r\n    ]),\r\n    homeIcon: cva([\r\n        \"UI-Breadcrumbs__homeIcon\",\r\n        \"h-5 w-5 flex-shrink-0\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Breadcrumbs\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface BreadcrumbsProps extends React.ComponentPropsWithRef<\"nav\">, ComponentWithAnatomy<typeof BreadcrumbsAnatomy> {\r\n    homeHref?: string\r\n    items: { name: string, href: string | null | undefined, isCurrent: boolean }[]\r\n    showHomeButton?: boolean\r\n    homeIcon?: React.ReactElement\r\n}\r\n\r\nexport const Breadcrumbs: React.FC<BreadcrumbsProps> = React.forwardRef<HTMLElement, BreadcrumbsProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        containerClassName,\r\n        listClassName,\r\n        itemClassName,\r\n        itemLinkClassName,\r\n        chevronIconClassName,\r\n        homeIconClassName,\r\n        homeItemClassName,\r\n        className,\r\n        items,\r\n        homeHref = \"/\",\r\n        showHomeButton = true,\r\n        homeIcon,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n        >\r\n            <nav\r\n                className={cn(BreadcrumbsAnatomy.container(), containerClassName, className)}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                <ol role=\"list\" className={cn(BreadcrumbsAnatomy.list(), listClassName)}>\r\n                    <ShowOnly when={showHomeButton}>\r\n                        <li>\r\n                            <div>\r\n                                <a\r\n                                    href={homeHref}\r\n                                    className={cn(BreadcrumbsAnatomy.homeItem(), homeItemClassName)}\r\n                                >\r\n                                    {homeIcon ? homeIcon :\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\"\r\n                                             className={cn(BreadcrumbsAnatomy.homeIcon(), homeIconClassName)}>\r\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                                  d=\"M2.25 12l8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\"/>\r\n                                        </svg>}\r\n                                </a>\r\n                            </div>\r\n                        </li>\r\n                    </ShowOnly>\r\n                    {items.map((page, idx) => (\r\n                        <li key={page.name}>\r\n                            <div className={cn(BreadcrumbsAnatomy.item(), itemClassName)}>\r\n                                <ShowOnly when={!showHomeButton && idx > 0 || showHomeButton}>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                         stroke=\"currentColor\"\r\n                                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                         className={cn(BreadcrumbsAnatomy.chevronIcon(), chevronIconClassName)}\r\n                                    >\r\n                                        <polyline points=\"9 18 15 12 9 6\"></polyline>\r\n                                    </svg>\r\n                                </ShowOnly>\r\n                                <a\r\n                                    href={page.href ?? \"#\"}\r\n                                    className={cn(BreadcrumbsAnatomy.itemLink(), itemLinkClassName)}\r\n                                    data-current={page.isCurrent}\r\n                                    aria-current={page.isCurrent ? \"page\" : undefined}\r\n                                >\r\n                                    {page.name}\r\n                                </a>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n            </nav>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nBreadcrumbs.displayName = \"Breadcrumbs\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "breadcrumbs",
        "content": "export * from \"./breadcrumbs\"\r\n"
      }
    ]
  },
  {
    "component": "button",
    "name": "Button",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "button.tsx",
        "dir": "button",
        "content": "import { cn, defineStyleAnatomy } from \"../core\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport React, { CSSProperties } from \"react\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ButtonAnatomy = defineStyleAnatomy({\r\n    button: cva([\r\n        \"UI-Button__button\",\r\n        \"shadow-sm whitespace-nowrap font-semibold rounded-[--radius]\",\r\n        \"inline-flex items-center text-white transition ease-in duration-100 text-center text-base justify-center\",\r\n        \"focus-visible:outline-none focus-visible:ring-2 ring-offset-1 focus-visible:ring-[--ring]\"\r\n    ], {\r\n        variants: {\r\n            intent: {\r\n                \"primary\": \"!bg-brand-500 hover:!bg-brand-600 active:!bg-brand-700 border border-transparent\",\r\n                \"primary-outline\": \"text-brand-500 border border-brand-200 !bg-transparent hover:border-brand-500 hover:!bg-brand-500 active:!bg-brand-600 hover:text-white __UI__Dark__ dark:text-brand-300 dark:hover:border-brand-500 dark:hover:text-white\",\r\n                \"primary-subtle\": \"text-brand-600 border border-brand-500 !bg-brand-50 border-transparent hover:!bg-brand-100 active:!bg-brand-50 __UI__Dark__ dark:text-brand-300 dark:!bg-opacity-10\",\r\n                \"primary-link\": \"shadow-none text-brand-500 border border-transparent !bg-transparent hover:underline active:text-brand-700 __UI__Dark__ dark:text-brand-300\",\r\n                \"primary-basic\": \"shadow-none text-brand-500 border border-transparent !bg-transparent hover:text-brand-600 active:text-brand-700 __UI__Dark__ dark:text-brand-300 dark:active:text-brand-200\",\r\n\r\n                \"warning\": \"!bg-orange-500 hover:!bg-orange-600 active:!bg-orange-700 border border-transparent\",\r\n                \"warning-outline\": \"text-orange-500 border border-orange-200 !bg-transparent hover:!bg-orange-500 active:!bg-orange-600 hover:text-white __UI__Dark__ dark:text-orange-300 dark:hover:border-orange-500 dark:hover:text-white\",\r\n                \"warning-subtle\": \"text-orange-600 border border-orange-500 !bg-orange-50 border-transparent hover:!bg-orange-100 active:!bg-orange-50 __UI__Dark__ dark:text-orange-300 dark:!bg-opacity-10\",\r\n                \"warning-link\": \"shadow-none text-orange-500 border border-transparent !bg-transparent hover:underline active:text-orange-700 __UI__Dark__ dark:text-orange-300\",\r\n                \"warning-basic\": \"shadow-none text-orange-500 border border-transparent !bg-transparent hover:text-orange-600 active:text-orange-700 __UI__Dark__ dark:text-orange-300 dark:active:text-orange-200\",\r\n\r\n                \"success\": \"!bg-green-500 hover:!bg-green-600 active:!bg-green-700 border border-transparent\",\r\n                \"success-outline\": \"text-green-500 border border-green-200 !bg-transparent hover:!bg-green-500 active:!bg-green-600 hover:text-white __UI__Dark__ dark:text-green-300 dark:hover:border-green-500 dark:hover:text-white\",\r\n                \"success-subtle\": \"text-green-600 border border-green-500 !bg-green-50 border-transparent hover:!bg-green-100 active:!bg-green-50 __UI__Dark__ dark:text-green-300 dark:!bg-opacity-10\",\r\n                \"success-link\": \"shadow-none text-green-500 border border-transparent !bg-transparent hover:underline active:text-green-700 __UI__Dark__ dark:text-green-300\",\r\n                \"success-basic\": \"shadow-none text-green-500 border border-transparent !bg-transparent hover:text-green-600 active:text-green-700 __UI__Dark__ dark:text-green-300 dark:active:text-green-200\",\r\n\r\n                \"alert\": \"!bg-red-500 hover:!bg-red-600 active:!bg-red-700 border border-transparent\",\r\n                \"alert-outline\": \"text-red-500 border border-red-200 !bg-transparent hover:!bg-red-500 active:!bg-red-600 hover:text-white __UI__Dark__ dark:text-red-300 dark:hover:border-red-500 dark:hover:text-white\",\r\n                \"alert-subtle\": \"text-red-600 border border-red-500 !bg-red-50 border-transparent hover:!bg-red-100 active:!bg-red-50 __UI__Dark__ dark:text-red-300 dark:!bg-opacity-10\",\r\n                \"alert-link\": \"shadow-none text-red-500 border border-transparent !bg-transparent hover:underline active:text-red-700 __UI__Dark__ dark:text-red-300\",\r\n                \"alert-basic\": \"shadow-none text-red-500 border border-transparent !bg-transparent hover:text-red-600 active:text-red-700 __UI__Dark__ dark:text-red-300 dark:active:text-red-200\",\r\n\r\n                \"gray\": \"!bg-gray-500 hover:!bg-gray-600 active:!bg-gray-700 border border-transparent\",\r\n                \"gray-outline\": \"text-gray-600 border border-gray-200 !bg-transparent hover:!bg-gray-100 active:!bg-gray-200 __UI__DARK__ dark:text-gray-300 dark:border-gray-500 dark:hover:!bg-gray-500 dark:active:!bg-gray-500 dark:hover:text-gray-100\",\r\n                \"gray-subtle\": \"text-gray-600 border border-gray-500 !bg-gray-50 border-transparent hover:!bg-gray-100 active:!bg-gray-50 __UI__Dark__ dark:text-gray-300 dark:!bg-opacity-10\",\r\n                \"gray-link\": \"shadow-none text-gray-500 border border-transparent !bg-transparent hover:underline active:text-gray-700 __UI__Dark__ dark:text-gray-300\",\r\n                \"gray-basic\": \"shadow-none text-gray-500 border border-transparent !bg-transparent hover:text-gray-600 active:text-gray-700 __UI__Dark__ dark:text-gray-300 dark:active:text-gray-200\",\r\n\r\n                \"white\": \"text-black !bg-white hover:!bg-gray-100 active:!bg-!bg-gray-200 border border-transparent\",\r\n                \"white-outline\": \"text-white border border-gray-200 !bg-transparent hover:!bg-white hover:text-black active:!bg-gray-100 active:text-black\",\r\n                \"white-subtle\": \"text-white !bg-black !bg-opacity-20 hover:!bg-opacity-25 active:!bg-!bg-opacity-30 border border-transparent\",\r\n                \"white-link\": \"shadow-none text-white border border-transparent !bg-transparent hover:underline active:text-gray-200\",\r\n                \"white-basic\": \"shadow-none text-white border border-transparent !bg-transparent hover:text-white-200 active:text-white-300\",\r\n            },\r\n            rounded: {\r\n                true: \"rounded-[999px]\",\r\n                false: null,\r\n            },\r\n            isUppercase: {\r\n                true: \"uppercase\",\r\n                false: null,\r\n            },\r\n            isDisabled: {\r\n                true: \"opacity-50 pointer-events-none\",\r\n                false: null,\r\n            },\r\n            contentWidth: {\r\n                true: \"w-fit\",\r\n                false: null,\r\n            },\r\n            size: {\r\n                xs: \"text-sm h-6 px-2\",\r\n                sm: \"text-sm h-8 px-3\",\r\n                md: \"h-10 px-4\",\r\n                lg: \"h-12 px-6\",\r\n                xl: \"text-xl h-14 px-8\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            intent: \"primary\",\r\n            size: \"md\",\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Button\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ButtonProps extends React.ComponentPropsWithRef<\"button\">, VariantProps<typeof ButtonAnatomy.button> {\r\n    isLoading?: boolean,\r\n    isDisabled?: boolean,\r\n    isUppercase?: boolean,\r\n    leftIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\r\n    rightIcon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\r\n    iconSpacing?: CSSProperties[\"marginInline\"],\r\n    iconClassName?: string\r\n}\r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        size,\r\n        className,\r\n        rounded = false,\r\n        contentWidth = false,\r\n        intent,\r\n        leftIcon,\r\n        rightIcon,\r\n        iconSpacing = \"0.5rem\",\r\n        isUppercase,\r\n        isLoading,\r\n        isDisabled,\r\n        iconClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    const ButtonContent = <>\r\n        {leftIcon &&\r\n            <span\r\n                className={cn(\"inline-flex self-center flex-shrink-0\", iconClassName)}\r\n                style={{ marginInlineEnd: iconSpacing }}>\r\n                {leftIcon}\r\n            </span>}\r\n        {children}\r\n        {rightIcon &&\r\n            <span\r\n                className={cn(\"inline-flex self-center flex-shrink-0\", iconClassName)}\r\n                style={{ marginInlineStart: iconSpacing }}>\r\n                {rightIcon}\r\n            </span>}\r\n    </>\r\n\r\n    return (\r\n        <>\r\n\r\n            <button\r\n                type=\"button\"\r\n                className={cn(\r\n                    ButtonAnatomy.button({\r\n                        size,\r\n                        intent,\r\n                        contentWidth,\r\n                        isUppercase,\r\n                        isDisabled: isDisabled || isLoading,\r\n                    }),\r\n                    className,\r\n                )}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {isLoading ? (\r\n                    <svg\r\n                        width=\"20\"\r\n                        height=\"20\"\r\n                        fill=\"currentColor\"\r\n                        className=\"animate-spin\"\r\n                        viewBox=\"0 0 1792 1792\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            d=\"M526 1394q0 53-37.5 90.5t-90.5 37.5q-52 0-90-38t-38-90q0-53 37.5-90.5t90.5-37.5 90.5 37.5 37.5 90.5zm498 206q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-704-704q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm1202 498q0 52-38 90t-90 38q-53 0-90.5-37.5t-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-964-996q0 66-47 113t-113 47-113-47-47-113 47-113 113-47 113 47 47 113zm1170 498q0 53-37.5 90.5t-90.5 37.5-90.5-37.5-37.5-90.5 37.5-90.5 90.5-37.5 90.5 37.5 37.5 90.5zm-640-704q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm530 206q0 93-66 158.5t-158 65.5q-93 0-158.5-65.5t-65.5-158.5q0-92 65.5-158t158.5-66q92 0 158 66t66 158z\">\r\n                        </path>\r\n                    </svg>\r\n                ) : ButtonContent}\r\n            </button>\r\n        </>\r\n    )\r\n\r\n})\r\n\r\nButton.displayName = \"Button\"\r\n"
      },
      {
        "name": "close-button.tsx",
        "dir": "button",
        "content": "import { cn } from \"../core\"\nimport React from \"react\"\nimport { IconButton, IconButtonProps } from \".\"\n\n/* -------------------------------------------------------------------------------------------------\n * CloseButton\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface CloseButtonProps extends IconButtonProps {\n    icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n}\n\nexport const CloseButton = React.forwardRef<HTMLButtonElement, CloseButtonProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        icon = undefined,\n        size = \"sm\",\n        ...rest\n    } = props\n\n    return (\n        <>\n            <IconButton\n                type=\"button\"\n                intent=\"gray-outline\"\n                size={size}\n                className={cn(\n                    \"rounded-full text-2xl flex-none\",\n                    className,\n                )}\n                icon={<span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\">\n                        <path\n                            d=\"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"></path>\n                    </svg>\n                </span>}\n                {...rest}\n                ref={ref}\n            />\n        </>\n    )\n\n})\n\nCloseButton.displayName = \"CloseButton\"\n"
      },
      {
        "name": "icon-button.tsx",
        "dir": "button",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\nimport { Button, ButtonProps } from \".\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const IconButtonAnatomy = defineStyleAnatomy({\n    iconButton: cva(\"UI-IconButton__iconButton p-0\", {\n        variants: {\n            size: {\n                xs: \"text-xl h-6 w-6\",\n                sm: \"text-xl h-8 w-8\",\n                md: \"text-2xl h-10 w-10\",\n                lg: \"text-3xl h-12 w-12\",\n                xl: \"text-4xl h-14 w-14\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * IconButton\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface IconButtonProps extends Omit<ButtonProps, \"leftIcon\" | \"rightIcon\" | \"iconSpacing\" | \"isUppercase\">,\n    VariantProps<typeof IconButtonAnatomy.iconButton>, ComponentWithAnatomy<typeof IconButtonAnatomy> {\n    icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>>\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        icon,\n        size,\n        iconButtonClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <Button\n                className={cn(\n                    IconButtonAnatomy.iconButton({ size }),\n                    iconButtonClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                {icon}\n            </Button>\n        </>\n    )\n\n})\n\nIconButton.displayName = \"IconButton\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "button",
        "content": "export * from \"./button\"\nexport * from \"./icon-button\"\nexport * from \"./close-button\"\n"
      }
    ]
  },
  {
    "component": "calendar",
    "name": "Calendar",
    "dependencies": [
      [
        "@internationalized/date",
        "^3.2.0",
        ""
      ],
      [
        "react-stately",
        "^3.23.0",
        ""
      ],
      [
        "date-fns",
        "^2.30.0",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "calendar-cell.tsx",
        "dir": "calendar",
        "content": "\"use client\"\r\n\r\nimport { CalendarDate, DateValue, getDayOfWeek, isSameDay, isSameMonth } from \"@internationalized/date\"\r\nimport { cn, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { useRef } from \"react\"\r\nimport { mergeProps, useCalendarCell, useFocusRing } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CalendarCellAnatomy = defineStyleAnatomy({\r\n    cell: cva(\"UI-CalendarCell__cell relative\", {\r\n        variants: {\r\n            isFocusVisible: { true: \"z-10\", false: \"z-0\" },\r\n        },\r\n    }),\r\n    date: cva([\r\n        \"UI-CalendarCell__date\",\r\n        \"w-full h-full rounded-full flex items-center justify-center text-gray-600 dark:text-gray-300 font-medium\"\r\n    ], {\r\n        variants: {\r\n            isDisabled: { true: \"text-gray-400 cursor-default\", false: null },\r\n            isUnavailable: { true: \"text-red-300 cursor-default\", false: null },\r\n            isSelectionStart: { true: \"bg-brand-600 text-white hover:bg-brand-700\", false: null },\r\n            isSelectionEnd: { true: \"bg-brand-600 text-white hover:bg-brand-700\", false: null },\r\n            isSelected: { true: null, false: null },\r\n            isFocusVisible: { true: \"ring-2 group-focus:z-2 ring-[--ring] ring-offset-2\", false: null },\r\n        },\r\n        compoundVariants: [\r\n            { isDisabled: false, isUnavailable: false, className: \"cursor-pointer\" },\r\n            { isSelected: true, isSelectionStart: false, isSelectionEnd: false, className: \"hover:bg-brand-400\" },\r\n            { isSelected: false, isDisabled: false, isUnavailable: false, className: \"hover:bg-brand-100\" },\r\n        ],\r\n    }),\r\n    button: cva(\"UI-CalendarCell__button w-10 h-10 outline-none group\", {\r\n        variants: {\r\n            isRoundedLeft: { true: \"rounded-l-full\", false: null },\r\n            isRoundedRight: { true: \"rounded-r-full\", false: null },\r\n            isSelected: { true: \"bg-brand-100 dark:bg-opacity-10\", false: null },\r\n            isDisabled: { true: \"disabled\", false: null },\r\n            isUnavailable: { true: \"disabled\", false: null },\r\n        },\r\n    }),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CalendarCell\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CalendarCellProps {\r\n    state: CalendarState | RangeCalendarState\r\n    date: CalendarDate\r\n    currentMonth: DateValue\r\n}\r\n\r\nexport function CalendarCell({ state, date, currentMonth }: CalendarCellProps) {\r\n\r\n    let ref = useRef<HTMLDivElement>(null)\r\n    let {\r\n        cellProps,\r\n        buttonProps,\r\n        isSelected,\r\n        isDisabled,\r\n        isUnavailable,\r\n        formattedDate,\r\n    } = useCalendarCell({ date }, state, ref)\r\n\r\n    let isOutsideMonth = !isSameMonth(currentMonth, date)\r\n\r\n    // The start and end date of the selected range will have\r\n    // an emphasized appearance.\r\n    let isSelectionStart = (state as RangeCalendarState).highlightedRange\r\n        ? isSameDay(date, (state as RangeCalendarState).highlightedRange.start)\r\n        : isSelected\r\n    let isSelectionEnd = (state as RangeCalendarState).highlightedRange\r\n        ? isSameDay(date, (state as RangeCalendarState).highlightedRange.end)\r\n        : isSelected\r\n\r\n    // We add rounded corners on the left for the first day of the month,\r\n    // the first day of each week, and the start date of the selection.\r\n    // We add rounded corners on the right for the last day of the month,\r\n    // the last day of each week, and the end date of the selection.\r\n    let { countryLocale } = useUILocaleConfig()\r\n    let dayOfWeek = getDayOfWeek(date, countryLocale)\r\n    let isRoundedLeft =\r\n        isSelected && (isSelectionStart)\r\n    let isRoundedRight =\r\n        isSelected &&\r\n        (isSelectionEnd)\r\n\r\n    let { focusProps, isFocusVisible } = useFocusRing()\r\n\r\n    return (\r\n        <td\r\n            {...cellProps}\r\n            className={cn(CalendarCellAnatomy.cell({ isFocusVisible }))}\r\n        >\r\n            <div\r\n                {...mergeProps(buttonProps, focusProps)}\r\n                ref={ref}\r\n                hidden={isOutsideMonth}\r\n                className={cn(CalendarCellAnatomy.button({ isDisabled, isSelected, isUnavailable, isRoundedLeft, isRoundedRight }))}\r\n            >\r\n                <div\r\n                    className={cn(CalendarCellAnatomy.date({\r\n                        isSelected, isSelectionEnd, isSelectionStart, isUnavailable, isDisabled, isFocusVisible,\r\n                    }))}\r\n                >\r\n                    {formattedDate}\r\n                </div>\r\n            </div>\r\n        </td>\r\n    )\r\n}\r\n\r\nCalendarCell.displayName = \"CalendarCell\"\r\n"
      },
      {
        "name": "calendar-grid.tsx",
        "dir": "calendar",
        "content": "\"use client\"\r\n\r\nimport { DateDuration, endOfMonth } from \"@internationalized/date\"\r\nimport { cn, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport getWeeksInMonth from \"date-fns/getWeeksInMonth\"\r\nimport { useMemo } from \"react\"\r\nimport { useCalendarGrid } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\nimport { CalendarCell } from \"./calendar-cell\"\r\nimport { getDateLocaleLibrary } from \"./locale\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CalendarGridAnatomy = defineStyleAnatomy({\r\n    table: cva(\"UI-CalendarGrid__table flex-1\"),\r\n    head: cva(\"UI-CalendarGrid__head text-gray-600 text-center\"),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CalendarGrid\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CalendarGridProps {\r\n    state: CalendarState | RangeCalendarState\r\n    offset: DateDuration\r\n    locale?: string\r\n}\r\n\r\nexport function CalendarGrid({ locale, state, offset = {} }: CalendarGridProps) {\r\n    let { countryLocale } = useUILocaleConfig()\r\n    let startDate = state.visibleRange.start.add(offset)\r\n    let endDate = endOfMonth(startDate)\r\n    let { gridProps, headerProps, weekDays } = useCalendarGrid(\r\n        {\r\n            startDate,\r\n            endDate,\r\n        },\r\n        state,\r\n    )\r\n\r\n    const _locale = locale ?? countryLocale\r\n\r\n    // Get the number of weeks in the month so we can render the proper number of rows.\r\n    let weeksInMonth = useMemo(() => getWeeksInMonth(startDate.toDate(state.timeZone), { locale: getDateLocaleLibrary(_locale) }), [_locale])\r\n\r\n    const frWeekdays = useMemo(() => [\"L\", \"M\", \"M\", \"J\", \"V\", \"S\", \"D\"], [])\r\n\r\n    weekDays = useMemo(() => {\r\n        const [first, ...r] = weekDays\r\n        const arr = [...r!, first!]\r\n        if (_locale.includes(\"fr\")) {\r\n            return frWeekdays\r\n        }\r\n        return arr\r\n    }, [_locale])\r\n\r\n    return (\r\n        <table {...gridProps} cellPadding=\"0\" className={cn(CalendarGridAnatomy.table())}>\r\n            <thead {...headerProps} className={cn(CalendarGridAnatomy.head())}>\r\n            <tr>\r\n                {weekDays.map((day, index) => (\r\n                    <th key={index}>{day}</th>\r\n                ))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {[...new Array(weeksInMonth).keys()].map((weekIndex) => (\r\n                <tr key={weekIndex}>\r\n                    {state\r\n                        .getDatesInWeek(weekIndex, startDate)\r\n                        .map((date, i) =>\r\n                            date ? (\r\n                                <CalendarCell\r\n                                    key={i}\r\n                                    state={state}\r\n                                    date={date}\r\n                                    currentMonth={startDate}\r\n                                />\r\n                            ) : (\r\n                                <td key={i}/>\r\n                            ),\r\n                        )}\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nCalendarGrid.displayName = \"CalendarGrid\"\r\n"
      },
      {
        "name": "calendar-header.tsx",
        "dir": "calendar",
        "content": "\"use client\"\r\n\r\nimport _capitalize from \"lodash/capitalize\"\r\nimport React from \"react\"\r\nimport { AriaButtonProps, useDateFormatter, VisuallyHidden } from \"react-aria\"\r\nimport { CalendarState, RangeCalendarState } from \"react-stately\"\r\nimport { IconButton } from \"../button\"\r\nimport { useUILocaleConfig } from \"../core\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * CalendarHeader\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface CalendarHeaderProps {\r\n    state: CalendarState | RangeCalendarState\r\n    calendarProps: any\r\n    prevButtonProps: AriaButtonProps\r\n    nextButtonProps: AriaButtonProps\r\n    locale?: string\r\n}\r\n\r\nexport function CalendarHeader({\r\n                                   state,\r\n                                   calendarProps,\r\n                                   prevButtonProps,\r\n                                   nextButtonProps,\r\n                                   locale,\r\n                               }: CalendarHeaderProps) {\r\n    const { countryLocale } = useUILocaleConfig()\r\n    let monthDateFormatter = useDateFormatter({\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n        timeZone: state.timeZone,\r\n    })\r\n\r\n    const { onPress: prevButtonOnPress, ...prevButtonRest } = prevButtonProps\r\n    const { onPress: nextButtonOnPress, ...nextButtonRest } = nextButtonProps\r\n\r\n    return (\r\n        <div className=\"flex items-center py-4 text-center\">\r\n            {/* Add a screen reader only description of the entire visible range rather than\r\n          * a separate heading above each month grid. This is placed first in the DOM order\r\n          * so that it is the first thing a touch screen reader user encounters.\r\n          * In addition, VoiceOver on iOS does not announce the aria-label of the grid\r\n          * elements, so the aria-label of the Calendar is included here as well. */}\r\n            <VisuallyHidden>\r\n                <h2>{calendarProps[\"aria-label\"]}</h2>\r\n            </VisuallyHidden>\r\n            <IconButton\r\n                size=\"sm\"\r\n                intent=\"primary-subtle\"\r\n                icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                    <path\r\n                        d=\"M9.78 12.78a.75.75 0 0 1-1.06 0L4.47 8.53a.75.75 0 0 1 0-1.06l4.25-4.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L6.06 8l3.72 3.72a.75.75 0 0 1 0 1.06Z\"></path>\r\n                </svg>)}\r\n                rounded {...prevButtonRest} onClick={e => {\r\n                e.preventDefault()\r\n                prevButtonOnPress && prevButtonOnPress(e as any)\r\n            }}\r\n            />\r\n            <h2\r\n                // We have a visually hidden heading describing the entire visible range,\r\n                // and the calendar itself describes the individual month\r\n                // so we don't need to repeat that here for screen reader users.\r\n                aria-hidden\r\n                className=\"flex-1 align-center font-bold text-md text-center\"\r\n            >\r\n                {/*{monthDateFormatter.format(*/}\r\n                {/*   state.visibleRange.start.toDate(state.timeZone),*/}\r\n                {/*)}*/}\r\n                {_capitalize(Intl.DateTimeFormat((locale ?? countryLocale), {\r\n                    month: \"long\", year: \"numeric\",\r\n                }).format(state.visibleRange.start.toDate(state.timeZone)))}\r\n            </h2>\r\n            <h2\r\n                aria-hidden\r\n                className=\"flex-1 align-center font-bold text-md text-center\"\r\n            >\r\n                {/*{monthDateFormatter.format(*/}\r\n                {/*   state.visibleRange.start.add({ months: 1 }).toDate(state.timeZone),*/}\r\n                {/*)}*/}\r\n                {_capitalize(Intl.DateTimeFormat((locale ?? countryLocale), {\r\n                    month: \"long\", year: \"numeric\",\r\n                }).format(state.visibleRange.start.add({ months: 1 }).toDate(state.timeZone)))}\r\n            </h2>\r\n            <IconButton\r\n                size=\"sm\"\r\n                intent=\"primary-subtle\"\r\n                icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                    <path\r\n                        d=\"M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z\"></path>\r\n                </svg>)}\r\n                rounded {...nextButtonRest} onClick={e => {\r\n                e.preventDefault()\r\n                nextButtonOnPress && nextButtonOnPress(e as any)\r\n            }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nCalendarHeader.displayName = \"CalendarHeader\"\r\n"
      },
      {
        "name": "calendar.tsx",
        "dir": "calendar",
        "content": "\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { cn, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport _capitalize from \"lodash/capitalize\"\r\nimport { useRef } from \"react\"\r\nimport { useCalendar } from \"react-aria\"\r\nimport { CalendarStateOptions, useCalendarState } from \"react-stately\"\r\nimport { IconButton } from \"../button\"\r\nimport { CalendarGrid } from \"./calendar-grid\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CalendarAnatomy = defineStyleAnatomy({\r\n    container: cva(\"UI-Calendar__container inline-block text-gray-800 dark:text-gray-200\"),\r\n    header: cva(\"UI-Calendar__header flex items-center gap-2 pb-4 w-full justify-between\"),\r\n    title: cva(\"UI-Calendar__title flex-none font-bold text-lg ml-2 w-fit\"),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Calendar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function Calendar({ locale, ...props }: Omit<CalendarStateOptions, \"createCalendar\" | \"locale\"> & { locale?: string }) {\r\n\r\n    let { countryLocale } = useUILocaleConfig()\r\n    let state = useCalendarState({\r\n        ...props,\r\n        locale: locale ?? countryLocale,\r\n        createCalendar,\r\n    })\r\n\r\n\r\n    let ref = useRef<HTMLDivElement>(null)\r\n    let {\r\n        calendarProps,\r\n        prevButtonProps: { onPress: prevButtonOnPress, ...prevButtonProps },\r\n        nextButtonProps: { onPress: nextButtonOnPress, ...nextButtonProps },\r\n        title,\r\n    } = useCalendar(\r\n        props,\r\n        state,\r\n    )\r\n\r\n    return (\r\n        <div {...calendarProps} ref={ref} className={cn(CalendarAnatomy.container())}>\r\n            <div className={cn(CalendarAnatomy.header())}>\r\n                <IconButton\r\n                    size=\"sm\"\r\n                    intent=\"primary-subtle\"\r\n                    icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                        <path\r\n                            d=\"M9.78 12.78a.75.75 0 0 1-1.06 0L4.47 8.53a.75.75 0 0 1 0-1.06l4.25-4.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L6.06 8l3.72 3.72a.75.75 0 0 1 0 1.06Z\"></path>\r\n                    </svg>)}\r\n                    rounded\r\n                    {...prevButtonProps}\r\n                    onClick={e => {\r\n                        e.preventDefault()\r\n                        prevButtonOnPress && prevButtonOnPress(e as any)\r\n                    }}\r\n                />\r\n                <h2 className={cn(CalendarAnatomy.title())}>\r\n                    {_capitalize(\r\n                        Intl.DateTimeFormat(countryLocale, { month: \"long\", year: \"numeric\", })\r\n                            .format(state.visibleRange.start.toDate(state.timeZone))\r\n                    )}\r\n                </h2>\r\n                <IconButton\r\n                    size=\"sm\"\r\n                    intent=\"primary-subtle\"\r\n                    icon={(<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"h-6 w-6\">\r\n                        <path\r\n                            d=\"M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z\"></path>\r\n                    </svg>)}\r\n                    rounded\r\n                    {...nextButtonProps}\r\n                    onClick={e => {\r\n                        e.preventDefault()\r\n                        nextButtonOnPress && nextButtonOnPress(e as any)\r\n                    }}\r\n                />\r\n            </div>\r\n            <CalendarGrid state={state} offset={{}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nCalendar.displayName = \"Calendar\"\r\n\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "calendar",
        "content": "export * from \"./calendar\"\nexport * from \"./calendar-cell\"\nexport * from \"./calendar-header\"\nexport * from \"./calendar-grid\"\nexport * from \"./range-calendar\"\nexport { getDateLocaleLibrary } from \"./locale\"\n"
      },
      {
        "name": "locale.ts",
        "dir": "calendar",
        "content": "import enUS from \"date-fns/locale/en-US\"\nimport fr from \"date-fns/locale/fr\"\n\nexport const getDateLocaleLibrary = (locale: string) => locale.includes(\"fr\") ? fr : enUS\n"
      },
      {
        "name": "range-calendar.tsx",
        "dir": "calendar",
        "content": "\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { useRef } from \"react\"\r\nimport { useRangeCalendar } from \"react-aria\"\r\nimport { RangeCalendarStateOptions, useRangeCalendarState } from \"react-stately\"\r\nimport { useUILocaleConfig } from \"../core\"\r\nimport { CalendarGrid } from \"./calendar-grid\"\r\nimport { CalendarHeader } from \"./calendar-header\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * RangeCalendar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function RangeCalendar({ locale, ...props }: Omit<RangeCalendarStateOptions, \"createCalendar\" | \"locale\"> & { locale?: string }) {\r\n    let { countryLocale } = useUILocaleConfig()\r\n    let state = useRangeCalendarState({\r\n        ...props,\r\n        visibleDuration: { months: 2 },\r\n        locale: locale ?? countryLocale,\r\n        createCalendar,\r\n    })\r\n\r\n    let ref = useRef<HTMLDivElement>(null)\r\n    let {\r\n        calendarProps,\r\n        prevButtonProps,\r\n        nextButtonProps,\r\n    } = useRangeCalendar(\r\n        props,\r\n        state,\r\n        ref,\r\n    )\r\n\r\n    return (\r\n        <div {...calendarProps} ref={ref} className=\"inline-block\">\r\n            <CalendarHeader\r\n                state={state}\r\n                calendarProps={calendarProps}\r\n                prevButtonProps={prevButtonProps}\r\n                nextButtonProps={nextButtonProps}\r\n            />\r\n            <div className=\"flex items-center gap-2 pb-4 w-fit\">\r\n                <div className=\"flex flex-col md:flex-row gap-8\">\r\n                    <CalendarGrid state={state} offset={{}}/>\r\n                    <CalendarGrid state={state} offset={{ months: 1 }}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nRangeCalendar.displayName = \"RangeCalendar\"\r\n"
      }
    ]
  },
  {
    "component": "card",
    "name": "Card",
    "dependencies": [],
    "family": [
      "paper"
    ],
    "files": [
      {
        "name": "card.tsx",
        "dir": "card",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Paper, PaperProps } from \"../paper\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const CardAnatomy = defineStyleAnatomy({\r\n    card: cva([\r\n        \"UI-Paper__card\",\r\n    ]),\r\n    header: cva([\r\n        \"UI-Paper__header\",\r\n        \"p-4\"\r\n    ]),\r\n    footer: cva([\r\n        \"UI-Paper__footer\",\r\n        \"p-4\"\r\n    ]),\r\n    body: cva([\r\n        \"UI-Paper__footer\",\r\n        \"p-4\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Card\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface CardProps extends PaperProps, ComponentWithAnatomy<typeof CardAnatomy> {\r\n    header?: React.ReactNode\r\n    footer?: React.ReactNode\r\n}\r\n\r\nexport const Card: React.FC<CardProps> = React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        cardClassName,\r\n        headerClassName,\r\n        footerClassName,\r\n        bodyClassName,\r\n        paperClassName,\r\n        className,\r\n        header,\r\n        footer,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <Paper\r\n            className={cn(paperClassName, cardClassName)}\r\n        >\r\n            {header && <div className={cn(CardAnatomy.header(), headerClassName)}>\r\n                {header}\r\n            </div>}\r\n            <div className={cn(CardAnatomy.body(), bodyClassName)}>\r\n                {children}\r\n            </div>\r\n            {footer && <div className={cn(CardAnatomy.footer(), footerClassName)}>\r\n                {footer}\r\n            </div>}\r\n        </Paper>\r\n    )\r\n\r\n})\r\n\r\nCard.displayName = \"Card\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "card",
        "content": "export * from \"./card\"\r\n"
      }
    ]
  },
  {
    "component": "charts",
    "name": "Charts",
    "dependencies": [
      [
        "recharts",
        "^2.7.2",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "area-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Area, AreaChart as ReChartsAreaChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis, } from \"recharts\"\r\nimport { BaseChartProps, ChartCurveType } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"../core/color-theme\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const AreaChartAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-AreaChart__root\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * AreaChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface AreaChartProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof AreaChartAnatomy>,\r\n    BaseChartProps {\r\n    stack?: boolean\r\n    curveType?: ChartCurveType\r\n    connectNulls?: boolean\r\n    // Display dots for each data point\r\n    showDots?: boolean\r\n}\r\n\r\nexport const AreaChart: React.FC<AreaChartProps> = React.forwardRef<HTMLDivElement, AreaChartProps>((props, ref) => {\r\n\r\n    const {\r\n        rootClassName,\r\n        className,\r\n        stack = false,\r\n        curveType = \"linear\",\r\n        connectNulls = false,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        showDots = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            className={cn(AreaChartAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\r\n                {data?.length ? (\r\n                    <ReChartsAreaChart data={data}>\r\n                        {showGridLines ? (\r\n                            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false}/>\r\n                        ) : null}\r\n                        <XAxis\r\n                            hide={!showXAxis}\r\n                            dataKey={index}\r\n                            tick={{ transform: \"translate(0, 8)\" }}\r\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                            style={{\r\n                                fontSize: \".75rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                                color: \"red\",\r\n                            }}\r\n                            interval=\"preserveStartEnd\"\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            padding={{ left: 10, right: 10 }}\r\n                            minTickGap={5}\r\n                            spacing={120}\r\n                            // textAnchor=\"end\"\r\n                            // angle={-40}\r\n                        />\r\n                        <YAxis\r\n                            width={yAxisWidth}\r\n                            hide={!showYAxis}\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            type=\"number\"\r\n                            domain={yAxisDomain as AxisDomain}\r\n                            tick={{ transform: \"translate(-3, 0)\" }}\r\n                            style={{\r\n                                fontSize: \".8rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                            }}\r\n                            tickFormatter={valueFormatter}\r\n                            allowDecimals={allowDecimals}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                                position={{ y: 0 }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => {\r\n                            const hexColor = `var(--${categoryColors.get(category)})`\r\n                            return (\r\n                                <defs key={category}>\r\n                                    {showGradient ? (\r\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                            <stop offset=\"5%\" stopColor={hexColor} stopOpacity={0.2}/>\r\n                                            <stop offset=\"95%\" stopColor={hexColor} stopOpacity={0}/>\r\n                                        </linearGradient>\r\n                                    ) : (\r\n                                        <linearGradient id={categoryColors.get(category)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                            <stop stopColor={hexColor} stopOpacity={0.3}/>\r\n                                        </linearGradient>\r\n                                    )}\r\n                                </defs>\r\n                            )\r\n                        })}\r\n\r\n                        {categories.map((category) => (\r\n                            <Area\r\n                                key={category}\r\n                                name={category}\r\n                                type={curveType}\r\n                                dataKey={category}\r\n                                stroke={`var(--${categoryColors.get(category)})`}\r\n                                fill={`url(#${categoryColors.get(category)})`}\r\n                                strokeWidth={2}\r\n                                dot={showDots}\r\n                                isAnimationActive={showAnimation}\r\n                                stackId={stack ? \"a\" : undefined}\r\n                                connectNulls={connectNulls}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n\r\n                    </ReChartsAreaChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nAreaChart.displayName = \"AreaChart\"\r\n"
      },
      {
        "name": "bar-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Bar, BarChart as ReChartsBarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis, } from \"recharts\"\r\nimport { BaseChartProps } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"../core/color-theme\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const BarChartAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-BarChart__root\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * BarChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface BarChartProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof BarChartAnatomy>,\r\n    BaseChartProps {\r\n    layout?: \"vertical\" | \"horizontal\";\r\n    stack?: boolean;\r\n    relative?: boolean;\r\n}\r\n\r\nexport const BarChart: React.FC<BarChartProps> = React.forwardRef<HTMLDivElement, BarChartProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        layout = \"horizontal\",\r\n        stack = false,\r\n        relative = false,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            className={cn(BarChartAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                {data?.length ? (\r\n                    <ReChartsBarChart\r\n                        data={data}\r\n                        stackOffset={relative ? \"expand\" : \"none\"}\r\n                        layout={layout === \"vertical\" ? \"vertical\" : \"horizontal\"}\r\n                    >\r\n                        {showGridLines ? (\r\n                            <CartesianGrid\r\n                                strokeDasharray=\"3 3\"\r\n                                horizontal={layout !== \"vertical\"}\r\n                                vertical={layout === \"vertical\"}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {layout !== \"vertical\" ? (\r\n                            <XAxis\r\n                                hide={!showXAxis}\r\n                                dataKey={index}\r\n                                interval=\"preserveStartEnd\"\r\n                                tick={{ transform: \"translate(0, 6)\" }} // Padding between labels and axis\r\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                                tickLine={false}\r\n                                axisLine={false}\r\n                            />\r\n                        ) : (\r\n                            <XAxis\r\n                                hide={!showXAxis}\r\n                                type=\"number\"\r\n                                tick={{ transform: \"translate(-3, 0)\" }}\r\n                                domain={yAxisDomain as AxisDomain}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                                tickLine={false}\r\n                                axisLine={false}\r\n                                tickFormatter={valueFormatter}\r\n                                padding={{ left: 10, right: 10 }}\r\n                                minTickGap={5}\r\n                                allowDecimals={allowDecimals}\r\n                            />\r\n                        )}\r\n                        {layout !== \"vertical\" ? (\r\n                            <YAxis\r\n                                width={yAxisWidth}\r\n                                hide={!showYAxis}\r\n                                axisLine={false}\r\n                                tickLine={false}\r\n                                type=\"number\"\r\n                                domain={yAxisDomain as AxisDomain}\r\n                                tick={{ transform: \"translate(-3, 0)\" }}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                                tickFormatter={\r\n                                    relative ? (value: number) => `${(value * 100).toString()} %` : valueFormatter\r\n                                }\r\n                                allowDecimals={allowDecimals}\r\n                            />\r\n                        ) : (\r\n                            <YAxis\r\n                                width={yAxisWidth}\r\n                                hide={!showYAxis}\r\n                                dataKey={index}\r\n                                axisLine={false}\r\n                                tickLine={false}\r\n                                ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                                type=\"category\"\r\n                                interval=\"preserveStartEnd\"\r\n                                tick={{ transform: \"translate(0, 6)\" }}\r\n                                style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontFamily: \"Inter; Helvetica\",\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ fill: \"#d1d5db\", opacity: \"0.15\" }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                                position={{ y: 0 }}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => (\r\n                            <Bar\r\n                                key={category}\r\n                                name={category}\r\n                                type=\"linear\"\r\n                                stackId={stack || relative ? \"a\" : undefined}\r\n                                dataKey={category}\r\n                                fill={`var(--${categoryColors.get(category)})`}\r\n                                isAnimationActive={showAnimation}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n                    </ReChartsBarChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nBarChart.displayName = \"BarChart\"\r\n"
      },
      {
        "name": "chart-legend.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { UIColor } from \"../core/color-theme\"\r\nimport { Legend } from \"./legend\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartLegend\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ChartLegend = (\r\n    { payload }: any,\r\n    categoryColors: Map<string, UIColor>,\r\n    setLegendHeight: React.Dispatch<React.SetStateAction<number>>,\r\n) => {\r\n    const legendRef = useRef<HTMLDivElement>(null)\r\n\r\n    const [windowSize, setWindowSize] = useState<undefined | number>(undefined)\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowSize(window.innerWidth)\r\n            const calculateHeight = (height: number | undefined) =>\r\n                height ?\r\n                    Number(height) + 20 // 20px extra padding\r\n                    : 60 // default height\r\n            setLegendHeight(calculateHeight(legendRef.current?.clientHeight))\r\n        }\r\n        handleResize()\r\n        window.addEventListener(\"resize\", handleResize)\r\n\r\n        return () => window.removeEventListener(\"resize\", handleResize)\r\n    }, [windowSize])\r\n\r\n    return (\r\n        <div ref={legendRef} className=\"flex w-full items-center justify-center mt-4\">\r\n            <Legend\r\n                categories={payload.map((entry: any) => entry.value)}\r\n                colors={payload.map((entry: any) => categoryColors.get(entry.value))}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nChartLegend.displayName = \"ChartLegend\"\r\n"
      },
      {
        "name": "chart-tooltip.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { ChartValueFormatter } from \"../charts/types\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { UIColor } from \"../core/color-theme\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ChartTooltipAnatomy = defineStyleAnatomy({\r\n    frame: cva([\r\n        \"UI-ChartTooltip__frame\",\r\n        \"border border-[--border] bg-[--paper] p-2 rounded-[--radius]\"\r\n    ]),\r\n    header: cva([\r\n        \"UI-ChartTooltip__header\",\r\n        \"mb-2 font-semibold\"\r\n    ]),\r\n    label: cva([\r\n        \"UI-ChartTooltip__label\",\r\n    ]),\r\n    content: cva([\r\n        \"UI-ChartTooltip__content\",\r\n        \"space-y-1\"\r\n    ]),\r\n})\r\n\r\nexport const ChartTooltipRowAnatomy = defineStyleAnatomy({\r\n    row: cva([\r\n        \"UI-ChartTooltip__row\",\r\n        \"flex items-center justify-between space-x-8\"\r\n    ]),\r\n    labelContainer: cva([\r\n        \"UI-ChartTooltip__labelContainer\",\r\n        \"flex items-center space-x-2\"\r\n    ]),\r\n    dot: cva([\r\n        \"UI-ChartTooltip__dot\",\r\n        \"shrink-0\",\r\n        \"h-3 w-3 bg-gray rounded-full shadow-sm\"\r\n    ]),\r\n    value: cva([\r\n        \"UI-ChartTooltip__value\",\r\n        \"font-semibold tabular-nums text-right whitespace-nowrap\",\r\n    ]),\r\n    label: cva([\r\n        \"UI-ChartTooltip__label\",\r\n        \"text-sm text-right whitespace-nowrap font-medium text-[--muted]\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltipFrame\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface ChartTooltipFrameProps extends React.ComponentPropsWithoutRef<\"div\"> {\r\n}\r\n\r\nexport const ChartTooltipFrame = ({ children, className }: ChartTooltipFrameProps) => (\r\n    <div\r\n        className={cn(ChartTooltipAnatomy.frame(), className)}\r\n    >\r\n        {children}\r\n    </div>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltipRow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ChartTooltipRowProps extends ComponentWithAnatomy<typeof ChartTooltipRowAnatomy> {\r\n    value: string;\r\n    name: string;\r\n    color: UIColor;\r\n}\r\n\r\nexport const ChartTooltipRow = (\r\n    { value, name, color, dotClassName, rowClassName, valueClassName, labelClassName, labelContainerClassName }: ChartTooltipRowProps) => (\r\n    <div className={cn(ChartTooltipRowAnatomy.row(), rowClassName)}>\r\n        <div className={cn(ChartTooltipRowAnatomy.labelContainer(), labelContainerClassName)}>\r\n            <span\r\n                className={cn(\r\n                    ChartTooltipRowAnatomy.dot(),\r\n                    dotClassName\r\n                )}\r\n                style={{ backgroundColor: `var(--${color})` }}\r\n            />\r\n            <p\r\n                className={cn(\r\n                    ChartTooltipRowAnatomy.label(),\r\n                    labelClassName,\r\n                )}\r\n            >\r\n                {name}\r\n            </p>\r\n        </div>\r\n        <p\r\n            className={cn(\r\n                ChartTooltipRowAnatomy.value(),\r\n                valueClassName\r\n            )}\r\n        >\r\n            {value}\r\n        </p>\r\n    </div>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ChartTooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ChartTooltipProps extends ComponentWithAnatomy<typeof ChartTooltipAnatomy> {\r\n    active: boolean | undefined;\r\n    payload: any;\r\n    label: string;\r\n    categoryColors: Map<string, UIColor>;\r\n    valueFormatter: ChartValueFormatter;\r\n}\r\n\r\nexport const ChartTooltip = (props: ChartTooltipProps) => {\r\n\r\n    const {\r\n        active,\r\n        payload,\r\n        label,\r\n        categoryColors,\r\n        valueFormatter,\r\n        headerClassName,\r\n        contentClassName,\r\n        frameClassName,\r\n        labelClassName,\r\n    } = props\r\n    if (active && payload) {\r\n        return (\r\n            <ChartTooltipFrame className={frameClassName}>\r\n                <div\r\n                    className={cn(\r\n                        ChartTooltipAnatomy.header(),\r\n                        headerClassName,\r\n                    )}\r\n                >\r\n                    <p\r\n                        className={cn(\r\n                            ChartTooltipAnatomy.label(),\r\n                            labelClassName,\r\n                        )}\r\n                    >\r\n                        {label}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className={cn(\r\n                    ChartTooltipAnatomy.content(),\r\n                    contentClassName\r\n                )}>\r\n                    {payload.map(({ value, name }: { value: number; name: string }, idx: number) => (\r\n                        <ChartTooltipRow\r\n                            key={`id-${idx}`}\r\n                            value={valueFormatter(value)}\r\n                            name={name}\r\n                            color={categoryColors.get(name) ?? \"brand\"}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </ChartTooltipFrame>\r\n        )\r\n    }\r\n    return null\r\n}\r\n"
      },
      {
        "name": "donut-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport { ChartTooltipFrame, ChartTooltipRow } from \"./chart-tooltip\"\r\nimport { ChartValueFormatter } from \"../charts/types\"\r\nimport { cn, ColorPalette, ComponentWithAnatomy, defineStyleAnatomy, UIColor } from \"../core\"\r\nimport React from \"react\"\r\nimport { Pie, PieChart as ReChartsDonutChart, ResponsiveContainer, Tooltip } from \"recharts\"\r\nimport { defaultValueFormatter, parseChartData, parseChartLabelInput } from \"./utils\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DonutChartAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DonutChart__root\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype DonutChartVariant = \"donut\" | \"pie\"\r\n\r\nexport interface DonutChartProps extends React.HTMLAttributes<HTMLDivElement>, ComponentWithAnatomy<typeof DonutChartAnatomy> {\r\n    data: any[]\r\n    category?: string\r\n    index?: string\r\n    colors?: UIColor[]\r\n    variant?: DonutChartVariant\r\n    valueFormatter?: ChartValueFormatter\r\n    label?: string\r\n    showLabel?: boolean\r\n    showAnimation?: boolean\r\n    showTooltip?: boolean\r\n    noDataText?: string\r\n}\r\n\r\nexport const DonutChart = React.forwardRef<HTMLDivElement, DonutChartProps>((props, ref) => {\r\n    const {\r\n        data = [],\r\n        category = \"value\",\r\n        index = \"name\",\r\n        colors = ColorPalette,\r\n        variant = \"donut\",\r\n        valueFormatter = defaultValueFormatter,\r\n        label,\r\n        showLabel = true,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        className,\r\n        noDataText,\r\n        ...other\r\n    } = props\r\n    const isDonut = variant == \"donut\"\r\n\r\n    const parsedLabelInput = parseChartLabelInput(label, valueFormatter, data, category)\r\n\r\n    return (\r\n        <div ref={ref} className={cn(\"w-full h-44\", className)} {...other}>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                {data?.length ? (\r\n                    <ReChartsDonutChart>\r\n                        {showLabel && isDonut ? (\r\n                            <text\r\n                                x=\"50%\"\r\n                                y=\"50%\"\r\n                                textAnchor=\"middle\"\r\n                                dominantBaseline=\"middle\"\r\n                                fill={`var(--muted)`}\r\n                                className={\"font-semibold\"}\r\n                            >\r\n                                {parsedLabelInput}\r\n                            </text>\r\n                        ) : null}\r\n                        <Pie\r\n                            data={parseChartData(data, colors)}\r\n                            cx=\"50%\"\r\n                            cy=\"50%\"\r\n                            startAngle={90}\r\n                            endAngle={-270}\r\n                            innerRadius={isDonut ? \"75%\" : \"0%\"}\r\n                            outerRadius=\"100%\"\r\n                            paddingAngle={0}\r\n                            dataKey={category}\r\n                            nameKey={index}\r\n                            isAnimationActive={showAnimation}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                content={({ active, payload }) => (\r\n                                    <DonutChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        valueFormatter={valueFormatter}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n                    </ReChartsDonutChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n})\r\n\r\nDonutChart.displayName = \"DonutChart\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChartTooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n\r\nexport interface DonutChartTooltipProps {\r\n    active: boolean | undefined\r\n    payload: any\r\n    valueFormatter: ChartValueFormatter\r\n}\r\n\r\nexport const DonutChartTooltip = ({ active, payload, valueFormatter }: DonutChartTooltipProps) => {\r\n    if (active && payload[0]) {\r\n        const payloadRow = payload[0]\r\n        return (\r\n            <ChartTooltipFrame>\r\n                <div className={cn(\"py-2 px-2\")}>\r\n                    <ChartTooltipRow\r\n                        value={valueFormatter(payloadRow.value)}\r\n                        name={payloadRow.name}\r\n                        color={payloadRow.payload.color}\r\n                    />\r\n                </div>\r\n            </ChartTooltipFrame>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nDonutChartTooltip.displayName = \"DonutChartTooltip\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "charts",
        "content": "export * from \"./area-chart\"\r\nexport * from \"./bar-chart\"\r\nexport * from \"./line-chart\"\r\nexport * from \"./donut-chart\"\r\nexport * from \"./legend\"\r\nexport * from \"./types\"\r\n"
      },
      {
        "name": "legend.tsx",
        "dir": "charts",
        "content": "import { cn, ColorPalette, ComponentWithAnatomy, defineStyleAnatomy, UIColor } from \"../core\"\r\nimport React from \"react\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const LegendAnatomy = defineStyleAnatomy({\r\n    legend: cva([\r\n        \"UI-Legend__legend\",\r\n        \"flex flex-wrap overflow-hidden truncate\"\r\n    ]),\r\n    legendItem: cva([\r\n        \"UI-Legend__legendItem\",\r\n        \"inline-flex items-center truncate mr-4\"\r\n    ]),\r\n    dot: cva([\r\n        \"UI-Legend__dot\",\r\n        \"shrink-0\",\r\n        \"flex-none h-3 w-3 bg-gray rounded-full shadow-sm mr-2\"\r\n    ]),\r\n    label: cva([\r\n        \"UI-Legend__label\",\r\n        \"whitespace-nowrap truncate text-sm font-medium text-gray-700 dark:text-gray-300\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LegendItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface LegendItemProps {\r\n    name: string\r\n    color: UIColor\r\n    dotClassName?: string\r\n    labelClassName?: string\r\n    legendItemClassName?: string\r\n}\r\n\r\nconst LegendItem = ({ name, color, dotClassName, legendItemClassName, labelClassName }: LegendItemProps) => (\r\n    <li\r\n        className={cn(\r\n            LegendAnatomy.legendItem(),\r\n            legendItemClassName\r\n        )}\r\n    >\r\n        <svg\r\n            className={cn(\r\n                LegendAnatomy.dot(),\r\n                dotClassName\r\n            )}\r\n            style={{\r\n                color: `var(--${color})`\r\n            }}\r\n            fill=\"currentColor\"\r\n            viewBox=\"0 0 8 8\"\r\n        >\r\n            <circle cx={4} cy={4} r={4}/>\r\n        </svg>\r\n        <p className={cn(LegendAnatomy.label(), labelClassName)}>\r\n            {name}\r\n        </p>\r\n    </li>\r\n)\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Legend\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface LegendProps extends React.ComponentPropsWithRef<\"ol\">, ComponentWithAnatomy<typeof LegendAnatomy> {\r\n    categories: string[]\r\n    colors?: UIColor[]\r\n}\r\n\r\nexport const Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {\r\n    const {\r\n        categories,\r\n        colors = ColorPalette,\r\n        className,\r\n        legendClassName,\r\n        legendItemClassName,\r\n        labelClassName,\r\n        dotClassName,\r\n        ...rest\r\n    } = props\r\n    return (\r\n        <ol\r\n            ref={ref}\r\n            className={cn(\r\n                LegendAnatomy.legend(),\r\n                legendClassName,\r\n                className,\r\n            )}\r\n            {...rest}\r\n        >\r\n            {categories.map((category, idx) => (\r\n                <LegendItem\r\n                    key={`item-${idx}`}\r\n                    name={category}\r\n                    color={colors[idx] ?? \"brand\"}\r\n                    dotClassName={dotClassName}\r\n                    legendItemClassName={legendItemClassName}\r\n                    labelClassName={labelClassName}\r\n                />\r\n            ))}\r\n        </ol>\r\n    )\r\n})\r\n\r\nLegend.displayName = \"Legend\"\r\n"
      },
      {
        "name": "line-chart.tsx",
        "dir": "charts",
        "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { CartesianGrid, Legend, Line, LineChart as ReChartsLineChart, ResponsiveContainer, Tooltip, XAxis, YAxis, } from \"recharts\"\r\nimport { BaseChartProps, ChartCurveType } from \"./types\"\r\nimport { constructCategoryColors, defaultValueFormatter, getYAxisDomain } from \"./utils\"\r\nimport type { AxisDomain } from \"recharts/types/util/types\"\r\nimport { ChartTooltip } from \"./chart-tooltip\"\r\nimport { ColorPalette } from \"../core/color-theme\"\r\nimport { ChartLegend } from \"./chart-legend\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const LineChartAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-LineChart__root\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * LineChart\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface LineChartProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof LineChartAnatomy>,\r\n    BaseChartProps {\r\n    curveType?: ChartCurveType\r\n    connectNulls?: boolean\r\n}\r\n\r\nexport const LineChart: React.FC<LineChartProps> = React.forwardRef<HTMLDivElement, LineChartProps>((props, ref) => {\r\n\r\n    const {\r\n        rootClassName,\r\n        className,\r\n        curveType = \"linear\",\r\n        connectNulls = false,\r\n        /**/\r\n        data = [],\r\n        categories = [],\r\n        index,\r\n        colors = ColorPalette,\r\n        valueFormatter = defaultValueFormatter,\r\n        startEndOnly = false,\r\n        showXAxis = true,\r\n        showYAxis = true,\r\n        yAxisWidth = 56,\r\n        showAnimation = true,\r\n        showTooltip = true,\r\n        showLegend = true,\r\n        showGridLines = true,\r\n        showGradient = true,\r\n        autoMinValue = false,\r\n        minValue,\r\n        maxValue,\r\n        allowDecimals = true,\r\n        noDataText,\r\n        ...rest\r\n    } = props\r\n\r\n    const [legendHeight, setLegendHeight] = useState(60)\r\n\r\n    const categoryColors = constructCategoryColors(categories, colors)\r\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\r\n\r\n    return (\r\n        <div\r\n            className={cn(LineChartAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\r\n                {data?.length ? (\r\n                    <ReChartsLineChart data={data}>\r\n                        {showGridLines ? (\r\n                            <CartesianGrid strokeDasharray=\"3 3\" horizontal={true} vertical={false}/>\r\n                        ) : null}\r\n                        <XAxis\r\n                            hide={!showXAxis}\r\n                            dataKey={index}\r\n                            tick={{ transform: \"translate(0, 8)\" }}\r\n                            ticks={startEndOnly ? [data[0][index], data[data.length - 1][index]] : undefined}\r\n                            style={{\r\n                                fontSize: \".75rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                                color: \"red\",\r\n                            }}\r\n                            interval=\"preserveStartEnd\"\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            padding={{ left: 10, right: 10 }}\r\n                            minTickGap={5}\r\n                        />\r\n                        <YAxis\r\n                            width={yAxisWidth}\r\n                            hide={!showYAxis}\r\n                            axisLine={false}\r\n                            tickLine={false}\r\n                            type=\"number\"\r\n                            domain={yAxisDomain as AxisDomain}\r\n                            tick={{ transform: \"translate(-3, 0)\" }}\r\n                            style={{\r\n                                fontSize: \".8rem\",\r\n                                fontFamily: \"Inter; Helvetica\",\r\n                            }}\r\n                            tickFormatter={valueFormatter}\r\n                            allowDecimals={allowDecimals}\r\n                        />\r\n                        {showTooltip ? (\r\n                            <Tooltip\r\n                                wrapperStyle={{ outline: \"none\" }}\r\n                                isAnimationActive={false}\r\n                                cursor={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                                position={{ y: 0 }}\r\n                                content={({ active, payload, label }) => (\r\n                                    <ChartTooltip\r\n                                        active={active}\r\n                                        payload={payload}\r\n                                        label={label}\r\n                                        valueFormatter={valueFormatter}\r\n                                        categoryColors={categoryColors}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        ) : null}\r\n\r\n                        {categories.map((category) => (\r\n                            <Line\r\n                                key={category}\r\n                                name={category}\r\n                                type={curveType}\r\n                                dataKey={category}\r\n                                stroke={`var(--${categoryColors.get(category)})`}\r\n                                strokeWidth={2}\r\n                                dot={false}\r\n                                isAnimationActive={showAnimation}\r\n                                connectNulls={connectNulls}\r\n                            />\r\n                        ))}\r\n\r\n                        {showLegend ? (\r\n                            <Legend\r\n                                verticalAlign=\"bottom\"\r\n                                height={legendHeight}\r\n                                content={({ payload }) => ChartLegend({ payload }, categoryColors, setLegendHeight)}\r\n                            />\r\n                        ) : null}\r\n\r\n                    </ReChartsLineChart>\r\n                ) : (\r\n                    <div>...</div>\r\n                )}\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nLineChart.displayName = \"LineChart\"\r\n"
      },
      {
        "name": "types.ts",
        "dir": "charts",
        "content": "export type ChartValueFormatter = {\r\n    (value: number): string\r\n}\r\n\r\nexport type ChartCurveType = \"linear\" | \"natural\" | \"step\"\r\n\r\nexport type ChartHorizontalPosition = \"left\" | \"right\"\r\n\r\nexport type ChartVerticalPosition = \"top\" | \"bottom\"\r\n\r\nexport interface BaseChartProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    data: any[] | null | undefined\r\n    categories: string[]\r\n    index: string\r\n    // Choose the color for each category\r\n    colors?: string[]\r\n    // Change the formatting\r\n    valueFormatter?: ChartValueFormatter\r\n    // Show only the first and last elements in the x-axis. Great for smaller charts or sparklines.\r\n    startEndOnly?: boolean\r\n    showXAxis?: boolean\r\n    showYAxis?: boolean\r\n    yAxisWidth?: number\r\n    // Sets an animation to the chart when it is loaded.\r\n    showAnimation?: boolean\r\n    showTooltip?: boolean\r\n    showGradient?: boolean\r\n    showLegend?: boolean\r\n    showGridLines?: boolean\r\n    // Adjusts the minimum value in relation to the magnitude of the data.\r\n    autoMinValue?: boolean\r\n    // Sets the minimum value of the shown chart data.\r\n    minValue?: number\r\n    // Sets the maximum value of the shown chart data.\r\n    maxValue?: number\r\n    // Controls if the ticks of a numeric axis are displayed as decimals or not.\r\n    allowDecimals?: boolean\r\n    // The displayed text when the data is empty.\r\n    noDataText?: string\r\n}\r\n"
      },
      {
        "name": "utils.ts",
        "dir": "charts",
        "content": "import { ChartValueFormatter } from \"../charts\"\r\nimport { UIColor } from \"../core\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Chart Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const constructCategoryColors = (\r\n    categories: string[],\r\n    colors: UIColor[],\r\n): Map<string, UIColor> => {\r\n    const categoryColors = new Map<string, UIColor>()\r\n    categories.forEach((category, idx) => {\r\n        categoryColors.set(category, colors[idx] ?? \"gray\")\r\n    })\r\n    return categoryColors\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const getYAxisDomain = (\r\n    autoMinValue: boolean,\r\n    minValue: number | undefined,\r\n    maxValue: number | undefined,\r\n) => {\r\n    const minDomain = autoMinValue ? \"auto\" : minValue ?? 0\r\n    const maxDomain = maxValue ?? \"auto\"\r\n    return [minDomain, maxDomain]\r\n}\r\n\r\nexport const defaultValueFormatter: ChartValueFormatter = (value: number) => value.toString()\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DonutChart Utils\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const parseChartData = (data: any[], colors: UIColor[]) =>\r\n    data.map((dataPoint: any, idx: number) => {\r\n        const baseColor = idx < colors.length ? colors[idx] : \"brand\"\r\n        return {\r\n            ...dataPoint,\r\n            // explicitly adding color key if not present for tooltip coloring\r\n            color: baseColor,\r\n            fill: `var(--${baseColor})`, // Color\r\n        }\r\n    })\r\n\r\nconst sumNumericArray = (arr: number[]) =>\r\n    arr.reduce((prefixSum, num) => prefixSum + num, 0)\r\n\r\nconst calculateDefaultLabel = (data: any[], category: string) =>\r\n    sumNumericArray(data.map((dataPoint) => dataPoint[category]))\r\n\r\nexport const parseChartLabelInput = (\r\n    labelInput: string | undefined,\r\n    valueFormatter: ChartValueFormatter,\r\n    data: any[],\r\n    category: string,\r\n) => (labelInput ? labelInput : valueFormatter(calculateDefaultLabel(data, category)))\r\n"
      }
    ]
  },
  {
    "component": "checkbox",
    "name": "Checkbox",
    "dependencies": [
      [
        "@radix-ui/react-checkbox",
        "^1.0.4",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "show-only"
    ],
    "files": [
      {
        "name": "checkbox-group.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\n\nimport { cn } from \"../core\"\nimport React, { createContext, useContext, useEffect, useId, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { Checkbox, CheckboxProps } from \".\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Provider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CheckboxGroupContextValue {\n    group_size: CheckboxProps[\"size\"]\n}\n\nconst _CheckboxGroupContext = createContext<CheckboxGroupContextValue | null>(null)\nexport const CheckboxGroupProvider = _CheckboxGroupContext.Provider\nexport const useCheckboxGroupContext = () => useContext(_CheckboxGroupContext)\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface CheckboxGroupProps extends BasicFieldOptions {\n    value?: string[]\n    defaultValue?: string[]\n    onChange?: (value: string[]) => void\n    size?: CheckboxProps[\"size\"]\n    stackClassName?: string\n    checkboxContainerClassName?: string\n    checkboxLabelClassName?: string\n    checkboxControlClassName?: string\n    checkboxIconClassName?: string\n    options: { value: string, label?: React.ReactNode }[]\n}\n\nexport const CheckboxGroup = React.forwardRef<HTMLDivElement, CheckboxGroupProps>((props, ref) => {\n\n    const [{\n        value,\n        defaultValue = [],\n        onChange,\n        stackClassName,\n        checkboxLabelClassName,\n        checkboxControlClassName,\n        checkboxContainerClassName,\n        checkboxIconClassName,\n        options,\n        size = undefined,\n    }, basicFieldProps] = extractBasicFieldProps<CheckboxGroupProps>(props, useId())\n\n    // Keep track of selected values\n    const [selectedValues, setSelectedValues] = useState<string[]>(value ?? defaultValue)\n\n    // Control the state\n    useEffect(() => {\n        if (value) {\n            setSelectedValues(value)\n        }\n    }, [value])\n\n    // Emit changes\n    useEffect(() => {\n        if (onChange) {\n            onChange(selectedValues)\n        }\n    }, [selectedValues])\n\n\n    return (\n        <>\n            <CheckboxGroupProvider value={{\n                group_size: size\n            }}>\n                <BasicField\n                    {...basicFieldProps}\n                    ref={ref}\n                >\n                    <div className={cn(\"space-y-1\", stackClassName)}>\n                        {options.map((opt, idx) => (\n                            <Checkbox\n                                key={opt.value}\n                                label={opt.label}\n                                value={opt.value}\n                                checked={selectedValues.includes(opt.value)}\n                                onChange={checked => {\n                                    setSelectedValues(p => {\n                                        let newArr = [...p]\n                                        if (checked === true) {\n                                            if (p.indexOf(opt.value) === -1) newArr.push(opt.value)\n                                        } else if (checked === false) {\n                                            newArr = newArr.filter(v => v !== opt.value)\n                                        }\n                                        return newArr\n                                    })\n                                }}\n                                error={basicFieldProps.error}\n                                noErrorMessage\n                                labelClassName={checkboxLabelClassName}\n                                controlClassName={checkboxControlClassName}\n                                containerClassName={checkboxContainerClassName}\n                                iconClassName={checkboxIconClassName}\n                                isDisabled={basicFieldProps.isDisabled}\n                                isReadOnly={basicFieldProps.isReadOnly}\n                                tabIndex={idx}\n                            />\n                        ))}\n                    </div>\n                </BasicField>\n            </CheckboxGroupProvider>\n        </>\n    )\n\n})\n\nCheckboxGroup.displayName = \"CheckboxGroup\"\n"
      },
      {
        "name": "checkbox.tsx",
        "dir": "checkbox",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport type { CheckboxProps as CheckboxPrimitiveProps } from \"@radix-ui/react-checkbox\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { useCheckboxGroupContext } from \"../checkbox\"\nimport { ShowOnly } from \"../show-only\"\n\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const CheckboxAnatomy = defineStyleAnatomy({\n    container: cva(\"UI-Checkbox__container inline-flex gap-2 items-center\"),\n    control: cva([\n        \"UI-Checkbox__root\",\n        \"appearance-none peer block relative overflow-hidden transition h-5 w-5 shrink-0 text-white rounded-md ring-offset-1 border ring-offset-background\",\n        \"border-gray-300 dark:border-gray-700\",\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] disabled:cursor-not-allowed disabled:opacity-50\",\n        \"data-[state=unchecked]:bg-white dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\n        \"data-[state=unchecked]:hover:bg-gray-100 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\n        \"data-[state=checked]:bg-brand dark:data-[state=checked]:bg-brand data-[state=checked]:border-brand\", // Checked\n        \"data-[state=indeterminate]:bg-[--muted] dark:data-[state=indeterminate]:text-gray-800 data-[state=indeterminate]:border-transparent\", // Checked\n        \"data-[error=true]:border-red-500 data-[error=true]:dark:border-red-500 data-[error=true]:data-[state=checked]:border-red-500 data-[error=true]:dark:data-[state=checked]:border-red-500\"\n    ], {\n        variants: {\n            size: {\n                md: \"h-5 w-5\",\n                lg: \"h-6 w-6\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    label: cva([\n        \"UI-Checkbox_label\",\n        \"font-normal\",\n        \"data-[disabled=true]:opacity-50\",\n    ], {\n        variants: {\n            size: {\n                md: \"text-md\",\n                lg: \"text-lg\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    indicator: cva([\n        \"UI-Checkbox__indicator\",\n        \"flex h-full w-full items-center justify-center relative\"\n    ]),\n    icon: cva(\"UI-Checkbox__icon absolute\", {\n        variants: {\n            size: {\n                md: \"h-4 w-4\",\n                lg: \"h-5 w-5\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface CheckboxProps extends Omit<CheckboxPrimitiveProps, \"disabled\" | \"required\" | \"onCheckedChange\" | \"onChange\">,\n    ComponentWithAnatomy<typeof CheckboxAnatomy>,\n    VariantProps<typeof CheckboxAnatomy.label>,\n    BasicFieldOptions {\n    noErrorMessage?: boolean\n    onChange?: (value: boolean | \"indeterminate\") => void\n}\n\nexport const Checkbox = React.forwardRef<HTMLButtonElement, CheckboxProps>((props, ref) => {\n\n    const [{\n        className,\n        noErrorMessage,\n        containerClassName,\n        controlClassName,\n        iconClassName,\n        labelClassName,\n        indicatorClassName,\n        onChange,\n        value,\n        size = \"md\",\n        ...rest\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps<CheckboxProps>(props, useId())\n\n    const groupContext = useCheckboxGroupContext()\n\n    const _size = groupContext?.group_size ?? size\n\n    return (\n        <BasicField\n            {...basicFieldProps}\n            error={noErrorMessage ? undefined : basicFieldProps.error} // The error message hidden when `noErrorMessage` is defined\n            fieldClassName={\"space-y-.5\"}\n        >\n            <label\n                className={cn(\n                    CheckboxAnatomy.container(),\n                    containerClassName\n                )}\n                htmlFor={basicFieldProps.id}\n            >\n                <CheckboxPrimitive.Root\n                    id={basicFieldProps.id}\n                    ref={ref}\n                    className={cn(\n                        CheckboxAnatomy.control({\n                            size: _size,\n                        }),\n                        controlClassName,\n                        className\n                    )}\n                    disabled={basicFieldProps.isDisabled}\n                    required={basicFieldProps.isRequired}\n                    data-error={!!basicFieldProps.error}\n                    onCheckedChange={(value) => {\n                        onChange && onChange(value)\n                    }}\n                    {...rest}\n                >\n                    <CheckboxPrimitive.CheckboxIndicator className={cn(CheckboxAnatomy.indicator(), indicatorClassName)}>\n                        {(rest.checked !== \"indeterminate\") && <svg\n                            xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" stroke=\"currentColor\"\n                            fill=\"currentColor\"\n                            className={cn(CheckboxAnatomy.icon({ size: _size }), iconClassName)}\n                        >\n                            <path\n                                fill=\"#fff\"\n                                d=\"M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z\"\n                            ></path>\n                        </svg>}\n\n                        {rest.checked === \"indeterminate\" &&\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\n                                 strokeWidth=\"4\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\">\n                                <line x1=\"5\" x2=\"19\" y1=\"12\" y2=\"12\"/>\n                            </svg>}\n                    </CheckboxPrimitive.CheckboxIndicator>\n                </CheckboxPrimitive.Root>\n                <ShowOnly when={!!label || !!value}>\n                    <label\n                        className={cn(\n                            CheckboxAnatomy.label({ size: _size }),\n                            labelClassName,\n                        )}\n                        htmlFor={basicFieldProps.id}\n                        data-disabled={basicFieldProps.isDisabled}\n                    >\n                        {label ?? value}\n                    </label>\n                </ShowOnly>\n            </label>\n        </BasicField>\n    )\n\n})\n\nCheckbox.displayName = \"Checkbox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "checkbox",
        "content": "export * from \"./checkbox-group\"\nexport * from \"./checkbox\"\n"
      }
    ]
  },
  {
    "component": "color-input",
    "name": "ColorInput",
    "dependencies": [
      [
        "react-colorful",
        "^5.6.1",
        ""
      ]
    ],
    "family": [
      "dropdown-menu",
      "text-input"
    ],
    "files": [
      {
        "name": "color-input.tsx",
        "dir": "color-input",
        "content": "\"use client\"\r\n\r\nimport React, { useLayoutEffect, useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { DropdownMenu } from \"../dropdown-menu\"\r\nimport { HexColorPicker } from \"react-colorful\"\r\nimport { TextInput, TextInputProps } from \"../text-input\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ColorInputAnatomy = defineStyleAnatomy({\r\n    colorInput: cva([\r\n        \"UI-ColorInput__root\",\r\n        \"w-6 h-6 rounded-md -ml-1 border border-[--border]\"\r\n    ]),\r\n    colorPickerContainer: cva([\r\n        \"UI-ColorInput__colorPickerContainer\",\r\n        \"flex w-full justify-center p-2\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ColorInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ColorInputProps extends ComponentWithAnatomy<typeof ColorInputAnatomy>,\r\n    Omit<TextInputProps, \"onChange\" | \"value\" | \"defaultValue\"> {\r\n    children?: React.ReactNode\r\n    onChange?: (value: string) => void\r\n    value?: string\r\n    defaultValue?: string\r\n}\r\n\r\nexport const ColorInput: React.FC<ColorInputProps> = React.forwardRef((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        colorInputClassName,\r\n        colorPickerContainerClassName,\r\n        className,\r\n        value,\r\n        onChange,\r\n        defaultValue = \"#5e28c2\",\r\n        ...rest\r\n    } = props\r\n\r\n    const [color, setColor] = useState(defaultValue ?? value)\r\n\r\n    // Control the value\r\n    useLayoutEffect(() => {\r\n        if (value) setColor(value)\r\n    }, [value])\r\n\r\n    return (\r\n        <DropdownMenu\r\n            trigger={\r\n                <TextInput\r\n                    value={color}\r\n                    onChange={e => setColor(e.target.value)}\r\n                    leftIcon={\r\n                        <div className={cn(ColorInputAnatomy.colorInput(), colorInputClassName)} style={{ backgroundColor: color }}/>\r\n                    }\r\n                    ref={ref}\r\n                    {...rest}\r\n                />\r\n            }\r\n            menuClassName={\"w-full block\"}\r\n            dropdownClassName={\"right-[inherit] left-0\"}\r\n        >\r\n            <div className={cn(ColorInputAnatomy.colorPickerContainer(), colorPickerContainerClassName)}>\r\n                <HexColorPicker\r\n                    color={color}\r\n                    onChange={value => {\r\n                        onChange && onChange(value)\r\n                        setColor(value)\r\n                    }}\r\n                />\r\n            </div>\r\n        </DropdownMenu>\r\n    )\r\n\r\n})\r\n\r\nColorInput.displayName = \"ColorInput\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "color-input",
        "content": "export * from \"./color-input\"\r\n"
      }
    ]
  },
  {
    "component": "combobox",
    "name": "Combobox",
    "dependencies": [
      [
        "@zag-js/combobox",
        "^0.10.2",
        ""
      ],
      [
        "@zag-js/react",
        "^0.10.2",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "combobox.tsx",
        "dir": "combobox",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport * as combobox from \"@zag-js/combobox\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva } from \"class-variance-authority\"\nimport _find from \"lodash/find\"\nimport _isEmpty from \"lodash/isEmpty\"\nimport React, { useEffect, useId, useMemo, useState } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ComboboxAnatomy = defineStyleAnatomy({\n    menuContainer: cva([\n        \"UI-Combobox__menuContainer\",\n        \"absolute z-10 -bottom-0.5\",\n        \"left-0 translate-y-full max-h-56 w-full overflow-auto rounded-[--radius] p-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\",\n        \"bg-[--paper] border border-[--border]\",\n    ]),\n    menuItem: cva([\n        \"UI-Combobox__menuItem\",\n        \"relative cursor-pointer py-2 pl-3 pr-9 rounded-[--radius] data-highlighted:bg-[--highlight] text-base\",\n    ]),\n    menuNoOptionText: cva([\n        \"UI-Combobox__menuNoOptionText\",\n        \"text-base text-center py-1 text-gray-500 dark:text-gray-700\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Combobox\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface ComboboxProps extends Omit<React.ComponentPropsWithRef<\"input\">, \"onChange\" | \"size\" | \"defaultChecked\">,\n    BasicFieldOptions,\n    InputStyling,\n    ComponentWithAnatomy<typeof ComboboxAnatomy> {\n    options: { value: string, label?: string }[]\n    /**\n     * Filter the specified options as the user is typing\n     */\n    withFiltering?: boolean\n    /**\n     * Get the value on of the input as the user is typing\n     * @param value\n     */\n    onInputChange?: (value: string) => void\n    /**\n     * Get the selected value\n     * @param value\n     */\n    onChange?: (value: string | undefined) => void\n    placeholder?: string\n    /**\n     * Message to display when there are no options\n     */\n    noOptionsMessage?: string\n    /**\n     * Allow the user to enter custom values that are not specified in the options\n     */\n    allowCustomValue?: boolean\n    /**\n     * Allow the user to enter custom values that are not specified in the options\n     */\n    defaultValue?: string\n    /**\n     * Control the value\n     */\n    value?: string\n    valueInputRef?: React.Ref<HTMLInputElement>\n    /**\n     * We can either return the value or label of the options.\n     * Returning the label is useful if users can enter custom values or if the selection doesn't depend on IDs.\n     */\n    returnValueOrLabel?: \"value\" | \"label\"\n}\n\nexport const Combobox = React.forwardRef<HTMLInputElement, ComboboxProps>((props, ref) => {\n\n    const [{\n        size,\n        intent,\n        leftIcon,\n        leftAddon,\n        rightIcon,\n        rightAddon,\n        children,\n        className,\n        options,\n        withFiltering = true,\n        placeholder,\n        noOptionsMessage,\n        allowCustomValue = false,\n        onInputChange,\n        valueInputRef,\n        defaultValue,\n        onChange,\n        value,\n        returnValueOrLabel = \"value\",\n        menuContainerClassName,\n        menuItemClassName,\n        menuNoOptionTextClassName,\n        ...rest\n    }, { ...basicFieldProps }] = extractBasicFieldProps<ComboboxProps>(props, useId())\n\n    const [data, setData] = useState(options)\n\n    const [selectedValue, setSelectedValue] = useState<string | undefined>(undefined)\n\n    const [state, send] = useMachine(\n        combobox.machine({\n            id: basicFieldProps.id,\n            allowCustomValue: allowCustomValue,\n            inputBehavior: \"autohighlight\",\n            openOnClick: true,\n            loop: true,\n            blurOnSelect: true,\n            placeholder: placeholder,\n            onOpen() {\n                setData(options)\n            },\n            onSelect: (details) => {\n                if (returnValueOrLabel === \"value\") {\n                    setSelectedValue(details.value)\n                    onChange && onChange(details.value)\n\n                } else if (returnValueOrLabel === \"label\") {\n                    setSelectedValue(details.label)\n                    onChange && onChange(details.label)\n                }\n            },\n            onInputChange({ value }) {\n                if (withFiltering) {\n                    const filtered = options.filter((item) => {\n                            if (item.label) {\n                                return item.label.toLowerCase().includes(value.toLowerCase())\n                            } else {\n                                return item.value.toLowerCase().includes(value.toLowerCase())\n                            }\n                        },\n                    )\n                    // Do not empty options if there is no 'noOptionsMessage'\n                    setData(filtered.length > 0 ? filtered : noOptionsMessage ? [] : data)\n                }\n                onInputChange && onInputChange(value)\n            },\n        }),\n    )\n\n    const api = combobox.connect(state, send, normalizeProps)\n\n    // Set default value\n    useEffect(() => {\n        if (returnValueOrLabel === \"value\") {\n            if (defaultValue) {\n                setSelectedValue(defaultValue)\n                api.setInputValue(_find(options, [\"value\", defaultValue])?.label ?? \"\")\n                api.setValue(_find(options, [\"value\", defaultValue])?.value ?? \"\")\n            }\n        }\n        if (returnValueOrLabel === \"label\") {\n            if (defaultValue) {\n                setSelectedValue(_find(options, [\"label\", defaultValue])?.value ?? defaultValue)\n                api.setInputValue(_find(options, [\"label\", defaultValue])?.label ?? defaultValue)\n                api.setValue(_find(options, [\"label\", defaultValue])?.value ?? defaultValue)\n            }\n        }\n    }, [defaultValue])\n\n    // Control the state\n    useEffect(() => {\n        value && setSelectedValue(value)\n    }, [value])\n\n    const list = useMemo(() => {\n        return withFiltering ? data : options\n    }, [options, withFiltering, data])\n\n    return (\n        <>\n            <BasicField\n                {...basicFieldProps}\n                ref={ref}\n            >\n                <input type=\"text\" hidden value={selectedValue ?? \"\"} onChange={() => {\n                }} ref={valueInputRef}/>\n\n                <div {...api.rootProps}>\n                    <div {...api.controlProps} className={cn(inputContainerStyle())}>\n\n                        <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                        <InputIcon icon={leftIcon} size={size} side={\"left\"} props={api.triggerProps}/>\n\n                        <input\n                            className={cn(\n                                \"appearance-none\",\n                                InputAnatomy.input({\n                                    size,\n                                    intent,\n                                    hasError: !!basicFieldProps.error,\n                                    untouchable: !!basicFieldProps.isDisabled,\n                                    hasRightAddon: !!rightAddon,\n                                    hasRightIcon: !!rightIcon,\n                                    hasLeftAddon: !!leftAddon,\n                                    hasLeftIcon: !!leftIcon,\n                                }),\n                            )}\n                            disabled={basicFieldProps.isDisabled}\n                            onBlur={() => {\n                                // If we do not allow custom values and the user blurs the input, we reset the input\n                                if (!allowCustomValue) {\n                                    if (options.length === 0 && !api.selectedValue || (api.selectedValue && api.selectedValue.length === 0)) {\n                                        api.setInputValue(\"\")\n                                    }\n\n                                    if (\n                                        options.length > 0 &&\n                                        (!_isEmpty(_find(options, [\"value\", api.selectedValue])?.label)\n                                            || !_isEmpty(_find(options, [\"value\", api.selectedValue])?.value)\n                                        )\n                                    ) {\n                                        api.selectedValue && api.setValue(api.selectedValue)\n                                    }\n                                }\n                            }}\n                            {...rest}\n                            ref={ref}\n                            {...api.inputProps}\n                        />\n\n                        <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                        <InputIcon icon={rightIcon} size={size} side={\"right\"} props={api.triggerProps}/>\n\n                    </div>\n                </div>\n\n                {/* Menu */}\n                <div {...api.positionerProps} className=\"z-10\">\n                    {(!!noOptionsMessage || list.length > 0) && (\n                        <ul\n                            className={cn(ComboboxAnatomy.menuContainer(), menuContainerClassName)}\n                            {...api.contentProps}\n                        >\n                            {(list.length === 0 && !!noOptionsMessage) &&\n                                <div className={cn(ComboboxAnatomy.menuNoOptionText(), menuNoOptionTextClassName)}>{noOptionsMessage}</div>}\n                            {list.map((item, index) => (\n                                <li\n                                    className={cn(\n                                        ComboboxAnatomy.menuItem(),\n                                        menuItemClassName,\n                                    )}\n                                    key={`combobox:${item.value}:${index}`}\n                                    {...api.getOptionProps({\n                                        label: item.label ?? item.value,\n                                        value: item.value,\n                                        index,\n                                        disabled: basicFieldProps.isDisabled,\n                                    })}\n                                >\n                                    {item.label}\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nCombobox.displayName = \"Combobox\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "combobox",
        "content": "export * from \"./combobox\"\n"
      }
    ]
  },
  {
    "component": "core",
    "name": "Core",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "color-theme.ts",
        "dir": "core",
        "content": "import clsx from \"clsx\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tailwind Color Mode\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Tailwind color mode utility function\r\n *\r\n * @example\r\n * tcm(\"bg-gray-{200,800}\")\r\n * // => \"bg-gray-200 dark:bg-gray-800\"\r\n *\r\n * // Use\r\n * <div className={cn(\"px-1\", tcm(\"border-{gray-200,blue-500}\"))} />\r\n *\r\n * /!\\ The classes need to be in the Tailwind safeList\r\n * @param input\r\n */\r\nexport const tcm = (input: string | string[] | null | undefined) => {\r\n    if (!!input) {\r\n        // 1. Join the input into a single string\r\n        const joinedInput: string = Array.isArray(input) ? input.join(\" \") : input\r\n\r\n        // 2. Get all classes\r\n        const classes = joinedInput.split(/\\s+/)\r\n\r\n        // 3. Extract dark-mode classes\r\n        let outputArr = []\r\n        // 3.1. Loop through classes\r\n        for (let i = 0; i < classes.length; i++) {\r\n            let current = classes[i]\r\n            if (current) {\r\n                if (current.includes(\"{\") && current.includes(\"}\")) {\r\n                    // 3.2 Get light/dark values between braces\r\n                    let substring = current.substring(\r\n                        current.indexOf(\"{\") + 1,\r\n                        current.lastIndexOf(\"}\")\r\n                    )\r\n                    const values = substring.split(\",\")\r\n                    // 3.3. If we have 2 values, replace current class with both formats\r\n                    if (values.length === 2) {\r\n                        // 3.3.1. Get prefix (e.g: bg-)\r\n                        const prefix = current.replace(/\\{.*}/, \"\").replace(\"{\", \"\").replace(\"}\", \"\")\r\n                        // 3.3.2. New formatting\r\n                        current = `${prefix}${values[0]} dark:${prefix}${values[1]}`\r\n                        outputArr.push(current)\r\n                    }\r\n                } else {\r\n                    outputArr.push(`${current}`)\r\n                }\r\n            }\r\n        }\r\n        console.log(outputArr.join(\" \"))\r\n        return clsx(outputArr)\r\n    }\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Colors\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ColorPalette = [\r\n    \"brand\",\r\n    \"purple\",\r\n    \"blue\",\r\n    \"amber\",\r\n    \"green\",\r\n    \"yellow\",\r\n    \"cyan\",\r\n    \"lime\",\r\n    \"sky\",\r\n    \"red\",\r\n    \"pink\",\r\n    \"orange\",\r\n    \"stone\",\r\n    \"teal\",\r\n    \"neutral\",\r\n    \"fuchsia\",\r\n    \"violet\",\r\n    \"slate\",\r\n    \"zinc\",\r\n    \"emerald\",\r\n    \"indigo\",\r\n    \"gray\",\r\n    \"rose\",\r\n]\r\nexport type UIColor = (typeof ColorPalette)[number];\r\n"
      },
      {
        "name": "hooks.ts",
        "dir": "core",
        "content": "\"use client\"\r\n\r\nimport React, { RefObject, useCallback, useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useEventListener\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n\r\nexport function useEventListener<\r\n    KW extends keyof WindowEventMap,\r\n    KH extends keyof HTMLElementEventMap,\r\n    KM extends keyof MediaQueryListEventMap,\r\n    T extends HTMLElement | MediaQueryList | void = void,\r\n>(\r\n    eventName: KW | KH | KM,\r\n    handler: (\r\n        event:\r\n            | WindowEventMap[KW]\r\n            | HTMLElementEventMap[KH]\r\n            | MediaQueryListEventMap[KM]\r\n            | Event,\r\n    ) => void,\r\n    element?: RefObject<T>,\r\n    options?: boolean | AddEventListenerOptions,\r\n) {\r\n    // Create a ref that stores handler\r\n    const savedHandler = useRef(handler)\r\n\r\n    useIsomorphicLayoutEffect(() => {\r\n        savedHandler.current = handler\r\n    }, [handler])\r\n\r\n    useEffect(() => {\r\n        // Define the listening target\r\n        const targetElement: T | Window = element?.current ?? window\r\n\r\n        if (!(targetElement && targetElement.addEventListener)) return\r\n\r\n        // Create event listener that calls handler function stored in ref\r\n        const listener: typeof handler = event => savedHandler.current(event)\r\n\r\n        targetElement.addEventListener(eventName, listener, options)\r\n\r\n        // Remove event listener on cleanup\r\n        return () => {\r\n            targetElement.removeEventListener(eventName, listener, options)\r\n        }\r\n    }, [eventName, element, options])\r\n}\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useIsomorphicLayoutEffect\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useMediaQuery\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface UseMediaQueryOptions {\r\n    getInitialValueInEffect: boolean;\r\n}\r\n\r\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void;\r\n\r\n/**\r\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\r\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\r\n * */\r\nfunction attachMediaListener(query: MediaQueryList, callback: MediaQueryCallback) {\r\n    try {\r\n        query.addEventListener(\"change\", callback)\r\n        return () => query.removeEventListener(\"change\", callback)\r\n    } catch (e) {\r\n        query.addListener(callback)\r\n        return () => query.removeListener(callback)\r\n    }\r\n}\r\n\r\nfunction getInitialValue(query: string, initialValue?: boolean) {\r\n    if (typeof initialValue === \"boolean\") {\r\n        return initialValue\r\n    }\r\n\r\n    if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\r\n        return window.matchMedia(query).matches\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n/**\r\n * @author Mantine.js\r\n * @link https://github.com/mantinedev/mantine/blob/master/src/mantine-hooks/src/use-media-query/use-media-query.ts\r\n * @example\r\n * const matches = useMediaQuery('(min-width: 56.25em)')\r\n * @param query\r\n * @param initialValue\r\n * @param getInitialValueInEffect\r\n */\r\nexport function useMediaQuery(\r\n    query: string,\r\n    initialValue?: boolean,\r\n    { getInitialValueInEffect }: UseMediaQueryOptions = {\r\n        getInitialValueInEffect: true,\r\n    }\r\n) {\r\n    const [matches, setMatches] = useState(\r\n        getInitialValueInEffect ? initialValue : getInitialValue(query, initialValue)\r\n    )\r\n    const queryRef = useRef<MediaQueryList>()\r\n\r\n    useEffect(() => {\r\n        if (\"matchMedia\" in window) {\r\n            queryRef.current = window.matchMedia(query)\r\n            setMatches(queryRef.current.matches)\r\n            return attachMediaListener(queryRef.current, (event) => setMatches(event.matches))\r\n        }\r\n\r\n        return undefined\r\n    }, [query])\r\n\r\n    return matches\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useOutOfBounds\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n\r\ntype Size = {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport function useOutOfBounds<T extends HTMLElement = HTMLDivElement>(): [\r\n    (node: T | null) => void,\r\n    { top: number, bottom: number, left: number, right: number },\r\n    Size,\r\n] {\r\n    // Mutable values like 'ref.current' aren't valid dependencies\r\n    // because mutating them doesn't re-render the component.\r\n    // Instead, we use a state as a ref to be reactive.\r\n    const [ref, setRef] = useState<T | null>(null)\r\n    const [size, setSize] = useState<Size>({\r\n        width: 0,\r\n        height: 0,\r\n    })\r\n    const [outOfBounds, setOutOfBounds] = React.useState({\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0\r\n    })\r\n\r\n    const handleSize = useCallback(() => {\r\n\r\n        const windowWidth = Math.min(document.documentElement.clientWidth, window.innerWidth)\r\n        const windowHeight = Math.min(document.documentElement.clientHeight, window.innerHeight)\r\n\r\n        const rect = ref?.getBoundingClientRect()\r\n\r\n        if (rect && ref?.offsetHeight && ref.offsetWidth && ref?.offsetWidth > 0 && ref?.offsetHeight > 0) {\r\n            let directions = {\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n\r\n            if (rect.top < 0) {\r\n                directions.top = Math.abs(0 - rect.top)\r\n            }\r\n\r\n            if (rect.bottom > windowHeight) {\r\n                directions.bottom = Math.abs(windowHeight - rect.bottom)\r\n            }\r\n\r\n            if (rect.left < 0) {\r\n                directions.left = Math.abs(0 - rect.left)\r\n            }\r\n\r\n            if (rect.right > windowWidth) {\r\n                directions.right = Math.abs(windowWidth - rect.right)\r\n            }\r\n\r\n            if (directions.top > 0 || directions.left > 0 || directions.bottom > 0 || directions.right > 0) {\r\n                setOutOfBounds(directions)\r\n            }\r\n            // setOutOfBounds(prev => {\r\n            //     if (prev.top !== directions.top || prev.right !== directions.right || prev.bottom !== directions.bottom || prev.left !== directions.left) {\r\n            //         return directions\r\n            //     }\r\n            //     return prev\r\n            // })\r\n        }\r\n\r\n        setSize({\r\n            width: ref?.offsetWidth || 0,\r\n            height: ref?.offsetHeight || 0,\r\n        })\r\n\r\n    }, [ref])\r\n\r\n    useEventListener(\"resize\", handleSize)\r\n    useEventListener(\"keydown\", handleSize)\r\n\r\n    useIsomorphicLayoutEffect(() => {\r\n        handleSize()\r\n    }, [ref])\r\n\r\n    return [setRef, outOfBounds, size]\r\n}\r\n"
      },
      {
        "name": "icons.tsx",
        "dir": "core",
        "content": "import { cn } from \"../core\"\r\n\r\ntype UIIconProps = {\r\n    className?: string\r\n}\r\n\r\nexport const UIIcons = {\r\n    undo: (props?: UIIconProps) => (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"\r\n             strokeLinecap=\"round\" strokeLinejoin=\"round\" className={cn(props?.className)}>\r\n            <path d=\"M9 14 4 9l5-5\"/>\r\n            <path d=\"M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11\"/>\r\n        </svg>\r\n    )\r\n}\r\n"
      },
      {
        "name": "index.ts",
        "dir": "core",
        "content": "export * from \"./style-provider\"\nexport * from \"./style-anatomy\"\nexport * from \"./ui-helpers\"\nexport * from \"./color-theme\"\nexport * from \"./icons\"\nexport * from \"./hooks\"\n"
      },
      {
        "name": "style-anatomy.ts",
        "dir": "core",
        "content": "import { cva } from \"class-variance-authority\"\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal UI Folder scope\n */\nexport type Anatomy = { [key: string]: ReturnType<typeof cva> }\n/**\n * @internal\n */\nexport type AnatomyClassNames<T extends Anatomy> = {\n    [K in keyof T as `${string & K}ClassName`]?: string\n}\n\n/**\n * @internal UI Folder scope\n * @example\n * const ComponentAnatomy = defineStyleAnatomy({\n *    label: cva(null, {\n *       variants: {\n *          intent: {\n *             \"success\": \"\",\n *             \"alert\": \"\",\n *          },\n *       },\n *    }),\n *    ...\n * })\n *\n * type ComponentProps = ComponentWithAnatomy<typeof ComponentAnatomy>\n *\n * // const { controlClassName, ...rest }: ComponentProps = props\n * <div className={cn(ComponentAnatomy.control({ intent: \"success\" }, controlClassName))} />\n * @param config\n */\nexport function defineStyleAnatomy<A extends Anatomy = Anatomy>(config: A) {\n    return config\n}\n\n/**\n * @internal UI Folder scope\n */\nexport type ComponentWithAnatomy<T extends Anatomy> = AnatomyClassNames<T>\n\n"
      },
      {
        "name": "style-provider.tsx",
        "dir": "core",
        "content": "\"use client\"\nimport React from \"react\"\nimport { SSRProvider } from \"react-aria\"\n\n/* -------------------------------------------------------------------------------------------------\n * Locale\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal UI Folder scope\n */\ntype Lng = \"fr\" | \"en\" // DEVNOTE Add new lang keywords to maintain type safety\ntype UILocaleConfig = {\n    locale: Lng,\n    countryLocale: string,\n    country: string\n}\nconst __LocaleConfigDefaultValue: UILocaleConfig = { locale: \"en\", countryLocale: \"en-US\", country: \"us\" }\nconst __LocaleConfigContext = React.createContext<UILocaleConfig>(__LocaleConfigDefaultValue)\n\n/**\n * @internal UI Folder scope\n */\nexport const useUILocaleConfig = () => {\n    return React.useContext(__LocaleConfigContext)\n}\n\nuseUILocaleConfig.displayName = \"useUILocaleConfig\"\n\n/* -------------------------------------------------------------------------------------------------\n * UI Provider\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UIProviderProps {\n    children?: React.ReactNode\n    config?: {\n        locale?: Lng,\n        countryLocale?: string,\n        country?: string\n    },\n}\n\n/**\n * @example\n * <UIProvider config={{ locale: 'en', countryLocale: 'en-US', country: 'us' }}>\n *    <App/>\n * </UIProvider>\n * @param children\n * @param config\n * @constructor\n */\nexport const UIProvider: React.FC<UIProviderProps> = ({ children, config }) => {\n\n    let localeConfig: UILocaleConfig = {\n        ...__LocaleConfigDefaultValue,\n        ...config,\n    }\n\n    return (\n        <__LocaleConfigContext.Provider value={localeConfig}>\n            <SSRProvider>\n                {children}\n            </SSRProvider>\n        </__LocaleConfigContext.Provider>\n    )\n}\n\nUIProvider.displayName = \"UIProvider\"\n"
      },
      {
        "name": "ui-helpers.ts",
        "dir": "core",
        "content": "import { ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tailwind\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n    return twMerge(clsx(inputs))\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Polymorphic component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype ExtendedProps<Props = {}, OverrideProps = {}> = OverrideProps &\r\n    Omit<Props, keyof OverrideProps>;\r\ntype ElementType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\r\ntype PropsOf<C extends ElementType> = JSX.LibraryManagedAttributes<C,\r\n    React.ComponentPropsWithoutRef<C>>;\r\ntype ComponentProp<C> = {\r\n    component?: C;\r\n};\r\ntype InheritedProps<C extends ElementType, Props = {}> = ExtendedProps<PropsOf<C>, Props>;\r\nexport type PolymorphicRef<C> = C extends React.ElementType\r\n    ? React.ComponentPropsWithRef<C>[\"ref\"]\r\n    : never;\r\nexport type PolymorphicComponentProps<C, Props = {}> = C extends React.ElementType\r\n    ? InheritedProps<C, Props & ComponentProp<C>> & { ref?: PolymorphicRef<C> }\r\n    : Props & { component: React.ElementType };\r\n\r\n/**\r\n * @example\r\n * const _Accordion = React.forwardRef<HTMLDivElement, AccordionProps>((props, ref) => {})\r\n * _Accordion.Item = AccordionItem\r\n *\r\n * export const Accordion = createPolymorphicComponent<'div', AccordionProps, {\r\n *    Item: typeof AccordionItem,\r\n * }>(_Accordion)\r\n * @param component\r\n */\r\nexport function createPolymorphicComponent<ComponentDefaultType,\r\n    Props,\r\n    StaticComponents = Record<string, never>>(component: any) {\r\n    type ComponentProps<C> = PolymorphicComponentProps<C, Props>;\r\n\r\n    type _PolymorphicComponent = <C = ComponentDefaultType>(\r\n        props: ComponentProps<C>,\r\n    ) => React.ReactElement;\r\n\r\n    type ComponentProperties = Omit<React.FunctionComponent<ComponentProps<any>>, never>;\r\n\r\n    type PolymorphicComponent = _PolymorphicComponent & ComponentProperties & StaticComponents;\r\n\r\n    return component as PolymorphicComponent\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Display Name\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const getChildDisplayName = (child: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined) => {\r\n    return (child as any)?.type?.displayName as (string | undefined)\r\n}\r\n"
      }
    ]
  },
  {
    "component": "datagrid",
    "name": "Datagrid",
    "dependencies": [
      [
        "@tanstack/react-table",
        "^8.9.2",
        ""
      ]
    ],
    "family": [
      "select",
      "show-only",
      "button",
      "dropdown-menu",
      "checkbox",
      "radio-group",
      "text-input",
      "number-input",
      "loading-spinner",
      "pagination",
      "tooltip"
    ],
    "files": [
      {
        "name": "datagrid-filter.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\r\n\r\nimport React, { useCallback } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { DataGridAnatomy, DataGridFilteringProps } from \".\"\r\nimport { Select } from \"../select\"\r\nimport { ColumnDef } from \"@tanstack/react-table\"\r\nimport { ShowOnly } from \"../show-only\"\r\nimport { CloseButton } from \"../button\"\r\nimport { DropdownMenu } from \"../dropdown-menu\"\r\nimport { CheckboxGroup } from \"../checkbox\"\r\nimport { RadioGroup } from \"../radio-group\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DataGridFilterAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGridFilter__root\",\r\n        \"flex gap-2 items-center\"\r\n    ])\r\n})\r\n\r\nexport const DataGridActiveFilterAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGridActiveFilter__root\",\r\n        \"py-1 px-2 rounded-[--radius] border border-[--border] flex gap-2 items-center\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridFilter\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DataGridFilterProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof DataGridFilterAnatomy> {\r\n    children?: React.ReactNode\r\n    column: ColumnDef<any>\r\n    filterValue: any\r\n    setFilterValue: (updater: any) => void\r\n    filteringOptions: DataGridFilteringProps\r\n    onRemove: () => void\r\n}\r\n\r\nexport const DataGridFilter: React.FC<DataGridFilterProps> = React.forwardRef<HTMLDivElement, DataGridFilterProps>((props, ref) => {\r\n\r\n    const { locale: lng } = useUILocaleConfig()\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        /**/\r\n        column,\r\n        filteringOptions,\r\n        filterValue,\r\n        setFilterValue,\r\n        onRemove,\r\n        ...rest\r\n    } = props\r\n\r\n    const icon = filteringOptions.icon\r\n\r\n    // Value formatter - if undefined, use the default behavior\r\n    const valueFormatter = filteringOptions.valueFormatter || ((value: string) => value)\r\n\r\n    // Get the options\r\n    const options = filteringOptions.options ?? []\r\n\r\n    // Update handler\r\n    const handleUpdate = useCallback((value: any) => {\r\n        let finalValue = value\r\n        // Do something\r\n        setFilterValue(finalValue)\r\n    }, [])\r\n\r\n    return (\r\n        <div\r\n            className={cn(DataGridFilterAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <ShowOnly when={filteringOptions.type === \"select\" && (!options || options.length === 0)}>\r\n                <div className={\"text-red-500\"}>/!\\ \"Select\" filtering option passed without options</div>\r\n            </ShowOnly>\r\n            {/*Select*/}\r\n            <ShowOnly when={filteringOptions.type === \"select\" && !!options && options.length > 0}>\r\n                <Select\r\n                    leftIcon={icon ? icon :\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                             strokeWidth=\"2\"\r\n                             strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\">\r\n                            <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\"/>\r\n                        </svg>}\r\n                    leftAddon={filteringOptions.name}\r\n                    options={[...options.map(n => ({ value: n.value, label: valueFormatter(n.value) }))]}\r\n                    onChange={e =>\r\n                        handleUpdate(e.target.value.toLowerCase())\r\n                    }\r\n                    size={\"sm\"}\r\n                    fieldClassName={\"w-fit\"}\r\n                    className=\"sm:w-auto pr-8 md:max-w-sm\"\r\n                />\r\n            </ShowOnly>\r\n            {/*Boolean*/}\r\n            <ShowOnly when={filteringOptions.type === \"boolean\"}>\r\n                <DropdownMenu\r\n                    dropdownClassName={\"right-[inherit] left\"}\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filteringOptions}\r\n                            value={valueFormatter(filterValue)}\r\n                        />\r\n                    }>\r\n                    <DropdownMenu.Group>\r\n                        <DropdownMenu.Item onClick={() => handleUpdate(\"true\")}>\r\n                            {valueFormatter(\"true\") === \"true\" ? \"True\" : valueFormatter(\"true\")}\r\n                        </DropdownMenu.Item>\r\n                        <DropdownMenu.Item onClick={() => handleUpdate(\"false\")}>\r\n                            {valueFormatter(\"false\") === \"false\" ? \"False\" : valueFormatter(\"false\")}\r\n                        </DropdownMenu.Item>\r\n                    </DropdownMenu.Group>\r\n                </DropdownMenu>\r\n            </ShowOnly>\r\n            {/*Checkbox*/}\r\n            <ShowOnly when={filteringOptions.type === \"checkbox\" && !!options.length}>\r\n                <DropdownMenu\r\n                    dropdownClassName={\"right-[inherit] left\"}\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filteringOptions}\r\n                            value={Array.isArray(filterValue) ? filterValue.map((n: string) => valueFormatter(n)) : valueFormatter(filterValue)}\r\n                        />}\r\n                >\r\n                    <DropdownMenu.Group className={\"p-1\"}>\r\n                        {filteringOptions.options?.length && (\r\n                            <CheckboxGroup\r\n                                options={filteringOptions.options}\r\n                                value={filterValue}\r\n                                onChange={handleUpdate}\r\n                                checkboxContainerClassName={\"flex flex-row-reverse w-full justify-between\"}\r\n                                checkboxLabelClassName={\"cursor-pointer\"}\r\n                            />\r\n                        )}\r\n                    </DropdownMenu.Group>\r\n                </DropdownMenu>\r\n            </ShowOnly>\r\n            {/*Radio*/}\r\n            <ShowOnly when={filteringOptions.type === \"radio\" && !!options.length}>\r\n                <DropdownMenu\r\n                    dropdownClassName={\"right-[inherit] left\"}\r\n                    trigger={\r\n                        <DataGridActiveFilter\r\n                            options={filteringOptions}\r\n                            value={Array.isArray(filterValue) ? filterValue.map((n: string) => valueFormatter(n)) : valueFormatter(filterValue)}\r\n                        />}\r\n                >\r\n                    <DropdownMenu.Group className={\"p-1\"}>\r\n                        {filteringOptions.options?.length && (\r\n                            <RadioGroup\r\n                                options={filteringOptions.options}\r\n                                value={filterValue}\r\n                                onChange={handleUpdate}\r\n                                radioContainerClassName={\"flex flex-row-reverse w-full justify-between\"}\r\n                                radioLabelClassName={\"cursor-pointer\"}\r\n                            />\r\n                        )}\r\n                    </DropdownMenu.Group>\r\n                </DropdownMenu>\r\n            </ShowOnly>\r\n\r\n            <CloseButton onClick={onRemove} size={\"sm\"}/>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nDataGridFilter.displayName = \"DataGridFilter\"\r\n\r\n\r\ninterface DataGridActiveFilterProps extends React.ComponentPropsWithRef<\"button\">, ComponentWithAnatomy<typeof DataGridActiveFilterAnatomy> {\r\n    children?: React.ReactNode\r\n    options: DataGridFilteringProps\r\n    value: any\r\n}\r\n\r\nexport const DataGridActiveFilter: React.FC<DataGridActiveFilterProps> = React.forwardRef((props, ref) => {\r\n\r\n    const { children, options, value, ...rest } = props\r\n\r\n    const formattedValue = Array.isArray(value) ? (value.length > 2 ? [...value.slice(0, 2), \"...\"].join(\", \") : value.join(\", \")) : String(value)\r\n\r\n    return (\r\n        <button className={cn(DataGridAnatomy.filterDropdownButton(), \"truncate overflow-ellipsis\")} {...rest} ref={ref}>\r\n            {options.icon && <span>{options.icon}</span>}\r\n            <span>{options.name}:</span>\r\n            <span className={\"font-semibold flex flex-none overflow-hidden whitespace-normal\"}>{formattedValue}</span>\r\n        </button>\r\n    )\r\n\r\n})\r\n\r\nDataGridActiveFilter.displayName = \"DataGridActiveFilter\"\r\n"
      },
      {
        "name": "datagrid.tsx",
        "dir": "datagrid",
        "content": "\"use client\"\r\n\r\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy, UIIcons, useUILocaleConfig } from \"../core\"\r\nimport {\r\n    Column,\r\n    ColumnDef,\r\n    ColumnFiltersState,\r\n    flexRender,\r\n    getCoreRowModel,\r\n    getFilteredRowModel,\r\n    getSortedRowModel,\r\n    PaginationState,\r\n    SortingState,\r\n    useReactTable\r\n} from \"@tanstack/react-table\"\r\n\r\nimport { cva } from \"class-variance-authority\"\r\nimport { TextInput, TextInputProps } from \"../text-input\"\r\nimport { Checkbox } from \"../checkbox\"\r\nimport { useDataGridSize } from \"./use-datagrid-size\"\r\nimport _keys from \"lodash/keys\"\r\nimport { Select } from \"../select\"\r\nimport { NumberInput } from \"../number-input\"\r\nimport { LoadingOverlay } from \"../loading-spinner\"\r\nimport { Pagination } from \"../pagination\"\r\nimport { DataGridFilter } from \"./datagrid-filter\"\r\nimport { DropdownMenu } from \"../dropdown-menu\"\r\nimport { DataGridFilteringProps } from \"./helpers\"\r\nimport { IconButton } from \"../button\"\r\nimport { Tooltip } from \"../tooltip\"\r\nimport locales from \"./locales.json\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DataGridAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DataGrid__root\",\r\n    ]),\r\n    header: cva([\r\n        \"UI-DataGrid__header\",\r\n        \"block space-y-4 w-full mb-4\"\r\n    ]),\r\n    filterContainer: cva([\r\n        \"UI-DataGrid__filterContainer\",\r\n        \"flex w-full items-center gap-4 flex-wrap\"\r\n    ]),\r\n    tableWrapper: cva([\r\n        \"UI-DataGrid__tableWrapper\",\r\n        \"flex flex-col overflow-x-auto\"\r\n    ]),\r\n    tableContainer: cva([\r\n        \"UI-DataGrid__tableContainer\",\r\n        \"align-middle inline-block min-w-full relative\"\r\n    ]),\r\n    table: cva([\r\n        \"UI-DataGrid__table\",\r\n        \"w-full divide-y divide-[--border] overflow-x-auto relative table-fixed\"\r\n    ]),\r\n    tableHead: cva([\r\n        \"UI-DataGrid__tableHead\",\r\n        \"border-b border-[--border]\"\r\n    ]),\r\n    th: cva([\r\n        \"UI-DataGrid__th group/th\",\r\n        \"px-3 h-12 text-left text-sm font-bold\",\r\n        \"data-[row-selection=true]:px-3 data-[row-selection=true]:sm:px-1 data-[row-selection=true]:text-center\"\r\n    ]),\r\n    titleChevronContainer: cva([\r\n        \"UI-DataGrid__titleChevronContainer\",\r\n        \"absolute flex items-center inset-y-0 top-1 -right-9 group\"\r\n    ]),\r\n    titleChevron: cva([\r\n        \"UI-DataGrid__titleChevron\",\r\n        \"mr-3 h-4 w-4 text-gray-400 group-hover:text-gray-500 relative bottom-0.5\"\r\n    ]),\r\n    tableBody: cva([\r\n        \"UI-DataGrid__tableBody\",\r\n        \"bg-[--paper] divide-y divide-[--border] w-full\"\r\n    ]),\r\n    td: cva([\r\n        \"UI-DataGrid__td\",\r\n        \"px-2 py-2 whitespace-nowrap text-sm font-medium text-[--text-color]\",\r\n        \"data-[row-selection=true]:px-2 data-[row-selection=true]:sm:px-0 data-[row-selection=true]:text-center\",\r\n        \"data-[action-column=false]:truncate data-[action-column=false]:overflow-ellipsis\",\r\n        \"data-[row-selected=true]:bg-brand-50 dark:data-[row-selected=true]:bg-gray-700\"\r\n    ]),\r\n    tr: cva([\r\n        \"UI-DataGrid__tr\",\r\n        \"hover:bg-[--highlight] truncate\"\r\n    ]),\r\n    footer: cva([\r\n        \"UI-DataGrid__footer\",\r\n        \"flex flex-col sm:flex-row w-full items-center gap-2 justify-between p-2 mt-2 overflow-x-auto max-w-full\"\r\n    ]),\r\n    footerPageDisplayContainer: cva([\r\n        \"UI-DataGrid__footerPageDisplayContainer\",\r\n        \"flex flex-none items-center gap-1 ml-2 text-sm\"\r\n    ]),\r\n    footerPaginationInputContainer: cva([\r\n        \"UI-DataGrid__footerPaginationInputContainer\",\r\n        \"flex flex-none items-center gap-2\"\r\n    ]),\r\n    filterDropdownButton: cva([\r\n        \"UI-DataGrid__filterDropdownButton\",\r\n        \"flex gap-2 items-center bg-[--paper] border border-[--border] rounded-[--radius] py-1 px-2 cursor-pointer hover:bg-[--highlight]\",\r\n        \"select-none focus-visible:ring-2 outline-none focus-visible:ring-[--ring]\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGrid\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridFetchingHandlerParams = { offset: number, limit: number, globalFilterValue: string, filters: { id: string, value: unknown }[] }\r\nexport type DataGridFetchingHandler = {\r\n    setParams: (params: Partial<DataGridFetchingHandlerParams>) => void\r\n    getParams: () => DataGridFetchingHandlerParams\r\n    getIsFiltering: () => boolean\r\n}\r\n\r\nexport interface DataGridProps<T extends Record<string, any>> extends React.ComponentPropsWithoutRef<\"div\">,\r\n    ComponentWithAnatomy<typeof DataGridAnatomy> {\r\n    data: T[] | null | undefined\r\n    children?: React.ReactNode\r\n    columns: ColumnDef<T>[]\r\n    /**\r\n     * Manage responsiveness by hiding certain columns below a specific width.\r\n     * The width is based on the table, not the window\r\n     */\r\n    hideColumns?: { below: number, hide: string[] }[]\r\n    /**\r\n     * DataGrid should know how many objects there are to paginate.\r\n     * It can be fetched using an aggregation query via SSR.\r\n     */\r\n    rowCount: number\r\n    // Display loading spinner when data is loading\r\n    isLoading: boolean\r\n    /**\r\n     * Enables and displays checkboxes for each row.\r\n     * Use in conjunction with onItemSelected()\r\n     */\r\n    enableRowSelection: boolean\r\n    /**\r\n     * Returns selected rows.\r\n     *\r\n     * /!\\ You should avoid using it with `fetchingHandler` because you can only select visible rows\r\n     */\r\n    onItemSelected?: (value: T[]) => void\r\n    // Limit the number of rows per page\r\n    itemsPerPage?: number\r\n    /**\r\n     * @default false\r\n     * By default DataGrid handles pagination and filtering on the client, so it expects all the data at once.\r\n     * By using the fetching handler DataGrid will allow you to paginate and filter manually from the server.\r\n     *\r\n     * - Provide a \"rowCount\" prop so that DataGrid knows how many pages there are\r\n     * - You should recalculate `rowCount`\r\n     *\r\n     * @example\r\n     * // With dynamic rowCount\r\n     * rowCount={fetchingHandler.getIsFiltering() ? (res.data?.rowCount ?? 0) : aggregationRes.count}\r\n     */\r\n    fetchingHandler?: DataGridFetchingHandler\r\n    /**\r\n     * Use in combination with `fetchingHandler`.\r\n     * When it is false, the column filters will only be applied to visible rows\r\n     *\r\n     * - When it is true, the filters will not be applied, you can then manually filter the data using the returned values\r\n     */\r\n    withManualFiltering?: boolean\r\n    // Display loading spinner when new data is coming in\r\n    isFetching?: boolean\r\n}\r\n\r\nexport function DataGrid<T extends Record<string, any>>(props: DataGridProps<T>) {\r\n\r\n    const { locale: lng } = useUILocaleConfig()\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        headerClassName,\r\n        filterContainerClassName,\r\n        tableWrapperClassName,\r\n        tableContainerClassName,\r\n        tableHeadClassName,\r\n        tableClassName,\r\n        thClassName,\r\n        titleChevronClassName,\r\n        titleChevronContainerClassName,\r\n        tableBodyClassName,\r\n        trClassName,\r\n        tdClassName,\r\n        footerClassName,\r\n        footerPageDisplayContainerClassName,\r\n        footerPaginationInputContainerClassName,\r\n        filterDropdownButtonClassName,\r\n        /**/\r\n        columns,\r\n        data = [],\r\n        rowCount,\r\n        hideColumns = [],\r\n        isLoading,\r\n        isFetching,\r\n        enableRowSelection,\r\n        onItemSelected,\r\n        itemsPerPage: _limit = 5,\r\n        /**/\r\n        withManualFiltering = false,\r\n        fetchingHandler,\r\n        ...rest\r\n    } = props\r\n\r\n    const withFetching = !!fetchingHandler\r\n\r\n    /**\r\n     * Selection checkboxes\r\n     */\r\n    const _columns = useMemo<ColumnDef<T>[]>(() => [{\r\n        id: \"select\",\r\n        size: 1,\r\n        disableSortBy: true,\r\n        disableGlobalFilter: true,\r\n        header: ({ table }) => {\r\n            console.log(table.getIsSomeRowsSelected())\r\n            return (\r\n                <Checkbox\r\n                    checked={table.getIsSomeRowsSelected() ? \"indeterminate\" : table.getIsAllRowsSelected()}\r\n                    onChange={() => table.toggleAllRowsSelected()}\r\n                />\r\n            )\r\n        },\r\n        cell: ({ row }) => {\r\n            return (\r\n                <div className=\"px-1\">\r\n                    <Checkbox\r\n                        key={row.id}\r\n                        checked={row.getIsSomeSelected() ? \"indeterminate\" : row.getIsSelected()}\r\n                        isDisabled={!row.getCanSelect()}\r\n                        onChange={row.getToggleSelectedHandler()}\r\n                    />\r\n                </div>\r\n            )\r\n        },\r\n    }, ...columns], [columns])\r\n\r\n    // Keep track of search input\r\n    const [globalFilter, setGlobalFilter] = useState(\"\")\r\n    // Keep track of selected row\r\n    const [rowSelection, setRowSelection] = useState({})\r\n    const [sorting, setSorting] = useState<SortingState>([])\r\n    const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\r\n    const [columnVisibility, setColumnVisibility] = useState({})\r\n\r\n    // Keep track of pages\r\n    const [{ pageIndex, pageSize }, setPagination] = useState<PaginationState>({ pageIndex: 0, pageSize: _limit })\r\n    // Pagination object\r\n    const pagination = useMemo(() => ({ pageIndex, pageSize, }), [pageIndex, pageSize])\r\n    // Calculate page count\r\n    const pageCount = useMemo(() => Math.ceil(rowCount / pageSize) ?? -1, [rowCount, pageSize])\r\n\r\n    useEffect(() => {\r\n        if (withFetching && fetchingHandler) {\r\n            fetchingHandler.setParams({ offset: pageIndex, limit: pageSize, globalFilterValue: globalFilter })\r\n        }\r\n    }, [globalFilter, pageSize, pageIndex])\r\n\r\n    /**\r\n     * Table\r\n     */\r\n    const table = useReactTable({\r\n        data: data ?? [],\r\n        columns: enableRowSelection ? _columns : columns,\r\n        pageCount: pageCount,\r\n        globalFilterFn: (row, columnId, filterValue) => {\r\n            const safeValue: string = ((): string => {\r\n                const value: any = row.getValue(columnId)\r\n                return typeof value === \"number\" ? String(value) : value\r\n            })()\r\n            return safeValue?.toLowerCase().includes(filterValue.toLowerCase())\r\n        },\r\n        state: {\r\n            sorting,\r\n            pagination,\r\n            rowSelection,\r\n            globalFilter,\r\n            columnFilters,\r\n            columnVisibility,\r\n        },\r\n        enableRowSelection: enableRowSelection,\r\n        onColumnVisibilityChange: setColumnVisibility,\r\n        onGlobalFilterChange: setGlobalFilter,\r\n        onColumnFiltersChange: setColumnFilters,\r\n        onPaginationChange: setPagination,\r\n        onSortingChange: setSorting,\r\n        onRowSelectionChange: setRowSelection,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getSortedRowModel: getSortedRowModel(),\r\n        getFilteredRowModel: (withFetching && withManualFiltering) ? undefined : getFilteredRowModel(), // Control filtering\r\n        manualPagination: withFetching,\r\n        debugTable: true,\r\n    })\r\n\r\n    /**\r\n     * Responsively hide columns\r\n     */\r\n    const [tableRef, { width: tableWidth }] = useDataGridSize<HTMLDivElement>()\r\n    useEffect(() => {\r\n        hideColumns.map(({ below, hide }) => {\r\n            table.getAllLeafColumns().map(column => {\r\n                if (hide.includes(column.id)) {\r\n                    if (tableWidth !== 0 && tableWidth < below) {\r\n                        if (column.getIsVisible()) column.toggleVisibility(false)\r\n                    } else {\r\n                        if (!column.getIsVisible()) column.toggleVisibility(true)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }, [hideColumns, tableWidth])\r\n\r\n\r\n    /**\r\n     * Item selection\r\n     */\r\n    useEffect(() => {\r\n        const selectedIndexArr = _keys(table.getState().rowSelection).map(v => parseInt(v))\r\n        onItemSelected && onItemSelected(data?.filter((v: any, i: number) => selectedIndexArr.includes(i)) as T[])\r\n    }, [table.getState().rowSelection])\r\n\r\n    const filterableColumns = table.getAllLeafColumns().filter(n => n.getCanFilter() && (n.columnDef.meta as any)?.filter)\r\n    const unselectedFilterableColumns = filterableColumns.filter(n => !columnFilters.map(c => c.id).includes(n.id))\r\n    const selectedFilteredColumns = table.getAllLeafColumns().filter(n => columnFilters.map(a => a.id).includes(n.id))\r\n\r\n    // Get the default value for a filter when the user selects it\r\n    const getFilterDefaultValue = useCallback((col: Column<any>) => {\r\n        // Since the column is filterable, get options\r\n        const options = (col.columnDef.meta as any)?.filter as DataGridFilteringProps\r\n        if (options.type === \"select\" || options.type === \"radio\") {\r\n            return options.options?.[0]?.value ?? \"\"\r\n        } else if (options.type === \"boolean\") {\r\n            return \"true\"\r\n        } else if (options.type === \"checkbox\") {\r\n            return options.options?.map(n => n.value) ?? []\r\n        }\r\n        return null\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchingHandler?.setParams({ filters: columnFilters })\r\n    }, [columnFilters])\r\n\r\n    const displayedRows = withFetching ? table.getRowModel().rows : table.getRowModel().rows.slice(table.getState().pagination.pageIndex * pageSize, (table.getState().pagination.pageIndex + 1) * pageSize)\r\n\r\n    return (\r\n        <div className={cn(DataGridAnatomy.root(), rootClassName)}>\r\n            <div className={cn(DataGridAnatomy.header(), headerClassName)}>\r\n\r\n                <div className={cn(DataGridAnatomy.filterContainer(), filterContainerClassName)}>\r\n                    {/* Search Box */}\r\n                    <DataGridSearchInput value={globalFilter ?? \"\"} onChange={value => setGlobalFilter(String(value))}/>\r\n                    {/* Filter dropdown */}\r\n                    <DropdownMenu\r\n                        trigger={\r\n                            <button className={cn(DataGridAnatomy.filterDropdownButton(), filterDropdownButtonClassName)}>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                     strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\">\r\n                                    <polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\"/>\r\n                                </svg>\r\n                                <span>{locales[\"filters\"][lng]} ({unselectedFilterableColumns.length})</span>\r\n                            </button>\r\n                        }>\r\n                        {/*Filter list*/}\r\n                        {unselectedFilterableColumns.map(col => {\r\n                            const defaultValue = getFilterDefaultValue(col)\r\n                            const icon = (col.columnDef.meta as any)?.filter?.icon\r\n                            return (\r\n                                <DropdownMenu.Item\r\n                                    key={col.id}\r\n                                    onClick={() => setColumnFilters(p => [...p, { id: col.id, value: defaultValue }])}\r\n                                >\r\n                                    <span className={\"text-lg\"}>{icon && icon}</span>\r\n                                    <span>{(col.columnDef.meta as any)?.filter?.name}</span>\r\n                                </DropdownMenu.Item>\r\n                            )\r\n                        })}\r\n                    </DropdownMenu>\r\n\r\n                    {/*Remove filters button*/}\r\n                    {unselectedFilterableColumns.length !== filterableColumns.length && (\r\n                        <Tooltip\r\n                            trigger={<IconButton icon={UIIcons.undo()} intent={\"gray-outline\"} size={\"sm\"} onClick={() => setColumnFilters([])}/>}>\r\n                            {locales[\"remove-filters\"][lng]}\r\n                        </Tooltip>\r\n                    )}\r\n                </div>\r\n\r\n                {(selectedFilteredColumns.length > 0) && <div className={cn(DataGridAnatomy.filterContainer(), filterContainerClassName)}>\r\n                    {/*Display selected filters*/}\r\n                    {table.getAllLeafColumns().filter(n => columnFilters.map(a => a.id).includes(n.id)).map(col => {\r\n                        if (col.getCanFilter() && (col.columnDef.meta as any)?.filter) {\r\n                            return (\r\n                                <DataGridFilter\r\n                                    key={col.id}\r\n                                    column={col.columnDef}\r\n                                    filterValue={col.getFilterValue()}\r\n                                    setFilterValue={col.setFilterValue}\r\n                                    filteringOptions={(col.columnDef.meta as any)?.filter as any}\r\n                                    onRemove={() => setColumnFilters(p => [...p.filter(n => n.id !== col.id)])}\r\n                                />\r\n                            )\r\n                        }\r\n                        return undefined\r\n                    })}\r\n                </div>}\r\n\r\n            </div>\r\n\r\n            {/* Table */}\r\n            <div\r\n                className={cn(DataGridAnatomy.tableWrapper(), tableWrapperClassName)}\r\n                ref={tableRef}\r\n            >\r\n                <div className=\"relative\">\r\n                    <div className={cn(DataGridAnatomy.tableContainer(), tableContainerClassName)}>\r\n\r\n                        <LoadingOverlay show={isLoading || (withFetching && isFetching)}/>\r\n\r\n                        <table className={cn(DataGridAnatomy.table(), tableClassName)}>\r\n\r\n                            {/*Head*/}\r\n\r\n                            <thead className={cn(DataGridAnatomy.tableHead(), tableHeadClassName)}>\r\n                            {table.getHeaderGroups().map((headerGroup) => (\r\n                                <tr key={headerGroup.id}>\r\n                                    {headerGroup.headers.map((header, index) => (\r\n                                        <th\r\n                                            key={header.id}\r\n                                            colSpan={header.colSpan}\r\n                                            scope=\"col\"\r\n                                            className={cn(DataGridAnatomy.th(), thClassName)}\r\n                                            data-row-selection={`${index === 0 && enableRowSelection}`}\r\n                                            style={{ width: header.getSize() }}\r\n                                        >\r\n                                            {((index !== 0 && enableRowSelection) || !enableRowSelection) ? <div\r\n                                                className={cn(\r\n                                                    \"flex items-center justify-between\",\r\n                                                    {\r\n                                                        \"cursor-pointer\": header.column.getCanSort(),\r\n                                                    },\r\n                                                )}\r\n                                            >\r\n                                                {header.isPlaceholder ? null : (\r\n                                                    <div\r\n                                                        className=\"flex relative items-center\"\r\n                                                        {...{\r\n                                                            onClick: header.column.getToggleSortingHandler(),\r\n                                                        }}\r\n                                                    >\r\n                                                        {flexRender(\r\n                                                            header.column.columnDef.header,\r\n                                                            header.getContext(),\r\n                                                        )}\r\n                                                        <span className={cn(DataGridAnatomy.titleChevronContainer(), titleChevronContainerClassName)}>\r\n                                                            {header.column.getIsSorted() === \"asc\" &&\r\n                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                                     fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                                                     strokeLinejoin=\"round\"\r\n                                                                     className={cn(DataGridAnatomy.titleChevron(), titleChevronClassName)}>\r\n                                                                    <polyline points=\"18 15 12 9 6 15\"/>\r\n                                                                </svg>\r\n                                                            }\r\n                                                            {header.column.getIsSorted() === \"desc\" &&\r\n                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                                     fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                                                     strokeLinejoin=\"round\"\r\n                                                                     className={cn(DataGridAnatomy.titleChevron(), titleChevronClassName)}>\r\n                                                                    <polyline points=\"6 9 12 15 18 9\"/>\r\n                                                                </svg>\r\n                                                            }\r\n                                                            {(header.column.getIsSorted() === false && header.column.getCanSort()) &&\r\n                                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\r\n                                                                     fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                                                     strokeLinejoin=\"round\"\r\n                                                                     className={cn(\r\n                                                                         DataGridAnatomy.titleChevron(),\r\n                                                                         \"w-4 h-4 opacity-0 transition-opacity group-hover/th:opacity-100\",\r\n                                                                         titleChevronClassName\r\n                                                                     )}>\r\n                                                                    <path d=\"m7 15 5 5 5-5\"/>\r\n                                                                    <path d=\"m7 9 5-5 5 5\"/>\r\n                                                                </svg>\r\n                                                            }\r\n                                                        </span>\r\n                                                    </div>\r\n                                                )}\r\n                                            </div> : flexRender(\r\n                                                header.column.columnDef.header,\r\n                                                header.getContext(),\r\n                                            )}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                            </thead>\r\n\r\n                            {/*Body*/}\r\n\r\n                            {(!isLoading) && (\r\n                                <tbody className={cn(DataGridAnatomy.tableBody(), tableBodyClassName)}>\r\n                                {displayedRows.map((row) => {\r\n                                    return (\r\n                                        <tr key={row.id} className={cn(DataGridAnatomy.tr(), trClassName)}>\r\n                                            {row.getVisibleCells().map((cell, index) => {\r\n                                                return (\r\n                                                    <td\r\n                                                        key={cell.id}\r\n                                                        className={cn(DataGridAnatomy.td(), tdClassName)}\r\n                                                        data-row-selection={`${index === 0 && enableRowSelection}`}\r\n                                                        data-action-column={`${cell.column.id === \"actions\"}`}\r\n                                                        data-row-selected={cell.getContext().row.getIsSelected()}\r\n                                                        style={{ width: cell.column.getSize(), maxWidth: cell.column.columnDef.maxSize }}\r\n                                                    >\r\n                                                        {flexRender(\r\n                                                            cell.column.columnDef.cell,\r\n                                                            cell.getContext(),\r\n                                                        )}\r\n                                                    </td>\r\n                                                )\r\n                                            })}\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            )}\r\n                        </table>\r\n                        {displayedRows.length === 0 && (\r\n                            <div className={\"w-full flex justify-center py-4\"}>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                     stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                     className=\"w-6 h-6\">\r\n                                    <path d=\"m2 2 20 20\"/>\r\n                                    <path d=\"M8.35 2.69A10 10 0 0 1 21.3 15.65\"/>\r\n                                    <path d=\"M19.08 19.08A10 10 0 1 1 4.92 4.92\"/>\r\n                                </svg>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={cn(DataGridAnatomy.footer(), footerClassName)}>\r\n\r\n                    <Pagination>\r\n                        <Pagination.Trigger\r\n                            direction={\"left\"}\r\n                            isChevrons\r\n                            onClick={() => table.setPageIndex(0)}\r\n                            isDisabled={!table.getCanPreviousPage()}\r\n                        />\r\n                        <Pagination.Trigger\r\n                            direction={\"left\"}\r\n                            onClick={() => table.previousPage()}\r\n                            isDisabled={!table.getCanPreviousPage()}\r\n                        />\r\n                        <Pagination.Trigger\r\n                            direction={\"right\"}\r\n                            onClick={() => table.nextPage()}\r\n                            isDisabled={!table.getCanNextPage()}\r\n                        />\r\n                        <Pagination.Trigger\r\n                            direction={\"right\"}\r\n                            isChevrons\r\n                            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n                            isDisabled={!table.getCanNextPage()}\r\n                        />\r\n                    </Pagination>\r\n\r\n                    <div className={cn(DataGridAnatomy.footerPageDisplayContainer(), footerPageDisplayContainerClassName)}>\r\n                        <div>{locales[\"page\"][lng]}</div>\r\n                        <strong>\r\n                            {table.getState().pagination.pageIndex + 1} / {table.getPageCount()}\r\n                        </strong>\r\n                    </div>\r\n\r\n                    <div className={cn(DataGridAnatomy.footerPaginationInputContainer(), footerPaginationInputContainerClassName)}>\r\n                        <NumberInput\r\n                            discrete\r\n                            defaultValue={table.getState().pagination.pageIndex + 1}\r\n                            min={1}\r\n                            max={pageCount}\r\n                            onChange={v => {\r\n                                const page = v ? v - 1 : 0\r\n                                table.setPageIndex(page)\r\n                            }}\r\n                            className={\"inline-flex flex-none items-center w-[3rem]\"}\r\n                        />\r\n                        <Select\r\n                            value={table.getState().pagination.pageSize}\r\n                            onChange={e => {\r\n                                table.setPageSize(Number(e.target.value))\r\n                            }}\r\n                            options={[Number(_limit), ...[5, 10, 20, 30, 40, 50].filter(n => n !== Number(_limit))].map(pageSize => ({\r\n                                value: pageSize,\r\n                                label: `${pageSize}`\r\n                            }))}\r\n                            fieldClassName=\"w-auto\"\r\n                            className=\"w-auto\"\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nDataGrid.displayName = \"DataGrid\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Server side\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n *\r\n * @param defaultProps\r\n *\r\n * Returns an object containing helper functions for manually paginating and filtering.\r\n *\r\n * @example\r\n * const fetchingHandler = useDataGridFetchingHandler()\r\n *\r\n * const res = useQuery({\r\n *     queryKey: [\"data\", fetchingHandler.getParams()],\r\n *     queryFn: () => fetchFromFakeServer(fetchingHandler.getParams()),\r\n *     keepPreviousData: true, refetchOnWindowFocus: false\r\n * })\r\n *\r\n * return (\r\n *     <DataGrid<any>\r\n *         withManualFiltering={true}\r\n *         fetchingHandler={fetchingHandler}\r\n *         isFetching={dataQuery.isFetching}\r\n *     />\r\n * )\r\n */\r\nexport const useDataGridFetchingHandler = (defaultProps?: DataGridFetchingHandlerParams): DataGridFetchingHandler => {\r\n    const _defaultValue = { offset: 0, limit: 0, globalFilterValue: \"\", filters: [] }\r\n\r\n    const [params, setParams] = useState<DataGridFetchingHandlerParams>(defaultProps ?? _defaultValue)\r\n\r\n    const isFiltering = params.globalFilterValue !== \"\" || params.filters.length > 0\r\n\r\n    return {\r\n        getParams: () => params,\r\n        getIsFiltering: () => isFiltering,\r\n        setParams: (props: Partial<DataGridFetchingHandlerParams>) => setParams(p => ({ ...p, ...props })),\r\n    }\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DataGridSearchInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DataGridSearchInputProps {\r\n    value: string,\r\n    onChange: (value: string) => void\r\n    debounce?: number\r\n}\r\n\r\nfunction DataGridSearchInput(props: DataGridSearchInputProps & TextInputProps) {\r\n\r\n    const { value: initialValue, onChange, debounce = 500, ...rest } = props\r\n\r\n    const [value, setValue] = useState(initialValue)\r\n\r\n    useEffect(() => {\r\n        setValue(initialValue)\r\n    }, [initialValue])\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            onChange(value)\r\n        }, debounce)\r\n\r\n        return () => clearTimeout(timeout)\r\n    }, [value])\r\n\r\n    return (\r\n        <TextInput\r\n            {...rest}\r\n            value={value}\r\n            onChange={e => setValue(e.target.value)}\r\n            leftIcon={<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                           strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5 text-[--muted]\">\r\n                <circle cx=\"11\" cy=\"11\" r=\"8\"/>\r\n                <path d=\"m21 21-4.3-4.3\"/>\r\n            </svg>}\r\n            size={\"sm\"}\r\n            fieldClassName={\"md:max-w-[15rem]\"}\r\n        />\r\n    )\r\n}\r\n"
      },
      {
        "name": "helpers.ts",
        "dir": "datagrid",
        "content": "import { BuiltInFilterFn, ColumnDef } from \"@tanstack/react-table\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Filtering\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport type DataGridFilteringProps = {\r\n    type: \"select\" | \"radio\" | \"checkbox\" | \"boolean\"\r\n    name: string,\r\n    icon?: React.ReactElement\r\n    options?: { value: string, label?: React.ReactNode }[]\r\n    valueFormatter?: (value: string) => string\r\n}\r\n\r\nconst withFiltering = (params: DataGridFilteringProps) => {\r\n    const fns: { [key: string]: BuiltInFilterFn } = {\r\n        select: \"equalsString\",\r\n        boolean: \"equalsString\",\r\n        checkbox: \"arrIncludesSome\",\r\n        radio: \"equalsString\"\r\n    }\r\n    return {\r\n        filterFn: fns[params.type] as BuiltInFilterFn,\r\n        meta: {\r\n            filter: {\r\n                name: params.name,\r\n                type: params.type,\r\n                icon: params.icon,\r\n                options: params.options,\r\n                valueFormatter: params.valueFormatter\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Columns\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DataGridOptions {\r\n    withFiltering: typeof withFiltering\r\n}\r\n\r\n/**\r\n * Return\r\n * @example\r\n * const columns = useMemo(() => createDataGridColumns<Item>(() => [\r\n *  ...\r\n * ]), [])\r\n * @param callback\r\n */\r\nexport function createDataGridColumns<T extends Record<string, any>>(callback: (options: DataGridOptions) => ColumnDef<T>[]) {\r\n    return callback({\r\n        withFiltering\r\n    })\r\n}\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "datagrid",
        "content": "export * from \"./datagrid\"\r\nexport * from \"./helpers\"\r\n"
      },
      {
        "name": "locales.json",
        "dir": "datagrid",
        "content": "{\n  \"filters\": {\n    \"fr\": \"Filtres\",\n    \"en\": \"Filters\"\n  },\n  \"no-matching-result\": {\n    \"fr\": \"Aucun r√©sultat ne correspond aux filtres\",\n    \"en\": \"No matching results\"\n  },\n  \"remove-filters\": {\n    \"fr\": \"Retirer les filtres\",\n    \"en\": \"Remove all filters\"\n  },\n  \"page\": {\n    \"fr\": \"Page\",\n    \"en\": \"Page\"\n  }\n}\n"
      },
      {
        "name": "use-datagrid-size.ts",
        "dir": "datagrid",
        "content": "import { useCallback, useState } from \"react\"\r\nimport { useEventListener, useIsomorphicLayoutEffect } from \"../core\"\r\n\r\nexport function useDataGridSize<T extends HTMLElement = HTMLDivElement>(): [\r\n    (node: T | null) => void,\r\n    { width: number, height: number },\r\n] {\r\n    const [ref, setRef] = useState<T | null>(null)\r\n    const [size, setSize] = useState<{ width: number, height: number }>({\r\n        width: 0,\r\n        height: 0,\r\n    })\r\n\r\n    const handleSize = useCallback(() => {\r\n        setSize({\r\n            width: ref?.offsetWidth || 0,\r\n            height: ref?.offsetHeight || 0,\r\n        })\r\n\r\n    }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n    useEventListener(\"resize\", handleSize)\r\n\r\n    useIsomorphicLayoutEffect(() => {\r\n        handleSize()\r\n    }, [ref?.offsetHeight, ref?.offsetWidth])\r\n\r\n    return [setRef, size]\r\n}\r\n"
      }
    ]
  },
  {
    "component": "date-time",
    "name": "DateTime",
    "dependencies": [
      [
        "@internationalized/date",
        "^3.2.0",
        ""
      ],
      [
        "react-stately",
        "^3.23.0",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button",
      "calendar",
      "input",
      "modal"
    ],
    "files": [
      {
        "name": "date-field.tsx",
        "dir": "date-time",
        "content": "\"use client\"\r\n\r\nimport { createCalendar } from \"@internationalized/date\"\r\nimport { cn, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { useRef } from \"react\"\r\nimport { useDateField, useDateSegment } from \"react-aria\"\r\nimport { DateFieldState, DateFieldStateOptions, DateSegment, useDateFieldState } from \"react-stately\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DateSegmentAnatomy = defineStyleAnatomy({\r\n    segment: cva([\r\n        \"UI-DateSegment__segment\",\r\n        \"px-0.5 box-content tabular-nums text-right outline-none rounded-sm\",\r\n        \"focus:bg-brand-50 dark:focus:bg-transparent focus:text-brand-500 dark:focus:text-white focus:font-semibold group shadow-none\"\r\n    ], {\r\n        variants: {\r\n            isEditable: {\r\n                false: \"text-gray-500\",\r\n                true: \"text-gray-800 dark:text-gray-200\",\r\n            },\r\n        },\r\n    }),\r\n    input: cva([\r\n        \"UI-DateSegment__input\",\r\n        \"block w-full text-center italic text-gray-500 group-focus:text-brand-500 dark:group-focus:text-white group-focus:font-semibold\"\r\n    ]),\r\n})\r\n\r\nDateField.displayName = \"DateField\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DateField\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function DateField({ locale, ...props }: Omit<DateFieldStateOptions, \"locale\" | \"createCalendar\"> & { locale?: string }) {\r\n    let { countryLocale } = useUILocaleConfig()\r\n\r\n    let state = useDateFieldState({\r\n        ...props,\r\n        locale: locale ?? countryLocale,\r\n        createCalendar,\r\n    })\r\n\r\n    let ref = useRef<HTMLDivElement>(null)\r\n    let { fieldProps } = useDateField(props, state, ref)\r\n\r\n    return (\r\n        <div {...fieldProps} ref={ref} className=\"flex\">\r\n            {state.segments.map((segment, i) => (\r\n                <DateSegmentComponent key={i} segment={segment} state={state}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nDateField.displayName = \"DateField\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DateSegmentComponent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function DateSegmentComponent({ segment, state }: { segment: DateSegment, state: DateFieldState }) {\r\n    let ref = useRef<HTMLDivElement>(null)\r\n    let { segmentProps } = useDateSegment(segment, state, ref)\r\n\r\n    return (\r\n        <div\r\n            {...segmentProps}\r\n            ref={ref}\r\n            style={{\r\n                ...segmentProps.style,\r\n            }}\r\n            className={cn(DateSegmentAnatomy.segment({ isEditable: segment.isEditable }))}\r\n            suppressHydrationWarning\r\n        >\r\n            <span\r\n                aria-hidden=\"true\" className={cn(DateSegmentAnatomy.input())} style={{\r\n                display: segment.isPlaceholder ? undefined : \"none\", height: segment.isPlaceholder ? undefined : 0,\r\n                pointerEvents: \"none\",\r\n            }}\r\n            >\r\n                {segment.placeholder}\r\n            </span>\r\n            {segment.isPlaceholder ? null : segment.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nDateSegmentComponent.displayName = \"DateSegmentComponent\"\r\n"
      },
      {
        "name": "date-picker.tsx",
        "dir": "date-time",
        "content": "\"use client\"\r\n\r\nimport { DateValue } from \"@internationalized/date\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useDatePicker } from \"react-aria\"\r\nimport { DatePickerStateOptions, useDatePickerState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { IconButton } from \"../button\"\r\nimport { Calendar } from \"../calendar\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { Modal } from \"../modal\"\r\nimport { DateField } from \"./date-field\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DatePickerAnatomy = defineStyleAnatomy({\r\n    input: cva([\r\n        \"UI-DateSegment__input\",\r\n        \"relative flex flex-wrap items-center gap-2 cursor-text\",\r\n        \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-[--ring]\",\r\n        \"justify-between\",\r\n    ]),\r\n    iconButton: cva([\r\n        \"UI-DateSegment__iconButton\",\r\n        \"w-5 h-5 group-focus-within:text-brand-700 dark:group-focus-within:text-brand-200\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DatePicker\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DatePickerProps extends Omit<DatePickerStateOptions<DateValue>, \"label\">,\r\n    ComponentWithAnatomy<typeof DatePickerAnatomy>,\r\n    BasicFieldOptions,\r\n    InputStyling {\r\n    locale?: string\r\n}\r\n\r\nexport const DatePicker = React.forwardRef<HTMLDivElement, DatePickerProps>((props, ref) => {\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightIcon,\r\n        rightAddon,\r\n        locale,\r\n        inputClassName,\r\n        iconButtonClassName,\r\n        ...datePickerProps\r\n    }, basicFieldProps] = extractBasicFieldProps<DatePickerProps>(props, useId())\r\n\r\n    let state = useDatePickerState(datePickerProps)\r\n\r\n    let _ref = useRef<HTMLDivElement>(null)\r\n    let {\r\n        groupProps,\r\n        labelProps,\r\n        fieldProps,\r\n        buttonProps,\r\n        dialogProps,\r\n        calendarProps,\r\n    } = useDatePicker(datePickerProps, state, _ref)\r\n\r\n    const { onPress, ...restButtonProps } = buttonProps\r\n\r\n    return (\r\n        <BasicField\r\n            {...basicFieldProps}\r\n            labelProps={labelProps}\r\n        >\r\n            <div {...groupProps} ref={_ref} className={cn(\"group\", inputContainerStyle())}>\r\n\r\n                <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\r\n                <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\r\n\r\n                <div\r\n                    className={cn(\r\n                        \"form-input\",\r\n                        InputAnatomy.input({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            untouchable: !!basicFieldProps.isDisabled,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        DatePickerAnatomy.input(),\r\n                        inputClassName,\r\n                    )}\r\n                >\r\n                    <div className=\"flex\">\r\n                        <DateField {...fieldProps} />\r\n                    </div>\r\n\r\n                    <IconButton\r\n                        intent=\"gray-basic\"\r\n                        size=\"xs\"\r\n                        {...restButtonProps}\r\n                        icon={<svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            className={cn(DatePickerAnatomy.iconButton(), iconButtonClassName)}\r\n                        >\r\n                            <path d=\"M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-2V2h-2v2H9V2H7v2H5a2 2 0 0 0-2 2zm16 14H5V8h14z\"></path>\r\n                        </svg>}\r\n                        onClick={e => onPress && onPress(e as any)}\r\n                    />\r\n                </div>\r\n\r\n                <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\r\n                <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\r\n\r\n            </div>\r\n\r\n            <Modal\r\n                size=\"sm\"\r\n                isOpen={state.isOpen} onClose={state.close} isClosable\r\n                {...dialogProps}\r\n            >\r\n                <div className=\"flex justify-center\">\r\n                    <Calendar {...calendarProps} />\r\n                </div>\r\n            </Modal>\r\n\r\n        </BasicField>)\r\n})\r\n\r\nDatePicker.displayName = \"DatePicker\"\r\n"
      },
      {
        "name": "date-range-picker.tsx",
        "dir": "date-time",
        "content": "\"use client\"\r\n\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useDateRangePicker } from \"react-aria\"\r\nimport { DateRangePickerStateOptions, useDateRangePickerState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { IconButton } from \"../button\"\r\nimport { RangeCalendar } from \"../calendar\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { Modal } from \"../modal\"\r\nimport { DateField } from \"./date-field\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DateRangePickerAnatomy = defineStyleAnatomy({\r\n    input: cva([\r\n        \"UI-DateRangePicker__input\",\r\n        \"relative flex flex-wrap items-center gap-1 cursor-text\",\r\n        \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-[--ring]\",\r\n        \"justify-between text-sm sm:text-base\",\r\n    ]),\r\n    iconButton: cva([\r\n        \"UI-DateRangePicker__iconButton\",\r\n        \"w-5 h-5 group-focus-within:text-brand-700\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DateRangePicker\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DateRangePickerProps extends Omit<DateRangePickerStateOptions, \"label\">,\r\n    ComponentWithAnatomy<typeof DateRangePickerAnatomy>,\r\n    BasicFieldOptions,\r\n    InputStyling {\r\n}\r\n\r\nexport const DateRangePicker = React.forwardRef<HTMLDivElement, DateRangePickerProps>((props, ref) => {\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon,\r\n        rightIcon,\r\n        rightAddon,\r\n        inputClassName,\r\n        iconButtonClassName,\r\n        ...datePickerProps\r\n    }, basicFieldProps] = extractBasicFieldProps<DateRangePickerProps>(props, useId())\r\n\r\n    let state = useDateRangePickerState(datePickerProps)\r\n    let _ref = useRef<HTMLDivElement>(null)\r\n    let {\r\n        groupProps,\r\n        labelProps,\r\n        startFieldProps,\r\n        endFieldProps,\r\n        buttonProps,\r\n        dialogProps,\r\n        calendarProps,\r\n    } = useDateRangePicker(datePickerProps, state, _ref)\r\n\r\n    let { onPress, ...restButtonProps } = buttonProps\r\n\r\n    return (\r\n        <BasicField\r\n            {...basicFieldProps}\r\n            labelProps={labelProps}\r\n        >\r\n            <div {...groupProps} ref={_ref} className={cn(\"flex group\", inputContainerStyle())}>\r\n\r\n                <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\r\n                <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\r\n\r\n                <div\r\n                    className={cn(\r\n                        \"form-input\",\r\n                        InputAnatomy.input({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            untouchable: !!basicFieldProps.isDisabled,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        DateRangePickerAnatomy.input(),\r\n                        inputClassName,\r\n                    )}\r\n                >\r\n                    <div className=\"flex\">\r\n                        <DateField {...startFieldProps} /> <span aria-hidden=\"true\" className=\"px-1\"> ‚Äì </span> <DateField {...endFieldProps} />\r\n                    </div>\r\n                    <IconButton\r\n                        intent=\"gray-basic\"\r\n                        size=\"xs\"\r\n                        {...restButtonProps}\r\n                        icon={<svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            className={cn(DateRangePickerAnatomy.iconButton(), iconButtonClassName)}\r\n                        >\r\n                            <path d=\"M3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-2V2h-2v2H9V2H7v2H5a2 2 0 0 0-2 2zm16 14H5V8h14z\"></path>\r\n                        </svg>}\r\n                        onClick={e => onPress && onPress(e as any)}\r\n                    />\r\n\r\n\r\n                </div>\r\n\r\n                <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\r\n                <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\r\n\r\n                <Modal\r\n                    size=\"xl\" isOpen={state.isOpen} onClose={state.close} isClosable\r\n                    {...dialogProps}\r\n                >\r\n                    <div className=\"flex justify-center\"><RangeCalendar {...calendarProps} /></div>\r\n                </Modal>\r\n\r\n            </div>\r\n        </BasicField>)\r\n})\r\n\r\nDateRangePicker.displayName = \"DateRangePicker\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "date-time",
        "content": "export * from \"./date-field\"\nexport * from \"./date-picker\"\nexport * from \"./date-range-picker\"\nexport * from \"./time-input\"\n"
      },
      {
        "name": "time-input.tsx",
        "dir": "date-time",
        "content": "\"use client\"\r\n\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport React, { useId, useRef } from \"react\"\r\nimport { useTimeField } from \"react-aria\"\r\nimport { TimeFieldStateOptions, useTimeFieldState } from \"react-stately\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\r\nimport { DateSegmentComponent } from \"./date-field\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TimeInputAnatomy = defineStyleAnatomy({\r\n    input: cva([\r\n        \"UI-TimeInput__input\",\r\n        \"relative flex flex-wrap items-center gap-1 cursor-text\",\r\n        \"group-focus-within:border-brand-500 group-focus-within:ring-1 group-focus-within:ring-[--ring]\",\r\n        \"!w-fit\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TimeInput\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface TimeInputProps extends Omit<TimeFieldStateOptions, \"locale\">,\r\n    ComponentWithAnatomy<typeof TimeInputAnatomy>,\r\n    BasicFieldOptions,\r\n    InputStyling {\r\n    locale?: string\r\n}\r\n\r\nexport const TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>((props, ref) => {\r\n\r\n    const [{\r\n        size,\r\n        intent,\r\n        leftAddon,\r\n        leftIcon = <span>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\" className=\"w-4 h-4\">\r\n                <path\r\n                    d=\"M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7-3.25v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5a.75.75 0 0 1 1.5 0Z\"></path>\r\n            </svg>\r\n        </span>,\r\n        rightIcon,\r\n        rightAddon,\r\n        inputClassName,\r\n        locale,\r\n        ...datePickerProps\r\n    }, basicFieldProps] = extractBasicFieldProps<TimeInputProps>(props, useId())\r\n\r\n    const { countryLocale } = useUILocaleConfig()\r\n    let state = useTimeFieldState({\r\n        ...datePickerProps,\r\n        locale: locale ?? countryLocale,\r\n    })\r\n\r\n    let _ref = useRef<HTMLDivElement>(null)\r\n    let { labelProps, fieldProps } = useTimeField(datePickerProps, state, _ref)\r\n\r\n    return (\r\n        <BasicField\r\n            {...basicFieldProps}\r\n            labelProps={labelProps}\r\n        >\r\n            <div className={cn(inputContainerStyle(), \"!w-fit\")}>\r\n\r\n                <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\r\n                <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\r\n\r\n                <div\r\n                    className={cn(\r\n                        \"form-input\",\r\n                        InputAnatomy.input({\r\n                            size,\r\n                            intent,\r\n                            hasError: !!basicFieldProps.error,\r\n                            untouchable: !!basicFieldProps.isDisabled,\r\n                            hasRightAddon: !!rightAddon,\r\n                            hasRightIcon: !!rightIcon,\r\n                            hasLeftAddon: !!leftAddon,\r\n                            hasLeftIcon: !!leftIcon,\r\n                        }),\r\n                        TimeInputAnatomy.input(),\r\n                        inputClassName,\r\n                    )}\r\n                    {...fieldProps}\r\n                    ref={_ref}\r\n                >\r\n                    {state.segments.map((segment, i) => (\r\n                        <DateSegmentComponent key={i} segment={segment} state={state}/>\r\n                    ))}\r\n                </div>\r\n\r\n                <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\r\n                <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\r\n\r\n            </div>\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nTimeInput.displayName = \"TimeInput\"\r\n"
      }
    ]
  },
  {
    "component": "divider",
    "name": "Divider",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "divider-with-label.tsx",
        "dir": "divider",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DividerWithLabelAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-DividerWithLabel__root\",\r\n        \"relative\"\r\n    ]),\r\n    dividerContainer: cva([\r\n        \"DividerWithLabel__dividerContainer\",\r\n        \"absolute inset-0 flex items-center\"\r\n    ]),\r\n    divider: cva([\r\n        \"DividerWithLabel__divider\",\r\n        \"w-full border-t border-gray-300 border-[--border]\"\r\n    ]),\r\n    labelContainer: cva([\r\n        \"DividerWithLabel__labelContainer\",\r\n        \"relative flex justify-center\"\r\n    ]),\r\n    label: cva([\r\n        \"DividerWithLabel__label\",\r\n        \"bg-[--background-color] px-2 text-sm text-[--muted]\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DividerWithLabel\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DividerWithLabelProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof DividerWithLabelAnatomy> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nexport const DividerWithLabel: React.FC<DividerWithLabelProps> = React.forwardRef<HTMLDivElement, DividerWithLabelProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        dividerClassName,\r\n        dividerContainerClassName,\r\n        labelClassName,\r\n        labelContainerClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(DividerWithLabelAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <div className={cn(DividerWithLabelAnatomy.dividerContainer(), dividerContainerClassName)} aria-hidden=\"true\">\r\n                <div className={cn(DividerWithLabelAnatomy.divider(), dividerClassName)}/>\r\n            </div>\r\n            <div className={cn(DividerWithLabelAnatomy.labelContainer(), labelContainerClassName)}>\r\n                <span className={cn(DividerWithLabelAnatomy.label(), labelClassName)}>{children}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nDividerWithLabel.displayName = \"DividerWithLabel\"\r\n"
      },
      {
        "name": "divider.tsx",
        "dir": "divider",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DividerAnatomy = defineStyleAnatomy({\r\n    divider: cva([\r\n        \"UI-Divider__divider\",\r\n        \"w-full border-gray-200 dark:border-gray-700\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Divider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DividerProps extends React.ComponentPropsWithRef<\"hr\">, ComponentWithAnatomy<typeof DividerAnatomy> {\r\n}\r\n\r\nexport const Divider: React.FC<DividerProps> = React.forwardRef<HTMLHRElement, DividerProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        dividerClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <hr className={cn(DividerAnatomy.divider(), dividerClassName, className)} {...rest} ref={ref}/>\r\n    )\r\n\r\n})\r\n\r\nDivider.displayName = \"Divider\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "divider",
        "content": "export * from \"./divider\"\r\nexport * from \"./divider-with-label\"\r\n"
      }
    ]
  },
  {
    "component": "dropdown-menu",
    "name": "DropdownMenu",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [
      "divider",
      "modal"
    ],
    "files": [
      {
        "name": "dropdown-menu.tsx",
        "dir": "dropdown-menu",
        "content": "\"use client\"\r\n\r\nimport React, { Fragment } from \"react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy, getChildDisplayName, useMediaQuery } from \"../core\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport { Menu, Transition } from \"@headlessui/react\"\r\nimport { Divider, DividerProps } from \"../divider\"\r\nimport { Modal, ModalProps } from \"../modal\"\r\nimport { useDropdownOutOfBounds } from \"./use-dropdown-out-of-bounds\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DropdownMenuAnatomy = defineStyleAnatomy({\r\n    menu: cva([\r\n        \"UI-DropdownMenu__menu\",\r\n        \"relative inline-block text-left\",\r\n    ]),\r\n    dropdown: cva([\r\n        \"UI-DropdownMenu__dropdown\",\r\n        \"bg-[--paper] border border-[--border] p-1\",\r\n        \"absolute z-20 mt-2 w-56 rounded-[--radius] shadow-md focus:outline-none space-y-1\",\r\n    ], {\r\n        variants: {\r\n            top: { true: \"\", right: \"\" },\r\n            bottom: { true: \"\", right: \"\" },\r\n            left: { true: \"\", right: \"\" },\r\n            right: { true: \"\", right: \"\" },\r\n        },\r\n        compoundVariants: [\r\n            { bottom: false, className: \"origin-top-right right-0\" },\r\n            { bottom: true, className: \"origin-bottom-right\" },\r\n            { left: true, className: \"left-0\" },\r\n            { bottom: true, left: true, right: false, className: \"origin-bottom-right left-0 bottom-0\" },\r\n            { right: true, bottom: true, left: false, className: \"origin-bottom-right right-0 bottom-0\" },\r\n        ]\r\n    }),\r\n    mobileDropdown: cva([\r\n        \"DropdownMenu__mobileDropdown\",\r\n        \"mt-2 space-y-1\"\r\n    ]),\r\n    mobilePanel: cva([\r\n        \"DropdownMenu__mobilePanel\",\r\n        \"pt-2 pb-2 pl-4 pr-12\"\r\n    ])\r\n})\r\n\r\nexport const DropdownMenuItemAnatomy = defineStyleAnatomy({\r\n    item: cva([\"UI-DropdownMenu__item transition\",\r\n        \"text-gray-800 dark:text-gray-200 hover:text-black dark:hover:text-white\",\r\n        \"font-medium group flex w-full items-center rounded-[--radius] px-2 py-2 text-sm gap-2\"\r\n    ], {\r\n        variants: {\r\n            active: {\r\n                true: \"bg-[--highlight]\",\r\n                false: null\r\n            }\r\n        },\r\n        defaultVariants: { active: false }\r\n    })\r\n})\r\n\r\nexport const DropdownMenuGroupAnatomy = defineStyleAnatomy({\r\n    group: cva([\"UI-DropdownMenu__group group\",\r\n        \"text-gray-800 dark:text-gray-200\",\r\n    ]),\r\n    title: cva([\"UI-DropdownMenu_title text-[--muted] text-sm font-medium px-2 py-1\"]),\r\n    content: cva([\"UI-DropdownMenu_content\"])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DropdownMenu\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DropdownMenuProps\r\n    extends React.ComponentPropsWithRef<\"div\">,\r\n        ComponentWithAnatomy<typeof DropdownMenuAnatomy>,\r\n        ComponentWithAnatomy<typeof DropdownMenuItemAnatomy>,\r\n        VariantProps<typeof DropdownMenuAnatomy.dropdown> {\r\n    trigger: React.ReactElement,\r\n    mobilePlacement?: ModalProps[\"mobilePlacement\"]\r\n}\r\n\r\nconst _DropdownMenu = (props: DropdownMenuProps) => {\r\n\r\n    const {\r\n        children,\r\n        trigger,\r\n        menuClassName,\r\n        dropdownClassName,\r\n        mobileDropdownClassName,\r\n        mobilePanelClassName,\r\n        itemClassName,\r\n        className,\r\n        mobilePlacement = \"bottom\",\r\n        ...rest\r\n    } = props\r\n\r\n    const isMobile = useMediaQuery(\"(max-width: 768px)\")\r\n\r\n    const [triggerRef, _, triggerSize] = useDropdownOutOfBounds()\r\n    const [componentRef, outOfBounds] = useDropdownOutOfBounds()\r\n\r\n    // Pass `itemClassName` to every child\r\n    const itemsWithProps = React.useMemo(() => React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child) && (\r\n            getChildDisplayName(child) === \"DropdownMenuItem\" ||\r\n            getChildDisplayName(child) === \"DropdownMenuGroup\" ||\r\n            getChildDisplayName(child) === \"DropdownMenuLink\")\r\n        ) {\r\n            return React.cloneElement(child, { itemClassName } as any)\r\n        }\r\n        return child\r\n    }), [children])\r\n\r\n    const _trigger = React.cloneElement(trigger, { ref: triggerRef })\r\n\r\n    return (\r\n        <Menu\r\n            as=\"div\"\r\n            className={cn(\r\n                DropdownMenuAnatomy.menu(),\r\n                menuClassName,\r\n                className\r\n            )}\r\n            {...rest}\r\n        >\r\n            {({ open, close }) => (\r\n                <>\r\n                    <Menu.Button as={Fragment}>\r\n                        {_trigger}\r\n                    </Menu.Button>\r\n                    {/*Desktop*/}\r\n                    {!isMobile && <Transition\r\n                        as={Fragment}\r\n                        enter=\"transition ease-out duration-100\"\r\n                        enterFrom=\"transform opacity-0 scale-95\"\r\n                        enterTo=\"transform opacity-100 scale-100\"\r\n                        leave=\"transition ease-in duration-75\"\r\n                        leaveFrom=\"transform opacity-100 scale-100\"\r\n                        leaveTo=\"transform opacity-0 scale-95\"\r\n                    >\r\n                        <Menu.Items\r\n                            ref={componentRef}\r\n                            className={cn(\r\n                                DropdownMenuAnatomy.dropdown({\r\n                                    top: outOfBounds.top > 0,\r\n                                    bottom: outOfBounds.bottom > 0,\r\n                                    left: outOfBounds.left > 0,\r\n                                    right: outOfBounds.right > 0\r\n                                }),\r\n                                dropdownClassName,\r\n                            )}\r\n                            style={{\r\n                                bottom: outOfBounds.bottom > 0 ? `${triggerSize.height + 8}px` : undefined\r\n                            }}\r\n                        >\r\n                            {itemsWithProps}\r\n                        </Menu.Items>\r\n                    </Transition>}\r\n                    {/*Mobile*/}\r\n                    {isMobile && <Modal\r\n                        isOpen={open}\r\n                        onClose={close}\r\n                        isClosable\r\n                        className=\"block md:hidden\"\r\n                        panelClassName={cn(DropdownMenuAnatomy.mobilePanel(), mobilePanelClassName)}\r\n                        mobilePlacement={mobilePlacement}\r\n                    >\r\n                        <Menu.Items className={cn(DropdownMenuAnatomy.mobileDropdown(), mobileDropdownClassName)}>\r\n                            {itemsWithProps}\r\n                        </Menu.Items>\r\n                    </Modal>}\r\n                </>\r\n            )}\r\n        </Menu>\r\n    )\r\n\r\n}\r\n\r\n_DropdownMenu.displayName = \"DropdownMenu\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DropdownMenu.Item\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DropdownMenuItemProps extends React.ComponentPropsWithRef<\"button\">, ComponentWithAnatomy<typeof DropdownMenuItemAnatomy> {\r\n}\r\n\r\nconst DropdownMenuItem: React.FC<DropdownMenuItemProps> = React.forwardRef<HTMLButtonElement, DropdownMenuItemProps>((props, ref) => {\r\n\r\n    const { children, itemClassName, className, ...rest } = props\r\n\r\n    return <Menu.Item as={Fragment}>\r\n        {({ active }) => (\r\n            <button\r\n                className={cn(DropdownMenuItemAnatomy.item({ active }), itemClassName, className)}\r\n                ref={ref}\r\n                {...rest}\r\n            >\r\n                {children}\r\n            </button>\r\n        )}\r\n    </Menu.Item>\r\n\r\n})\r\n\r\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DropdownMenu.Link\r\n * - You can change the `a` element to a `Link` if you are using Next.js\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DropdownMenuLinkProps extends React.ComponentPropsWithRef<\"a\">, ComponentWithAnatomy<typeof DropdownMenuItemAnatomy> {\r\n    href: string\r\n}\r\n\r\nconst DropdownMenuLink: React.FC<DropdownMenuLinkProps> = React.forwardRef<HTMLAnchorElement, DropdownMenuLinkProps>((props, ref) => {\r\n\r\n    const { children, className, itemClassName, href, ...rest } = props\r\n\r\n    return <Menu.Item as={Fragment}>\r\n        {({ active }) => (\r\n            <a\r\n                href={href}\r\n                className={cn(DropdownMenuItemAnatomy.item({ active }), itemClassName, className)}\r\n                ref={ref}\r\n                {...rest}\r\n            >\r\n                {children}\r\n            </a>\r\n        )}\r\n    </Menu.Item>\r\n\r\n})\r\n\r\nDropdownMenuLink.displayName = \"DropdownMenuLink\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DropdownMenu.Group\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DropdownMenuGroupProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof DropdownMenuGroupAnatomy>,\r\n    ComponentWithAnatomy<typeof DropdownMenuItemAnatomy> {\r\n    title?: string\r\n}\r\n\r\nconst DropdownMenuGroup: React.FC<DropdownMenuGroupProps> = React.forwardRef<HTMLDivElement, DropdownMenuGroupProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        groupClassName,\r\n        title,\r\n        titleClassName,\r\n        contentClassName,\r\n        itemClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    // Pass `itemClassName` to every child\r\n    const itemsWithProps = React.useMemo(() => React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child)) {\r\n            return React.cloneElement(child, { itemClassName } as any)\r\n        }\r\n        return child\r\n    }), [children])\r\n\r\n    return <div\r\n        className={cn(DropdownMenuGroupAnatomy.group(), groupClassName, className)}\r\n        aria-label={title}\r\n        ref={ref}\r\n        {...rest}\r\n    >\r\n        {title && <div className={cn(DropdownMenuGroupAnatomy.title(), titleClassName)} aria-labelledby={title}>\r\n            {title}\r\n        </div>}\r\n        <div className={cn(DropdownMenuGroupAnatomy.content(), contentClassName)}>\r\n            {itemsWithProps}\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * DropdownMenu.Divider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface DropdownMenuDivider extends DividerProps {\r\n}\r\n\r\nconst DropdownMenuDivider: React.FC<DropdownMenuDivider> = React.forwardRef<HTMLHRElement, DropdownMenuDivider>(\r\n    (props, ref) => {\r\n\r\n        return <Divider {...props} ref={ref}/>\r\n\r\n    }\r\n)\r\n\r\nDropdownMenuDivider.displayName = \"DropdownMenuDivider\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_DropdownMenu.Item = DropdownMenuItem\r\n_DropdownMenu.Link = DropdownMenuLink\r\n_DropdownMenu.Group = DropdownMenuGroup\r\n_DropdownMenu.Divider = DropdownMenuDivider\r\n\r\nexport const DropdownMenu = createPolymorphicComponent<\"div\", DropdownMenuProps, {\r\n    Item: typeof DropdownMenuItem\r\n    Link: typeof DropdownMenuLink\r\n    Group: typeof DropdownMenuGroup\r\n    Divider: typeof DropdownMenuDivider\r\n}>(_DropdownMenu)\r\n\r\nDropdownMenu.displayName = \"DropdownMenu\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "dropdown-menu",
        "content": "export * from \"./dropdown-menu\"\r\n"
      },
      {
        "name": "use-dropdown-out-of-bounds.ts",
        "dir": "dropdown-menu",
        "content": "import React, { useCallback, useState } from \"react\"\r\nimport { useEventListener, useIsomorphicLayoutEffect } from \"../core\"\r\n\r\ninterface Size {\r\n    width: number\r\n    height: number\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function useDropdownOutOfBounds<T extends HTMLElement = HTMLDivElement>(): [\r\n    (node: T | null) => void,\r\n    { top: number, bottom: number, left: number, right: number },\r\n    Size,\r\n] {\r\n    // Mutable values like 'ref.current' aren't valid dependencies\r\n    // because mutating them doesn't re-render the component.\r\n    // Instead, we use a state as a ref to be reactive.\r\n    const [ref, setRef] = useState<T | null>(null)\r\n    const [size, setSize] = useState<Size>({\r\n        width: 0,\r\n        height: 0,\r\n    })\r\n    const [outOfBounds, setOutOfBounds] = React.useState({\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0\r\n    })\r\n\r\n    const handleSize = useCallback(() => {\r\n\r\n        const windowWidth = Math.min(document.documentElement.clientWidth, window.innerWidth)\r\n        const windowHeight = Math.min(document.documentElement.clientHeight, window.innerHeight)\r\n\r\n        const rect = ref?.getBoundingClientRect()\r\n\r\n        if (rect && ref?.offsetHeight && ref.offsetWidth && ref?.offsetWidth > 0 && ref?.offsetHeight > 0) {\r\n            let directions = {\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n\r\n            if (rect.top < 0) {\r\n                directions.top = Math.abs(0 - rect.top)\r\n            }\r\n\r\n            if (rect.bottom > windowHeight) {\r\n                directions.bottom = Math.abs(windowHeight - rect.bottom)\r\n            }\r\n\r\n            if (rect.left < 0) {\r\n                directions.left = Math.abs(0 - rect.left)\r\n            }\r\n\r\n            if (rect.right > windowWidth) {\r\n                directions.right = Math.abs(windowWidth - rect.right)\r\n            }\r\n\r\n            // Update values only when it is out of bounds\r\n            // This causes the dropdown menu to retain its changed position\r\n            if (directions.top > 0 || directions.left > 0 || directions.bottom > 0 || directions.right > 0) {\r\n                setOutOfBounds(directions)\r\n            }\r\n        }\r\n\r\n        setSize({\r\n            width: ref?.offsetWidth || 0,\r\n            height: ref?.offsetHeight || 0,\r\n        })\r\n\r\n    }, [ref])\r\n\r\n    useEventListener(\"resize\", handleSize)\r\n    useEventListener(\"click\", handleSize)\r\n\r\n    useIsomorphicLayoutEffect(() => {\r\n        handleSize()\r\n    }, [ref])\r\n\r\n    return [setRef, outOfBounds, size]\r\n}\r\n"
      }
    ]
  },
  {
    "component": "file-upload",
    "name": "FileUpload",
    "dependencies": [
      [
        "react-dropzone",
        "^14.2.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "button"
    ],
    "files": [
      {
        "name": "dropzone.tsx",
        "dir": "file-upload",
        "content": "\"use client\"\r\n\r\nimport React, { useCallback, useEffect, useId, useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\r\nimport { Accept, FileError, useDropzone } from \"react-dropzone\"\r\nimport { IconButton } from \"../button\"\r\nimport locales from \"./locales.json\"\r\nimport { humanFileSize } from \"./helpers\"\r\nimport { FileUploadHandler } from \"./use-file-upload-handler\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const DropzoneAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Dropzone__root\",\r\n        \"mb-2 cursor-pointer hover:text-[--text-color] flex items-center justify-center p-4 border border-[--border] rounded-[--radius] border-dashed\",\r\n        \"gap-3 text-sm sm:text-base\",\r\n        \"outline-none ring-[--ring] focus-visible:ring-2\",\r\n        \"text-[--muted] transition ease-in-out hover:border-[--text-color]\",\r\n        \"data-[drag-active=true]:border-brand-500\",\r\n        \"data-[drag-reject=true]:border-[--red]\",\r\n    ]),\r\n    list: cva([\r\n        \"UI-Dropzone__list\",\r\n        \"flex rounded-md flex-wrap divide-y divide-[--border]\"\r\n    ]),\r\n    listItem: cva([\r\n        \"UI-Dropzone__listItem\",\r\n        \"flex items-center justify-space-between relative p-1 hover:bg-[--highlight] w-full overflow-hidden\"\r\n    ]),\r\n    listItemDetailsContainer: cva([\r\n        \"UI-Dropzone__listItemDetailsContainer\",\r\n        \"flex items-center gap-2 truncate w-full\"\r\n    ]),\r\n    listItemTitle: cva([\r\n        \"UI-Dropzone__listItemTitle\",\r\n        \"truncate max-w-[180px] text-[.9rem]\"\r\n    ]),\r\n    listItemSize: cva([\r\n        \"UI-Dropzone__listItemSize\",\r\n        \"text-xs uppercase text-center font-semibold align-center text-[--muted]\"\r\n    ]),\r\n    listItemRemoveButton: cva([\r\n        \"UI-Dropzone__listItemRemoveButton\",\r\n        \"ml-2 rounded-full\"\r\n    ]),\r\n    imagePreviewGrid: cva([\r\n        \"UI-Dropzone__imagePreviewGrid\",\r\n        \"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-5 xl:grid-cols-8 h-full gap-x-2 gap-y-2\"\r\n    ]),\r\n    imagePreviewContainer: cva([\r\n        \"UI-Dropzone__imagePreviewContainer\",\r\n        \"col-span-1 row-span-1 aspect-square\"\r\n    ]),\r\n    imagePreview: cva([\r\n        \"UI-Dropzone__imagePreview\",\r\n        \"relative bg-transparent border border-[--border] h-full bg-center bg-no-repeat bg-contain rounded-md overflow-hidden\",\r\n        \"col-span-1 row-span-1\"\r\n    ]),\r\n    imagePreviewRemoveButton: cva([\r\n        \"UI-Dropzone__imagePreviewRemoveButton\",\r\n        \"absolute top-1 right-1\"\r\n    ]),\r\n    fileIcon: cva([\r\n        \"UI-Dropzone__fileIcon\",\r\n        \"w-5 h-5 flex-none\"\r\n    ]),\r\n\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Dropzone\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface DropzoneProps extends Omit<React.ComponentPropsWithRef<\"div\">, \"onChange\" | \"onDrop\" | \"onError\">,\r\n    ComponentWithAnatomy<typeof DropzoneAnatomy>,\r\n    BasicFieldOptions {\r\n    onChange?: (files: File[]) => void,\r\n    name?: string\r\n    withImagePreview?: boolean\r\n    multiple?: boolean\r\n    uploadHandler?: FileUploadHandler\r\n    /**/\r\n    accept?: Accept\r\n    minSize?: number\r\n    maxSize?: number\r\n    maxFiles?: number\r\n    preventDropOnDocument?: boolean\r\n    noClick?: boolean\r\n    noDrag?: boolean\r\n    onError?: (err: Error) => void\r\n    validator?: <T extends File>(file: T) => FileError | FileError[] | null\r\n}\r\n\r\nexport const Dropzone: React.FC<DropzoneProps> = React.forwardRef<HTMLDivElement, DropzoneProps>((props, ref) => {\r\n\r\n    const { locale: lng } = useUILocaleConfig()\r\n\r\n    const [{\r\n        children,\r\n        rootClassName,\r\n        className,\r\n        listClassName,\r\n        listItemClassName,\r\n        listItemDetailsContainerClassName,\r\n        listItemRemoveButtonClassName,\r\n        listItemSizeClassName,\r\n        listItemTitleClassName,\r\n        imagePreviewGridClassName,\r\n        imagePreviewContainerClassName,\r\n        imagePreviewRemoveButtonClassName,\r\n        imagePreviewClassName,\r\n        fileIconClassName,\r\n        onChange,\r\n        withImagePreview,\r\n        uploadHandler,\r\n        /**/\r\n        accept,\r\n        minSize,\r\n        maxSize,\r\n        maxFiles,\r\n        preventDropOnDocument,\r\n        noClick,\r\n        noDrag,\r\n        onError,\r\n        validator,\r\n        multiple,\r\n        ...rest\r\n    }, basicFieldProps] = extractBasicFieldProps(props, useId())\r\n\r\n    const _multiple = (uploadHandler?.multiple !== undefined) ? uploadHandler.multiple : multiple\r\n\r\n    // Keep track of files\r\n    const [files, setFiles] = useState<File[]>([])\r\n\r\n    // When the user drops/chooses files\r\n    const onDrop = useCallback((acceptedFiles: File[]) => {\r\n        // Emit the new files\r\n        handleChange(acceptedFiles)\r\n        // Update files - add the preview\r\n        setFiles(acceptedFiles.map((file: File) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n        })))\r\n    }, [])\r\n\r\n    // When the user removes a file\r\n    const handleRemove = useCallback((file: number) => {\r\n        setFiles(p => {\r\n            const newFiles = [...p]\r\n            newFiles.splice(file, 1)\r\n            handleChange(newFiles) // Emit the new files\r\n            return newFiles\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = useCallback((files: File[]) => {\r\n        if (onChange) {\r\n            onChange(files)\r\n            if (uploadHandler) {\r\n                uploadHandler.populateFiles(files)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject,\r\n        acceptedFiles,\r\n    } = useDropzone({\r\n        onDrop,\r\n        multiple: _multiple,\r\n        minSize,\r\n        maxSize,\r\n        maxFiles,\r\n        preventDropOnDocument,\r\n        noClick,\r\n        noDrag,\r\n        onError: (e) => {\r\n            onError && onError(e)\r\n            console.log(e)\r\n        },\r\n        validator,\r\n        accept,\r\n    })\r\n\r\n    // clean up\r\n    useEffect(() => () => {\r\n        files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n    }, [files])\r\n\r\n    return (\r\n        <BasicField\r\n            {...basicFieldProps}\r\n        >\r\n            <div\r\n                className={cn(\r\n                    DropzoneAnatomy.root(),\r\n                    rootClassName,\r\n                    className,\r\n                )}\r\n                data-drag-active={isDragActive}\r\n                data-drag-reject={isDragReject}\r\n                {...getRootProps()}\r\n            >\r\n                <input\r\n                    id={basicFieldProps.id}\r\n                    name={basicFieldProps.name ?? \"files\"}\r\n                    {...getInputProps()}\r\n                />\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                     strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\">\r\n                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\r\n                    <polyline points=\"7 10 12 15 17 10\"/>\r\n                    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\"/>\r\n                </svg>\r\n                <span>\r\n                    {locales[\"download\"][lng]}\r\n                </span>\r\n            </div>\r\n\r\n            {maxSize && <div className={\"text-sm text-[--muted] font-medium\"}>{`‚â§`} {humanFileSize(maxSize, 0)}</div>}\r\n\r\n            {!withImagePreview && <div className={cn(DropzoneAnatomy.list(), listClassName)}>\r\n                {files?.map((file: any, index) => {\r\n\r\n                    let Icon: React.ReactElement\r\n\r\n                    if ([\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/webm\"].includes(file.type)) {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                            <polyline points=\"14 2 14 8 20 8\"/>\r\n                            <circle cx=\"10\" cy=\"13\" r=\"2\"/>\r\n                            <path d=\"m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22\"/>\r\n                        </svg>\r\n                    } else if (file.type.includes(\"video\")) {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                            <polyline points=\"14 2 14 8 20 8\"/>\r\n                            <path d=\"m10 11 5 3-5 3v-6Z\"/>\r\n                        </svg>\r\n                    } else if (file.type.includes(\"audio\")) {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path d=\"M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3\"/>\r\n                            <polyline points=\"14 2 14 8 20 8\"/>\r\n                            <path d=\"M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z\"/>\r\n                            <path d=\"M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z\"/>\r\n                            <path d=\"M2 19v-3a6 6 0 0 1 12 0v3\"/>\r\n                        </svg>\r\n                    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\") || file.type.includes(\"txt\") || file.type.includes(\"text\")) {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                            <polyline points=\"14 2 14 8 20 8\"/>\r\n                            <line x1=\"16\" x2=\"8\" y1=\"13\" y2=\"13\"/>\r\n                            <line x1=\"16\" x2=\"8\" y1=\"17\" y2=\"17\"/>\r\n                            <line x1=\"10\" x2=\"8\" y1=\"9\" y2=\"9\"/>\r\n                        </svg>\r\n                    } else if (file.type.includes(\"compressed\") || file.type.includes(\"zip\") || file.type.includes(\"archive\")) {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path\r\n                                d=\"M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6\"/>\r\n                            <circle cx=\"16\" cy=\"19\" r=\"2\"/>\r\n                            <path d=\"M16 11v-1\"/>\r\n                            <path d=\"M16 17v-2\"/>\r\n                        </svg>\r\n                    } else {\r\n                        Icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                    strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                    className={cn(DropzoneAnatomy.fileIcon(), fileIconClassName)}>\r\n                            <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                            <polyline points=\"14 2 14 8 20 8\"/>\r\n                        </svg>\r\n                    }\r\n\r\n                    return (\r\n\r\n                        <div\r\n                            key={file.name}\r\n                            className={cn(DropzoneAnatomy.listItem(), listItemClassName)}\r\n                        >\r\n                            <div className={cn(DropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClassName)}>\r\n                                {Icon}\r\n                                <p className={cn(DropzoneAnatomy.listItemTitle(), listItemTitleClassName)}>{file.name}</p>\r\n                                <p className={cn(DropzoneAnatomy.listItemSize(), listItemSizeClassName)}>{humanFileSize(file.size)}</p>\r\n                            </div>\r\n                            <IconButton\r\n                                size=\"xs\"\r\n                                intent=\"gray-basic\"\r\n                                icon={\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                         stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                         className=\"w-4 h-4\">\r\n                                        <path d=\"M3 6h18\"/>\r\n                                        <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/>\r\n                                        <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\r\n                                        <line x1=\"10\" x2=\"10\" y1=\"11\" y2=\"17\"/>\r\n                                        <line x1=\"14\" x2=\"14\" y1=\"11\" y2=\"17\"/>\r\n                                    </svg>\r\n                                }\r\n                                className={cn(DropzoneAnatomy.listItemRemoveButton(), listItemRemoveButtonClassName)}\r\n                                onClick={() => handleRemove(index)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>}\r\n\r\n            {withImagePreview && <div className={cn(DropzoneAnatomy.imagePreviewGrid(), imagePreviewGridClassName)}>\r\n                {files?.map((file: any, index) => {\r\n                    return (\r\n                        <div className={cn(DropzoneAnatomy.imagePreviewContainer(), imagePreviewContainerClassName)}>\r\n                            <div\r\n                                key={file.name}\r\n                                className={cn(DropzoneAnatomy.imagePreview(), imagePreviewClassName)}\r\n                                style={{\r\n                                    backgroundImage: file ? `url(${file.preview})` : undefined,\r\n                                }}\r\n                            >\r\n                                <IconButton\r\n                                    icon={\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                             stroke=\"currentColor\"\r\n                                             strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-4 h-4\">\r\n                                            <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"/>\r\n                                            <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"/>\r\n                                        </svg>\r\n                                    }\r\n                                    intent=\"alert\"\r\n                                    size=\"xs\"\r\n                                    className={cn(DropzoneAnatomy.imagePreviewRemoveButton(), imagePreviewRemoveButtonClassName)}\r\n                                    onClick={() => handleRemove(index)}\r\n                                />\r\n                            </div>\r\n                            <div className={cn(DropzoneAnatomy.listItemDetailsContainer(), listItemDetailsContainerClassName)}>\r\n                                <p className={cn(DropzoneAnatomy.listItemTitle(), listItemTitleClassName)}>{file.name}</p>\r\n                                <p className={cn(DropzoneAnatomy.listItemSize(), listItemSizeClassName)}>{humanFileSize(file.size)}</p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>}\r\n\r\n        </BasicField>\r\n    )\r\n\r\n})\r\n\r\nDropzone.displayName = \"Dropzone\"\r\n"
      },
      {
        "name": "helpers.ts",
        "dir": "file-upload",
        "content": "/* -------------------------------------------------------------------------------------------------\r\n * Human readable size formatting\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function humanFileSize(size: number, precision = 2): string {\r\n    const i = Math.floor(Math.log(size) / Math.log(1024))\r\n    return (size / Math.pow(1024, i)).toFixed(precision).toString() + [\"bytes\", \"Kb\", \"Mb\", \"Gb\", \"Tb\"][i]\r\n}\r\n\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "file-upload",
        "content": "export * from \"./dropzone\"\r\nexport * from \"./use-file-upload-handler\"\r\n"
      },
      {
        "name": "locales.json",
        "dir": "file-upload",
        "content": "{\n  \"download\": {\n    \"fr\": \"Cliquer pour t√©l√©charger ou glisser-d√©poser\",\n    \"en\": \"Click or drag and drop to download\"\n  }\n}\n"
      },
      {
        "name": "use-file-upload-handler.ts",
        "dir": "file-upload",
        "content": "import { useState } from \"react\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Types\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n// TODO: Type of the returned object from your implementation\r\n// eg: type FileUploadObject = { url: string, ext: string }\r\ntype FileUploadObject = any\r\n\r\ntype FileUploadReturn<A extends \"single\" | \"multiple\"> = A extends \"single\" ? FileUploadObject : FileUploadObject[]\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Hook\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport function useFileUploadHandler<A extends \"single\" | \"multiple\">(singleOrMultiple: A) {\r\n\r\n    const [files, setFiles] = useState<File[]>([])\r\n    const [isUploading, setIsUploading] = useState(false)\r\n    const [uploaded, setIsUploaded] = useState(false)\r\n\r\n    return {\r\n        hasFiles: files.length > 0,\r\n        isUploading,\r\n        uploaded,\r\n        multiple: singleOrMultiple === \"multiple\",\r\n\r\n        populateFiles: (files: File[] | undefined | null) => {\r\n            setFiles(files ?? [])\r\n        },\r\n\r\n        removeFiles: () => {\r\n            setFiles([])\r\n        },\r\n\r\n        /**\r\n         * @example\r\n         * type FileUploadObject = { url: string, ext: string }\r\n         * const res = await profilePictureUploader.uploadSingleFile()\r\n         * if (res) mutate({ ...data, picture: res.url })\r\n         */\r\n        uploadFiles: async () => {\r\n\r\n            let results: FileUploadReturn<A> | null = null\r\n\r\n            setIsUploading(true)\r\n\r\n            // TODO: Uncomment the code below with your own implementation of `uploadFiles`\r\n            // const res = await uploadFiles(files)\r\n            // if (!res.error && !!res.data) {\r\n            //     setIsUploading(false)\r\n            //     setIsUploaded(true)\r\n            //     results = objects!\r\n            // }\r\n\r\n            return results\r\n\r\n        },\r\n    }\r\n\r\n}\r\n\r\nexport type FileUploadHandler = ReturnType<typeof useFileUploadHandler>\r\n"
      }
    ]
  },
  {
    "component": "horizontal-nav",
    "name": "HorizontalNav",
    "dependencies": [
      [
        "@radix-ui/react-navigation-menu",
        "^1.1.3",
        ""
      ]
    ],
    "family": [
      "modal",
      "vertical-nav"
    ],
    "files": [
      {
        "name": "horizontal-nav.tsx",
        "dir": "horizontal-nav",
        "content": "\"use client\"\r\n\r\nimport React, { useState } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\nimport type { NavigationMenuProps as NavigationMenuPrimitiveProps } from \"@radix-ui/react-navigation-menu\"\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\r\nimport { Drawer } from \"../modal\"\r\nimport { VerticalNav } from \"../vertical-nav\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const HorizontalNavAnatomy = defineStyleAnatomy({\r\n    nav: cva([\r\n        \"UI-HorizontalNav__nav\",\r\n        \"relative inline-block z-10 max-w-full\"\r\n    ]),\r\n    item: cva([\r\n        \"UI-HorizontalNav__item\",\r\n        \"group/item inline-flex items-center h-full select-none rounded-[--radius] p-3 leading-none no-underline outline-none transition-colors\",\r\n        \"text-[--muted] hover:bg-[--highlight] hover:text-[--text-color] focus:bg-[--highlight]\",\r\n        \"data-[selected=true]:text-[--brand]\",\r\n        \"text-sm font-[600] leading-none\"\r\n    ]),\r\n    icon: cva([\r\n        \"UI-VerticalNav__icon\",\r\n        \"flex-shrink-0 -ml-1 mr-3 h-6 w-6\",\r\n        \"text-[--muted] group-hover/item:text-[--text-color] data-[selected=true]:text-[--brand] data-[selected=true]:group-hover/item:text-[--brand]\"\r\n    ]),\r\n    parentItemChevron: cva([\r\n        \"UI-VerticalNav__parentItemChevron\",\r\n        \"ml-2 w-4 h-4 transition-transform duration-200 group-hover/item:rotate-180\",\r\n    ]),\r\n    desktopList: cva([\r\n        \"UI-VerticalNav__desktopList\",\r\n        \"inline-block space-x-1\"\r\n    ], {\r\n        variants: {\r\n            switchToDrawerBelow: {\r\n                sm: \"hidden sm:flex\",\r\n                md: \"hidden md:flex\",\r\n                lg: \"hidden lg:flex\",\r\n                never: \"flex\"\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            switchToDrawerBelow: \"md\"\r\n        }\r\n    }),\r\n    mobileTrigger: cva([\r\n        \"UI-VerticalNav__mobileTrigger\",\r\n        \"items-center justify-center rounded-[--radius] p-2 text-[--muted] hover:bg-[--highlight] hover:text-[--text-color]\",\r\n        \"focus:outline-none focus:ring-2 focus:ring-inset focus:ring-[--ring]\"\r\n    ], {\r\n        variants: {\r\n            switchToDrawerBelow: {\r\n                sm: \"inline-flex sm:hidden\",\r\n                md: \"inline-flex md:hidden\",\r\n                lg: \"inline-flex lg:hidden\",\r\n                never: \"hidden\"\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            switchToDrawerBelow: \"md\"\r\n        }\r\n    }),\r\n    menuContainer: cva([\r\n        \"UI-HorizontalNav__menuContainer\",\r\n        \"left-0 top-0 overflow-hidden p-2 data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out\",\r\n        \"data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52\",\r\n        \"data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52\",\r\n        \"data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-full\",\r\n    ]),\r\n    viewport: cva([\r\n        \"UI-HorizontalNav__viewport\",\r\n        \"relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)]\",\r\n        \"w-full overflow-hidden rounded-[--radius] shadow-lg border border-[--border] bg-[--paper] text-[--text-color]\",\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95\",\r\n        \"data-[state=open]:zoom-in-90\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * HorizontalNav\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface HorizontalNavProps extends ComponentWithAnatomy<typeof HorizontalNavAnatomy>,\r\n    NavigationMenuPrimitiveProps,\r\n    VariantProps<typeof HorizontalNavAnatomy.desktopList> {\r\n    children?: React.ReactNode\r\n    items: {\r\n        name: string,\r\n        href?: string | null | undefined,\r\n        icon?: ((props: any) => JSX.Element) | null | undefined,\r\n        isCurrent?: boolean,\r\n        addon?: React.ReactNode\r\n        content?: React.ReactNode\r\n    }[],\r\n    // Add components to the mobile drawer. The content is appended below the menu\r\n    drawerContent?: React.ReactNode\r\n}\r\n\r\nexport const HorizontalNav = React.forwardRef<HTMLDivElement, HorizontalNavProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        navClassName,\r\n        iconClassName,\r\n        itemClassName,\r\n        desktopListClassName,\r\n        parentItemChevronClassName,\r\n        mobileTriggerClassName,\r\n        menuContainerClassName,\r\n        viewportClassName,\r\n        className,\r\n        switchToDrawerBelow,\r\n        drawerContent,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    const [mobileOpen, setMobileOpen] = useState(false)\r\n\r\n    const Icon = ({ item }: { item: HorizontalNavProps[\"items\"][number] }) => item.icon ? <item.icon\r\n        className={cn(\r\n            HorizontalNavAnatomy.icon(),\r\n            iconClassName,\r\n        )}\r\n        aria-hidden=\"true\"\r\n        data-selected={item.isCurrent}\r\n    /> : null\r\n\r\n    return (\r\n        <NavigationMenuPrimitive.Root\r\n            ref={ref}\r\n            className={cn(\r\n                HorizontalNavAnatomy.nav(),\r\n                navClassName,\r\n                className\r\n            )}\r\n            {...rest}\r\n        >\r\n            {/*Mobile*/}\r\n            <button\r\n                className={cn(\r\n                    HorizontalNavAnatomy.mobileTrigger({\r\n                        switchToDrawerBelow\r\n                    }),\r\n                    mobileTriggerClassName,\r\n                )}\r\n                onClick={() => setMobileOpen(s => !s)}\r\n            >\r\n                <span className=\"sr-only\">Open main menu</span>\r\n                {mobileOpen ? (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\">\r\n                        <line x1=\"18\" x2=\"6\" y1=\"6\" y2=\"18\"></line>\r\n                        <line x1=\"6\" x2=\"18\" y1=\"6\" y2=\"18\"></line>\r\n                    </svg>\r\n                ) : (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"block h-6 w-6\">\r\n                        <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\"></line>\r\n                        <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\"></line>\r\n                    </svg>\r\n                )}\r\n            </button>\r\n            <Drawer isOpen={mobileOpen} onClose={() => setMobileOpen(false)} placement=\"left\" isClosable>\r\n                <VerticalNav items={items} className=\"mt-2\"/>\r\n                {drawerContent}\r\n            </Drawer>\r\n\r\n            {/*Desktop*/}\r\n            <NavigationMenuPrimitive.List\r\n                className={cn(\r\n                    HorizontalNavAnatomy.desktopList({\r\n                        switchToDrawerBelow\r\n                    }),\r\n                    desktopListClassName\r\n                )}\r\n            >\r\n                {items.map(item => {\r\n\r\n                    if (item.content) {\r\n                        return (\r\n                            <NavigationMenuPrimitive.Item key={item.name}>\r\n                                <NavigationMenuPrimitive.Trigger\r\n                                    className={cn(\r\n                                        HorizontalNavAnatomy.item(),\r\n                                        itemClassName\r\n                                    )}\r\n                                    data-selected={item.isCurrent}\r\n                                >\r\n                                    <Icon item={item}/>\r\n                                    <span className=\"flex-none\">{item.name}</span>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                                         stroke=\"currentColor\"\r\n                                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                         className={cn(HorizontalNavAnatomy.parentItemChevron(), parentItemChevronClassName)}\r\n                                         data-open={`${open}`}\r\n                                    >\r\n                                        <polyline points=\"6 9 12 15 18 9\"/>\r\n                                    </svg>\r\n                                </NavigationMenuPrimitive.Trigger>\r\n                                <NavigationMenuPrimitive.Content\r\n                                    ref={ref}\r\n                                    className={cn(\r\n                                        HorizontalNavAnatomy.menuContainer(),\r\n                                        menuContainerClassName\r\n                                    )}\r\n                                >\r\n                                    <div className={\"w-full\"}>\r\n                                        {item.content && item.content}\r\n                                    </div>\r\n                                </NavigationMenuPrimitive.Content>\r\n                            </NavigationMenuPrimitive.Item>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <NavigationMenuPrimitive.Item key={item.name}>\r\n                                <NavigationMenuPrimitive.NavigationMenuLink asChild>\r\n                                    <a\r\n                                        href={item.href ?? \"#\"}\r\n                                        className={cn(\r\n                                            HorizontalNavAnatomy.item(),\r\n                                            itemClassName\r\n                                        )}\r\n                                        data-selected={item.isCurrent}\r\n                                    >\r\n                                        <Icon item={item}/>\r\n                                        <span className=\"flex-none\">{item.name}</span>\r\n                                        {item.addon}\r\n                                    </a>\r\n                                </NavigationMenuPrimitive.NavigationMenuLink>\r\n                            </NavigationMenuPrimitive.Item>\r\n                        )\r\n                    }\r\n\r\n                })}\r\n            </NavigationMenuPrimitive.List>\r\n            <div className={cn(\"absolute left-0 top-full w-full flex justify-center\")}>\r\n                <NavigationMenuPrimitive.Viewport\r\n                    className={cn(\r\n                        HorizontalNavAnatomy.viewport(),\r\n                        viewportClassName\r\n                    )}\r\n                />\r\n            </div>\r\n        </NavigationMenuPrimitive.Root>\r\n    )\r\n\r\n})\r\n\r\nHorizontalNav.displayName = \"HorizontalNav\"\r\n"
      },
      {
        "name": "index.tsx",
        "dir": "horizontal-nav",
        "content": "export * from \"./horizontal-nav\"\r\n"
      }
    ]
  },
  {
    "component": "input",
    "name": "Input",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "input",
        "content": "export * from \"./input-styles\"\n"
      },
      {
        "name": "input-styles.tsx",
        "dir": "input",
        "content": "import { cn, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputAnatomy = defineStyleAnatomy({\n    input: cva([\n        \"UI-Input__input\",\n        \"w-full rounded-[--radius]\",\n        \"bg-[--paper] border-[--border] placeholder-gray-400 dark:placeholder-gray-600\",\n        \"disabled:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed\",\n        \"focus:border-brand-500 focus:ring-1 focus:ring-[--ring]\",\n        \"outline-none focus:outline-none\",\n        \"transition duration-150\",\n        \"shadow-sm\",\n    ], {\n        variants: {\n            size: {\n                sm: \"px-2 py-1.5 text-sm\",\n                md: \"\",\n                lg: \"px-4 py-3 text-md\",\n            },\n            intent: {\n                basic: \"hover:border-gray-300\",\n                filled: \"bg-gray-100 dark:bg-gray-800 border-transparent focus:bg-white\",\n            },\n            hasError: {\n                false: null,\n                true: \"border-red-500 hover:border-red-200 dark:border-red-500\",\n            },\n            untouchable: {\n                false: null,\n                true: \"shadow-none pointer-events-none opacity-50 cursor-not-allowed bg-gray-50 dark:bg-gray-800\",\n            },\n            hasLeftAddon: { true: null, false: null },\n            hasRightAddon: { true: null, false: null },\n            hasLeftIcon: { true: null, false: null },\n            hasRightIcon: { true: null, false: null },\n        },\n        compoundVariants: [\n            { hasLeftAddon: true, className: \"border-l-transparent hover:border-l-transparent rounded-l-none\" },\n            /**/\n            { hasRightAddon: true, className: \"border-r-transparent hover:border-r-transparent rounded-r-none\" },\n            /**/\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"sm\", className: \"pl-10\" },\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"md\", className: \"pl-10\" },\n            { hasLeftAddon: false, hasLeftIcon: true, size: \"lg\", className: \"pl-12\" },\n            /**/\n            { hasRightAddon: false, hasRightIcon: true, size: \"sm\", className: \"pr-10\" },\n            { hasRightAddon: false, hasRightIcon: true, size: \"md\", className: \"pr-10\" },\n            { hasRightAddon: false, hasRightIcon: true, size: \"lg\", className: \"pr-12\" },\n        ],\n        defaultVariants: {\n            size: \"md\",\n            intent: \"basic\",\n            hasError: false,\n            untouchable: false,\n            hasLeftIcon: false,\n            hasRightIcon: false,\n            hasLeftAddon: false,\n            hasRightAddon: false,\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * InputStyling\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface InputStyling\n    extends Omit<VariantProps<typeof InputAnatomy.input>, \"untouchable\" | \"hasError\" | \"hasLeftAddon\" | \"hasRightAddon\" | \"hasLeftIcon\" | \"hasRightIcon\"> {\n    leftAddon?: string\n    leftIcon?: React.ReactNode\n    rightAddon?: string\n    rightIcon?: React.ReactNode\n}\n\n/**\n * @description \"flex relative\"\n */\nexport const inputContainerStyle = () => cn(\"UI-Input__inputContainer flex relative\")\n\n\n/* -------------------------------------------------------------------------------------------------\n * Addons Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputAddonsAnatomy = defineStyleAnatomy({\n    icon: cva([\n        \"UI-Input__addons--icon pointer-events-none absolute inset-y-0 grid place-content-center text-gray-500 z-[1]\",\n        \"dark:text-gray-300\",\n    ], {\n        variants: {\n            size: { sm: \"w-10 text-md\", md: \"w-12 text-lg\", lg: \"w-14 text-2xl\" },\n            isLeftIcon: { true: \"left-0\", false: null },\n            isRightIcon: { true: \"right-0\", false: null },\n        },\n        defaultVariants: {\n            size: \"md\",\n            isLeftIcon: false, isRightIcon: false,\n        },\n    }),\n    addon: cva([\n        \"UI-Input__addons--addon bg-gray-50 inline-flex items-center flex-none px-3 border border-gray-300 text-gray-800 shadow-sm text-sm sm:text-md\",\n        \"dark:bg-gray-700 dark:border-gray-700 dark:text-gray-300\",\n    ], {\n        variants: {\n            size: { sm: \"text-sm\", md: \"text-md\", lg: \"text-lg\" },\n            isLeftAddon: { true: \"rounded-l-md\", false: null },\n            isRightAddon: { true: \"rounded-r-md\", false: null },\n            hasLeftIcon: { true: null, false: null },\n            hasRightIcon: { true: null, false: null },\n        },\n        compoundVariants: [\n            { size: \"sm\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n            { size: \"sm\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n            { size: \"md\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-10\" },\n            { size: \"md\", hasRightIcon: true, isRightAddon: true, className: \"pr-10\" },\n            { size: \"lg\", hasLeftIcon: true, isLeftAddon: true, className: \"pl-12\" },\n            { size: \"lg\", hasRightIcon: true, isRightAddon: true, className: \"pr-12\" },\n        ],\n        defaultVariants: {\n            size: \"md\",\n            isLeftAddon: false, isRightAddon: false, hasLeftIcon: false, hasRightIcon: false,\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * InputIcon\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputIcon = (\n    { icon, size = \"md\", side, props }: {\n        icon: InputStyling[\"rightIcon\"] | undefined,\n        size: InputStyling[\"size\"],\n        side: \"right\" | \"left\",\n        props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n    },\n) => {\n\n    if (!!icon) return <span\n        className={cn(InputAddonsAnatomy.icon({ isRightIcon: side === \"right\", isLeftIcon: side === \"left\", size }))}\n        {...props}\n    >\n        {icon}\n    </span>\n\n    return null\n}\n\n/* -------------------------------------------------------------------------------------------------\n * InputAddon\n * -----------------------------------------------------------------------------------------------*/\n\nexport const InputAddon = (\n    { addon, leftIcon, rightIcon, size = \"md\", side, props }: {\n        addon: InputStyling[\"rightAddon\"] | InputStyling[\"leftAddon\"] | undefined,\n        rightIcon: InputStyling[\"leftIcon\"] | undefined,\n        leftIcon: InputStyling[\"rightIcon\"] | undefined,\n        size: InputStyling[\"size\"],\n        side: \"right\" | \"left\",\n        props?: Omit<React.ComponentPropsWithoutRef<\"span\">, \"className\">,\n    },\n) => {\n\n    if (!!addon) return (\n        <span\n            className={cn(InputAddonsAnatomy.addon({\n                isRightAddon: side === \"right\",\n                isLeftAddon: side === \"left\",\n                hasRightIcon: !!rightIcon,\n                hasLeftIcon: !!leftIcon,\n                size,\n            }))}\n            {...props}\n        >\n            {addon}\n        </span>\n    )\n\n    return null\n\n}\n"
      }
    ]
  },
  {
    "component": "loading-spinner",
    "name": "LoadingSpinner",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "loading-spinner",
        "content": "export * from \"./loading-spinner\"\nexport * from \"./loading-overlay\"\n"
      },
      {
        "name": "loading-overlay.tsx",
        "dir": "loading-spinner",
        "content": "import { cn, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport React from \"react\"\nimport { LoadingSpinner } from \"./loading-spinner\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LoadingOverlayAnatomy = defineStyleAnatomy({\n    overlay: cva([\n        \"UI-LoadingOverlay__overlay\",\n        \"absolute bg-white dark:bg-[rgba(0,0,0,0.3)] bg-opacity-70 w-full h-full z-10 inset-0 pt-4 flex items-center justify-center backdrop-blur-sm\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingOverlay\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LoadingOverlayProps {\n    children?: React.ReactNode\n    show?: boolean\n}\n\nexport const LoadingOverlay: React.FC<LoadingOverlayProps & React.ComponentPropsWithoutRef<\"div\">> = (props) => {\n\n    const { children, show = true, className, ...rest } = props\n\n    if (!show) return null\n\n    return (\n        <>\n            <div className={cn(LoadingOverlayAnatomy.overlay(), className)} {...rest}>\n                <LoadingSpinner className=\"justify-auto\"/>\n            </div>\n        </>\n    )\n\n}\n\nLoadingOverlay.displayName = \"LoadingOverlay\"\n"
      },
      {
        "name": "loading-spinner.tsx",
        "dir": "loading-spinner",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport { ComponentPropsWithRef, forwardRef } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const LoadingSpinnerAnatomy = defineStyleAnatomy({\n    container: cva(\"UI-LoadingSpinner__container flex w-full items-center h-24 justify-center\"),\n    icon: cva([\n        \"UI-LoadingSpinner__icon\",\n        \"inline w-10 h-10 mr-2 animate-spin\",\n        \"text-gray-200 dark:text-gray-600 fill-brand-500\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingSpinner\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface LoadingSpinnerProps extends ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof LoadingSpinnerAnatomy> {\n}\n\nexport const LoadingSpinner = forwardRef<HTMLDivElement, LoadingSpinnerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        containerClassName,\n        iconClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <div\n                className={cn(\n                    LoadingSpinnerAnatomy.container(),\n                    containerClassName,\n                )}\n                {...rest}\n                ref={ref}\n            >\n                <svg\n                    aria-hidden=\"true\"\n                    className={cn(\n                        LoadingSpinnerAnatomy.icon(),\n                        iconClassName,\n                        className,\n                    )}\n                    viewBox=\"0 0 100 101\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path\n                        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n                        fill=\"currentColor\"\n                    />\n                    <path\n                        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n                        fill=\"currentFill\"\n                    />\n                </svg>\n            </div>\n        </>\n    )\n\n})\n\nLoadingSpinner.displayName = \"LoadingSpinner\"\n"
      }
    ]
  },
  {
    "component": "modal",
    "name": "Modal",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "drawer.tsx",
        "dir": "modal",
        "content": "\"use client\"\n\nimport { Dialog, Transition } from \"@headlessui/react\"\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { Fragment } from \"react\"\nimport { CloseButton, CloseButtonProps } from \"../button\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DrawerAnatomy = defineStyleAnatomy({\n    panel: cva(\"UI-Drawer__panel\", {\n        variants: {\n            size: { md: \"\", lg: \"\", xl: \"\", full: \"\" },\n            placement: { top: \"\", right: \"\", left: \"\", bottom: \"\" },\n        },\n        defaultVariants: {\n            size: \"md\",\n            placement: \"right\",\n        },\n    }),\n    container: cva([\n        \"UI-Drawer__container\",\n        \"flex h-full flex-col overflow-y-auto bg-[--paper] shadow-xl\"\n    ]),\n    backdrop: cva([\n        \"UI-Drawer__backdrop\",\n        \"fixed inset-0 bg-black bg-opacity-70 transition-opacity\"\n    ]),\n    body: cva([\n        \"UI-Drawer__body\",\n        \"relative flex-1 pl-4 pr-4 pb-4 sm:pl-6 sm:pr-6 sm:pb-6\"\n    ]),\n    header: cva([\n        \"UI-Drawer__header\",\n        \"flex w-full justify-between items-center p-4 sm:p-6 pb-0\"\n    ]),\n    title: cva([\n        \"UI-Drawer__title\",\n        \"text-lg font-semibold\"\n    ]),\n    closeButton: cva([\"UI-Drawer__closeButton\"]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Drawer\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface DrawerProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof DrawerAnatomy>,\n    VariantProps<typeof DrawerAnatomy.panel> {\n    isOpen: boolean\n    isClosable?: boolean\n    onClose: () => void\n    closeButtonIntent?: CloseButtonProps[\"intent\"]\n}\n\nexport const Drawer = React.forwardRef<HTMLDivElement, DrawerProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size = \"md\",\n        placement = \"right\",\n        isClosable = false,\n        isOpen,\n        onClose,\n        title,\n        closeButtonClassName,\n        backdropClassName,\n        panelClassName,\n        titleClassName,\n        headerClassName,\n        bodyClassName,\n        containerClassName,\n        closeButtonIntent = \"gray-outline\",\n        ...rest\n    } = props\n\n    let animation = {\n        enter: \"transform transition ease-in-out duration-500 sm:duration-500\",\n        enterFrom: \"translate-x-full\",\n        enterTo: \"translate-x-0\",\n        leave: \"transform transition ease-in-out duration-500 sm:duration-500\",\n        leaveFrom: \"translate-x-0\",\n        leaveTo: \"translate-x-full\",\n    }\n\n    if (placement == \"bottom\") {\n        animation = {\n            ...animation,\n            enterFrom: \"translate-y-full\",\n            enterTo: \"translate-y-0\",\n            leaveFrom: \"translate-y-0\",\n            leaveTo: \"translate-y-full\",\n        }\n    } else if (placement == \"top\") {\n        animation = {\n            ...animation,\n            enterFrom: \"-translate-y-full\",\n            enterTo: \"translate-y-0\",\n            leaveFrom: \"translate-y-0\",\n            leaveTo: \"-translate-y-full\",\n        }\n    } else if (placement == \"left\") {\n        animation = {\n            ...animation,\n            enterFrom: \"-translate-x-full\",\n            enterTo: \"translate-x-0\",\n            leaveFrom: \"translate-x-0\",\n            leaveTo: \"-translate-x-full\",\n        }\n    }\n\n    return (\n        <>\n            <Transition.Root show={isOpen} as={Fragment}>\n                <Dialog\n                    as=\"div\"\n                    className={cn(\n                        \"relative z-50\",\n                        className,\n                    )}\n                    onClose={onClose}\n                    {...rest}\n                    ref={ref}\n                >\n\n                    {/*Overlay*/}\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-in-out duration-500\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"ease-in-out duration-500\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <div className={cn(DrawerAnatomy.backdrop(), backdropClassName)}/>\n                    </Transition.Child>\n\n                    <div className=\"fixed inset-0 overflow-hidden\">\n                        <div className=\"absolute inset-0 overflow-hidden\">\n                            <div\n                                className={cn(\n                                    \"pointer-events-none fixed flex\",\n                                    {\n                                        \"inset-y-0 max-w-full\": (placement == \"right\" || placement == \"left\"),\n                                        \"inset-x-0\": (placement == \"top\" || placement == \"bottom\"),\n                                        //\n                                        \"pl-0\": placement == \"right\",\n                                        //\n                                        \"right-0\": placement == \"right\",\n                                        \"left-0\": placement == \"left\",\n                                        \"top-0\": placement == \"top\",\n                                        \"bottom-0\": placement == \"bottom\",\n                                    },\n                                )}\n                            >\n                                <Transition.Child\n                                    as={Fragment}\n                                    {...animation}\n                                >\n                                    <Dialog.Panel\n                                        className={cn(\n                                            \"pointer-events-auto relative\",\n                                            {\n                                                \"w-screen\": (placement == \"right\" || placement == \"left\" || placement == \"top\" || placement == \"bottom\"),\n                                                // Right or Left\n                                                \"max-w-md\": size == \"md\" && (placement == \"right\" || placement == \"left\"),\n                                                \"max-w-2xl\": size == \"lg\" && (placement == \"right\" || placement == \"left\"),\n                                                \"max-w-5xl\": size == \"xl\" && (placement == \"right\" || placement == \"left\"),\n                                                \"max-w-full\": size == \"full\" && (placement == \"right\" || placement == \"left\"),\n                                                // Top or Bottom\n                                                \"h-[100vh] max-h-[50vh]\": size == \"md\" && (placement == \"bottom\" || placement == \"top\"),\n                                                \"h-[100vh] max-h-[70vh]\": size == \"lg\" && (placement == \"bottom\" || placement == \"top\"),\n                                                \"h-[100vh] max-h-[80vh]\": size == \"xl\" && (placement == \"bottom\" || placement == \"top\"),\n                                                \"h-[100vh] min-h-screen\": size == \"full\" && (placement == \"bottom\" || placement == \"top\"),\n                                            },\n                                        )}\n                                    >\n\n                                        {/*Container*/}\n                                        <div className={cn(DrawerAnatomy.container(), containerClassName)}>\n                                            <div\n                                                className={cn(DrawerAnatomy.header(), headerClassName)}\n                                            >\n                                                <Dialog.Title className={cn(DrawerAnatomy.title(), titleClassName)}>{title}</Dialog.Title>\n\n                                                {isClosable && (\n                                                    <CloseButton\n                                                        onClick={() => onClose()}\n                                                        className={cn(closeButtonClassName)}\n                                                        intent={closeButtonIntent}\n                                                    />\n                                                )}\n\n                                            </div>\n                                            <div className={cn(DrawerAnatomy.body(), bodyClassName)}>\n                                                {children}\n                                            </div>\n                                        </div>\n                                    </Dialog.Panel>\n\n                                </Transition.Child>\n                            </div>\n                        </div>\n                    </div>\n                </Dialog>\n            </Transition.Root>\n        </>\n    )\n\n})\n\nDrawer.displayName = \"Drawer\"\n"
      },
      {
        "name": "index.tsx",
        "dir": "modal",
        "content": "export * from \"./modal\"\nexport * from \"./drawer\"\n"
      },
      {
        "name": "modal.tsx",
        "dir": "modal",
        "content": "\"use client\"\n\nimport { Dialog, Transition } from \"@headlessui/react\"\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { Fragment } from \"react\"\nimport { CloseButton, CloseButtonProps } from \"../button\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const ModalAnatomy = defineStyleAnatomy({\n    title: cva([\n        \"UI-Modal__title\",\n        \"text-lg font-medium leading-6\"\n    ]),\n    panel: cva([\n        \"UI-Modal__panel\",\n        \"w-full transform overflow-hidden rounded-none sm:rounded-[--radius] p-6 text-left align-middle shadow-xl transition-all relative\",\n        \"bg-[--paper]\"\n    ], {\n        variants: {\n            size: {\n                sm: \"sm:max-w-md\",\n                md: \"sm:max-w-lg\",\n                lg: \"sm:max-w-xl\",\n                xl: \"sm:max-w-2xl\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    body: cva(\"UI-Modal__body mt-2\"),\n    backdrop: cva([\n        \"UI-Modal__backdrop\",\n        \"fixed inset-0 bg-black bg-opacity-25 dark:bg-opacity-70\"\n    ]),\n    outsideContainer: cva([\n        \"UI-Modal__outsideContainer\",\n        \"flex min-h-full justify-center p-0 sm:p-4 text-center\"\n    ], {\n        variants: {\n            mobilePlacement: {\n                initial: \"items-center\",\n                bottom: \"items-end sm:items-center\",\n                top: \"items-start sm:items-center\"\n            }\n        },\n        defaultVariants: {\n            mobilePlacement: \"bottom\"\n        }\n    }),\n    closeButton: cva([\n        \"UI-Modal__closeButton\",\n        \"absolute right-2 top-2\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Modal\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface ModalProps extends React.ComponentPropsWithRef<\"div\">,\n    ComponentWithAnatomy<typeof ModalAnatomy>,\n    VariantProps<typeof ModalAnatomy.panel>, VariantProps<typeof ModalAnatomy.outsideContainer> {\n    isOpen: boolean,\n    onClose: () => void\n    title?: string\n    isClosable?: boolean\n    closeButtonIntent?: CloseButtonProps[\"intent\"]\n}\n\nexport const Modal = React.forwardRef<HTMLDivElement, ModalProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        isOpen,\n        onClose,\n        title,\n        size,\n        panelClassName,\n        titleClassName,\n        closeButtonClassName,\n        outsideContainerClassName,\n        bodyClassName,\n        backdropClassName,\n        isClosable,\n        mobilePlacement,\n        closeButtonIntent = \"gray-outline\",\n        ...rest\n    } = props\n\n    return (\n        <>\n            <Transition appear show={isOpen} as={Fragment}>\n                <Dialog as=\"div\" className={cn(\"relative z-50\", className)} onClose={onClose}>\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <div className={cn(ModalAnatomy.backdrop(), backdropClassName)}/>\n                    </Transition.Child>\n\n                    <div className=\"fixed inset-0 overflow-y-auto\">\n                        <div className={cn(ModalAnatomy.outsideContainer({ mobilePlacement }), outsideContainerClassName)}>\n                            <Transition.Child\n                                as={Fragment}\n                                enter=\"ease-out duration-300\"\n                                enterFrom=\"opacity-0 scale-95\"\n                                enterTo=\"opacity-100 scale-100\"\n                                leave=\"ease-in duration-200\"\n                                leaveFrom=\"opacity-100 scale-100\"\n                                leaveTo=\"opacity-0 scale-95\"\n                            >\n                                <Dialog.Panel\n                                    className={cn(\n                                        ModalAnatomy.panel({ size }),\n                                        panelClassName,\n                                    )}\n                                    {...rest}\n                                >\n                                    {title && <Dialog.Title\n                                        as=\"h3\"\n                                        className={cn(ModalAnatomy.title(), titleClassName)}\n                                    >\n                                        {title}\n                                    </Dialog.Title>}\n\n                                    {isClosable && <CloseButton\n                                        onClick={onClose}\n                                        className={cn(ModalAnatomy.closeButton(), closeButtonClassName)}\n                                        intent={closeButtonIntent}\n                                    />}\n\n                                    <div className={cn(ModalAnatomy.body(), bodyClassName)}>\n                                        {children}\n                                    </div>\n\n                                </Dialog.Panel>\n                            </Transition.Child>\n                        </div>\n                    </div>\n                </Dialog>\n            </Transition>\n        </>\n    )\n\n})\n\nModal.displayName = \"Modal\"\n"
      }
    ]
  },
  {
    "component": "multi-select",
    "name": "MultiSelect",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [
      "badge",
      "basic-field",
      "input",
      "text-input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "multi-select",
        "content": "export * from \"./multi-select\"\n"
      },
      {
        "name": "multi-select.tsx",
        "dir": "multi-select",
        "content": "\"use client\"\n\nimport { Transition } from \"@headlessui/react\"\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport _filter from \"lodash/filter\"\nimport _find from \"lodash/find\"\nimport React, { Fragment, useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { Badge } from \"../badge\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const MultiSelectAnatomy = defineStyleAnatomy({\n    input: cva([\n        \"UI-MultiSelect__input\",\n        \"relative flex flex-wrap gap-2 cursor-text p-2\"\n    ], {\n        variants: {\n            isOpen: {\n                true: \"border-brand-500 hover:border-brand-500 ring-1 ring-[--ring]\",\n                false: null,\n            },\n        },\n    }),\n    menuContainer: cva([\n        \"UI-MultiSelect__menuContainer\",\n        \"absolute z-10 -bottom-2\",\n        \"left-0 translate-y-full max-h-56 w-full overflow-auto rounded-[--radius] p-1 text-base shadow-lg sm:text-sm\",\n        \"ring-1 ring-black ring-opacity-5 focus:outline-none\",\n        \"bg-[--paper] border border-[--border]\",\n    ]),\n    menuItem: cva([\n        \"UI-MultiSelect__menuItem\",\n        \"relative cursor-pointer py-2 pl-3 pr-9 rounded-[--radius]\"\n    ], {\n        variants: {\n            highlighted: {\n                true: \"hover:bg-[--highlight]\",\n                false: null,\n            },\n        },\n    }),\n    menuItemImage: cva([\n        \"UI-MultiSelect__menuItemImage\",\n        \"flex-none justify-center w-8 h-8 mr-3 rounded-full overflow-hidden relative bg-slate-200\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * MultiSelect\n * -----------------------------------------------------------------------------------------------*/\n\nexport type MultiSelectOption = { value: string, label?: string, description?: string, image?: React.ReactNode }\n\n\nexport interface MultiSelectProps extends Omit<TextInputProps, \"defaultValue\" | \"onChange\">, InputStyling,\n    ComponentWithAnatomy<typeof MultiSelectAnatomy> {\n    options: MultiSelectOption[]\n    value?: MultiSelectOption[\"value\"][]\n    defaultValue?: MultiSelectOption[\"value\"][]\n    onChange?: (values: MultiSelectOption[\"value\"][]) => void\n    isLoading?: boolean\n    discrete?: boolean\n    max?: number\n}\n\nexport const MultiSelect = React.forwardRef<HTMLInputElement, MultiSelectProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        size = \"md\",\n        intent = \"basic\",\n        isLoading,\n        leftAddon,\n        leftIcon,\n        rightIcon,\n        rightAddon,\n        options,\n        defaultValue,\n        placeholder,\n        value,\n        onChange,\n        max,\n        discrete = false,\n        menuContainerClassName,\n        menuItemClassName,\n        menuItemImageClassName,\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<MultiSelectProps>(props, useId())\n\n    const inputRef = useRef<HTMLInputElement>(null)\n    const ulRef = useRef<HTMLUListElement>(null)\n    const [values, setValues] = useState<MultiSelectOption[\"value\"][]>((value ?? defaultValue) ?? [])\n    const [tagInputValue, setTagInputValue] = useState(\"\")\n    const inputFocused = useDisclosure(false)\n    const listDisclosure = useDisclosure(false)\n\n    const [highlightedOptionIndex, setHighlightedOptionIndex] = useState(0)\n\n    const selectOptions = useMemo(() => {\n        // if user types an input, filter by similar labels or values\n        // else show options which are not selected\n        const filtered = _filter(options, o => !values.includes(o.value))\n        return tagInputValue.length > 0 ? _filter(filtered, o => (o.label\n            ? o.label.toLowerCase().includes(tagInputValue.toLowerCase())\n            : o.value.toLowerCase().includes(tagInputValue.toLowerCase()))) : filtered\n    }, [options, values, tagInputValue])\n\n    useEffect(() => {\n        onChange && onChange(values)\n    }, [values])\n\n    useEffect(() => {\n        if (value) setValues(value)\n    }, [value])\n\n    function handleAddValue(value: string) {\n        if (!!max) {\n            if (max !== 1 && values.length < max) {\n                setValues([...values, value])\n            }\n            if (max !== 1 && values.length >= max) {\n                setValues([...values.slice(0, values.length - 1), value])\n            }\n            if (max === 1) {\n                setValues([value])\n            }\n        }\n        if (!max) {\n            setValues([...values, value])\n        }\n    }\n\n    function handlePopValue() {\n        setValues(v => v.slice(0, v.length - 1))\n    }\n\n    function handleRemoveValue(value: string) {\n        setValues(v => v.filter(a => a !== value))\n    }\n\n\n    const closeList = () => {\n        listDisclosure.close()\n    }\n\n    /**\n     * When the user is focused on the input and hits enter,\n     * if the there's only one option and the tagInputValue is not empty, add the option to the selected values\n     * @param event\n     */\n    const handleKeyDown = useCallback((event: KeyboardEvent) => {\n        if (event.key === \"Enter\" && inputRef.current) {\n            if (selectOptions.length === 1 && selectOptions[0] && tagInputValue.length > 0) {\n                handleAddValue(selectOptions[0].value) // Add value\n                setTagInputValue(\"\") // Reset input\n                closeList() // Close list\n            }\n            if (tagInputValue.length === 0 && selectOptions[highlightedOptionIndex]) {\n                handleAddValue(selectOptions[highlightedOptionIndex]!.value)\n                setHighlightedOptionIndex(0)\n            }\n        }\n        if ((event.key === \"Backspace\" || event.key === \"Delete\") && tagInputValue.length === 0) {\n            handlePopValue()\n        }\n    }, [selectOptions, highlightedOptionIndex, tagInputValue])\n\n    const handleKeyUp = useCallback((e: KeyboardEvent) => {\n        if (e.key === \"ArrowDown\") {\n            setHighlightedOptionIndex(i => {\n                const newI = (i + 1) <= (selectOptions.length - 1) ? (i + 1) : 0\n                scrollToHighlighted(newI)\n                return newI\n            })\n        }\n        if (e.key === \"ArrowUp\") {\n            setHighlightedOptionIndex(i => {\n                const newI = (i - 1) >= 0 ? (i - 1) : (selectOptions.length - 1)\n                scrollToHighlighted(newI)\n                return newI\n            })\n        }\n    }, [selectOptions])\n\n    useEffect(() => {\n\n        window.addEventListener(\"keyup\", handleKeyUp)\n        if (inputRef.current) {\n            inputRef.current.addEventListener(\"keydown\", handleKeyDown)\n        }\n\n        return () => {\n            if (inputRef.current) {\n                inputRef.current.removeEventListener(\"keydown\", handleKeyDown)\n            }\n            window.removeEventListener(\"keyup\", handleKeyUp)\n        }\n    }, [inputRef, listDisclosure, selectOptions, highlightedOptionIndex])\n\n    const itemsRef = useRef<any>(null)\n\n    function getMap() {\n        if (!itemsRef.current) {\n            // Initialize the Map on first usage.\n            itemsRef.current = new Map()\n        }\n        return itemsRef.current\n    }\n\n    function scrollToHighlighted(index: number) {\n        const map = getMap()\n        const node = map.get(index)\n        if (index === selectOptions.length - 1) {\n            ulRef.current?.scrollTo({ top: ulRef.current?.scrollHeight, behavior: \"smooth\" })\n        } else if (index === 0) {\n            ulRef.current?.scrollTo({ top: 0, behavior: \"smooth\" })\n        } else {\n            node?.scrollIntoView({\n                // behavior: 'smooth',\n                block: \"nearest\",\n                inline: \"end\",\n            })\n        }\n    }\n\n    return (\n        <>\n            <BasicField\n                {...basicFieldProps}\n            >\n                <div className={cn(inputContainerStyle())}>\n\n                    <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                    <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\n\n                    <div\n                        className={cn(\n                            \"form-input\",\n                            InputAnatomy.input({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                untouchable: !!basicFieldProps.isDisabled,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            MultiSelectAnatomy.input({ isOpen: inputFocused.isOpen }),\n                        )}\n                        onClick={(e) => {\n                            if (!inputFocused.isOpen && !isLoading) {\n                                inputRef.current?.focus()\n                            }\n                        }}\n                    >\n\n\n                        {isLoading ? (\n                            <p>...</p>\n                        ) : <>\n\n                            {values.map((value, index) => (\n                                <span key={index}>\n                                    <Badge\n                                        tag\n                                        size=\"lg\"\n                                        intent={discrete ? \"basic\" : \"gray\"}\n                                        isClosable={!basicFieldProps.isDisabled && !discrete}\n                                        onClose={() => handleRemoveValue(value)}\n                                        className={cn({ \"px-1\": discrete })}\n                                    >\n                                        <span>{_find(options, [\"value\", value])?.label ?? _find(options, [\"value\", value])?.value}</span>\n                                    </Badge>\n                                </span>\n                            ))}\n\n                            <input\n                                id={basicFieldProps.id}\n                                value={tagInputValue}\n                                onChange={e => {\n                                    inputFocused.open()\n                                    setTagInputValue(e.target.value ?? \"\")\n                                    if (selectOptions.length > 0) {\n                                        listDisclosure.open()\n                                    }\n                                }}\n                                onFocus={() => {\n                                    inputFocused.open()\n                                    listDisclosure.open()\n                                }}\n                                onClick={() => {\n                                    inputFocused.open()\n                                    listDisclosure.open()\n                                }}\n                                onBlur={() => {\n                                    setTimeout(() => {\n                                        inputFocused.close()\n                                        listDisclosure.close()\n                                    }, 200)\n                                }}\n                                onKeyPress={e => {\n                                    e.key === \"Enter\" && e.preventDefault()\n                                }}\n                                disabled={basicFieldProps.isDisabled || isLoading}\n                                className={cn(\"outline-none focus:outline-none focus-visible:outline-none focus-visible:ring-0 focus-visible:ring-offset-0 !bg-transparent\", { \"w-1\": !inputFocused.isOpen })}\n                                ref={inputRef}\n                            />\n\n                            <Transition\n                                show={listDisclosure.isOpen && selectOptions.length > 0}\n                                as={Fragment}\n                                leave=\"transition ease-in duration-100\"\n                                leaveFrom=\"opacity-100\"\n                                leaveTo=\"opacity-0\"\n                            >\n                                <ul\n                                    className={cn(MultiSelectAnatomy.menuContainer(), menuContainerClassName)}\n                                    ref={ulRef}\n                                >\n                                    {selectOptions.map((o, index) => {\n\n                                        const imageComponent = o.image ?\n                                            <div className={cn(MultiSelectAnatomy.menuItemImage(), menuItemImageClassName)}>\n                                                {o.image}\n                                            </div> : <></>\n\n                                        return (\n                                            <li\n                                                key={o.value}\n                                                className={cn(MultiSelectAnatomy.menuItem({ highlighted: highlightedOptionIndex === index }), menuItemClassName)}\n                                                onClick={() => {\n                                                    handleAddValue(o.value)\n                                                    setTagInputValue(\"\")\n                                                }}\n                                                onMouseMove={() => {\n                                                    setHighlightedOptionIndex(index)\n                                                }}\n                                                ref={(node) => {\n                                                    const map = getMap()\n                                                    if (node) {\n                                                        map.set(index, node)\n                                                    } else {\n                                                        map.delete(index)\n                                                    }\n                                                }}\n                                            >\n                                                <div className=\"flex w-full items-center\">\n                                                    {imageComponent}\n                                                    <div>\n                                                        <div\n                                                            className={cn(\"text-base block truncate\")}\n                                                        >\n                                                            {o.label ?? o.value}\n                                                        </div>\n                                                        {o.description && <div className={cn(\"text-sm opacity-70\")}>{o.description}</div>}\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        )\n                                    })}\n                                </ul>\n                            </Transition>\n\n                        </>}\n                    </div>\n\n                    <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                    <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\n\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nMultiSelect.displayName = \"MultiSelect\"\n\nfunction useDisclosure(\n    initialState: boolean,\n    callbacks?: { onOpen?(): void; onClose?(): void },\n) {\n    const [opened, setOpened] = useState(initialState)\n\n    const open = () => {\n        if (!opened) {\n            setOpened(true)\n            callbacks?.onOpen?.()\n        }\n    }\n\n    const close = () => {\n        if (opened) {\n            setOpened(false)\n            callbacks?.onClose?.()\n        }\n    }\n\n    const toggle = () => {\n        opened ? close() : open()\n    }\n\n    return { isOpen: opened, open, close, toggle } as const\n}\n"
      }
    ]
  },
  {
    "component": "navbar",
    "name": "Navbar",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "navbar",
        "content": "export * from \"./navbar\"\r\n"
      },
      {
        "name": "navbar.tsx",
        "dir": "navbar",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy } from \"../core\"\r\nimport { cva, VariantProps } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const NavbarAnatomy = defineStyleAnatomy({\r\n    nav: cva([\r\n        \"UI-Navbar__nav\",\r\n        \"w-full h-16\",\r\n        \"bg-[--paper] border-b border-[--border]\"\r\n    ]),\r\n    container: cva([\r\n        \"UI-Navbar__container\",\r\n        \"container max-w-7xl h-full\",\r\n    ], {\r\n        variants: {\r\n            fullWidth: {\r\n                true: \"max-w-full w-full\",\r\n                false: \"\"\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            fullWidth: false\r\n        }\r\n    }),\r\n})\r\n\r\nexport const NavbarLayoutAnatomy = defineStyleAnatomy({\r\n    layout: cva([\r\n        \"UI-NavbarLayout__content\",\r\n        \"flex h-full items-center\"\r\n    ], {\r\n        variants: {\r\n            spacing: {\r\n                apart: \"justify-between\",\r\n                around: \"justify-around\"\r\n            }\r\n        },\r\n        defaultVariants: {\r\n            spacing: \"apart\"\r\n        }\r\n    }),\r\n})\r\n\r\nexport const NavbarNavigationAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-NavbarNavigation__root\",\r\n        \"flex h-full items-center gap-8 flex-row-reverse md:flex-row\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Navbar\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface NavbarProps extends React.ComponentPropsWithRef<\"nav\">, ComponentWithAnatomy<typeof NavbarAnatomy>,\r\n    VariantProps<typeof NavbarAnatomy.container> {\r\n}\r\n\r\nexport const _Navbar = (props: NavbarProps) => {\r\n\r\n    const {\r\n        children,\r\n        navClassName,\r\n        containerClassName,\r\n        className,\r\n        fullWidth,\r\n        ref,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <nav\r\n            className={cn(NavbarAnatomy.nav(), navClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            <div\r\n                className={cn(NavbarAnatomy.container({ fullWidth }), containerClassName)}\r\n            >\r\n                {children}\r\n            </div>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\n_Navbar.displayName = \"Navbar\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Navbar.Layout\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface NavbarLayoutProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof NavbarLayoutAnatomy>,\r\n    VariantProps<typeof NavbarLayoutAnatomy.layout> {\r\n}\r\n\r\nconst NavbarLayout: React.FC<NavbarLayoutProps> = React.forwardRef<HTMLDivElement, NavbarLayoutProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        layoutClassName,\r\n        spacing,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(NavbarLayoutAnatomy.layout({ spacing }), layoutClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nNavbarLayout.displayName = \"NavbarLayout\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Navbar.Navigation\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface NavbarNavigationProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof NavbarNavigationAnatomy>,\r\n    VariantProps<typeof NavbarNavigationAnatomy.root> {\r\n}\r\n\r\nconst NavbarNavigation: React.FC<NavbarNavigationProps> = React.forwardRef<HTMLDivElement, NavbarNavigationProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        rootClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(NavbarNavigationAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nNavbarNavigation.displayName = \"NavbarNavigation\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_Navbar.Layout = NavbarLayout\r\n_Navbar.Navigation = NavbarNavigation\r\n\r\nexport const Navbar = createPolymorphicComponent<\"nav\", NavbarProps, {\r\n    Layout: typeof NavbarLayout\r\n    Navigation: typeof NavbarNavigation\r\n}>(_Navbar)\r\n\r\nNavbar.displayName = \"Navbar\"\r\n"
      }
    ]
  },
  {
    "component": "number-input",
    "name": "NumberInput",
    "dependencies": [
      [
        "@zag-js/number-input",
        "^0.10.2",
        ""
      ],
      [
        "@zag-js/react",
        "^0.10.2",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input",
      "text-input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "number-input",
        "content": "export * from \"./number-input\"\n"
      },
      {
        "name": "number-input.tsx",
        "dir": "number-input",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport * as numberInput from \"@zag-js/number-input\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva } from \"class-variance-authority\"\nimport React, { useEffect, useId } from \"react\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const NumberInputAnatomy = defineStyleAnatomy({\n    input: cva(\"UI-NumberInput__input\", {\n        variants: {\n            discrete: {\n                true: false,\n                false: \"text-center rounded-none border-l-transparent border-r-transparent hover:border-l-transparent hover:border-r-transparent\",\n            },\n        },\n        defaultVariants: {\n            discrete: false,\n        },\n    }),\n    control: cva([\n            \"UI-NumberInput__control\",\n            \"flex flex-none items-center justify-center w-10 border shadow-sm text-lg font-medium\",\n            \"disabled:shadow-none disabled:pointer-events-none\",\n            \"hover:!bg-gray-100 transition\",\n            \"!bg-white border-gray-300 disabled:!bg-gray-50 disabled:!bg-gray-50 disabled:text-gray-300 disabled:border-gray-200\",\n            \"dark:!bg-gray-900 dark:border-gray-700 dark:hover:!bg-gray-800\",\n            \"dark:disabled:!bg-gray-800 dark:disabled:border-gray-800 dark:disabled:text-gray-700\",\n        ], {\n            variants: {\n                size: { sm: \"\", md: \"\", lg: \"\" },\n                position: { left: null, right: null },\n                hasLeftAddon: {\n                    true: \"border-l-0\",\n                    false: null,\n                },\n                hasRightAddon: {\n                    true: \"border-r-0\",\n                    false: null,\n                },\n            },\n            compoundVariants: [\n                { hasRightAddon: false, hasLeftAddon: false, position: \"left\", className: \"rounded-bl-md rounded-tl-md\" },\n                { hasRightAddon: false, hasLeftAddon: false, position: \"right\", className: \"rounded-br-md rounded-tr-md\" },\n            ],\n            defaultVariants: {\n                size: \"md\",\n                hasLeftAddon: false,\n                hasRightAddon: false,\n            },\n        },\n    ),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * NumberInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface NumberInputProps extends Omit<TextInputProps, \"defaultValue\" | \"onChange\" | \"value\">, InputStyling,\n    ComponentWithAnatomy<typeof NumberInputAnatomy> {\n    defaultValue?: number\n    value?: number\n    onChange?: (value: number) => void\n    min?: number\n    max?: number\n    minFractionDigits?: number\n    maxFractionDigits?: number\n    precision?: number\n    step?: number\n    allowMouseWheel?: boolean\n    fullWidth?: boolean\n    discrete?: boolean\n}\n\nexport const NumberInput = React.forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        size,\n        intent,\n        leftAddon,\n        leftIcon,\n        rightAddon,\n        rightIcon,\n        defaultValue = 0,\n        placeholder,\n        onChange,\n        fullWidth,\n        discrete,\n        value,\n        controlClassName,\n        inputClassName,\n        min = 0, max, minFractionDigits, maxFractionDigits = 2, precision, step, allowMouseWheel = true,\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<NumberInputProps>(props, useId())\n\n    const [state, send] = useMachine(numberInput.machine({\n        id: basicFieldProps.id,\n        name: basicFieldProps.name,\n        disabled: basicFieldProps.isDisabled,\n        readOnly: basicFieldProps.isReadOnly,\n        value: value ? String(value) : undefined,\n        min,\n        max,\n        minFractionDigits,\n        maxFractionDigits,\n        step,\n        allowMouseWheel,\n        clampValueOnBlur: true,\n        onChange: (v) => {\n            onChange && onChange(v.valueAsNumber)\n        },\n    }))\n\n    useEffect(() => {\n        api.setValue(defaultValue)\n    }, [])\n\n    const api = numberInput.connect(state, send, normalizeProps)\n    return (\n        <>\n            <BasicField\n                {...api.rootProps}\n                {...basicFieldProps}\n            >\n                <div className={cn(inputContainerStyle())}>\n\n                    <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                    <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\n\n                    {!discrete && (\n                        <button\n                            className={cn(NumberInputAnatomy.control({\n                                size,\n                                position: \"left\",\n                                hasLeftAddon: !!leftAddon || !!leftIcon,\n                            }), controlClassName)}\n                            {...api.decrementTriggerProps}>\n                            -\n                        </button>\n                    )}\n\n                    <input\n                        type=\"number\"\n                        name={basicFieldProps.name}\n                        className={cn(\n                            \"form-input\",\n                            InputAnatomy.input({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                untouchable: !!basicFieldProps.isDisabled,\n                                hasRightAddon: !!rightAddon || !discrete,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon || !discrete,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            NumberInputAnatomy.input({ discrete }),\n                            inputClassName,\n                            className,\n                        )}\n                        disabled={basicFieldProps.isDisabled}\n                        {...api.inputProps}\n                        {...rest}\n                        ref={ref}\n                    />\n\n                    {!discrete && (\n                        <button\n                            className={cn(NumberInputAnatomy.control({\n                                size,\n                                position: \"right\",\n                                hasRightAddon: !!rightAddon || !!rightIcon,\n                            }), controlClassName)}\n                            {...api.incrementTriggerProps}\n                        >\n                            +\n                        </button>\n                    )}\n\n                    <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                    <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\n\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nNumberInput.displayName = \"NumberInput\"\n"
      }
    ]
  },
  {
    "component": "page-header",
    "name": "PageHeader",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "page-header",
        "content": "export * from \"./page-header\"\n"
      },
      {
        "name": "page-header.tsx",
        "dir": "page-header",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const PageHeaderAnatomy = defineStyleAnatomy({\n    body: cva(\"UI-PageHeader__body md:flex md:items-center md:justify-between md:space-x-5\"),\n    title: cva(\"UI-PageHeader__title font-bold text-gray-900 dark:text-gray-200\", {\n        variants: {\n            size: {\n                sm: \"text-lg sm:text-xl\",\n                md: \"text-xl sm:text-2xl\",\n                lg: \"text-2xl sm:text-3xl\",\n                xl: \"text-2xl sm:text-4xl\",\n            },\n        },\n        defaultVariants: {\n            size: \"xl\",\n        },\n    }),\n    actionContainer: cva([\n        \"UI-PageHeader__actionContainer\",\n        \"justify-stretch mt-6 flex flex-col-reverse space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end\",\n        \"sm:space-y-0 sm:space-x-3 sm:space-x-reverse md:mt-0 md:flex-row md:space-x-3\"\n    ]),\n    description: cva([\n        \"UI-PageHeader__description\",\n        \"text-sm font-medium text-gray-500 dark:text-gray-400\"\n    ]),\n    detailsContainer: cva([\n        \"UI-PageHeader__detailsContainer\",\n        \"block sm:flex items-start sm:space-x-5\"\n    ], {\n        variants: {\n            withImage: {\n                true: \"flex-col gap-2 sm:flex-row sm:gap-6\",\n                false: null,\n            },\n        },\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * PageHeader\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PageHeaderProps extends React.ComponentPropsWithRef<\"div\">,\n    ComponentWithAnatomy<typeof PageHeaderAnatomy>,\n    VariantProps<typeof PageHeaderAnatomy.title> {\n    title?: string\n    description?: string\n    action?: React.ReactNode\n    image?: React.ReactNode\n}\n\nexport const PageHeader = React.forwardRef<HTMLDivElement, PageHeaderProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        size = \"xl\",\n        title,\n        description,\n        action,\n        image,\n        titleClassName,\n        actionContainerClassName,\n        descriptionClassName,\n        detailsContainerClassName,\n        bodyClassName,\n        ...rest\n    } = props\n\n    return (\n        <>\n            <header\n                aria-label={title}\n                className={cn(\n                    PageHeaderAnatomy.body(),\n                    bodyClassName,\n                    className,\n                )}\n            >\n                <div className={cn(PageHeaderAnatomy.detailsContainer(), detailsContainerClassName)}>\n                    {image && <div className=\"flex-shrink-0\">\n                        <div className=\"relative\">\n                            {image}\n                        </div>\n                    </div>}\n                    <div className=\"\">\n                        <h1 className={cn(PageHeaderAnatomy.title({ size }), titleClassName)}>{title}</h1>\n                        {description && <p className={cn(PageHeaderAnatomy.description(), descriptionClassName)}>\n                            {description}\n                        </p>}\n                    </div>\n                </div>\n                <div className={cn(PageHeaderAnatomy.actionContainer(), actionContainerClassName)}>\n                    {action}\n                </div>\n            </header>\n        </>\n    )\n\n})\n\nPageHeader.displayName = \"PageHeader\"\n"
      }
    ]
  },
  {
    "component": "pagination",
    "name": "Pagination",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "pagination",
        "content": "export * from \"./pagination\"\r\n"
      },
      {
        "name": "pagination.tsx",
        "dir": "pagination",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy, getChildDisplayName } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const PaginationAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Pagination__root\",\r\n        \"flex gap-1 text-xs font-medium\"\r\n    ]),\r\n    item: cva([\r\n        \"UI-Pagination__item\",\r\n        \"bg-transparent dark:bg-transparent text-base inline-flex h-8 w-8 items-center justify-center rounded border border-[--border] cursor-pointer\",\r\n        \"hover:bg-[--highlight] dark:hover:bg-[--highlight] hover:border-[--highlight] select-none\",\r\n        \"data-[selected=true]:bg-brand-500 data-[selected=true]:border-transparent data-[selected=true]:text-white data-[selected=true]:hover:bg-brand-500 data-[selected=true]:pointer-events-none\",\r\n        \"data-[disabled=true]:opacity-50 data-[disabled=true]:pointer-events-none data-[disabled=true]:cursor-not-allowed\",\r\n        \"outline-none ring-[--ring] focus-visible:ring-2\"\r\n    ]),\r\n    ellipsis: cva([\r\n        \"UI-Pagination__ellipsis\",\r\n        \"flex p-2 items-center text-[1.05rem]\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Pagination\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PaginationProps extends React.ComponentPropsWithRef<\"ul\">,\r\n    Omit<ComponentWithAnatomy<typeof PaginationAnatomy>, \"ellipsisClassName\"> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst _Pagination = (props: PaginationProps) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        itemClassName,\r\n        className,\r\n        ref,\r\n        ...rest\r\n    } = props\r\n\r\n    const itemsWithProps = React.useMemo(() => React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child) && (getChildDisplayName(child) === \"PaginationItem\")) {\r\n            return React.cloneElement(child, { itemClassName } as any)\r\n        }\r\n        return child\r\n    }), [children])\r\n\r\n    return (\r\n        <ul\r\n            className={cn(PaginationAnatomy.root(), rootClassName, className)}\r\n            role=\"list\"\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {itemsWithProps}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\n_Pagination.displayName = \"Pagination\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Pagination.Item\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PaginationItemProps extends Omit<React.ComponentPropsWithRef<\"button\">, \"children\">, ComponentWithAnatomy<typeof PaginationAnatomy> {\r\n    value: string | number\r\n}\r\n\r\nconst PaginationItem: React.FC<PaginationItemProps> = React.forwardRef<HTMLButtonElement, PaginationItemProps>((props, ref) => {\r\n\r\n    const {\r\n        value,\r\n        className,\r\n        itemClassName,\r\n        ellipsisClassName, // Ignore\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <li>\r\n            <button\r\n                className={cn(PaginationAnatomy.item(), itemClassName, className)}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {value}\r\n            </button>\r\n        </li>\r\n    )\r\n\r\n})\r\n\r\nPaginationItem.displayName = \"PaginationItem\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Pagination.Trigger\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PaginationTriggerProps extends Omit<React.ComponentPropsWithRef<\"button\">, \"children\">,\r\n    ComponentWithAnatomy<typeof PaginationAnatomy> {\r\n    direction: \"left\" | \"right\"\r\n    isChevrons?: boolean\r\n    isDisabled?: boolean\r\n}\r\n\r\nconst PaginationTrigger: React.FC<PaginationTriggerProps> = React.forwardRef<HTMLButtonElement, PaginationTriggerProps>((props, ref) => {\r\n\r\n    const {\r\n        isChevrons = false,\r\n        isDisabled = false,\r\n        direction,\r\n        className,\r\n        itemClassName,\r\n        ellipsisClassName, // Ignore\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <li>\r\n            <button\r\n                className={cn(PaginationAnatomy.item(), itemClassName, className)}\r\n                data-disabled={`${isDisabled}`}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {direction === \"left\" ? (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                         className=\"h-4 w-4\"\r\n                    >\r\n                        {!isChevrons ? <polyline points=\"15 18 9 12 15 6\"></polyline> : <>\r\n                            <polyline points=\"11 17 6 12 11 7\"/>\r\n                            <polyline points=\"18 17 13 12 18 7\"/>\r\n                        </>}\r\n                    </svg>\r\n                ) : (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                         className=\"h-4 w-4\"\r\n                    >\r\n                        {!isChevrons ? <polyline points=\"9 18 15 12 9 6\"></polyline> : <>\r\n                            <polyline points=\"13 17 18 12 13 7\"/>\r\n                            <polyline points=\"6 17 11 12 6 7\"/>\r\n                        </>}\r\n                    </svg>\r\n\r\n                )}\r\n            </button>\r\n        </li>\r\n    )\r\n\r\n})\r\n\r\nPaginationTrigger.displayName = \"PaginationTrigger\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Pagination.Ellipsis\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PaginationEllipsisProps extends Omit<React.ComponentPropsWithRef<\"span\">, \"children\">,\r\n    ComponentWithAnatomy<typeof PaginationAnatomy> {\r\n}\r\n\r\nconst PaginationEllipsis: React.FC<PaginationEllipsisProps> = React.forwardRef<HTMLSpanElement, PaginationEllipsisProps>((props, ref) => {\r\n\r\n    const {\r\n        className,\r\n        ellipsisClassName,\r\n        itemClassName, // Ignore\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <li className={cn(PaginationAnatomy.ellipsis(), ellipsisClassName, className)}>\r\n            <span\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                &#8230;\r\n            </span>\r\n        </li>\r\n    )\r\n\r\n})\r\n\r\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_Pagination.Item = PaginationItem\r\n_Pagination.Ellipsis = PaginationEllipsis\r\n_Pagination.Trigger = PaginationTrigger\r\n\r\nexport const Pagination = createPolymorphicComponent<\"div\", PaginationProps, {\r\n    Item: typeof PaginationItem\r\n    Ellipsis: typeof PaginationEllipsis\r\n    Trigger: typeof PaginationTrigger\r\n}>(_Pagination)\r\n\r\nPagination.displayName = \"Pagination\"\r\n"
      }
    ]
  },
  {
    "component": "paper",
    "name": "Paper",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "paper",
        "content": "export * from \"./paper\"\r\n"
      },
      {
        "name": "paper.tsx",
        "dir": "paper",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const PaperAnatomy = defineStyleAnatomy({\r\n    paper: cva([\r\n        \"UI-Paper__paper\",\r\n        \"overflow-hidden rounded-lg bg-white border border-[--border] bg-[--paper]\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Paper\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PaperProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof PaperAnatomy> {\r\n}\r\n\r\nexport const Paper: React.FC<PaperProps> = React.forwardRef<HTMLDivElement, PaperProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        paperClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(PaperAnatomy.paper(), paperClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nPaper.displayName = \"Paper\"\r\n"
      }
    ]
  },
  {
    "component": "phone-number-input",
    "name": "PhoneNumberInput",
    "dependencies": [
      [
        "libphonenumber-js",
        "^1.10.36",
        ""
      ],
      [
        "react-phone-number-input",
        "^3.2.23",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "input",
      "text-input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "phone-number-input",
        "content": "export * from \"./phone-number-input\"\n"
      },
      {
        "name": "phone-number-input.tsx",
        "dir": "phone-number-input",
        "content": "\"use client\"\n\nimport { cn } from \"../core\"\nimport { CountryCode, E164Number } from \"libphonenumber-js\"\nimport React, { useId } from \"react\"\nimport PhoneInput from \"react-phone-number-input\"\nimport { BasicField, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon } from \"../input\"\nimport type { TextInputProps } from \"../text-input\"\n\n/* -------------------------------------------------------------------------------------------------\n * PhoneNumberInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PhoneNumberInputProps extends Omit<TextInputProps, \"value\" | \"onChange\"> {\n    value?: string | null | undefined\n    onChange?: (value: E164Number | undefined) => void\n    defaultCountry?: CountryCode\n}\n\nexport type { CountryCode, E164Number }\n\nexport const PhoneNumberInput = React.forwardRef<HTMLInputElement, PhoneNumberInputProps>((props, ref) => {\n\n    const [{\n        className,\n        size = \"md\",\n        intent = \"basic\",\n        value,\n        onChange,\n        defaultCountry = \"US\",\n        leftIcon,\n        leftAddon,\n        rightAddon,\n        rightIcon,\n    }, basicFieldProps] = extractBasicFieldProps<PhoneNumberInputProps>(props, useId())\n\n    return (\n        <>\n            <BasicField\n                className={cn(\"w-full gap-1\")}\n                {...basicFieldProps}\n            >\n\n                <div className={cn(inputContainerStyle())}>\n\n                    <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                    <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\n\n                    <PhoneInput\n                        id={basicFieldProps.id}\n                        className={cn(\n                            \"flex w-full relative\",\n                            className,\n                        )}\n                        defaultCountry={defaultCountry as CountryCode}\n                        addInternationalOption={false}\n                        control={null}\n                        style={{ display: \"flex\", position: \"relative\" }}\n                        countrySelectProps={{\n                            className: cn(\n                                \"form-select\",\n                                InputAnatomy.input({\n                                    size,\n                                    intent,\n                                    hasError: !!basicFieldProps.error,\n                                    untouchable: !!basicFieldProps.isDisabled,\n                                    hasRightAddon: !!rightAddon,\n                                    // hasRightIcon: !!rightIcon, /!\\ Not included\n                                    hasLeftAddon: !!leftAddon,\n                                    hasLeftIcon: !!leftIcon,\n                                }),\n                                \"flex-none w-[4.5rem] truncate rounded-r-none border-r-transparent\",\n                            ),\n                            disabled: basicFieldProps.isDisabled,\n                        }}\n                        numberInputProps={{\n                            className: cn(\n                                \"form-input\",\n                                InputAnatomy.input({\n                                    size,\n                                    intent,\n                                    hasError: !!basicFieldProps.error,\n                                    untouchable: !!basicFieldProps.isDisabled,\n                                    hasRightAddon: !!rightAddon,\n                                    hasRightIcon: !!rightIcon,\n                                    hasLeftAddon: !!leftAddon,\n                                    // hasLeftIcon: !!leftIcon, /!\\ Not included\n                                }),\n                                \"rounded-l-none border-l-transparent\",\n                            ),\n                            disabled: basicFieldProps.isDisabled,\n                        }}\n                        flagComponent={(flag) => (\n                            <img\n                                className=\"w-6 absolute h-full inset-y-0 ml-3\"\n                                src={flag.flagUrl?.replace(\"{XX}\", flag.country)}\n                            />\n                        )}\n                        value={value as E164Number}\n                        onChange={value => {\n                            onChange && onChange(value)\n                        }}\n                    />\n\n                    <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                    <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\n\n                </div>\n\n            </BasicField>\n        </>\n    )\n\n})\n\nPhoneNumberInput.displayName = \"PhoneNumberInput\"\n"
      }
    ]
  },
  {
    "component": "popover",
    "name": "Popover",
    "dependencies": [
      [
        "@radix-ui/react-popover",
        "^1.0.6",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "popover",
        "content": "export * from \"./popover\"\r\n"
      },
      {
        "name": "popover.tsx",
        "dir": "popover",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport type { PopoverContentProps as PopoverPrimitiveContentProps } from \"@radix-ui/react-popover\"\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const PopoverAnatomy = defineStyleAnatomy({\r\n    popover: cva([\r\n        \"UI-Popover__popover relative\",\r\n        \"w-72\",\r\n        \"z-50 rounded-[--radius] border border-[--border] bg-[--paper] p-4 shadow-md outline-none animate-in\",\r\n        \"data-[side=bottom]:slide-in-from-bottom-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-top-2\",\r\n        \"data-[side=bottom]:mt-2 data-[side=top]:mb-2 data-[side=left]:mr-2 data-[side=right]:ml-2\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Popover\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface PopoverProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof PopoverAnatomy>, PopoverPrimitiveContentProps {\r\n    trigger: React.ReactNode\r\n}\r\n\r\nexport const Popover: React.FC<PopoverProps> = React.forwardRef<HTMLDivElement, PopoverProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        trigger,\r\n        popoverClassName,\r\n        className,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <PopoverPrimitive.Root>\r\n            <PopoverPrimitive.Trigger asChild>\r\n                {trigger}\r\n            </PopoverPrimitive.Trigger>\r\n\r\n            <PopoverPrimitive.Portal>\r\n                <PopoverPrimitive.Content\r\n                    className={cn([\r\n                        PopoverAnatomy.popover(),\r\n                        popoverClassName,\r\n                        className,\r\n                    ])}\r\n                    ref={ref}\r\n                    {...rest}\r\n                >\r\n                    {children}\r\n                </PopoverPrimitive.Content>\r\n            </PopoverPrimitive.Portal>\r\n        </PopoverPrimitive.Root>\r\n    )\r\n\r\n})\r\n\r\nPopover.displayName = \"Popover\"\r\n"
      }
    ]
  },
  {
    "component": "price-input",
    "name": "PriceInput",
    "dependencies": [
      [
        "dinero.js",
        "^1.9.1",
        ""
      ],
      [
        "@types/dinero.js",
        "^1.9.0",
        "-D"
      ]
    ],
    "family": [
      "basic-field",
      "text-input"
    ],
    "files": [
      {
        "name": "currencies.ts",
        "dir": "price-input",
        "content": "import { Currency } from \"dinero.js\"\n\nexport const currencies = {\n    ad: \"EUR\",\n    ae: \"AED\",\n    af: \"AFN\",\n    ag: \"XCD\",\n    ai: \"XCD\",\n    al: \"ALL\",\n    am: \"AMD\",\n    ao: \"AOA\",\n    ar: \"ARS\",\n    as: \"USD\",\n    at: \"EUR\",\n    au: \"AUD\",\n    aw: \"AWG\",\n    ax: \"EUR\",\n    az: \"AZN\",\n    ba: \"BAM\",\n    bb: \"BBD\",\n    bd: \"BDT\",\n    be: \"EUR\",\n    bf: \"XOF\",\n    bg: \"BGN\",\n    bh: \"BHD\",\n    bi: \"BIF\",\n    bj: \"XOF\",\n    bl: \"EUR\",\n    bm: \"BMD\",\n    bn: \"BND\",\n    bo: \"BOB\",\n    bq: \"USD\",\n    br: \"BRL\",\n    bs: \"BSD\",\n    bt: \"BTN\",\n    bv: \"NOK\",\n    bw: \"BWP\",\n    by: \"BYN\",\n    bz: \"BZD\",\n    ca: \"CAD\",\n    cc: \"AUD\",\n    cd: \"CDF\",\n    cf: \"XAF\",\n    cg: \"CDF\",\n    ch: \"CHF\",\n    ci: \"XOF\",\n    ck: \"NZD\",\n    cl: \"CLP\",\n    cm: \"XAF\",\n    cn: \"CNY\",\n    co: \"COP\",\n    cr: \"CRC\",\n    cu: \"CUC\",\n    cv: \"CVE\",\n    cw: \"ANG\",\n    cx: \"AUD\",\n    cy: \"EUR\",\n    cz: \"CZK\",\n    de: \"EUR\",\n    dj: \"DJF\",\n    dk: \"DKK\",\n    dm: \"DOP\",\n    do: \"DOP\",\n    dz: \"DZD\",\n    ec: \"USD\",\n    ee: \"EUR\",\n    eg: \"EGP\",\n    eh: \"MAD\",\n    er: \"ERN\",\n    es: \"EUR\",\n    et: \"ETB\",\n    fi: \"EUR\",\n    fj: \"FJD\",\n    fm: \"USD\",\n    fo: \"DKK\",\n    fr: \"EUR\",\n    ga: \"XAF\",\n    gb: \"GBP\",\n    gd: \"XCD\",\n    ge: \"GEL\",\n    gf: \"EUR\",\n    gg: \"GBP\",\n    gh: \"GHS\",\n    gi: \"GIP\",\n    gl: \"DKK\",\n    gm: \"GMD\",\n    gn: \"GNF\",\n    gp: \"EUR\",\n    gq: \"XAF\",\n    gr: \"EUR\",\n    gt: \"GTQ\",\n    gu: \"USD\",\n    gw: \"XOF\",\n    gy: \"GYD\",\n    hk: \"HKD\",\n    hn: \"HNL\",\n    hr: \"EUR\",\n    ht: \"HTG\",\n    hu: \"HUF\",\n    id: \"IDR\",\n    ie: \"EUR\",\n    il: \"ILS\",\n    im: \"GBP\",\n    in: \"INR\",\n    io: \"USD\",\n    iq: \"IQD\",\n    ir: \"IRR\",\n    is: \"ISK\",\n    it: \"EUR\",\n    je: \"GBP\",\n    jm: \"JMD\",\n    jo: \"JOD\",\n    jp: \"JPY\",\n    ke: \"KES\",\n    kg: \"KGS\",\n    kh: \"KHR\",\n    ki: \"AUD\",\n    km: \"KMF\",\n    kn: \"XCD\",\n    kp: \"KPW\",\n    kr: \"KRW\",\n    kw: \"KWD\",\n    ky: \"KYD\",\n    kz: \"KZT\",\n    lb: \"LBP\",\n    lc: \"XCD\",\n    li: \"CHF\",\n    lk: \"LKR\",\n    lr: \"LRD\",\n    ls: \"LSL\",\n    lt: \"EUR\",\n    lu: \"EUR\",\n    lv: \"EUR\",\n    ly: \"LYD\",\n    ma: \"MAD\",\n    mc: \"EUR\",\n    md: \"MDL\",\n    me: \"EUR\",\n    mf: \"EUR\",\n    mg: \"MGA\",\n    mh: \"USD\",\n    ml: \"XOF\",\n    mm: \"MMK\",\n    mn: \"MNT\",\n    mo: \"MOP\",\n    mp: \"USD\",\n    mq: \"EUR\",\n    mr: \"MRU\",\n    ms: \"XCD\",\n    mt: \"EUR\",\n    mu: \"MUR\",\n    mv: \"MVR\",\n    mw: \"MWK\",\n    mx: \"MXN\",\n    my: \"MYR\",\n    mz: \"MZN\",\n    na: \"NAD\",\n    nc: \"XPF\",\n    ne: \"NGN\",\n    nf: \"AUD\",\n    ng: \"NGN\",\n    ni: \"NIO\",\n    nl: \"EUR\",\n    no: \"NOK\",\n    np: \"NPR\",\n    nr: \"AUD\",\n    nu: \"NZD\",\n    nz: \"NZD\",\n    om: \"OMR\",\n    pa: \"PAB\",\n    pe: \"PEN\",\n    pf: \"XPF\",\n    pg: \"PGK\",\n    ph: \"PHP\",\n    pk: \"PKR\",\n    pl: \"PLN\",\n    pm: \"EUR\",\n    pn: \"NZD\",\n    pr: \"USD\",\n    pt: \"EUR\",\n    pw: \"USD\",\n    py: \"PYG\",\n    qa: \"QAR\",\n    re: \"EUR\",\n    ro: \"RON\",\n    rs: \"RSD\",\n    ru: \"RUB\",\n    rw: \"RWF\",\n    sa: \"SAR\",\n    sb: \"SBD\",\n    sc: \"SCR\",\n    sd: \"SDG\",\n    se: \"SEK\",\n    sg: \"SGD\",\n    sh: \"SHP\",\n    si: \"EUR\",\n    sj: \"NOK\",\n    sk: \"EUR\",\n    sl: \"SLL\",\n    sm: \"EUR\",\n    sn: \"XOF\",\n    so: \"SOS\",\n    sr: \"SRD\",\n    ss: \"SSP\",\n    st: \"STN\",\n    sv: \"SVC\",\n    sx: \"ANG\",\n    sy: \"SYP\",\n    sz: \"SZL\",\n    tc: \"USD\",\n    td: \"XAF\",\n    tf: \"EUR\",\n    tg: \"XOF\",\n    th: \"THB\",\n    tj: \"TJS\",\n    tk: \"NZD\",\n    tl: \"USD\",\n    tm: \"TMT\",\n    tn: \"TND\",\n    to: \"TOP\",\n    tt: \"TTD\",\n    tv: \"AUD\",\n    tw: \"TWD\",\n    tz: \"TZS\",\n    ua: \"UAH\",\n    ug: \"UGX\",\n    um: \"USD\",\n    us: \"USD\",\n    uy: \"UYU\",\n    uz: \"UZS\",\n    va: \"EUR\",\n    vc: \"XCD\",\n    ve: \"VES\",\n    vg: \"USD\",\n    vi: \"USD\",\n    vn: \"VND\",\n    vu: \"VUV\",\n    wf: \"XPF\",\n    ws: \"USD\",\n    ye: \"YER\",\n    yt: \"EUR\",\n    za: \"ZAR\",\n    zm: \"ZMW\",\n    zw: \"ZWL\",\n    hm: \"AUD\",\n    fk: \"FKP\",\n    gs: \"GEL\",\n    la: \"LAK\",\n    mk: \"MKD\",\n    aq: \"USD\",\n    ps: \"ILS\",\n    tr: \"TRY\",\n} as { [p: string]: Currency }\n"
      },
      {
        "name": "index.tsx",
        "dir": "price-input",
        "content": "export * from \"./price-input\"\n"
      },
      {
        "name": "locales.ts",
        "dir": "price-input",
        "content": "export default {\r\n    en: {\r\n        decimalSeparator: \".\",\r\n        groupSeparator: \",\"\r\n    },\r\n    fr: {\r\n        decimalSeparator: \",\",\r\n        groupSeparator: \".\"\r\n    },\r\n} as { [lng: string]: { decimalSeparator: string, groupSeparator: string } }\r\n"
      },
      {
        "name": "price-input.tsx",
        "dir": "price-input",
        "content": "\"use client\"\n\nimport Dinero, { Currency } from \"dinero.js\"\nimport React, { ChangeEvent, useCallback, useEffect, useId, useMemo, useState } from \"react\"\nimport { extractBasicFieldProps } from \"../basic-field\"\nimport { useUILocaleConfig } from \"../core\"\nimport { TextInput, TextInputProps } from \"../text-input\"\nimport { currencies } from \"./currencies\"\nimport { padTrimValue, removeNonNumericCharacters, replaceDecimalSeparator, sanitizeValue } from \"./utils\"\nimport localeConfig from \"./locales\"\n\n/* -------------------------------------------------------------------------------------------------\n * PriceInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PriceInputProps extends Omit<TextInputProps, \"value\" | \"onChange\" | \"defaultValue\"> {\n    value?: number\n    defaultValue?: number\n    onChange?: (value: number) => void\n    locale?: string\n    currency?: Currency\n}\n\nexport const PriceInput = React.forwardRef<HTMLInputElement, PriceInputProps>((props, ref) => {\n\n    const [{\n        value,\n        defaultValue = 0,\n        locale,\n        currency,\n        onChange,\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<PriceInputProps>(props, useId())\n\n    const { locale: lng, country } = useUILocaleConfig()\n\n    // 1. Get language and currency\n    const _locale = locale ?? lng\n    const _currency = currency ?? currencies[country]\n    const config = useMemo(() => localeConfig[_locale] ?? { decimalSeparator: \".\", groupSeparator: \",\" }, [_locale])\n\n    const _decimalSeparator = config.decimalSeparator\n    const _groupSeparator = config.groupSeparator\n\n    /**\n     * FIXME\n     * /!\\ The formatting is incorrect when the value isn't 2 because of Dinero v1.x (#5)\n     * With Dinero v2.x the API will be able to support the correct formatting\n     * @link https://v2.dinerojs.com/docs/getting-started/quick-start\n     * This will be patched in future updates\n     */\n    const _decimalSpace = 2\n\n    const _multiplier = Math.pow(10, _decimalSpace) // eg: decimalSpace = 2 => 100\n\n    // 2. Track the amount (int)\n    const [amount, setAmount] = useState<number>(value ?? defaultValue)\n    // 3. Track editing state\n    const [isEditing, setIsEditing] = useState(false)\n    // 4. Dinero object depends on amount\n    const dineroObject = Dinero({ amount: amount, currency: _currency, precision: _decimalSpace }).setLocale(_locale)\n    // 5. Get formatted value (string) from dinero object\n    const formattedValue = dineroObject.toFormat()\n    // 6. Track user input (what the user sees), the initial state is formatted\n    const [inputValue, setInputValue] = useState(formatNumber(dineroObject.toUnit().toString(), _locale, _decimalSpace))\n    // -------------------------------------------------------------------------------------------------\n    // Emit updates as dinero object changes\n    useEffect(() => {\n        onChange && onChange(amount)\n    }, [dineroObject])\n\n\n    const toFloat = useCallback((value: string) => {\n        // 1. We remove prefixes, group separators and extra decimals (keep local decimal separator) (eg: 4,555.999 -> 4555.99)\n        let _sanitizedValue = sanitizeValue({\n            value: value,\n            groupSeparator: _groupSeparator,\n            decimalSeparator: _decimalSeparator,\n            decimalsLimit: _decimalSpace\n        })\n        // 2. Convert local decimal to '.' if needed, in order to parse it (eg: fr2,5 -> 2.5)\n        let _valueWithCorrectDecimal = _decimalSeparator !== \".\" ? replaceDecimalSeparator(_sanitizedValue, _decimalSeparator, false) : _sanitizedValue\n        // 3. Keep decimal space before parsing to float (eg: 2.5 -> 2.50)\n        return parseFloat(padTrimValue(_valueWithCorrectDecimal, \".\", _decimalSpace))\n    }, [_decimalSeparator, _groupSeparator])\n\n    function handleOnChange(event: ChangeEvent<HTMLInputElement>) {\n        let _amount = 0\n        let _value = \"\"\n        try {\n            _value = removeNonNumericCharacters(event.target.value ?? \"0\")\n            // Convert the value entered to a float\n            if (_value.length > 0) {\n                _amount = toFloat(_value)\n            }\n        } catch (e) {\n            setInputValue(\"0\")\n            setAmount(_amount ?? 0)\n        }\n        // Maintain the precision (eg: precision 2 => 400 -> 40000)\n        const _fixed = parseInt((_amount * _multiplier).toFixed(_decimalSpace))\n        setAmount(_fixed) // Update dinero object (#4)\n        setInputValue(_value) // Update displayed input (#6)\n    }\n\n\n    return (\n        <>\n            <TextInput\n                value={isEditing ? inputValue : formattedValue}\n                onChange={handleOnChange}\n                onBlur={() => {\n                    setInputValue(v => formatNumber(dineroObject.toUnit().toString(), _locale, _decimalSpace))\n                    setIsEditing(false)\n                }}\n                onFocus={() => {\n                    setIsEditing(true)\n                }}\n                ref={ref}\n                {...basicFieldProps}\n                {...rest}\n            />\n        </>\n    )\n\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Helper functions\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @param input\n * @param lang\n * @param decimalSpace\n */\nfunction formatNumber(input: string | undefined, lang: string, decimalSpace: number): string {\n    // Parse the input string to a number\n    let inputAsNumber = parseFloat(input ?? \"0\")\n    if (isNaN(inputAsNumber)) {\n        // If the input is not a valid number, return an empty string\n        return \"0\"\n    }\n    // Use the Intl object to format the number with 2 decimal places\n    const res = new Intl.NumberFormat(lang, {\n        minimumFractionDigits: decimalSpace,\n        maximumFractionDigits: decimalSpace,\n    }).format(inputAsNumber)\n\n    return res\n}\n\nPriceInput.displayName = \"PriceInput\"\n"
      },
      {
        "name": "utils.ts",
        "dir": "price-input",
        "content": "interface SanitizeValueProps {\r\n    value: string,\r\n    groupSeparator?: string\r\n    decimalSeparator?: string\r\n    allowDecimals?: boolean,\r\n    allowNegativeValue?: boolean\r\n    decimalsLimit?: number\r\n    disableAbbreviations?: boolean\r\n    prefix?: string\r\n    transformRawValue?: (raw: string) => string\r\n}\r\n\r\n/**\r\n * Remove group separator (eg: 1,000 -> 1000)\r\n */\r\nexport const removeSeparators = (value: string, separator = \",\"): string => {\r\n    const reg = new RegExp(escapeRegExp(separator), \"g\")\r\n    return value.replace(reg, \"\")\r\n}\r\n/**\r\n * Add group separator (eg: 2000 -> 2,000)\r\n */\r\nexport const addSeparators = (value: string, separator = \",\"): string => {\r\n    return value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator)\r\n}\r\n/**\r\n * Remove prefix, separators and extra decimals from value\r\n * @author https://github.com/cchanxzy/react-currency-input-field/blob/master/src/components/utils/cleanValue.ts\r\n */\r\nexport const sanitizeValue = ({\r\n                                  value,\r\n                                  groupSeparator = \",\",\r\n                                  decimalSeparator = \".\",\r\n                                  allowDecimals = true,\r\n                                  decimalsLimit = 2,\r\n                                  allowNegativeValue = false,\r\n                                  prefix = \"\",\r\n                                  transformRawValue = (rawValue) => rawValue,\r\n                              }: SanitizeValueProps): string => {\r\n    const transformedValue = transformRawValue(value)\r\n\r\n    if (transformedValue === \"-\") {\r\n        return transformedValue\r\n    }\r\n\r\n    const reg = new RegExp(`((^|\\\\D)-\\\\d)|(-${escapeRegExp(prefix)})`)\r\n    const isNegative = reg.test(transformedValue)\r\n\r\n    // Is there a digit before the prefix? eg: 1$\r\n    const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || []\r\n    const withoutPrefix = prefix\r\n        ? prefixWithValue\r\n            ? transformedValue.replace(prefixWithValue, \"\").concat(preValue ?? \"\")\r\n            : transformedValue.replace(prefix, \"\")\r\n        : transformedValue\r\n    const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator)\r\n    const withoutInvalidChars = removeNonNumericCharacters(withoutSeparators, [\r\n        groupSeparator,\r\n        decimalSeparator,\r\n    ])\r\n\r\n    let valueOnly = withoutInvalidChars\r\n\r\n    const includeNegative = isNegative && allowNegativeValue ? \"-\" : \"\"\r\n\r\n    if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\r\n        const [int, decimals] = withoutInvalidChars.split(decimalSeparator)\r\n        const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals\r\n        const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : \"\"\r\n\r\n        return `${includeNegative}${int}${includeDecimals}`\r\n    }\r\n\r\n    return `${includeNegative}${valueOnly}`\r\n}\r\n\r\n/**\r\n * Remove incorrect characters\r\n * @param input\r\n * @param validChars\r\n */\r\nexport function removeNonNumericCharacters(input: string, validChars = [\",\", \".\"]): string {\r\n    const chars = escapeRegExp(validChars.join(\"\"))\r\n    const reg = new RegExp(`[^\\\\d${chars}]`, \"gi\")\r\n    return input.replace(reg, \"\")\r\n}\r\n\r\n/**\r\n * @author https://github.com/cchanxzy/react-currency-input-field/blob/master/src/components/utils/padTrimValue.ts\r\n * @param value\r\n * @param decimalSeparator\r\n * @param decimalScale\r\n */\r\nexport const padTrimValue = (\r\n    value: string,\r\n    decimalSeparator = \".\",\r\n    decimalScale: number = 2\r\n): string => {\r\n    if (decimalScale === undefined || value === \"\" || value === undefined) {\r\n        return value\r\n    }\r\n\r\n    if (!value.match(/\\d/g)) {\r\n        return \"\"\r\n    }\r\n\r\n    const [int, decimals] = value.split(decimalSeparator)\r\n\r\n    if (decimalScale === 0 && int) {\r\n        return int\r\n    }\r\n\r\n    let newValue = decimals || \"\"\r\n\r\n    if (newValue.length < decimalScale) {\r\n        while (newValue.length < decimalScale) {\r\n            newValue += \"0\"\r\n        }\r\n    } else {\r\n        newValue = newValue.slice(0, decimalScale)\r\n    }\r\n\r\n    return `${int}${decimalSeparator}${newValue}`\r\n}\r\n\r\n\r\n/**\r\n * Set decimal separator to '.' so the string can be converted to an integer later on\r\n */\r\nexport const replaceDecimalSeparator = (\r\n    value: string,\r\n    decimalSeparator: string,\r\n    isNegative: boolean = false\r\n): string => {\r\n    let newValue = value\r\n    if (decimalSeparator && decimalSeparator !== \".\") {\r\n        newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), \"g\"), \".\")\r\n        if (isNegative && decimalSeparator === \"-\") {\r\n            newValue = `-${newValue.slice(1)}`\r\n        }\r\n    }\r\n    return newValue\r\n}\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Escape RegExp\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\r\nconst reHasRegExpChar = RegExp(reRegExpChar.source)\r\n\r\n/**\r\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\r\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\r\n *\r\n * @link https://github.com/lodash/lodash/blob/master/escapeRegExp.js\r\n * @param {string} [value=''] The string to escape.\r\n * @returns {string} Returns the escaped string.\r\n * @example\r\n *\r\n * escapeRegExp('[lodash](https://lodash.com/)')\r\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\r\n */\r\nexport function escapeRegExp(value: string) {\r\n    return (value && reHasRegExpChar.test(value))\r\n        ? value.replace(reRegExpChar, \"\\\\$&\")\r\n        : (value || \"\")\r\n}\r\n"
      }
    ]
  },
  {
    "component": "radio-group",
    "name": "RadioGroup",
    "dependencies": [
      [
        "@zag-js/radio-group",
        "^0.10.2",
        ""
      ],
      [
        "@zag-js/react",
        "^0.10.2",
        ""
      ]
    ],
    "family": [
      "basic-field"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "radio-group",
        "content": "export * from \"./radio-group\"\n"
      },
      {
        "name": "radio-group.tsx",
        "dir": "radio-group",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport * as radio from \"@zag-js/radio-group\"\nimport { normalizeProps, useMachine } from \"@zag-js/react\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React, { useEffect, useId } from \"react\"\nimport { BasicField, BasicFieldAnatomy, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const RadioGroupAnatomy = defineStyleAnatomy({\n    stack: cva(\"UI-RadioGroup__stack w-full space-y-1\"),\n    radioControl: cva([\n        \"UI-RadioGroup__radioControl\",\n        \"inline-flex flex-none justify-center items-center border border-gray-300 rounded-full text-white bg-white cursor-pointer transition duration-10 relative\",\n        \"data-focus:outline-none data-focus:ring-2 ring-offset-1 data-focus:ring-[--ring]\",\n        \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 data-[disabled=true]:cursor-not-allowed\",\n        \"bg-white border-gray-300 hover:bg-gray-100 hover:text-brand-100\",\n        \"data-[checked=true]:bg-brand-500 data-[checked=true]:dark:bg-brand-500 data-[checked=true]:border-brand-500\",\n        \"dark:bg-gray-700 dark:border-gray-700 dark:hover:bg-gray-700\",\n        \"data-[error=true]:border-red-500\"\n    ], {\n        variants: {\n            size: {\n                md: \"h-5 w-5 text-xs\",\n                lg: \"h-6 w-6 text-sm\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    radioLabel: cva([\n        \"UI-RadioGroup__radioLabel font-normal flex-none\",\n        \"data-[disabled=true]:opacity-50\"\n    ], {\n        variants: {\n            size: {\n                md: \"text-md\",\n                lg: \"text-lg\",\n            },\n        },\n        defaultVariants: {\n            size: \"md\",\n        },\n    }),\n    radioHelp: cva([\n        \"UI-RadioGroup__radioHelp\",\n    ]),\n    radioContainer: cva([\n        \"UI-RadioGroup__radioContainer\",\n        \"inline-flex w-full gap-2 items-center relative\"\n    ]),\n    radioIcon: cva([\n        \"UI-RadioGroup__radioIcon\",\n        \"data-[disabled=true]:opacity-50 data-[disabled=true]:cursor-not-allowed\",\n        \"data-[checked=true]:text-white data-[checked=false]:text-transparent\",\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface RadioGroupProps extends BasicFieldOptions, ComponentWithAnatomy<typeof RadioGroupAnatomy>,\n    VariantProps<typeof RadioGroupAnatomy.radioLabel> {\n    value?: string\n    defaultValue?: string\n    options: { value: string, label?: React.ReactNode, help?: React.ReactNode }[]\n    onChange?: (value: string | null) => void\n    checkedIcon?: React.ReactNode\n}\n\nexport const RadioGroup = React.forwardRef<HTMLInputElement, RadioGroupProps>((props, ref) => {\n\n    const [{\n        size = \"md\",\n        value,\n        defaultValue,\n        onChange,\n        options,\n        stackClassName,\n        radioLabelClassName,\n        radioControlClassName,\n        radioContainerClassName,\n        radioHelpClassName,\n        radioIconClassName,\n        checkedIcon,\n    }, basicFieldProps] = extractBasicFieldProps<RadioGroupProps>(props, useId())\n\n    const [state, send] = useMachine(radio.machine({\n        id: basicFieldProps.id,\n        value: value,\n        name: basicFieldProps.name,\n        disabled: basicFieldProps.isDisabled,\n        readOnly: basicFieldProps.isReadOnly,\n        onChange(details) {\n            onChange && onChange(details.value)\n        },\n    }))\n\n    const api = radio.connect(state, send, normalizeProps)\n\n    // Set default value\n    useEffect(() => {\n        if (!value && defaultValue) {\n            api.setValue(defaultValue)\n        }\n    }, [])\n\n    // Control the state\n    useEffect(() => {\n        value && api.setValue(value)\n    }, [value])\n\n    return (\n        <>\n            <BasicField\n                {...basicFieldProps}\n                ref={ref}\n            >\n                <div className={cn(RadioGroupAnatomy.stack(), stackClassName)} {...api.rootProps}>\n\n                    {options.map((opt) => (\n\n                        <label\n                            key={opt.value}\n                            {...api.getRadioProps({ value: opt.value })}\n                            className={cn(\n                                RadioGroupAnatomy.radioContainer(),\n                                radioContainerClassName,\n                            )}\n                        >\n\n                            <div\n                                className={cn(RadioGroupAnatomy.radioControl({ size }), radioControlClassName)}\n                                {...api.getRadioControlProps({ value: opt.value })}\n                                data-error={!!basicFieldProps.error}\n                                data-disabled={!!basicFieldProps.isDisabled}\n                                data-checked={api.value === opt.value}\n                            >\n                                {checkedIcon ? checkedIcon :\n                                    <span\n                                        className={cn(RadioGroupAnatomy.radioIcon(), radioIconClassName)}\n                                        data-disabled={!!basicFieldProps.isDisabled}\n                                        data-checked={api.value === opt.value}\n                                    >\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            viewBox=\"0 0 16 16\"\n                                            width=\"16\"\n                                            height=\"16\"\n                                            stroke=\"currentColor\"\n                                            fill=\"currentColor\"\n                                        >\n                                            <path d=\"M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z\"></path>\n                                        </svg>\n                                    </span>}\n                            </div>\n\n                            <div\n                                className={cn(\n                                    RadioGroupAnatomy.radioLabel({ size }),\n                                    radioLabelClassName,\n                                )}\n                                {...api.getRadioLabelProps({ value: opt.value })}\n                                data-disabled={!!basicFieldProps.isDisabled}\n                            >\n                                {opt.label ?? opt.value}\n                            </div>\n\n                            {!!opt.help && <div\n                                className={cn(\n                                    BasicFieldAnatomy.fieldHelpText(),\n                                    radioHelpClassName,\n                                )}\n                                {...api.getRadioLabelProps({ value: opt.value })}\n                            >\n                                {opt.help}\n                            </div>}\n\n                            <input {...api.getRadioInputProps({ value: opt.value })} ref={ref}/>\n\n                        </label>\n\n                    ))}\n\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nRadioGroup.displayName = \"RadioGroup\"\n"
      }
    ]
  },
  {
    "component": "select",
    "name": "Select",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "select",
        "content": "export * from \"./select\"\n"
      },
      {
        "name": "select.tsx",
        "dir": "select",
        "content": "\"use client\"\n\nimport { cn } from \"../core\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface SelectProps extends Omit<React.ComponentPropsWithRef<\"select\">, \"size\">, InputStyling, BasicFieldOptions {\n    options?: { value: string | number, label?: string }[]\n}\n\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        size = \"md\",\n        intent = \"basic\",\n        leftIcon,\n        leftAddon,\n        rightAddon,\n        rightIcon,\n        defaultValue,\n        options = [],\n        placeholder,\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<SelectProps>(props, useId())\n\n    return (\n        <>\n            <BasicField\n                {...basicFieldProps}\n            >\n                <div className={cn(inputContainerStyle())}>\n\n                    <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                    <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\n\n                    <select\n                        id={basicFieldProps.id}\n                        name={basicFieldProps.name}\n                        className={cn(\n                            \"form-select\",\n                            InputAnatomy.input({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                untouchable: !!basicFieldProps.isDisabled,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            className,\n                        )}\n                        disabled={basicFieldProps.isDisabled}\n                        {...rest}\n                        ref={ref}\n                    >\n                        {placeholder && <option value=\"\">{placeholder}</option>}\n                        {options.map(opt => (\n                            <option key={opt.value} value={opt.value}>{opt.label ?? opt.value}</option>\n                        ))}\n                    </select>\n\n                    <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                    <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\n\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nSelect.displayName = \"Select\"\n"
      }
    ]
  },
  {
    "component": "show-only",
    "name": "ShowOnly",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "show-only",
        "content": "export * from \"./show-only\"\n"
      },
      {
        "name": "show-only.tsx",
        "dir": "show-only",
        "content": "import React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * ShowOnly\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ShowOnlyProps {\n    children?: React.ReactNode\n    when: boolean | undefined\n}\n\nexport const ShowOnly: React.FC<ShowOnlyProps> = (props) => {\n\n    const { children, when } = props\n\n    return (\n        <>\n            {when ? children : null}\n        </>\n    )\n\n}\n\nShowOnly.displayName = \"ShowOnly\"\n"
      }
    ]
  },
  {
    "component": "skeleton",
    "name": "Skeleton",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "skeleton",
        "content": "export * from \"./skeleton\"\n"
      },
      {
        "name": "skeleton.tsx",
        "dir": "skeleton",
        "content": "import { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SkeletonAnatomy = defineStyleAnatomy({\n    skeleton: cva(\"UI-Skeleton__skeleton\", {\n        variants: {\n            type: {\n                box: \"h-14 bg-gray-200 w-full rounded-[--radius] animate-pulse\",\n                text: \"h-2 bg-gray-100 rounded-[--radius] animate-purple\",\n            },\n        },\n        defaultVariants: {},\n    }),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Skeleton\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface SkeletonProps extends React.ComponentPropsWithRef<\"div\">, VariantProps<typeof SkeletonAnatomy.skeleton>,\n    ComponentWithAnatomy<typeof SkeletonAnatomy> {\n    type?: \"box\" | \"text\"\n}\n\nexport const Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>((props, ref) => {\n\n    const {\n        children,\n        className,\n        type = \"box\",\n        skeletonClassName,\n        ...rest\n    } = props\n\n    // Text\n    if (type === \"text\") {\n        return (\n            <>\n                <div className=\"flex flex-col gap-3\">\n                    <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                    <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                    <div className={cn(\"w-full\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                    <div className={cn(\"w-[98%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                    <div className={cn(\"w-[95%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                    <div className={cn(\"w-[90%]\", SkeletonAnatomy.skeleton({ type }), skeletonClassName, className)} {...rest} ref={ref}></div>\n                </div>\n            </>\n        )\n    }\n\n    // Box\n    return (\n        <>\n            <div\n                className={cn(\n                    SkeletonAnatomy.skeleton({ type }),\n                    skeletonClassName,\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            ></div>\n        </>\n    )\n\n})\n\nSkeleton.displayName = \"Skeleton\"\n"
      }
    ]
  },
  {
    "component": "stats",
    "name": "Stats",
    "dependencies": [],
    "family": [
      "show-only"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "stats",
        "content": "export * from \"./stats\"\r\n"
      },
      {
        "name": "stats.tsx",
        "dir": "stats",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { ShowOnly } from \"../show-only\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const StatsAnatomy = defineStyleAnatomy({\r\n    list: cva([\r\n        \"UI-Stats__list\",\r\n        \"grid grid-cols-1 divide-y divide-[--border] overflow-hidden md:grid-cols-3 md:divide-y-0 md:divide-x\"\r\n    ]),\r\n    item: cva([\r\n        \"UI-Stats__item\",\r\n        \"relative px-4 py-5 sm:p-6\"\r\n    ]),\r\n    name: cva([\r\n        \"UI-Stats__name\",\r\n        \"text-sm font-normal text-[--muted]\"\r\n    ]),\r\n    value: cva([\r\n        \"UI-Stats__value\",\r\n        \"mt-1 flex items-baseline md:block lg:flex text-2xl md:text-3xl font-semibold\"\r\n    ]),\r\n    unit: cva([\r\n        \"UI-Stats__unit\",\r\n        \"ml-2 text-sm font-medium text-[--muted]\"\r\n    ]),\r\n    trend: cva([\r\n        \"UI-Stats__trend\",\r\n        \"inline-flex items-baseline text-sm font-medium\",\r\n        \"data-[trend=up]:text-[--green] data-[trend=down]:text-[--red]\"\r\n    ]),\r\n    icon: cva([\r\n        \"UI-Stats_icon\",\r\n        \"absolute top-5 right-5 opacity-30 text-3xl sm:text-4xl xl:text-5xl\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Stats\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface StatsProps extends React.ComponentPropsWithRef<\"dl\">, ComponentWithAnatomy<typeof StatsAnatomy> {\r\n    children?: React.ReactNode,\r\n    items: {\r\n        name: string,\r\n        value: string | number,\r\n        unit?: string | number,\r\n        change?: string | number,\r\n        trend?: \"up\" | \"down\",\r\n        icon?: React.ReactElement\r\n    }[]\r\n}\r\n\r\nexport const Stats = React.forwardRef<HTMLDListElement, StatsProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        listClassName,\r\n        itemClassName,\r\n        nameClassName,\r\n        valueClassName,\r\n        unitClassName,\r\n        trendClassName,\r\n        iconClassName,\r\n        className,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n        >\r\n            <dl\r\n                className={cn(StatsAnatomy.list(), listClassName, className)}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {items.map((item) => (\r\n                    <div\r\n                        key={item.name}\r\n                        className={cn(StatsAnatomy.item(), itemClassName)}\r\n                    >\r\n\r\n                        <dt className={cn(StatsAnatomy.name(), nameClassName)}>{item.name}</dt>\r\n\r\n                        <dd className={cn(StatsAnatomy.value(), valueClassName)}>\r\n                            {item.value}\r\n                            <span className={cn(StatsAnatomy.unit(), unitClassName)}>{item.unit}</span>\r\n                        </dd>\r\n\r\n                        <ShowOnly when={!!item.change || !!item.trend}>\r\n                            <div\r\n                                className={cn(StatsAnatomy.trend(), trendClassName)}\r\n                                data-trend={item.trend}\r\n                            >\r\n                                {item.trend && <span> {item.trend === \"up\" ? \"+\" : \"-\"}</span>}\r\n                                {item.change}\r\n                            </div>\r\n                        </ShowOnly>\r\n\r\n                        <div className={cn(StatsAnatomy.icon(), iconClassName)}>\r\n                            {item.icon}\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </dl>\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nStats.displayName = \"Stats\"\r\n"
      }
    ]
  },
  {
    "component": "switch",
    "name": "Switch",
    "dependencies": [
      [
        "@radix-ui/react-switch",
        "^1.0.3",
        ""
      ]
    ],
    "family": [
      "basic-field",
      "show-only"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "switch",
        "content": "export * from \"./switch\"\n"
      },
      {
        "name": "switch.tsx",
        "dir": "switch",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\nimport { cva } from \"class-variance-authority\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport type { SwitchProps as SwitchPrimitiveProps } from \"@radix-ui/react-switch\"\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\"\nimport { ShowOnly } from \"../show-only\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const SwitchAnatomy = defineStyleAnatomy({\n    container: cva([\n        \"UI-Checkbox__rootLabel inline-flex gap-2 items-center\"\n    ]),\n    control: cva([\n        \"peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border border-transparent transition-colors disabled:cursor-not-allowed disabled:opacity-50\",\n        \"outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[--ring] focus-visible:ring-offset-1\",\n        \"data-[state=unchecked]:bg-gray-200 dark:data-[state=unchecked]:bg-gray-700\", // Unchecked\n        \"data-[state=unchecked]:hover:bg-gray-300 dark:data-[state=unchecked]:hover:bg-gray-600\", // Unchecked hover\n        \"data-[state=checked]:bg-brand\", // Checked\n        \"data-[error=true]:border-red-500\", // Checked\n    ]),\n    thumb: cva([\n        \"pointer-events-none block h-4 w-4 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-[1.4rem] data-[state=unchecked]:translate-x-1\"\n    ]),\n    label: cva([\n        \"UI-Switch__label\",\n        \"relative font-normal\",\n        \"data-disabled:text-gray-300\",\n    ])\n})\n\n/* -------------------------------------------------------------------------------------------------\n * Switch\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface SwitchProps\n    extends Omit<SwitchPrimitiveProps, \"disabled\" | \"required\" | \"onCheckedChange\" | \"onChange\">,\n        ComponentWithAnatomy<typeof SwitchAnatomy>,\n        BasicFieldOptions {\n    onChange?: (value: boolean) => void\n}\n\nexport const Switch = React.forwardRef<HTMLButtonElement, SwitchProps>(({ className, ...props }, ref) => {\n\n    const [{\n        value,\n        onChange,\n        controlClassName,\n        labelClassName,\n        containerClassName,\n        thumbClassName,\n        ...rest\n    }, { label, ...basicFieldProps }] = extractBasicFieldProps(props, useId())\n\n    return (\n        <BasicField\n            {...basicFieldProps} // We do not include the label\n            id={basicFieldProps.id}\n        >\n            <div\n                className={cn(\n                    SwitchAnatomy.container(),\n                    containerClassName,\n                )}\n            >\n                <SwitchPrimitive.Root\n                    id={basicFieldProps.id}\n                    ref={ref}\n                    className={cn(\n                        SwitchAnatomy.control(),\n                        controlClassName,\n                        className\n                    )}\n                    disabled={basicFieldProps.isDisabled}\n                    required={basicFieldProps.isRequired}\n                    data-error={!!basicFieldProps.error}\n                    onCheckedChange={(checked) => {\n                        onChange && onChange(checked)\n                    }}\n                    {...rest}\n                >\n                    <SwitchPrimitive.Thumb\n                        className={cn(\n                            SwitchAnatomy.thumb(),\n                            thumbClassName\n                        )}\n                    />\n                </SwitchPrimitive.Root>\n                <ShowOnly when={!!label || !!value}>\n                    <label\n                        className={cn(\n                            SwitchAnatomy.label(),\n                            labelClassName,\n                        )}\n                        htmlFor={basicFieldProps.id}\n                    >\n                        {label ?? value}\n                    </label>\n                </ShowOnly>\n            </div>\n        </BasicField>\n    )\n\n})\n\nSwitch.displayName = \"Switch\"\n"
      }
    ]
  },
  {
    "component": "tabs",
    "name": "Tabs",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tabs",
        "content": "export * from \"./navigation-tabs\"\r\nexport * from \"./tab-panels\"\r\n"
      },
      {
        "name": "navigation-tabs.tsx",
        "dir": "tabs",
        "content": "import React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const NavigationTabsAnatomy = defineStyleAnatomy({\r\n    nav: cva([\r\n        \"UI-NavigationTabs__nav\",\r\n        \"flex w-full overflow-hidden overflow-x-auto\"\r\n    ]),\r\n    tab: cva([\r\n        \"UI-NavigationTabs__tab\",\r\n        \"group/navtabs inline-flex flex-none shrink-0 basis-auto items-center py-4 px-2 font-medium text-sm transition outline-none px-4 min-w-0 justify-center\",\r\n        \"focus-visible:bg-[--highlight]\",\r\n        \"text-[--muted]\",\r\n        \"hover:text-[--text-color]\",\r\n        \"data-[current=true]:border-[--brand] data-[current=true]:font-semibold data-[current=true]:text-[--brand]\"\r\n    ]),\r\n    icon: cva([\r\n        \"UI-NavigationTabs__icon\",\r\n        \"-ml-0.5 mr-2 h-5 w-5\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * NavigationTabs\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface NavigationTabsProps extends React.ComponentPropsWithRef<\"nav\">, ComponentWithAnatomy<typeof NavigationTabsAnatomy> {\r\n    items: {\r\n        name: string,\r\n        href: string | null | undefined,\r\n        icon?: ((props: any) => JSX.Element) | null | undefined,\r\n        isCurrent: boolean\r\n    }[]\r\n}\r\n\r\nexport const NavigationTabs = React.forwardRef<HTMLElement, NavigationTabsProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        navClassName,\r\n        tabClassName,\r\n        iconClassName,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <nav\r\n            ref={ref}\r\n            className={cn(NavigationTabsAnatomy.nav(), navClassName, className)}\r\n            {...rest}\r\n        >\r\n            {items.map((tab) => (\r\n                <a\r\n                    key={tab.name}\r\n                    href={tab.href ?? \"#\"}\r\n                    className={cn(\r\n                        NavigationTabsAnatomy.tab(),\r\n                        tabClassName,\r\n                    )}\r\n                    aria-current={tab.isCurrent ? \"page\" : undefined}\r\n                    data-current={tab.isCurrent}\r\n                >\r\n                    {tab.icon && <tab.icon\r\n                        className={cn(\r\n                            NavigationTabsAnatomy.icon(),\r\n                            iconClassName\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                        data-current={tab.isCurrent}\r\n                    />}\r\n                    <span>{tab.name}</span>\r\n                </a>\r\n            ))}\r\n        </nav>\r\n    )\r\n\r\n})\r\n\r\nNavigationTabs.displayName = \"NavigationTabs\"\r\n"
      },
      {
        "name": "tab-panels.tsx",
        "dir": "tabs",
        "content": "\"use client\"\r\n\r\nimport React, { Fragment } from \"react\"\r\nimport { cn, ComponentWithAnatomy, createPolymorphicComponent, defineStyleAnatomy, getChildDisplayName } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport type { TabListProps as TabPrimitiveListProps, TabProps as TabPrimitiveProps } from \"@headlessui/react\"\r\nimport { Tab as TabPrimitive } from \"@headlessui/react\"\r\n\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TabPanelsAnatomy = defineStyleAnatomy({\r\n    panels: cva([\r\n        \"UI-TabPanels__panels\",\r\n    ])\r\n})\r\n\r\nexport const TabNavAnatomy = defineStyleAnatomy({\r\n    nav: cva([\r\n        \"UI-TabNav__nav\",\r\n        \"isolate flex border-b\"\r\n    ])\r\n})\r\n\r\nexport const TabAnatomy = defineStyleAnatomy({\r\n    tab: cva([\r\n        \"UI-Tab__tab\",\r\n        \"relative min-w-0 flex-1 overflow-hidden py-4 px-4 text-sm font-medium text-center focus:z-10\",\r\n        \"flex items-center justify-center gap-2 border-b-2 -mb-px\",\r\n        \"text-[--muted] data-[selected=true]:text-[--brand] data-[selected=true]:border-brand dark:data-[selected=true]:border-brand-200\",\r\n        \"border-[--border] hover:border-gray-300 dark:hover:border-gray-600\",\r\n        \"focus-visible:bg-[--highlight] outline-none\",\r\n        \"cursor-pointer\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TabPanels\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface TabPanelsProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof TabPanelsAnatomy>,\r\n    ComponentWithAnatomy<typeof TabNavAnatomy>,\r\n    ComponentWithAnatomy<typeof TabAnatomy> {\r\n}\r\n\r\nconst _TabPanels = (props: TabPanelsProps) => {\r\n\r\n    const {\r\n        children,\r\n        panelsClassName,\r\n        navClassName,\r\n        tabClassName,\r\n        className,\r\n        ref,\r\n        ...rest\r\n    } = props\r\n\r\n    const itemsWithProps = React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child) && getChildDisplayName(child) === \"TabNav\") {\r\n            return React.cloneElement(child, { tabClassName, navClassName } as any)\r\n        }\r\n        return child\r\n    })\r\n\r\n    return (\r\n        <TabPrimitive.Group\r\n        >\r\n            <div\r\n                className={cn(TabPanelsAnatomy.panels(), panelsClassName)}\r\n                {...rest}\r\n                ref={ref}\r\n            >\r\n                {itemsWithProps}\r\n            </div>\r\n        </TabPrimitive.Group>\r\n    )\r\n\r\n}\r\n\r\n_TabPanels.displayName = \"TabPanels\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TabNav\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TabNavProps extends TabPrimitiveListProps<\"div\">,\r\n    ComponentWithAnatomy<typeof TabNavAnatomy>,\r\n    ComponentWithAnatomy<typeof TabAnatomy> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst TabNav: React.FC<TabNavProps> = React.forwardRef<HTMLDivElement, TabNavProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        navClassName,\r\n        tabClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    const itemsWithProps = React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child) && getChildDisplayName(child) === \"Tab\") {\r\n            return React.cloneElement(child, { tabClassName } as any)\r\n        }\r\n        return child\r\n    })\r\n\r\n    return (\r\n        <TabPrimitive.List\r\n            className={cn(TabNavAnatomy.nav(), navClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {itemsWithProps}\r\n        </TabPrimitive.List>\r\n    )\r\n\r\n})\r\n\r\nTabNav.displayName = \"TabNav\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tab\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ninterface TabProps extends TabPrimitiveProps<\"div\">, ComponentWithAnatomy<typeof TabAnatomy> {\r\n    children?: React.ReactNode\r\n}\r\n\r\nconst Tab: React.FC<TabProps> = React.forwardRef<HTMLDivElement, TabProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        className,\r\n        tabClassName,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <TabPrimitive\r\n            as={Fragment}\r\n        >\r\n            {({ selected }) => (\r\n                <div\r\n                    className={cn(TabAnatomy.tab(), tabClassName, className)}\r\n                    {...rest}\r\n                    ref={ref}\r\n                    data-selected={selected}\r\n                >\r\n                    {children}\r\n                </div>\r\n            )}\r\n        </TabPrimitive>\r\n    )\r\n\r\n})\r\n\r\nTab.displayName = \"Tab\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Component\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\n_TabPanels.Tab = Tab\r\n_TabPanels.Nav = TabNav\r\n_TabPanels.Container = TabPrimitive.Panels\r\n_TabPanels.Panel = TabPrimitive.Panel\r\n\r\n_TabPanels.Container.displayName = \"TabContainer\"\r\n_TabPanels.Panel.displayName = \"TabPanel\"\r\n\r\nexport const TabPanels = createPolymorphicComponent<\"div\", TabPanelsProps, {\r\n    Tab: typeof Tab,\r\n    Nav: typeof TabNav,\r\n    Container: typeof TabPrimitive.Panels\r\n    Panel: typeof TabPrimitive.Panel\r\n}>(_TabPanels)\r\n"
      }
    ]
  },
  {
    "component": "text-input",
    "name": "TextInput",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "text-input",
        "content": "export * from \"./text-input\"\n"
      },
      {
        "name": "text-input.tsx",
        "dir": "text-input",
        "content": "import { cn } from \"../core\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAddon, InputAnatomy, inputContainerStyle, InputIcon, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * TextInput\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface TextInputProps extends Omit<React.ComponentPropsWithRef<\"input\">, \"size\">,\n    Omit<InputStyling, \"hasError\" | \"isDisabled\">,\n    BasicFieldOptions {\n}\n\nexport const TextInput = React.forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n\n    const [{\n        className,\n        size = \"md\",\n        intent = \"basic\",\n        leftAddon = undefined,\n        leftIcon = undefined,\n        rightAddon = undefined,\n        rightIcon = undefined,\n        disabled,\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps<TextInputProps>(props, useId())\n\n    return (\n        <>\n            <BasicField\n                {...basicFieldProps}\n            >\n                <div className={cn(inputContainerStyle())}>\n\n                    <InputAddon addon={leftAddon} rightIcon={rightIcon} leftIcon={leftIcon} size={size} side={\"left\"}/>\n                    <InputIcon icon={leftIcon} size={size} side={\"left\"}/>\n\n                    <input\n                        // type=\"\" /!\\ We do not put the type since it can be multiple\n                        id={basicFieldProps.id}\n                        name={basicFieldProps.name}\n                        className={cn(\n                            \"form-input\",\n                            InputAnatomy.input({\n                                size,\n                                intent,\n                                hasError: !!basicFieldProps.error,\n                                untouchable: !!basicFieldProps.isDisabled,\n                                hasRightAddon: !!rightAddon,\n                                hasRightIcon: !!rightIcon,\n                                hasLeftAddon: !!leftAddon,\n                                hasLeftIcon: !!leftIcon,\n                            }),\n                            className,\n                        )}\n                        disabled={basicFieldProps.isDisabled || disabled}\n                        {...rest}\n                        ref={ref}\n                    />\n\n                    <InputAddon addon={rightAddon} rightIcon={rightIcon} leftIcon={leftAddon} size={size} side={\"right\"}/>\n                    <InputIcon icon={rightIcon} size={size} side={\"right\"}/>\n\n                </div>\n            </BasicField>\n        </>\n    )\n\n})\n\nTextInput.displayName = \"TextInput\"\n"
      }
    ]
  },
  {
    "component": "textarea",
    "name": "Textarea",
    "dependencies": [],
    "family": [
      "basic-field",
      "input"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "textarea",
        "content": "export * from \"./textarea\"\n"
      },
      {
        "name": "textarea.tsx",
        "dir": "textarea",
        "content": "import { cn } from \"../core\"\nimport React, { useId } from \"react\"\nimport { BasicField, BasicFieldOptions, extractBasicFieldProps } from \"../basic-field\"\nimport { InputAnatomy, InputStyling } from \"../input\"\n\n/* -------------------------------------------------------------------------------------------------\n * Textarea\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface TextareaProps extends React.ComponentPropsWithRef<\"textarea\">, InputStyling, BasicFieldOptions {\n}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\n\n    const [{\n        children,\n        className,\n        intent = \"basic\",\n        ...rest\n    }, basicFieldProps] = extractBasicFieldProps(props, useId())\n\n    return (\n        <>\n            <BasicField\n                className={cn(\"w-full gap-1\")}\n                {...basicFieldProps}\n            >\n            <textarea\n                id={basicFieldProps.id}\n                className={cn(\n                    \"form-textarea\",\n                    InputAnatomy.input({\n                        intent,\n                        hasError: !!basicFieldProps.error,\n                        untouchable: !!basicFieldProps.isDisabled,\n                    }),\n                    className,\n                )}\n                {...rest}\n                ref={ref}\n            />\n            </BasicField>\n        </>\n    )\n\n})\n\nTextarea.displayName = \"Textarea\"\n"
      }
    ]
  },
  {
    "component": "timeline",
    "name": "Timeline",
    "dependencies": [],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "timeline",
        "content": "export * from \"./timeline\"\r\n"
      },
      {
        "name": "timeline.tsx",
        "dir": "timeline",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TimelineAnatomy = defineStyleAnatomy({\r\n    root: cva([\r\n        \"UI-Timeline__root\",\r\n    ]),\r\n    item: cva([\r\n        \"UI-Timeline__item\",\r\n        \"flex text-md\"\r\n    ]),\r\n    leftSection: cva([\r\n        \"UI-Timeline__leftSection\",\r\n        \"flex flex-col items-center mr-4\"\r\n    ]),\r\n    icon: cva([\r\n        \"UI-Timeline__icon\",\r\n        \"flex items-center justify-center w-8 h-8 border border-[--border] rounded-full\"\r\n    ]),\r\n    line: cva([\r\n        \"UI-Timeline__line\",\r\n        \"w-px h-full bg-[--border]\"\r\n    ]),\r\n    detailsSection: cva([\r\n        \"UI-Timeline__detailsSection\",\r\n        \"pb-8\"\r\n    ]),\r\n    title: cva([\r\n        \"UI-Timeline__title\",\r\n        \"text-md font-semibold\"\r\n    ]),\r\n    description: cva([\r\n        \"UI-Timeline__description\",\r\n        \"text-[--muted] text-sm\"\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Timeline\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface TimelineProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof TimelineAnatomy> {\r\n    children?: React.ReactNode\r\n    items?: {\r\n        title: React.ReactNode\r\n        description?: React.ReactNode\r\n        content?: React.ReactNode\r\n        icon: React.ReactNode\r\n        unstyledTitle?: boolean\r\n        unstyledDescription?: boolean\r\n        unstyledIcon?: boolean\r\n        titleClassName?: string\r\n        descriptionClassName?: string\r\n        iconClassName?: string\r\n        lineClassName?: string\r\n    }[]\r\n}\r\n\r\nexport const Timeline = React.forwardRef<HTMLDivElement, TimelineProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        rootClassName,\r\n        itemClassName,\r\n        leftSectionClassName,\r\n        descriptionClassName,\r\n        detailsSectionClassName,\r\n        titleClassName,\r\n        lineClassName,\r\n        iconClassName,\r\n        className,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(TimelineAnatomy.root(), rootClassName, className)}\r\n            {...rest}\r\n            ref={ref}\r\n        >\r\n            {items?.map((item, idx) => (\r\n                <div\r\n                    key={`${item.title}-${idx}`}\r\n                    className={cn(\r\n                        TimelineAnatomy.item(), itemClassName\r\n                    )}\r\n                >\r\n                    {/*Left section*/}\r\n                    <div className={cn(\r\n                        TimelineAnatomy.leftSection(), leftSectionClassName\r\n                    )}>\r\n                        <div>\r\n                            <div className={cn(\r\n                                item.unstyledIcon ? null : TimelineAnatomy.icon(), iconClassName, item.iconClassName\r\n                            )}>\r\n                                {item.icon}\r\n                            </div>\r\n                        </div>\r\n                        {(idx < items.length - 1) && <div className={cn(TimelineAnatomy.line(), lineClassName, item.lineClassName)}/>}\r\n                    </div>\r\n\r\n                    {/*Details section*/}\r\n                    <div className={cn(\r\n                        TimelineAnatomy.detailsSection(), detailsSectionClassName\r\n                    )}>\r\n\r\n                        <p className={cn(\r\n                            item.unstyledTitle ? null : TimelineAnatomy.title(), titleClassName, item.titleClassName\r\n                        )}>{item.title}</p>\r\n\r\n                        {item.description && <p className={cn(\r\n                            item.unstyledDescription ? null : TimelineAnatomy.description(), descriptionClassName, item.descriptionClassName\r\n                        )}>\r\n                            {item.description}\r\n                        </p>}\r\n\r\n                        {item.content}\r\n\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nTimeline.displayName = \"Timeline\"\r\n"
      }
    ]
  },
  {
    "component": "toast",
    "name": "Toast",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ],
      [
        "react-hot-toast",
        "^2.4.1",
        ""
      ]
    ],
    "family": [
      "button"
    ],
    "files": [
      {
        "name": "index.tsx",
        "dir": "toast",
        "content": "export * from \"./toast\"\r\nexport * from \"./use-toast\"\r\n"
      },
      {
        "name": "toast.tsx",
        "dir": "toast",
        "content": "\"use client\"\r\n\r\nimport { Transition } from \"@headlessui/react\"\r\nimport React from \"react\"\r\nimport toast, { resolveValue, Toast as ToastType, Toaster } from \"react-hot-toast\"\r\nimport { cn, defineStyleAnatomy } from \"../core\"\r\nimport { CloseButton } from \"../button\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ToastAnatomy = defineStyleAnatomy({\r\n    toast: cva([\r\n        \"UI-Toast__toast\",\r\n        \"relative transform py-3 px-6 text-white flex rounded-lg shadow-md\",\r\n        \"data-[type=error]:bg-red-500\",\r\n        \"data-[type=success]:bg-green-500\",\r\n        \"data-[type=loading]:bg-[--paper]\",\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Toast\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface ToastProps {\r\n    t: ToastType\r\n}\r\n\r\nexport const Toast = React.forwardRef<HTMLDivElement, ToastProps>((props, ref) => {\r\n\r\n    const {\r\n        t,\r\n        ...rest\r\n    } = props\r\n\r\n\r\n    return (\r\n        <>\r\n            <Transition\r\n                appear\r\n                show={t.visible}\r\n                className={cn(ToastAnatomy.toast())}\r\n                data-type={t.type}\r\n                enter=\"transition-all duration-150\"\r\n                enterFrom=\"opacity-0 scale-50\"\r\n                enterTo=\"opacity-100 scale-100\"\r\n                leave=\"transition-all duration-150\"\r\n                leaveFrom=\"opacity-100 scale-100\"\r\n                leaveTo=\"opacity-0 scale-75\"\r\n            >\r\n                <div className=\"h-full flex items-center\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                         strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"w-5 h-5\">\r\n                        {t.type === \"error\" && <>\r\n                            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                            <line x1=\"15\" x2=\"9\" y1=\"9\" y2=\"15\"></line>\r\n                            <line x1=\"9\" x2=\"15\" y1=\"9\" y2=\"15\"></line>\r\n                        </>}\r\n                        {t.type === \"success\" && <>\r\n                            <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"></path>\r\n                            <path d=\"m9 12 2 2 4-4\"></path>\r\n                        </>}\r\n                    </svg>\r\n                </div>\r\n                <p className=\"py-1 px-2 pr-6\">{resolveValue(t.message, t)}</p>\r\n                <CloseButton className=\"absolute top-1 right-1\" size=\"sm\" intent=\"white-basic\" onClick={() => toast.dismiss(t.id)}/>\r\n            </Transition>\r\n        </>\r\n    )\r\n\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * ToastProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const ToastProvider: React.FC<{}> = () => {\r\n    return (\r\n        <Toaster>\r\n            {(t) => (\r\n                <Toast t={t}/>\r\n            )}\r\n        </Toaster>\r\n    )\r\n}\r\n"
      },
      {
        "name": "use-toast.ts",
        "dir": "toast",
        "content": "import toast from \"react-hot-toast\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * useToast\r\n * - You can add more types\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const useToast = () => {\r\n\r\n    return {\r\n        success: (message?: string) => {\r\n\r\n            toast.success(message ?? \"\")\r\n\r\n        },\r\n        error: (message?: string) => {\r\n\r\n            toast.error(message ?? \"\")\r\n\r\n        },\r\n    }\r\n\r\n}\r\n"
      }
    ]
  },
  {
    "component": "tooltip",
    "name": "Tooltip",
    "dependencies": [
      [
        "@radix-ui/react-tooltip",
        "^1.0.6",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "tooltip",
        "content": "export * from \"./tooltip\"\r\n"
      },
      {
        "name": "tooltip.tsx",
        "dir": "tooltip",
        "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport type { TooltipContentProps as TooltipPrimitiveContentProps } from \"@radix-ui/react-tooltip\"\r\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TooltipAnatomy = defineStyleAnatomy({\r\n    tooltip: cva([\r\n        \"UI-Tooltip__tooltip\",\r\n        \"z-50 overflow-hidden rounded-[--radius] px-3 py-1.5 text-sm shadow-md animate-in fade-in-50\",\r\n        \"bg-gray-800 text-white\",\r\n        \"data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1\"\r\n    ])\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Tooltip\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface TooltipProps extends React.ComponentPropsWithRef<\"div\">,\r\n    ComponentWithAnatomy<typeof TooltipAnatomy>,\r\n    TooltipPrimitiveContentProps {\r\n    trigger: React.ReactElement\r\n}\r\n\r\nexport const Tooltip: React.FC<TooltipProps> = React.forwardRef<HTMLDivElement, TooltipProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        tooltipClassName,\r\n        className,\r\n        trigger,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <TooltipPrimitive.Provider delayDuration={50}>\r\n            <TooltipPrimitive.Root>\r\n                <TooltipPrimitive.Trigger asChild>\r\n                    {trigger}\r\n                </TooltipPrimitive.Trigger>\r\n                <TooltipPrimitive.Content\r\n                    className={cn(TooltipAnatomy.tooltip(), tooltipClassName, className)}\r\n                    {...rest}\r\n                    ref={ref}\r\n                >\r\n                    {children}\r\n                </TooltipPrimitive.Content>\r\n            </TooltipPrimitive.Root>\r\n        </TooltipPrimitive.Provider>\r\n    )\r\n\r\n})\r\n\r\nTooltip.displayName = \"Tooltip\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * TooltipProvider\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const TooltipProvider = TooltipPrimitive.Provider\r\n"
      }
    ]
  },
  {
    "component": "typesafe-form",
    "name": "TypesafeForm",
    "dependencies": [
      [
        "zod",
        "^3.21.4",
        ""
      ],
      [
        "@internationalized/date",
        "^3.2.0",
        ""
      ],
      [
        "@react-types/shared",
        "^3.18.1",
        ""
      ],
      [
        "date-fns",
        "^2.30.0",
        ""
      ],
      [
        "react-hook-form",
        "^7.45.0",
        ""
      ],
      [
        "@hookform/resolvers",
        "^3.1.1",
        ""
      ]
    ],
    "family": [
      "loading-spinner",
      "button",
      "modal",
      "basic-field",
      "text-input",
      "textarea",
      "date-time",
      "select",
      "number-input",
      "multi-select",
      "combobox",
      "switch",
      "checkbox",
      "radio-group",
      "phone-number-input",
      "price-input",
      "address-input",
      "color-input",
      "file-upload",
      "show-only"
    ],
    "files": [
      {
        "name": "create-typesafeform-schema.ts",
        "dir": "typesafe-form",
        "content": "import { z as zod, ZodType } from \"zod\"\nimport { schemaPresets } from \"./schema-presets\"\n\n/* -------------------------------------------------------------------------------------------------\n * Helper type\n * -----------------------------------------------------------------------------------------------*/\n\nexport type InferType<S extends ZodType<any, any, any>> = zod.infer<S>\n\n\n/* -------------------------------------------------------------------------------------------------\n * Helper functions\n * -----------------------------------------------------------------------------------------------*/\n\ntype DataSchemaCallback<S extends zod.ZodRawShape> = ({ z, presets }: { z: typeof zod, presets: typeof schemaPresets }) => zod.ZodObject<S>\n\nexport const createTypesafeFormSchema = <S extends zod.ZodRawShape>(callback: DataSchemaCallback<S>): zod.ZodObject<S> => {\n    return callback({ z: zod, presets: schemaPresets })\n}\n"
      },
      {
        "name": "danger-zone.tsx",
        "dir": "typesafe-form",
        "content": "\"use client\"\n\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy, useUILocaleConfig } from \"../core\"\nimport React, { useState } from \"react\"\nimport locales from \"./locales.json\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport { Button } from \"../button\"\nimport { Modal } from \"../modal\"\nimport { cva } from \"class-variance-authority\"\n\n/* -------------------------------------------------------------------------------------------------\n * Anatomy\n * -----------------------------------------------------------------------------------------------*/\n\nexport const DangerZoneAnatomy = defineStyleAnatomy({\n    container: cva([\n        \"UI-DangerZone__container\",\n        \"p-4 flex flex-col sm:flex-row gap-2 text-center sm:text-left rounded-md border border-[--red]\"\n    ]),\n    icon: cva([\n        \"UI-DangerZone__icon\",\n        \"place-self-center sm:place-self-start text-red-500 w-4 mt-2\"\n    ]),\n    title: cva([\n        \"UI-DangerZone__title\",\n        \"text-lg text-[--red] font-semibold\"\n    ]),\n    dialogTitle: cva([\n        \"UI-DangerZone__dialogTitle\",\n        \"text-lg font-medium leading-6\"\n    ]),\n    dialogBody: cva([\n        \"UI-DangerZone__dialogBody\",\n        \"mt-2 text-sm text-[--muted]\"\n    ]),\n    dialogAction: cva([\n        \"UI-DangerZone__dialogAction\",\n        \"mt-4 flex gap-2\"\n    ]),\n})\n\n/* -------------------------------------------------------------------------------------------------\n * DangerZone\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface DangerZoneProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof DangerZoneAnatomy> {\n    actionText: string\n    onDelete?: () => void\n    /**\n     * @default true\n     **/\n    showLoadingOverlayOnDelete?: boolean\n    locale?: \"fr\" | \"en\"\n}\n\nexport const DangerZone = React.forwardRef<HTMLDivElement, DangerZoneProps>((props, ref) => {\n\n    const {\n        children,\n        actionText,\n        onDelete,\n        className,\n        locale,\n        showLoadingOverlayOnDelete = true,\n        titleClassName,\n        iconClassName,\n        containerClassName,\n        dialogBodyClassName,\n        dialogTitleClassName,\n        dialogActionClassName,\n        ...rest\n    } = props\n\n    const { locale: lng } = useUILocaleConfig()\n\n    const _lng = locale || lng\n\n    const [isOpen, setIsOpen] = useState(false)\n\n    const [blockScreen, setBlockScreen] = useState<boolean>(false)\n\n    return (\n        <>\n            <LoadingOverlay show={blockScreen}/>\n\n            <div className={cn(DangerZoneAnatomy.container(), containerClassName, className)} {...rest}>\n                <span className={cn(DangerZoneAnatomy.icon(), iconClassName)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                        <path\n                            d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path>\n                    </svg>\n                </span>\n                <div>\n                    <h2 className={cn(DangerZoneAnatomy.title(), titleClassName)}>{locales[\"dangerZone\"][\"name\"][_lng]}</h2>\n                    <p className=\"\"><span className=\"font-semibold\">{actionText}</span>. {locales[\"dangerZone\"][\"irreversible_action\"][_lng]}</p>\n                    <Button\n                        size=\"sm\"\n                        intent=\"alert-subtle\"\n                        className=\"mt-2\"\n                        leftIcon={<span className=\"w-4\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                <path\n                                    d=\"M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z\"></path>\n                            </svg>\n                        </span>}\n                        onClick={() => setIsOpen(true)}\n                    >{locales[\"dangerZone\"][\"delete\"][_lng]}</Button>\n                </div>\n            </div>\n\n            <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <h3 className={cn(DangerZoneAnatomy.dialogTitle(), dialogTitleClassName)}>\n                    {locales[\"dangerZone\"][\"confirm_delete\"][_lng]}\n                </h3>\n                <div className={cn(DangerZoneAnatomy.dialogBody(), dialogBodyClassName)}>\n                    {locales[\"dangerZone\"][\"irreversible_action\"][_lng]}\n                </div>\n\n                <div className={cn(DangerZoneAnatomy.dialogAction(), dialogActionClassName)}>\n                    <Button\n                        intent=\"gray-outline\"\n                        size=\"sm\"\n                        onClick={() => setIsOpen(false)}\n                    >{locales[\"dangerZone\"][\"cancel\"][_lng]}</Button>\n                    <Button\n                        intent=\"alert\" size=\"sm\" onClick={() => {\n                        setIsOpen(false)\n                        showLoadingOverlayOnDelete && setBlockScreen(true)\n                        onDelete && onDelete()\n                    }}\n                    >{locales[\"dangerZone\"][\"delete\"][_lng]}</Button>\n                </div>\n            </Modal>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "fields.tsx",
        "dir": "typesafe-form",
        "content": "\"use client\"\n\nimport { DateValue, getLocalTimeZone, parseDate, Time } from \"@internationalized/date\"\nimport { RangeValue } from \"@react-types/shared\"\nimport addDays from \"date-fns/addDays\"\nimport React, { forwardRef, useEffect, useMemo, useState } from \"react\"\nimport { Controller, FormState, get, useController, useFormContext } from \"react-hook-form\"\nimport { createPolymorphicComponent } from \"./polymorphic-component\"\nimport { SubmitField } from \"./submit-field\"\nimport { useFormSchema } from \"./typesafe-form\"\nimport { BasicFieldOptions } from \"../basic-field\"\nimport { TextInput, TextInputProps } from \"../text-input\"\nimport { Textarea, TextareaProps } from \"../textarea\"\nimport { DatePicker, DatePickerProps, DateRangePicker, DateRangePickerProps, TimeInput, TimeInputProps } from \"../date-time\"\nimport { Select, SelectProps } from \"../select\"\nimport { NumberInput, NumberInputProps } from \"../number-input\"\nimport { MultiSelect, MultiSelectProps } from \"../multi-select\"\nimport { Combobox, ComboboxProps } from \"../combobox\"\nimport { Switch, SwitchProps } from \"../switch\"\nimport { Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps } from \"../checkbox\"\nimport { RadioGroup, RadioGroupProps } from \"../radio-group\"\nimport { PhoneNumberInput, PhoneNumberInputProps } from \"../phone-number-input\"\nimport { PriceInput, PriceInputProps } from \"../price-input\"\nimport { useUILocaleConfig } from \"../core\"\nimport { currencies } from \"../price-input/currencies\"\nimport { AddressInput, AddressInputProps } from \"../address-input\"\nimport { ColorInput, ColorInputProps } from \"../color-input\"\nimport { Dropzone, DropzoneProps, FileUploadHandler } from \"../file-upload\"\n\ntype Args<T extends Function> = T extends (...args: infer R) => any ? R : never\n\nfunction callAllHandlers<T extends (event: any) => void>(\n    ...fns: (T | undefined)[]\n) {\n    return function func(event: Args<T>[0]) {\n        fns.some((fn) => {\n            fn?.(event)\n            return event?.defaultPrevented\n        })\n    }\n}\n\n/**\n * Add the BasicField types to any Field since they are children\n */\ninterface FieldBaseProps extends Omit<BasicFieldOptions, \"name\"> {\n    name: string\n    onChange?: any\n    onBlur?: any\n    isRequired?: boolean\n}\n\ntype FieldComponent<T> = T & FieldBaseProps\n\ninterface FieldProps extends React.ComponentPropsWithRef<\"div\"> {\n}\n\nconst _Field: any = {}\n\n/**\n * @description This wrapper makes it easier to work with custom form components by controlling their state.\n * @example\n * // Props order\n * <Controller>\n *    <InputComponent\n *       defaultValue={}   // Can be overridden\n *       onChange={}       // Can be overridden\n *       onBlur={}         // Can be overridden\n *       {...props}        // <FieldComponent {...} /> -> <Field.Component {...} />\n *       error={}          // Cannot be overridden\n *    />\n * </Controller>\n * @param InputComponent\n */\nfunction withControlledInput<T extends FieldBaseProps>(InputComponent: React.FC<T>) {\n    return forwardRef<FieldProps, T>(\n        (inputProps, ref) => {\n            const { control, formState } = useFormContext()\n            const { shape } = useFormSchema()\n\n            /* Automatically get the required status from the Zod Schema */\n            const isRequired = useMemo(() => !!get(shape, inputProps.name)?.nonempty, [shape])\n\n            return (\n                <Controller\n                    name={inputProps.name}\n                    control={control}\n                    rules={{ required: inputProps.isRequired }}\n                    render={(render) => (\n                        /**\n                         * We pass \"value, onChange, onBlur, error, isRequired\" to all components that will be defined using the wrapper.\n                         * For other components like \"Switch\" and \"Checkbox\" which do not use the \"value\" prop, you need to deconstruct it to avoid it\n                         * being passed.\n                         */\n                        <InputComponent\n                            // defaultValue={get(formState.defaultValues, inputProps.name)} // Default prop, can be overridden in Field component definition\n                            value={render.field.value} // Default prop, can be overridden in Field component definition\n                            onChange={callAllHandlers(inputProps.onChange, render.field.onChange)} // Default prop, can be overridden in Field component\n                            // definition\n                            onBlur={callAllHandlers(inputProps.onBlur, render.field.onBlur)} // Default prop, can be overridden in Field component definition\n                            isRequired={isRequired}\n                            {...inputProps} // Props passed in <FieldComponent /> then props passed in <Field.Component />\n                            // The props below will not be overridden.\n                            // e.g: <Field.ComponentField error=\"Error\" /> will not work\n                            error={getFormError(render.field.name, render.formState)?.message}\n                            ref={useMergeRefs(ref, render.field.ref)}\n                        />\n                    )}\n                />\n            )\n        },\n    )\n}\n\n/**\n * Causes hydration issues because it populates the input once the component is rendered on the client\n */\nconst withUncontrolledInput = <T extends FieldBaseProps>(InputComponent: React.FC<T>) => {\n    return forwardRef<HTMLInputElement, T>(\n        (props, ref) => {\n            const { register, formState } = useFormContext()\n            const { ref: _ref, ...field } = register(props.name)\n\n            return (\n                <InputComponent\n                    {...props}\n                    onChange={callAllHandlers(props.onChange, field.onChange)}\n                    onBlur={callAllHandlers(props.onBlur, field.onBlur)}\n                    error={getFormError(props.name, formState)?.message}\n                    name={field.name}\n                    ref={useMergeRefs(ref, _ref)}\n                />\n            )\n        },\n    )\n}\n\n\nconst TextInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<TextInputProps>>(\n    ({ value, ...props }, ref) => {\n        return <TextInput\n            value={value ?? \"\"}\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\nconst TextareaField = React.memo(withControlledInput(forwardRef<HTMLTextAreaElement, FieldComponent<TextareaProps>>(\n    ({ value, ...props }, ref) => {\n        return <Textarea\n            value={value ?? \"\"}\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\nconst ColorInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<ColorInputProps>>((props, ref) => {\n    const context = useFormContext()\n    const controller = useController({ name: props.name })\n\n    const defaultValue = useMemo(() => get(context.formState.defaultValues, props.name) ?? \"#000000\", [])\n\n    useEffect(() => {\n        controller.field.onChange(defaultValue)\n    }, [])\n\n    return <ColorInput\n        {...props}\n        defaultValue={defaultValue}\n        ref={ref}\n    />\n})))\n\n/**\n * @zod z.date()\n * @example\n * <Field.DateRangePicker\n *    name=\"name\"\n *    label=\"Appointment date\"\n *    minValue={today(getLocalTimeZone())}\n * />\n */\nconst DatePickerField = React.memo(withControlledInput(forwardRef<HTMLDivElement, FieldComponent<DatePickerProps>>((props, ref) => {\n    const context = useFormContext()\n    const controller = useController({ name: props.name })\n\n    const defaultValue = useMemo(() => get(context.formState.defaultValues, props.name), [])\n\n    const [value, setValue] = React.useState<DateValue | undefined>(defaultValue ? parseDate(defaultValue.toISOString().split(\"T\")[0]!) : undefined)\n\n    useEffect(() => {\n        controller.field.onChange(value?.toDate(getLocalTimeZone()))\n    }, [value])\n\n    return <DatePicker\n        {...props}\n        value={value}\n        onChange={setValue}\n        ref={ref}\n    />\n})))\n\n/**\n * @zod z.object({ start: z.custom<Date>(), end: z.custom<Date>() })\n * @example\n * <Field.DateRangePicker\n *    name=\"name\"\n *    label=\"Appointment date\"\n *    minValue={today(getLocalTimeZone())}\n *    leftAddon=\"Date range\"\n * />\n */\nconst DateRangePickerField = React.memo(withControlledInput(forwardRef<HTMLDivElement, FieldComponent<DateRangePickerProps>>((props, ref) => {\n    const context = useFormContext()\n    const controller = useController({ name: props.name })\n\n    const defaultValue = useMemo(() => get(context.formState.defaultValues, props.name), [])\n\n    const [value, setValue] = React.useState<RangeValue<DateValue> | undefined>(defaultValue ? {\n        start: defaultValue.start ? parseDate(defaultValue.start.toISOString().split(\"T\")[0]!) : parseDate(new Date().toISOString().split(\"T\")[0]!),\n        end: defaultValue.end\n            ? parseDate(defaultValue.end.toISOString().split(\"T\")[0]!)\n            : parseDate(addDays(new Date(), 1).toISOString().split(\"T\")[0]!),\n    } : undefined)\n\n    useEffect(() => {\n        controller.field.onChange({ start: value?.start.toDate(getLocalTimeZone()), end: value?.end.toDate(getLocalTimeZone()) })\n    }, [value])\n\n    return <DateRangePicker\n        {...props}\n        value={value}\n        onChange={setValue}\n        ref={ref}\n    />\n})))\n\n\nexport type TimeFieldObject = { hour: number, minute: number }\n\nconst dateValueToTimeObject = (value: DateValue): TimeFieldObject => {\n    return { hour: (value as any).hour, minute: (value as any).minute }\n}\n\n/**\n * @zod presets.time | z.object({ hour: z.number().min(0).max(23), minute: z.number().min(0).max(59) })\n * @example\n * <Field.Time name=\"time\" leftAddon=\"Time\" />\n */\nconst TimeField = React.memo(withControlledInput(forwardRef<HTMLDivElement, FieldComponent<TimeInputProps>>((props, ref) => {\n    const context = useFormContext()\n    const controller = useController({ name: props.name })\n\n    const defaultValue = useMemo<TimeFieldObject | undefined>(() => get(context.formState.defaultValues, props.name), [])\n\n    const [value, setValue] = useState<any | undefined>(defaultValue ? new Time(defaultValue.hour, defaultValue.minute) : undefined)\n\n    useEffect(() => {\n        controller.field.onChange(dateValueToTimeObject(value))\n    }, [value])\n\n    return <TimeInput\n        {...props}\n        value={value}\n        onChange={setValue}\n        ref={ref}\n    />\n})))\n\nconst SelectField = React.memo(withControlledInput(forwardRef<HTMLSelectElement, FieldComponent<SelectProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        /* Set the default value as the first option if no default value is passed */\n        useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value) {\n                controller.field.onChange(props.options?.[0]?.value)\n            }\n        }, [controller.field])\n\n        return <Select\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\nconst NumberField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<NumberInputProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        return <NumberInput\n            {...props}\n            defaultValue={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\nconst MultiSelectField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<MultiSelectProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        return <MultiSelect\n            {...props}\n            defaultValue={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @example\n * <Field.Combobox options={[]} />\n */\nconst ComboboxField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<ComboboxProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        return <Combobox\n            {...props}\n            value={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @example\n * <Field.Switch />\n */\nconst SwitchField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<SwitchProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        return <Switch\n            {...props}\n            defaultChecked={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @example\n * <Field.Checkbox />\n */\nconst CheckboxField = React.memo(withControlledInput(forwardRef<HTMLButtonElement, FieldComponent<CheckboxProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        return <Checkbox\n            {...props}\n            defaultChecked={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @zod presets.checkboxGroup | z.array(z.string())\n * @example\n * <Field.CheckboxGroup options={[{ value: '', label: '' }]} />\n */\nconst CheckboxGroupField = React.memo(withControlledInput(forwardRef<HTMLDivElement, FieldComponent<CheckboxGroupProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value) {\n                controller.field.onChange([])\n            }\n        }, [controller.field])\n\n        return <CheckboxGroup\n            {...props}\n            defaultValue={get(context.formState.defaultValues, props.name) ?? []} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @zod presets.radioGroup | z.string()\n * @example\n * <Field.RadioGroup options={[{ value: '', label: '' }]} />\n */\nconst RadioGroupField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<RadioGroupProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        /* Set the default value as the first option if no default value is passed */\n        useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value) {\n                controller.field.onChange(props.options?.[0]?.value)\n            }\n        }, [controller.field])\n\n        return <RadioGroup\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\n/**\n * @zod z.string()\n * @example\n * fieldClassName=\"flex w-full\"\n * fieldLabelClassName=\"text-base sm:text-base md:text-base\"\n * stackClassName=\"flex flex-col md:flex-row gap-2\"\n * radioWrapperClassName=\"block w-full p-4 cursor-pointer transition border border-gray-200 rounded-md data-checked:bg-white data-checked:ring-2\n *    data-checked:ring-brand-500\" radioControlClassName=\"absolute right-2 top-2 h-5 w-5 text-xs\"\n * radioLabelClassName=\"font-semibold flex-none flex\"\n * radioHelpClassName=\"text-sm\"\n *\n */\nconst RadioCardsField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<RadioGroupProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        /* Set the default value as the first option if no default value is passed */\n        useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value) {\n                controller.field.onChange(props.options?.[0]?.value)\n            }\n        }, [controller.field])\n\n        return <RadioGroup\n            fieldClassName=\"w-full\"\n            fieldLabelClassName=\"text-md\"\n            radioContainerClassName=\"block w-full p-4 cursor-pointer dark:bg-gray-900 transition border border-[--border] rounded-[--radius] data-checked:ring-2 data-checked:ring-[--ring]\"\n            radioControlClassName=\"absolute right-2 top-2 h-5 w-5 text-xs\"\n            radioHelpClassName=\"text-sm\"\n            radioLabelClassName=\"font-semibold flex-none flex\"\n            stackClassName=\"flex flex-col md:flex-row gap-2 space-y-0\"\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\n\n/**\n * @zod z.string()\n *\n * @example\n * fieldClassName=\"flex w-full\"\n * fieldLabelClassName=\"text-md\"\n * stackClassName=\"flex flex-row gap-2 p-1 bg-gray-50 rounded-md border w-[fit-content]\"\n * radioWrapperClassName=\"block w-[fit-content] py-1 px-3 cursor-pointer border border-transparent transition rounded-md data-checked:bg-white\n *    data-checked:border-gray-300 data-checked:shadow-sm text-gray-500 data-checked:text-black\"\n * radioControlClassName=\"hidden\"\n * radioLabelClassName=\"font-semibold flex-none flex\" radioHelpClassName=\"text-base\"\n *\n */\nconst SegmentedControlField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<RadioGroupProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        /* Set the default value as the first option if no default value is passed */\n        useEffect(() => {\n            if (!get(context.formState.defaultValues, props.name) && !controller.field.value) {\n                controller.field.onChange(props.options?.[0]?.value)\n            }\n        }, [controller.field])\n\n        return <RadioGroup\n            fieldClassName=\"!w-fit\"\n            fieldLabelClassName=\"text-md\"\n            radioContainerClassName=\"block w-fit py-1 px-3 cursor-pointer border border-transparent transition rounded-[--radius] data-checked:bg-white dark:data-checked:bg-gray-700 data-checked:border-[--border] data-checked:shadow-sm text-[--muted] data-checked:text-[--text-color]\"\n            radioControlClassName=\"hidden\"\n            radioHelpClassName=\"text-base\"\n            radioLabelClassName=\"font-semibold flex-none\"\n            stackClassName=\"flex flex-row gap-2 p-1 bg-gray-50 dark:bg-gray-800 rounded-[--radius] w-fit space-y-0\"\n            {...props}\n            ref={ref}\n        />\n    },\n)))\n\n\ntype PhoneNumberInputFieldProps = Omit<PhoneNumberInputProps, \"onChange\" | \"value\">\n/**\n * @zod presets.phone | z.string()\n * @example\n * <Field.PhoneNumber name=\"phone\" />\n */\nconst PhoneNumberInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<PhoneNumberInputFieldProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const controller = useController({ name: props.name })\n\n        return <PhoneNumberInput\n            {...props}\n            onChange={callAllHandlers(props.onChange, controller.field.onChange)} // Cannot be overridden\n            value={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n        />\n    },\n)))\n\n/**\n * @zod presets.price | z.number()\n * @example\n * <Field.Price name=\"price\" />\n */\nconst PriceInputField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<PriceInputProps>>(\n    (props, ref) => {\n        const context = useFormContext()\n        const { country, locale } = useUILocaleConfig()\n        return <PriceInput\n            currency={currencies[country?.toUpperCase()] ?? undefined}\n            locale={locale}\n            {...props}\n            defaultValue={get(context.formState.defaultValues, props.name) ?? 0} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\n\ntype AddressInputFieldProps = Omit<AddressInputProps, \"onChange\" | \"value\"> & { restrictToCurrentCountry?: boolean }\n/**\n * @zod z.string()\n * @example\n * <Field.Address\n *    name=\"address\"\n *    allowedCountries={['ci', 'us']}\n *    restrictToCurrentCountry         //=> uses UIContext // Overrides allowedCountries\n * />\n */\nconst AddressField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<AddressInputFieldProps>>(\n    ({ allowedCountries, restrictToCurrentCountry = false, ...props }, ref) => {\n        const context = useFormContext()\n        const { country } = useUILocaleConfig()\n        return <AddressInput\n            allowedCountries={(restrictToCurrentCountry && country) ? [country] : allowedCountries} // Can be overridden\n            {...props}\n            defaultValue={get(context.formState.defaultValues, props.name)} // Cannot be overridden\n            ref={ref}\n        />\n    },\n)))\n\ntype DropzoneFieldProps = Omit<DropzoneProps, \"onChange\" | \"uploadHandler\"> & { uploadHandler: FileUploadHandler }\n/**\n * @zod presets.dropzone.min(1)\n * @example\n * const uploadHandler = useDropzoneHandler(\"single\", { accept: { \"application/*\": ['.pdf', '.doc', '.docx'] } })\n *\n * const file = await uploadHandler.uploadSingleFile()\n *\n * <Field.Dropzone\n *    label=\"Curriculum vitae\"\n *    name=\"resume\"\n *    handler={uploadHandler}\n *    help=\"Document de 1 √† 5 pages. (.pdf, .docx, .doc). < 5 MB.\"\n * />\n */\nconst DropzoneField = React.memo(withControlledInput(forwardRef<HTMLInputElement, FieldComponent<DropzoneFieldProps>>((props, ref) => {\n\n        const controller = useController({ name: props.name! })\n\n        return <Dropzone\n            maxSize={5242880} // Can be overridden (5MB)\n            {...props}\n            onChange={(v) => { // Overrides the default onChange prop\n                controller.field.onChange(v) // Change the underlying field so we can manage errors\n            }}\n            ref={ref}\n        />\n    },\n)))\n\n\n_Field.Text = TextInputField\n_Field.Textarea = TextareaField\n_Field.Select = SelectField\n_Field.Switch = SwitchField\n_Field.Checkbox = CheckboxField\n_Field.CheckboxGroup = CheckboxGroupField\n_Field.RadioGroup = RadioGroupField\n_Field.RadioCards = RadioCardsField\n_Field.SegmentedControl = SegmentedControlField\n_Field.PhoneNumber = PhoneNumberInputField\n_Field.Price = PriceInputField\n_Field.Address = AddressField\n_Field.Number = NumberField\n_Field.MultiSelect = MultiSelectField\n_Field.DatePicker = DatePickerField\n_Field.DateRangePicker = DateRangePickerField\n_Field.Combobox = ComboboxField\n_Field.Time = TimeField\n_Field.ColorInput = ColorInputField\n_Field.Dropzone = DropzoneField\n_Field.Submit = SubmitField\n\nexport const Field = createPolymorphicComponent<\"div\", FieldProps, {\n    Text: typeof TextInputField,\n    Textarea: typeof TextareaField,\n    Select: typeof SelectField,\n    Switch: typeof SwitchField,\n    Checkbox: typeof CheckboxField,\n    CheckboxGroup: typeof CheckboxGroupField,\n    RadioGroup: typeof RadioGroupField,\n    RadioCards: typeof RadioCardsField,\n    SegmentedControl: typeof SegmentedControlField,\n    PhoneNumber: typeof PhoneNumberInputField,\n    Price: typeof PriceInputField,\n    Address: typeof AddressField,\n    Number: typeof NumberField,\n    MultiSelect: typeof MultiSelectField\n    DatePicker: typeof DatePickerField\n    DateRangePicker: typeof DateRangePickerField\n    Time: typeof TimeField\n    Combobox: typeof ComboboxField\n    ColorInput: typeof ColorInputField\n    Dropzone: typeof DropzoneField,\n    Submit: typeof SubmitField\n}>(_Field)\n\nField.displayName = \"Field\"\n\n// Utils\nconst getFormError = (name: string, formState: FormState<{ [x: string]: any }>) => {\n    return get(formState.errors, name)\n}\n\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n    ref: ReactRef<T> | null | undefined,\n    value: T,\n) {\n    if (ref == null) return\n\n    if (typeof ref === \"function\") {\n        ref(value)\n        return\n    }\n\n    try {\n        ref.current = value\n    } catch (error) {\n        throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n    }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n    return (node: T | null) => {\n        refs.forEach((ref) => {\n            assignRef(ref, node)\n        })\n    }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return useMemo(() => mergeRefs(...refs), refs)\n}\n\nconst isTouched = (\n    name: string,\n    formState: FormState<{ [x: string]: any }>,\n) => {\n    return get(formState.touchedFields, name)\n}\n\nexport type As<Props = any> = React.ElementType<Props>\n"
      },
      {
        "name": "index.tsx",
        "dir": "typesafe-form",
        "content": "export * from \"./typesafe-form\"\nexport * from \"./fields\"\nexport * from \"./create-typesafeform-schema\"\nexport * from \"./danger-zone\"\n"
      },
      {
        "name": "locales.json",
        "dir": "typesafe-form",
        "content": "{\n  \"form\": {\n    \"create\": {\n      \"fr\": \"Cr√©er\",\n      \"en\": \"Create\"\n    },\n    \"add\": {\n      \"fr\": \"Ajouter\",\n      \"en\": \"Add\"\n    },\n    \"update\": {\n      \"fr\": \"Modifier\",\n      \"en\": \"Update\"\n    },\n    \"search\": {\n      \"fr\": \"Chercher\",\n      \"en\": \"Search\"\n    },\n    \"save\": {\n      \"fr\": \"Enregistrer\",\n      \"en\": \"Save\"\n    },\n    \"submit\": {\n      \"fr\": \"Soumettre\",\n      \"en\": \"Submit\"\n    }\n  },\n  \"dangerZone\": {\n    \"delete\": {\n      \"fr\": \"Supprimer\",\n      \"en\": \"Delete\"\n    },\n    \"irreversible_action\": {\n      \"fr\": \"Cette action est irr√©versible.\",\n      \"en\": \"This action is irreversible.\"\n    },\n    \"name\": {\n      \"fr\": \"Zone de danger\",\n      \"en\": \"Danger Zone\"\n    },\n    \"confirm_delete\": {\n      \"fr\": \"√ätes-vous s√ªr de vouloir effectuer cette action ?\",\n      \"en\": \"Are you sure you want to confirm this action ?\"\n    },\n    \"cancel\": {\n      \"fr\": \"Annuler\",\n      \"en\": \"Cancel\"\n    }\n  }\n}\n"
      },
      {
        "name": "polymorphic-component.ts",
        "dir": "typesafe-form",
        "content": "import React from \"react\"\n\ntype ExtendedProps<Props = {}, OverrideProps = {}> = OverrideProps &\n    Omit<Props, keyof OverrideProps>;\ntype ElementType = keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>;\ntype PropsOf<C extends ElementType> = JSX.LibraryManagedAttributes<C,\n    React.ComponentPropsWithoutRef<C>>;\ntype ComponentProp<C> = {\n    component?: C;\n};\ntype InheritedProps<C extends ElementType, Props = {}> = ExtendedProps<PropsOf<C>, Props>;\nexport type PolymorphicRef<C> = C extends React.ElementType\n    ? React.ComponentPropsWithRef<C>[\"ref\"]\n    : never;\nexport type PolymorphicComponentProps<C, Props = {}> = C extends React.ElementType\n    ? InheritedProps<C, Props & ComponentProp<C>> & { ref?: PolymorphicRef<C> }\n    : Props & { component: React.ElementType };\n\nexport function createPolymorphicComponent<ComponentDefaultType,\n    Props,\n    StaticComponents = Record<string, never>>(component: any) {\n    type ComponentProps<C> = PolymorphicComponentProps<C, Props>;\n\n    type _PolymorphicComponent = <C = ComponentDefaultType>(\n        props: ComponentProps<C>,\n    ) => React.ReactElement;\n\n    type ComponentProperties = Omit<React.FunctionComponent<ComponentProps<any>>, never>;\n\n    type PolymorphicComponent = _PolymorphicComponent & ComponentProperties & StaticComponents;\n\n    return component as PolymorphicComponent\n}\n"
      },
      {
        "name": "schema-presets.ts",
        "dir": "typesafe-form",
        "content": "import _isDate from \"lodash/isDate\"\nimport { z } from \"zod\"\n\n/**\n * @internal\n * createTypesafeFormSchema presets\n */\nexport const schemaPresets = {\n    name: z.string().min(2).trim(),\n    imageGrid: z.array(z.custom<File>()).min(1),\n    select: z.string().nonempty(),\n    checkboxGroup: z.array(z.string()),\n    multiSelect: z.array(z.string()),\n    radioGroup: z.string().nonempty(),\n    dropzone: z.array(z.custom<File>()),\n    time: z.object({ hour: z.number().min(0).max(23), minute: z.number().min(0).max(59) }),\n    phone: z.string().min(10, \"Invalid phone number\"),\n    price: z.number().min(0),\n    switch: z.boolean(),\n    checkbox: z.boolean(),\n    files: z.array(z.custom<File>()).refine(\n        // Check if all items in the array are instances of the File object\n        (files) => files.every((file) => file instanceof File), { message: \"Expected a file\" },\n    ),\n    dateRangePicker: z.object({ start: z.custom<Date>(), end: z.custom<Date>() })\n        .refine(data => _isDate(data.start) && _isDate(data.end), { message: \"Incorrect dates\" }),\n    datePicker: z.date(),\n}\n"
      },
      {
        "name": "submit-field.tsx",
        "dir": "typesafe-form",
        "content": "import React, { useMemo } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport locales from \"./locales.json\"\nimport { useUILocaleConfig } from \"../core\"\nimport { ShowOnly } from \"../show-only\"\nimport { LoadingOverlay } from \"../loading-spinner\"\nimport { Button, ButtonProps } from \"../button\"\n\n/* -------------------------------------------------------------------------------------------------\n * SubmitField\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface SubmitFieldProps extends Omit<ButtonProps, \"type\"> {\n    uploadHandler?: any\n    role?: \"submit\" | \"save\" | \"create\" | \"add\" | \"search\" | \"update\"\n    disabledOnSuccess?: boolean\n    disableIfInvalid?: boolean\n    showLoadingScreenOnSuccess?: boolean\n    loadingScreen?: React.ReactNode\n}\n\nexport const SubmitField = React.forwardRef<HTMLButtonElement, SubmitFieldProps>((props, ref) => {\n\n    const {\n        children,\n        isLoading,\n        isDisabled,\n        uploadHandler,\n        role = \"save\",\n        disabledOnSuccess = role === \"create\",\n        disableIfInvalid = false,\n        showLoadingScreenOnSuccess = false,\n        loadingScreen,\n        ...rest\n    } = props\n\n    const { formState } = useFormContext()\n    const { locale } = useUILocaleConfig()\n\n    const disableSuccess = useMemo(() => disabledOnSuccess ? formState.isSubmitSuccessful : false, [formState.isSubmitSuccessful])\n    const disableInvalid = useMemo(() => disableIfInvalid ? !formState.isValid : false, [formState.isValid])\n\n    return (\n        <>\n            <ShowOnly when={role === \"create\" || showLoadingScreenOnSuccess}>\n                {loadingScreen ?? <LoadingOverlay show={formState.isSubmitSuccessful}/>}\n            </ShowOnly>\n\n            <Button\n                type=\"submit\"\n                isLoading={formState.isSubmitting || isLoading || uploadHandler?.isLoading} // || ml.mutationLoading}\n                isDisabled={disableInvalid || isDisabled || disableSuccess}\n                ref={ref}\n                {...rest}\n            >\n                {children ? children : locales[\"form\"][role][locale as \"fr\" | \"en\"]}\n            </Button>\n        </>\n    )\n\n})\n"
      },
      {
        "name": "typesafe-form.tsx",
        "dir": "typesafe-form",
        "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { cn } from \"../core\"\nimport _isEmpty from \"lodash/isEmpty\"\nimport React, { createContext, useContext, useEffect, useMemo } from \"react\"\nimport {\n    DeepPartial,\n    FieldValues,\n    FormProvider,\n    SubmitErrorHandler,\n    SubmitHandler,\n    useForm,\n    UseFormProps,\n    UseFormReturn,\n    WatchObserver,\n} from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { getZodDefaults } from \"./zod-resolver\"\n\n/* -------------------------------------------------------------------------------------------------\n * Context\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nconst __FormSchemaContext = createContext<{ shape: z.ZodRawShape, schema: z.ZodObject<z.ZodRawShape> } | undefined>(undefined)\n\nexport const useFormSchema = (): { shape: z.ZodRawShape, schema: z.ZodObject<z.ZodRawShape> } => {\n    return useContext(__FormSchemaContext)!\n}\n\n/* -------------------------------------------------------------------------------------------------\n * TypesafeForm\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface TypesafeFormProps<TFields extends FieldValues = FieldValues>\n    extends UseFormProps<TFields>,\n        Omit<React.ComponentPropsWithRef<\"form\">, \"children\" | \"onChange\" | \"onSubmit\" | \"onError\" | \"ref\"> {\n    schema: z.ZodObject<z.ZodRawShape>\n    onSubmit: SubmitHandler<TFields>\n    onChange?: WatchObserver<TFields> // Triggers when any of the field change.\n    onError?: SubmitErrorHandler<TFields> // Triggers when there are validation errors.\n    formRef?: React.RefObject<HTMLFormElement>\n    children?: MaybeRenderProp<UseFormReturn<TFields>>\n    /**\n     * @default w-full gap-3\n     */\n    stackClassName?: string\n    mRef?: React.Ref<UseFormReturn<TFields>>\n}\n\n/**\n * @example\n * <TypesafeForm<InferType<typeof definedSchema>>\n *     schema={definedSchema}\n *     onSubmit={console.log}\n *     onError={console.log}\n *     onChange={console.log}\n *     defaultValues={undefined}\n *  >\n *     <Field.Submit role=\"create\" />\n *  </TypesafeForm>\n * @param props\n * @constructor\n */\nexport const TypesafeForm = <TFields extends FieldValues>(props: TypesafeFormProps<TFields>) => {\n\n    const {\n        mode = \"onTouched\",\n        resolver,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n        schema,\n        defaultValues: _defaultValues,\n        onChange,\n        onSubmit,\n        onError,\n        formRef,\n        children,\n        mRef,\n\n        stackClassName,\n        ...rest\n    } = props\n\n    const defaultValues = useMemo(() => {\n        if (_isEmpty(getZodDefaults(schema)) && _isEmpty(_defaultValues)) return undefined\n        return {\n            ...getZodDefaults(schema),\n            ..._defaultValues,\n        } as DeepPartial<TFields>\n    }, [])\n\n    const form = {\n        mode,\n        resolver,\n        defaultValues,\n        reValidateMode,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        criteriaMode,\n        delayError,\n    }\n\n    form.resolver = zodResolver(schema)\n\n    const methods = useForm(form)\n    const { handleSubmit } = methods\n\n    React.useImperativeHandle(mRef, () => methods, [mRef, methods])\n\n    useEffect(() => {\n        let subscription: any\n        if (onChange) {\n            subscription = methods.watch(onChange)\n        }\n        return () => subscription?.unsubscribe()\n    }, [methods, onChange])\n\n    return (\n        <>\n            <FormProvider {...methods}>\n                <__FormSchemaContext.Provider value={{ schema, shape: schema.shape }}>\n                    <form\n                        ref={formRef}\n                        onSubmit={handleSubmit(onSubmit, onError)}\n                        {...rest}\n                    >\n                        <div className={cn(\"w-full space-y-3\", stackClassName)}>\n                            {runIfFn(children, methods)}\n                        </div>\n                    </form>\n                </__FormSchemaContext.Provider>\n            </FormProvider>\n        </>\n    )\n\n}\n\nTypesafeForm.displayName = \"TypesafeForm\"\n\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/\n\ntype MaybeRenderProp<P> =\n    | React.ReactNode\n    | ((props: P) => React.ReactNode)\n\nconst isFunction = <T extends Function = Function>(value: any): value is T => typeof value === \"function\"\n\nfunction runIfFn<T, U>(\n    valueOrFn: T | ((...fnArgs: U[]) => T),\n    ...args: U[]\n): T {\n    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn\n}\n"
      },
      {
        "name": "zod-resolver.ts",
        "dir": "typesafe-form",
        "content": "import { zodResolver } from \"@hookform/resolvers/zod\"\nimport _isObject from \"lodash/isObject\"\nimport _isString from \"lodash/isString\"\nimport { FieldValues, get } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nexport { zodResolver }\n\nexport type Options = {\n    min?: number\n    max?: number\n}\n\nconst getType = (field: z.ZodTypeAny) => {\n    switch (field._def.typeName) {\n        case \"ZodArray\":\n            return \"array\"\n        case \"ZodObject\":\n            return \"object\"\n        case \"ZodNumber\":\n            return \"number\"\n        case \"ZodDate\":\n            return \"date\"\n        case \"ZodString\":\n        default:\n            return \"text\"\n    }\n}\n\nconst getArrayOption = (field: any, name: string) => {\n    return field._def[name]?.value\n}\n\n/**\n * A helper function to render forms automatically based on a Zod schema\n *\n * @param schema The Yup schema\n * @returns {FieldProps[]}\n */\nexport const getFieldsFromSchema = (schema: z.ZodTypeAny): FieldValues[] => {\n    const fields: FieldValues[] = []\n\n    let schemaFields: Record<string, any> = {}\n    if (schema._def.typeName === \"ZodArray\") {\n        schemaFields = schema._def.type.shape\n    } else if (schema._def.typeName === \"ZodObject\") {\n        schemaFields = schema._def.shape()\n    } else {\n        return fields\n    }\n\n    for (const name in schemaFields) {\n        const field = schemaFields[name]\n\n        const options: Options = {}\n        if (field._def.typeName === \"ZodArray\") {\n            options.min = getArrayOption(field, \"minLength\")\n            options.max = getArrayOption(field, \"maxLength\")\n        }\n\n        const meta = field.description && zodParseMeta(field.description)\n\n        fields.push({\n            name,\n            label: meta?.label || field.description || name,\n            type: meta?.type || getType(field),\n            ...options,\n        })\n    }\n    return fields\n}\n\n\nexport const getNestedSchema = (schema: z.ZodTypeAny, path: string) => {\n    return get(schema._def.shape(), path)\n}\n\nexport const zodFieldResolver = <T extends z.ZodTypeAny>(schema: T) => {\n    return {\n        getFields() {\n            return getFieldsFromSchema(schema)\n        },\n        getNestedFields(name: string) {\n            return getFieldsFromSchema(getNestedSchema(schema, name))\n        },\n    }\n}\n\nexport interface ZodMeta {\n    label: string\n    type?: string\n}\n\nexport const zodMeta = (meta: ZodMeta) => {\n    return JSON.stringify(meta)\n}\n\nexport const zodParseMeta = (meta: string) => {\n    try {\n        return JSON.parse(meta)\n    } catch (e) {\n        return meta\n    }\n}\n\n/**\n * @link https://github.com/colinhacks/zod/discussions/1953#discussioncomment-4811588\n * @param schema\n */\nexport function getZodDefaults<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            if (value instanceof z.ZodDefault) return [key, value._def.defaultValue()]\n            return [key, undefined]\n        }),\n    )\n}\n\n/**\n * @param schema\n */\nexport function getZodDescriptions<Schema extends z.AnyZodObject>(schema: Schema) {\n    return Object.fromEntries(\n        Object.entries(schema.shape).map(([key, value]) => {\n            return [key, (value as any)._def.description ?? undefined]\n        }),\n    )\n}\n\n/**\n * @example\n * const meta = useMemo(() => getZodParsedDescription<{ minValue: CalendarDate }>(schema, props.name), [])\n * @param schema\n * @param key\n */\nexport function getZodParsedDescription<T extends { [p: string]: any }>(schema: z.AnyZodObject, key: string): T | undefined {\n    const obj = getZodDescriptions(schema)\n    const parsedDescription = _isString(obj[key]) ? JSON.parse(obj[key]) : undefined\n    if (_isObject(parsedDescription)) {\n        return parsedDescription as T\n    }\n    return undefined\n\n}\n"
      }
    ]
  },
  {
    "component": "vertical-nav",
    "name": "VerticalNav",
    "dependencies": [
      [
        "@headlessui/react",
        "^1.7.15",
        ""
      ]
    ],
    "family": [],
    "files": [
      {
        "name": "index.tsx",
        "dir": "vertical-nav",
        "content": "export * from \"./vertical-nav\"\r\n"
      },
      {
        "name": "vertical-nav.tsx",
        "dir": "vertical-nav",
        "content": "\"use client\"\r\n\r\nimport React, { Fragment } from \"react\"\r\nimport { cn, ComponentWithAnatomy, defineStyleAnatomy } from \"../core\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Disclosure } from \"@headlessui/react\"\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * Anatomy\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport const VerticalNavAnatomy = defineStyleAnatomy({\r\n    nav: cva([\r\n        \"UI-VerticalNav__nav\",\r\n        \"block space-y-1\"\r\n    ]),\r\n    item: cva([\r\n        \"UI-VerticalNav__tab\",\r\n        \"group/vnav flex flex-none truncate items-center px-4 py-2 text-sm font-[600] rounded-[--radius] transition cursor-pointer\",\r\n        \"hover:bg-[--highlight] hover:text-[--text-color]\",\r\n        \"focus-visible:ring-2 ring-[--ring] outline-none\",\r\n        \"text-[--muted]\",\r\n        \"data-[current=true]:text-[--brand]\"\r\n    ]),\r\n    parentItem: cva([\r\n        \"UI-VerticalNav__parentItem\",\r\n        \"cursor-pointer\",\r\n    ]),\r\n    parentItemChevron: cva([\r\n        \"UI-VerticalNav__parentItemChevron\",\r\n        \"w-5 h-5 transition-transform data-[open=true]:rotate-90\",\r\n    ]),\r\n    icon: cva([\r\n        \"UI-VerticalNav__icon\",\r\n        \"flex-shrink-0 -ml-1 mr-3 h-6 w-6\",\r\n        \"text-[--muted]\",\r\n        \"group-hover/vnav:text-[--text-color] data-[current=true]:text-[--brand] data-[current=true]:group-hover/vnav:text-[--brand]\"\r\n    ]),\r\n    subList: cva([\r\n        \"UI-VerticalNav__subList\",\r\n        \"pl-2\",\r\n    ]),\r\n})\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * VerticalNav\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nexport interface VerticalNavProps extends React.ComponentPropsWithRef<\"div\">, ComponentWithAnatomy<typeof VerticalNavAnatomy> {\r\n    children?: React.ReactNode\r\n    items: {\r\n        name: string,\r\n        href?: string | null | undefined,\r\n        icon?: ((props: any) => JSX.Element) | null | undefined,\r\n        isCurrent?: boolean,\r\n        addon?: React.ReactNode\r\n        content?: React.ReactNode\r\n    }[]\r\n}\r\n\r\nexport const VerticalNav = React.forwardRef<HTMLDivElement, VerticalNavProps>((props, ref) => {\r\n\r\n    const {\r\n        children,\r\n        navClassName,\r\n        itemClassName,\r\n        iconClassName,\r\n        parentItemClassName,\r\n        subListClassName,\r\n        parentItemChevronClassName,\r\n        className,\r\n        items,\r\n        ...rest\r\n    } = props\r\n\r\n    return (\r\n        <nav\r\n            ref={ref}\r\n            className={cn(VerticalNavAnatomy.nav(), navClassName, className)}\r\n            {...rest}\r\n        >\r\n            {items.map((item, idx) => !item.content ? (\r\n                <a\r\n                    key={item.name}\r\n                    href={item.href ?? \"#\"}\r\n                    className={cn(\r\n                        VerticalNavAnatomy.item(),\r\n                        itemClassName,\r\n                    )}\r\n                    aria-current={item.isCurrent ? \"page\" : undefined}\r\n                    data-current={item.isCurrent}\r\n                >\r\n                    {item.icon && <item.icon\r\n                        className={cn(\r\n                            VerticalNavAnatomy.icon(),\r\n                            iconClassName,\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                        data-current={item.isCurrent}\r\n                    />}\r\n                    <span>{item.name}</span>\r\n                    {item.addon}\r\n                </a>\r\n            ) : (\r\n                <Disclosure as={Fragment} key={item.name}>\r\n                    {({ open }) => (\r\n                        <>\r\n                            <Disclosure.Button\r\n                                as=\"div\"\r\n                                key={item.name}\r\n                                tabIndex={idx}\r\n                                className={cn(\r\n                                    VerticalNavAnatomy.item(),\r\n                                    VerticalNavAnatomy.parentItem(),\r\n                                    itemClassName,\r\n                                    parentItemClassName,\r\n                                )}\r\n                                aria-current={item.isCurrent ? \"page\" : undefined}\r\n                                data-current={item.isCurrent}\r\n                            >\r\n                                <div className=\"w-full flex items-center\">\r\n                                    {item.icon && <item.icon\r\n                                        className={cn(\r\n                                            VerticalNavAnatomy.icon(),\r\n                                            iconClassName,\r\n                                        )}\r\n                                        aria-hidden=\"true\"\r\n                                        data-current={item.isCurrent}\r\n                                    />}\r\n                                    <span>{item.name}</span>\r\n                                </div>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\"\r\n                                     strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\r\n                                     className={cn(VerticalNavAnatomy.parentItemChevron(), parentItemChevronClassName)}\r\n                                     data-open={`${open}`}\r\n                                >\r\n                                    <polyline points=\"9 18 15 12 9 6\"></polyline>\r\n                                </svg>\r\n                            </Disclosure.Button>\r\n                            <Disclosure.Panel\r\n                                className={cn(VerticalNavAnatomy.subList(), subListClassName)}\r\n                            >\r\n                                {item.content && item.content}\r\n                            </Disclosure.Panel>\r\n                        </>\r\n                    )}\r\n                </Disclosure>\r\n            ))}\r\n        </nav>\r\n    )\r\n\r\n})\r\n\r\nVerticalNav.displayName = \"VerticalNav\"\r\n"
      }
    ]
  }
]
